This is python-c-api-3.2.2.info, produced by makeinfo version 4.13 from
python-c-api-3.2.2.texi.

Generated by Sphinx 1.1.2.
INFO-DIR-SECTION Python v3 2 2
START-INFO-DIR-ENTRY
* Python/C API: (python-c-api-3.2.2.info). reference for C/C++ programmers
END-INFO-DIR-ENTRY

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation


File: python-c-api-3.2.2.info,  Node: Top,  Next: Introduction,  Up: (dir)

Python/C API Reference Manual
*****************************

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation

     Release: 3.2

     Date: February 10, 2012

  This manual documents the API used by C and C++ programmers who want
to write extension modules or embed Python.  It is a companion to
_extending-index_, which describes the general principles of extension
writing but does not document the API functions in detail.

* Menu:

* Introduction::
* The Very High Level Layer::
* Reference Counting::
* Exception Handling::
* Utilities::
* Abstract Objects Layer::
* Concrete Objects Layer::
* Initialization, Finalization, and Threads: Initialization Finalization and Threads.
* Memory Management::
* Object Implementation Support::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Include Files::
* Objects, Types and Reference Counts: Objects Types and Reference Counts.
* Exceptions::
* Embedding Python::
* Debugging Builds::

Objects, Types and Reference Counts

* Reference Counts::
* Types::

Reference Counts

* Reference Count Details::

Exception Handling

* Exception Objects::
* Unicode Exception Objects::
* Recursion Control::
* Standard Exceptions::

Utilities

* Operating System Utilities::
* System Functions::
* Process Control::
* Importing Modules::
* Data marshalling support::
* Parsing arguments and building values::
* String conversion and formatting::
* Reflection::
* Codec registry and support functions::

Parsing arguments and building values

* Parsing arguments::
* Building values::

Parsing arguments

* Strings and buffers::
* Numbers::
* Other objects::
* API Functions::

Codec registry and support functions

* Codec lookup API::
* Registry API for Unicode encoding error handlers::

Abstract Objects Layer

* Object Protocol::
* Number Protocol::
* Sequence Protocol::
* Mapping Protocol::
* Iterator Protocol::
* Buffer Protocol::
* Old Buffer Protocol::

Buffer Protocol

* The buffer structure::
* Buffer-related functions::

Concrete Objects Layer

* Fundamental Objects::
* Numeric Objects::
* Sequence Objects::
* Mapping Objects::
* Other Objects::

Fundamental Objects

* Type Objects::
* The None Object::

Numeric Objects

* Integer Objects::
* Boolean Objects::
* Floating Point Objects::
* Complex Number Objects::

Complex Number Objects

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::

Sequence Objects

* Bytes Objects::
* Byte Array Objects::
* Unicode Objects and Codecs::
* Tuple Objects::
* List Objects::

Byte Array Objects

* Type check macros::
* Direct API functions::
* Macros::

Unicode Objects and Codecs

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* File System Encoding::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::

Mapping Objects

* Dictionary Objects::

Other Objects

* Set Objects::
* Function Objects::
* Instance Method Objects::
* Method Objects::
* File Objects::
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* MemoryView objects::
* Weak Reference Objects::
* Capsules::
* Cell Objects::
* Generator Objects::
* DateTime Objects::
* Code Objects::

Module Objects

* Initializing C modules::

Initialization, Finalization, and Threads

* Initializing and finalizing the interpreter::
* Process-wide parameters::
* Thread State and the Global Interpreter Lock::
* Sub-interpreter support::
* Asynchronous Notifications::
* Profiling and Tracing::
* Advanced Debugger Support::

Thread State and the Global Interpreter Lock

* Releasing the GIL from extension code::
* Non-Python created threads::
* High-level API::
* Low-level API::

Sub-interpreter support

* Bugs and caveats::

Memory Management

* Overview::
* Memory Interface::
* Examples::

Object Implementation Support

* Allocating Objects on the Heap::
* Common Object Structures::
* Type Objects: Type Objects<2>.
* Number Object Structures::
* Mapping Object Structures::
* Sequence Object Structures::
* Buffer Object Structures::
* Supporting Cyclic Garbage Collection::


File: python-c-api-3.2.2.info,  Node: Introduction,  Next: The Very High Level Layer,  Prev: Top,  Up: Top

1 Introduction
**************

The Application Programmer's Interface to Python gives C and C++
programmers access to the Python interpreter at a variety of levels.
The API is equally usable from C++, but for brevity it is generally
referred to as the Python/C API.  There are two fundamentally different
reasons for using the Python/C API.  The first reason is to write
_extension modules_ for specific purposes; these are C modules that
extend the Python interpreter.  This is probably the most common use.
The second reason is to use Python as a component in a larger
application; this technique is generally referred to as _embedding_
Python in an application.

  Writing an extension module is a relatively well-understood process,
where a "cookbook" approach works well.  There are several tools  that
automate the process to some extent.  While people have embedded
Python in other applications since its early existence, the process of
embedding Python is less straightforward than writing an extension.

  Many API functions are useful independent of whether you're embedding
or extending Python; moreover, most applications that embed Python
will need to provide a custom extension as well, so it's probably a
good idea to become familiar with writing an extension before
attempting to embed Python in a real application.

* Menu:

* Include Files::
* Objects, Types and Reference Counts: Objects Types and Reference Counts.
* Exceptions::
* Embedding Python::
* Debugging Builds::


File: python-c-api-3.2.2.info,  Node: Include Files,  Next: Objects Types and Reference Counts,  Up: Introduction

1.1 Include Files
=================

All function, type and macro definitions needed to use the Python/C API
are included in your code by the following line:

    #include "Python.h"

This implies inclusion of the following standard headers: `<stdio.h>',
`<string.h>', `<errno.h>', `<limits.h>', `<assert.h>' and `<stdlib.h>'
(if available).

     Note: Since Python may define some pre-processor definitions which
     affect the standard headers on some systems, you _must_ include
     `Python.h' before any standard headers are included.

  All user visible names defined by Python.h (except those defined by
the included standard headers) have one of the prefixes `Py' or `_Py'.
Names beginning with `_Py' are for internal use by the Python
implementation and should not be used by extension writers. Structure
member names do not have a reserved prefix.

  *Important:* user code should never define names that begin with `Py'
or `_Py'.  This confuses the reader, and jeopardizes the portability of
the user code to future Python versions, which may define additional
names beginning with one of these prefixes.

  The header files are typically installed with Python.  On Unix, these
are located in the directories `_prefix_/include/pythonversion/' and
`_exec_prefix_/include/pythonversion/', where `prefix' and `exec_prefix'
are defined by the corresponding parameters to Python's *configure*
script and _version_ is `sys.version[:3]'.  On Windows, the headers are
installed in `_prefix_/include', where `prefix' is the installation
directory specified to the installer.

  To include the headers, place both directories (if different) on your
compiler's search path for includes.  Do _not_ place the parent
directories on the search path and then use `#include
<pythonX.Y/Python.h>'; this will break on multi-platform builds since
the platform independent headers under `prefix' include the platform
specific headers from `exec_prefix'.

  C++ users should note that though the API is defined entirely using
C, the header files do properly declare the entry points to be `extern
"C"', so there is no need to do anything special to use the API from
C++.


File: python-c-api-3.2.2.info,  Node: Objects Types and Reference Counts,  Next: Exceptions,  Prev: Include Files,  Up: Introduction

1.2 Objects, Types and Reference Counts
=======================================

Most Python/C API functions have one or more arguments as well as a
return value of type *note PyObject*: a.  This type is a pointer to an
opaque data type representing an arbitrary Python object.  Since all
Python object types are treated the same way by the Python language in
most situations (e.g., assignments, scope rules, and argument passing),
it is only fitting that they should be represented by a single C type.
Almost all Python objects live on the heap: you never declare an
automatic or static variable of type *note PyObject: a, only pointer
variables of type *note PyObject*: a. can  be declared.  The sole
exception are the type objects; since these must never be deallocated,
they are typically static *note PyTypeObject: b. objects.

  All Python objects (even Python integers) have a _type_ and a
_reference count_.  An object's type determines what kind of object it
is (e.g., an integer, a list, or a user-defined function; there are
many more as explained in _types_).  For each of the well-known types
there is a macro to check whether an object is of that type; for
instance, `PyList_Check(a)' is true if (and only if) the object pointed
to by _a_ is a Python list.

* Menu:

* Reference Counts::
* Types::

Reference Counts

* Reference Count Details::


File: python-c-api-3.2.2.info,  Node: Reference Counts,  Next: Types,  Up: Objects Types and Reference Counts

1.2.1 Reference Counts
----------------------

The reference count is important because today's computers have a
finite (and often severely limited) memory size; it counts how many
different places there are that have a reference to an object.  Such a
place could be another object, or a global (or static) C variable, or
a local variable in some C function.  When an object's reference count
becomes zero, the object is deallocated.  If it contains references to
other objects, their reference count is decremented.  Those other
objects may be deallocated in turn, if this decrement makes their
reference count become zero, and so on.  (There's an obvious problem
with objects that reference each other here; for now, the solution is
"don't do that.")

  Reference counts are always manipulated explicitly.  The normal way
is  to use the macro *note Py_INCREF(): e. to increment an object's
reference count by one, and *note Py_DECREF(): f. to decrement it by
one.  The *note Py_DECREF(): f. macro is considerably more complex than
the incref one, since it must check whether the reference count becomes
zero and then cause the object's deallocator to be called. The
deallocator is a function pointer contained in the object's type
structure.  The type-specific deallocator takes care of decrementing the
reference counts for other objects contained in the object if this is a
compound object type, such as a list, as well as performing any
additional finalization that's needed.  There's no chance that the
reference count can overflow; at least as many bits are used to hold
the reference count as there are distinct memory locations in virtual
memory (assuming `sizeof(Py_ssize_t) >= sizeof(void*)').  Thus, the
reference count increment is a simple operation.

  It is not necessary to increment an object's reference count for
every  local variable that contains a pointer to an object.  In theory,
the  object's reference count goes up by one when the variable is made
to  point to it and it goes down by one when the variable goes out of
scope.  However, these two cancel each other out, so at the end the
reference count hasn't changed.  The only real reason to use the
reference count is to prevent the object from being deallocated as
long as our variable is pointing to it.  If we know that there is at
least one other reference to the object that lives at least as long as
our variable, there is no need to increment the reference count
temporarily.  An important situation where this arises is in objects
that are passed as arguments to C functions in an extension module
that are called from Python; the call mechanism guarantees to hold a
reference to every argument for the duration of the call.

  However, a common pitfall is to extract an object from a list and
hold on to it for a while without incrementing its reference count.
Some other operation might conceivably remove the object from the list,
decrementing its reference count and possible deallocating it. The real
danger is that innocent-looking operations may invoke arbitrary Python
code which could do this; there is a code path which allows control to
flow back to the user from a *note Py_DECREF(): f, so almost any
operation is potentially dangerous.

  A safe approach is to always use the generic operations (functions
whose name begins with `PyObject_', `PyNumber_', `PySequence_' or
`PyMapping_').  These operations always increment the reference count
of the object they return.  This leaves the caller with the
responsibility to call *note Py_DECREF(): f. when they are done with
the result; this soon becomes second nature.

* Menu:

* Reference Count Details::


File: python-c-api-3.2.2.info,  Node: Reference Count Details,  Up: Reference Counts

1.2.1.1 Reference Count Details
...............................

The reference count behavior of functions in the Python/C API is best
explained in terms of _ownership of references_.  Ownership pertains to
references, never to objects (objects are not owned: they are always
shared).  "Owning a reference" means being responsible for calling
Py_DECREF on it when the reference is no longer needed.  Ownership can
also be transferred, meaning that the code that receives ownership of
the reference then becomes responsible for eventually decref'ing it by
calling *note Py_DECREF(): f. or *note Py_XDECREF(): 12.  when it's no
longer needed--or passing on this responsibility (usually to its
caller). When a function passes ownership of a reference on to its
caller, the caller is said to receive a _new_ reference.  When no
ownership is transferred, the caller is said to _borrow_ the reference.
Nothing needs to be done for a borrowed reference.

  Conversely, when a calling function passes in a reference to an
object, there are two possibilities: the function _steals_ a  reference
to the object, or it does not.  _Stealing a reference_ means that when
you pass a reference to a function, that function assumes that it now
owns that reference, and you are not responsible for it any longer.

  Few functions steal references; the two notable exceptions are *note
PyList_SetItem(): 13. and *note PyTuple_SetItem(): 14, which  steal a
reference to the item (but not to the tuple or list into which the item
is put!).  These functions were designed to steal a reference because
of a common idiom for populating a tuple or list with newly created
objects; for example, the code to create the tuple `(1, 2, "three")'
could look like this (forgetting about error handling for the moment; a
better way to code this is shown below):

    PyObject *t;

    t = PyTuple_New(3);
    PyTuple_SetItem(t, 0, PyLong_FromLong(1L));
    PyTuple_SetItem(t, 1, PyLong_FromLong(2L));
    PyTuple_SetItem(t, 2, PyString_FromString("three"));

Here, *note PyLong_FromLong(): 15. returns a new reference which is
immediately stolen by *note PyTuple_SetItem(): 14.  When you want to
keep using an object although the reference to it will be stolen, use
*note Py_INCREF(): e. to grab another reference before calling the
reference-stealing function.

  Incidentally, *note PyTuple_SetItem(): 14. is the _only_ way to set
tuple items; *note PySequence_SetItem(): 16. and *note
PyObject_SetItem(): 17. refuse to do this since tuples are an immutable
data type.  You should only use *note PyTuple_SetItem(): 14. for tuples
that you are creating yourself.

  Equivalent code for populating a list can be written using *note
PyList_New(): 18.  and *note PyList_SetItem(): 13.

  However, in practice, you will rarely use these ways of creating and
populating a tuple or list.  There's a generic function, *note
Py_BuildValue(): 19, that can create most common objects from C values,
directed by a _format string_.  For example, the above two blocks of
code could be replaced by the following (which also takes care of the
error checking):

    PyObject *tuple, *list;

    tuple = Py_BuildValue("(iis)", 1, 2, "three");
    list = Py_BuildValue("[iis]", 1, 2, "three");

It is much more common to use *note PyObject_SetItem(): 17. and friends
with items whose references you are only borrowing, like arguments that
were passed in to the function you are writing.  In that case, their
behaviour regarding reference counts is much saner, since you don't
have to increment a reference count so you can give a reference away
("have it be stolen").  For example, this function sets all items of a
list (actually, any mutable sequence) to a given item:

    int
    set_all(PyObject *target, PyObject *item)
    {
        int i, n;

        n = PyObject_Length(target);
        if (n < 0)
            return -1;
        for (i = 0; i < n; i++) {
            PyObject *index = PyLong_FromLong(i);
            if (!index)
                return -1;
            if (PyObject_SetItem(target, index, item) < 0)
                return -1;
            Py_DECREF(index);
        }
        return 0;
    }


  The situation is slightly different for function return values.
While passing a reference to most functions does not change your
ownership responsibilities for that reference, many functions that
return a reference to an object give you ownership of the reference.
The reason is simple: in many cases, the returned object is created  on
the fly, and the reference you get is the only reference to the
object.  Therefore, the generic functions that return object
references, like *note PyObject_GetItem(): 1a. and  *note
PySequence_GetItem(): 1b, always return a new reference (the caller
becomes the owner of the reference).

  It is important to realize that whether you own a reference returned
by a function depends on which function you call only -- _the plumage_
(the type of the object passed as an argument to the function) _doesn't
enter into it!_ Thus, if you  extract an item from a list using *note
PyList_GetItem(): 1c, you don't own the reference -- but if you obtain
the same item from the same list using *note PySequence_GetItem(): 1b.
(which happens to take exactly the same arguments), you do own a
reference to the returned object.

  Here is an example of how you could write a function that computes
the sum of the items in a list of integers; once using  *note
PyList_GetItem(): 1c, and once using *note PySequence_GetItem(): 1b.

    long
    sum_list(PyObject *list)
    {
        int i, n;
        long total = 0;
        PyObject *item;

        n = PyList_Size(list);
        if (n < 0)
            return -1; /* Not a list */
        for (i = 0; i < n; i++) {
            item = PyList_GetItem(list, i); /* Can't fail */
            if (!PyLong_Check(item)) continue; /* Skip non-integers */
            total += PyLong_AsLong(item);
        }
        return total;
    }


    long
    sum_sequence(PyObject *sequence)
    {
        int i, n;
        long total = 0;
        PyObject *item;
        n = PySequence_Length(sequence);
        if (n < 0)
            return -1; /* Has no length */
        for (i = 0; i < n; i++) {
            item = PySequence_GetItem(sequence, i);
            if (item == NULL)
                return -1; /* Not a sequence, or other failure */
            if (PyLong_Check(item))
                total += PyLong_AsLong(item);
            Py_DECREF(item); /* Discard reference ownership */
        }
        return total;
    }



File: python-c-api-3.2.2.info,  Node: Types,  Prev: Reference Counts,  Up: Objects Types and Reference Counts

1.2.2 Types
-----------

There are few other data types that play a significant role in  the
Python/C API; most are simple C types such as `int',  `long', `double'
and `char*'.  A few structure types  are used to describe static tables
used to list the functions exported  by a module or the data attributes
of a new object type, and another is used to describe the value of a
complex number.  These will  be discussed together with the functions
that use them.


File: python-c-api-3.2.2.info,  Node: Exceptions,  Next: Embedding Python,  Prev: Objects Types and Reference Counts,  Up: Introduction

1.3 Exceptions
==============

The Python programmer only needs to deal with exceptions if specific
error handling is required; unhandled exceptions are automatically
propagated to the caller, then to the caller's caller, and so on, until
they reach the top-level interpreter, where they are reported to the
user accompanied by a stack traceback.

  For C programmers, however, error checking always has to be explicit.
All functions in the Python/C API can raise exceptions, unless an
explicit claim is made otherwise in a function's documentation.  In
general, when a function encounters an error, it sets an exception,
discards any object references that it owns, and returns an error
indicator.  If not documented otherwise, this indicator is either
_NULL_ or `-1', depending on the function's return type.  A few
functions return a Boolean true/false result, with false indicating an
error.  Very few functions return no explicit error indicator or have an
ambiguous return value, and require explicit testing for errors with
*note PyErr_Occurred(): 21.  These exceptions are always explicitly
documented.

  Exception state is maintained in per-thread storage (this is
equivalent to using global storage in an unthreaded application).  A
thread can be in one of two states: an exception has occurred, or not.
The function *note PyErr_Occurred(): 21. can be used to check for this:
it returns a borrowed reference to the exception type object when an
exception has occurred, and _NULL_ otherwise.  There are a number of
functions to set the exception state: *note PyErr_SetString(): 22. is
the most common (though not the most general) function to set the
exception state, and *note PyErr_Clear(): 23. clears the exception
state.

  The full exception state consists of three objects (all of which can
be _NULL_): the exception type, the corresponding exception  value, and
the traceback.  These have the same meanings as the Python result of
`sys.exc_info()'; however, they are not the same: the Python objects
represent the last exception being handled by a Python  `try' ...
`except' statement, while the C level exception state only exists while
an exception is being passed on between C functions until it reaches
the Python bytecode interpreter's  main loop, which takes care of
transferring it to `sys.exc_info()' and friends.

  Note that starting with Python 1.5, the preferred, thread-safe way to
access the exception state from Python code is to call the function
`sys.exc_info()', which returns the per-thread exception state for
Python code.  Also, the semantics of both ways to access the exception
state have changed so that a function which catches an exception will
save and restore its thread's exception state so as to preserve the
exception state of its caller.  This prevents common bugs in exception
handling code caused by an innocent-looking function overwriting the
exception being handled; it also reduces the often unwanted lifetime
extension for objects that are referenced by the stack frames in the
traceback.

  As a general principle, a function that calls another function to
perform some task should check whether the called function raised an
exception, and if so, pass the exception state on to its caller.  It
should discard any object references that it owns, and return an  error
indicator, but it should _not_ set another exception -- that would
overwrite the exception that was just raised, and lose important
information about the exact cause of the error.

  A simple example of detecting exceptions and passing them on is shown
in the `sum_sequence()' example above.  It so happens that that example
doesn't need to clean up any owned references when it detects an error.
The following example function shows some error cleanup.  First, to
remind you why you like Python, we show the equivalent Python code:

    def incr_item(dict, key):
        try:
            item = dict[key]
        except KeyError:
            item = 0
        dict[key] = item + 1


  Here is the corresponding C code, in all its glory:

    int
    incr_item(PyObject *dict, PyObject *key)
    {
        /* Objects all initialized to NULL for Py_XDECREF */
        PyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;
        int rv = -1; /* Return value initialized to -1 (failure) */

        item = PyObject_GetItem(dict, key);
        if (item == NULL) {
            /* Handle KeyError only: */
            if (!PyErr_ExceptionMatches(PyExc_KeyError))
                goto error;

            /* Clear the error and use zero: */
            PyErr_Clear();
            item = PyLong_FromLong(0L);
            if (item == NULL)
                goto error;
        }
        const_one = PyLong_FromLong(1L);
        if (const_one == NULL)
            goto error;

        incremented_item = PyNumber_Add(item, const_one);
        if (incremented_item == NULL)
            goto error;

        if (PyObject_SetItem(dict, key, incremented_item) < 0)
            goto error;
        rv = 0; /* Success */
        /* Continue with cleanup code */

     error:
        /* Cleanup code, shared by success and failure path */

        /* Use Py_XDECREF() to ignore NULL references */
        Py_XDECREF(item);
        Py_XDECREF(const_one);
        Py_XDECREF(incremented_item);

        return rv; /* -1 for error, 0 for success */
    }


  This example represents an endorsed use of the `goto' statement  in C!
It illustrates the use of *note PyErr_ExceptionMatches(): 24. and *note
PyErr_Clear(): 23. to handle specific exceptions, and the use of *note
Py_XDECREF(): 12. to dispose of owned references that may be _NULL_
(note the `'X'' in the name; *note Py_DECREF(): f. would crash when
confronted with a _NULL_ reference).  It is important that the
variables used to hold owned references are initialized to _NULL_ for
this to work; likewise, the proposed return value is initialized to
`-1' (failure) and only set to success after the final call made is
successful.


File: python-c-api-3.2.2.info,  Node: Embedding Python,  Next: Debugging Builds,  Prev: Exceptions,  Up: Introduction

1.4 Embedding Python
====================

The one important task that only embedders (as opposed to extension
writers) of the Python interpreter have to worry about is the
initialization, and possibly the finalization, of the Python
interpreter.  Most functionality of the interpreter can only be used
after the interpreter has been initialized.

  The basic initialization function is *note Py_Initialize(): 27. This
initializes the table of loaded modules, and creates the fundamental
modules `builtins', `__main__', and `sys'.  It also initializes the
module search path (`sys.path').

  *note Py_Initialize(): 27. does not set the "script argument list"
(`sys.argv').  If this variable is needed by Python code that will be
executed later, it must be set explicitly with a call to
`PySys_SetArgvEx(argc, argv, updatepath)' after the call to *note
Py_Initialize(): 27.

  On most systems (in particular, on Unix and Windows, although the
details are slightly different), *note Py_Initialize(): 27. calculates
the module search path based upon its best guess for the location of
the standard Python interpreter executable, assuming that the Python
library is found in a fixed location relative to the Python interpreter
executable.  In particular, it looks for a directory named
`lib/python_X.Y_' relative to the parent directory where the executable
named `python' is found on the shell command search path (the
environment variable `PATH').

  For instance, if the Python executable is found in
`/usr/local/bin/python', it will assume that the libraries are in
`/usr/local/lib/python_X.Y_'.  (In fact, this particular path is also
the "fallback" location, used when no executable file named `python' is
found along `PATH'.)  The user can override this behavior by setting the
environment variable `PYTHONHOME', or insert additional directories in
front of the standard path by setting `PYTHONPATH'.

  The embedding application can steer the search by calling
`Py_SetProgramName(file)' _before_ calling  *note Py_Initialize(): 27.
Note that `PYTHONHOME' still overrides this and `PYTHONPATH' is still
inserted in front of the standard path.  An application that requires
total control has to provide its own implementation of *note
Py_GetPath(): 28, *note Py_GetPrefix(): 29, *note Py_GetExecPrefix():
2a, and *note Py_GetProgramFullPath(): 2b. (all defined in
`Modules/getpath.c').

  Sometimes, it is desirable to "uninitialize" Python.  For instance,
the application may want to start over (make another call to *note
Py_Initialize(): 27.) or the application is simply done with its  use of
Python and wants to free memory allocated by Python.  This can be
accomplished by calling *note Py_Finalize(): 2c.  The function *note
Py_IsInitialized(): 2d. returns true if Python is currently in the
initialized state.  More information about these functions is given in
a later chapter. Notice that *note Py_Finalize(): 2c.  does _not_ free
all memory allocated by the Python interpreter, e.g. memory allocated
by extension modules currently cannot be released.


File: python-c-api-3.2.2.info,  Node: Debugging Builds,  Prev: Embedding Python,  Up: Introduction

1.5 Debugging Builds
====================

Python can be built with several macros to enable extra checks of the
interpreter and extension modules.  These checks tend to add a large
amount of overhead to the runtime so they are not enabled by default.

  A full list of the various types of debugging builds is in the file
`Misc/SpecialBuilds.txt' in the Python source distribution. Builds are
available that support tracing of reference counts, debugging the memory
allocator, or low-level profiling of the main interpreter loop.  Only
the most frequently-used builds will be described in the remainder of
this section.

  Compiling the interpreter with the `Py_DEBUG' macro defined produces
what is generally meant by "a debug build" of Python. `Py_DEBUG' is
enabled in the Unix build by adding `--with-pydebug' to the
`./configure' command.  It is also implied by the presence of the
not-Python-specific `_DEBUG' macro.  When `Py_DEBUG' is enabled in the
Unix build, compiler optimization is disabled.

  In addition to the reference count debugging described below, the
following extra checks are performed:

   * Extra checks are added to the object allocator.

   * Extra checks are added to the parser and compiler.

   * Downcasts from wide types to narrow types are checked for loss of
     information.

   * A number of assertions are added to the dictionary and set
     implementations.  In addition, the set object acquires a
     `test_c_api()' method.

   * Sanity checks of the input arguments are added to frame creation.

   * The storage for ints is initialized with a known invalid pattern
     to catch reference to uninitialized digits.

   * Low-level tracing and extra exception checking are added to the
     runtime virtual machine.

   * Extra checks are added to the memory arena implementation.

   * Extra debugging is added to the thread module.

  There may be additional checks not mentioned here.

  Defining `Py_TRACE_REFS' enables reference tracing.  When defined, a
circular doubly linked list of active objects is maintained by adding
two extra fields to every *note PyObject: a.  Total allocations are
tracked as well.  Upon exit, all existing references are printed.  (In
interactive mode this happens after every statement run by the
interpreter.)  Implied by `Py_DEBUG'.

  Please refer to `Misc/SpecialBuilds.txt' in the Python source
distribution for more detailed information.


File: python-c-api-3.2.2.info,  Node: The Very High Level Layer,  Next: Reference Counting,  Prev: Introduction,  Up: Top

2 The Very High Level Layer
***************************

The functions in this chapter will let you execute Python source code
given in a file or a buffer, but they will not let you interact in a
more detailed way with the interpreter.

  Several of these functions accept a start symbol from the grammar as a
parameter.  The available start symbols are `Py_eval_input',
`Py_file_input', and `Py_single_input'.  These are described following
the functions which accept them as parameters.

  Note also that several of these functions take `FILE*' parameters.
One particular issue which needs to be handled carefully is that the
`FILE' structure for different C libraries can be different and
incompatible.  Under Windows (at least), it is possible for dynamically
linked extensions to actually use different libraries, so care should
be taken that `FILE*' parameters are only passed to these functions if
it is certain that they were created by the same library that the
Python runtime is using.

 -- C Function: int Py_Main (int argc, wchar_t **argv)
     The main program for the standard interpreter.  This is made
     available for programs which embed Python.  The _argc_ and _argv_
     parameters should be prepared exactly as those which are passed to
     a C program's `main()' function (converted to wchar_t according to
     the user's locale).  It is important to note that the argument
     list may be modified (but the contents of the strings pointed to
     by the argument list are not). The return value will be `0' if the
     interpreter exits normally (i.e., without an exception), `1' if
     the interpreter exits due to an exception, or `2' if the parameter
     list does not represent a valid Python command line.

     Note that if an otherwise unhandled `SystemExit' is raised, this
     function will not return `1', but exit the process, as long as
     `Py_InspectFlag' is not set.

 -- C Function: int PyRun_AnyFile (FILE *fp, const char *filename)
     This is a simplified interface to *note PyRun_AnyFileExFlags():
     35. below, leaving _closeit_ set to `0' and _flags_ set to _NULL_.

 -- C Function: int PyRun_AnyFileFlags (FILE *fp, const char *filename,
          PyCompilerFlags *flags)
     This is a simplified interface to *note PyRun_AnyFileExFlags():
     35. below, leaving the _closeit_ argument set to `0'.

 -- C Function: int PyRun_AnyFileEx (FILE *fp, const char *filename,
          int closeit)
     This is a simplified interface to *note PyRun_AnyFileExFlags():
     35. below, leaving the _flags_ argument set to _NULL_.

 -- C Function: int PyRun_AnyFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)
     If _fp_ refers to a file associated with an interactive device
     (console or terminal input or Unix pseudo-terminal), return the
     value of *note PyRun_InteractiveLoop(): 38, otherwise return the
     result of *note PyRun_SimpleFile(): 39.  _filename_ is decoded
     from the filesystem encoding (`sys.getfilesystemencoding()').  If
     _filename_ is _NULL_, this function uses `"???"' as the filename.

 -- C Function: int PyRun_SimpleString (const char *command)
     This is a simplified interface to *note PyRun_SimpleStringFlags():
     3b. below, leaving the _PyCompilerFlags*_ argument set to NULL.

 -- C Function: int PyRun_SimpleStringFlags (const char *command,
          PyCompilerFlags *flags)
     Executes the Python source code from _command_ in the `__main__'
     module according to the _flags_ argument. If `__main__' does not
     already exist, it is created.  Returns `0' on success or `-1' if
     an exception was raised.  If there was an error, there is no way
     to get the exception information. For the meaning of _flags_, see
     below.

     Note that if an otherwise unhandled `SystemExit' is raised, this
     function will not return `-1', but exit the process, as long as
     `Py_InspectFlag' is not set.

 -- C Function: int PyRun_SimpleFile (FILE *fp, const char *filename)
     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     3c. below, leaving _closeit_ set to `0' and _flags_ set to _NULL_.

 -- C Function: int PyRun_SimpleFileFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     3c. below, leaving _closeit_ set to `0'.

 -- C Function: int PyRun_SimpleFileEx (FILE *fp, const char *filename,
          int closeit)
     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     3c. below, leaving _flags_ set to _NULL_.

 -- C Function: int PyRun_SimpleFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)
     Similar to *note PyRun_SimpleStringFlags(): 3b, but the Python
     source code is read from _fp_ instead of an in-memory string.
     _filename_ should be the name of the file, it is decoded from the
     filesystem encoding (`sys.getfilesystemencoding()').  If _closeit_
     is true, the file is closed before PyRun_SimpleFileExFlags returns.

 -- C Function: int PyRun_InteractiveOne (FILE *fp, const
          char *filename)
     This is a simplified interface to *note
     PyRun_InteractiveOneFlags(): 40. below, leaving _flags_ set to
     _NULL_.

 -- C Function: int PyRun_InteractiveOneFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     Read and execute a single statement from a file associated with an
     interactive device according to the _flags_ argument.  The user
     will be prompted using `sys.ps1' and `sys.ps2'.  _filename_ is
     decoded from the filesystem encoding
     (`sys.getfilesystemencoding()').

     Returns `0' when the input was executed successfully, `-1' if
     there was an exception, or an error code from the `errcode.h'
     include file distributed as part of Python if there was a parse
     error.  (Note that `errcode.h' is not included by `Python.h', so
     must be included specifically if needed.)

 -- C Function: int PyRun_InteractiveLoop (FILE *fp, const
          char *filename)
     This is a simplified interface to *note
     PyRun_InteractiveLoopFlags(): 41. below, leaving _flags_ set to
     _NULL_.

 -- C Function: int PyRun_InteractiveLoopFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     Read and execute statements from a file associated with an
     interactive device until EOF is reached.  The user will be
     prompted using `sys.ps1' and `sys.ps2'.  _filename_ is decoded
     from the filesystem encoding (`sys.getfilesystemencoding()').
     Returns `0' at EOF.

 -- C Function: struct _node* PyParser_SimpleParseString (const
          char *str, int start)
     This is a simplified interface to *note
     PyParser_SimpleParseStringFlagsFilename(): 43. below, leaving
     _filename_ set to _NULL_ and _flags_ set to `0'.

 -- C Function: struct _node* PyParser_SimpleParseStringFlags (const
          char *str, int start, int flags)
     This is a simplified interface to *note
     PyParser_SimpleParseStringFlagsFilename(): 43. below, leaving
     _filename_ set to _NULL_.

 -- C Function: struct _node* PyParser_SimpleParseStringFlagsFilename
          (const char *str, const char *filename, int start, int flags)
     Parse Python source code from _str_ using the start token _start_
     according to the _flags_ argument.  The result can be used to
     create a code object which can be evaluated efficiently. This is
     useful if a code fragment must be evaluated many times. _filename_
     is decoded from the filesystem encoding
     (`sys.getfilesystemencoding()').

 -- C Function: struct _node* PyParser_SimpleParseFile (FILE *fp, const
          char *filename, int start)
     This is a simplified interface to *note
     PyParser_SimpleParseFileFlags(): 46. below, leaving _flags_ set to
     `0'

 -- C Function: struct _node* PyParser_SimpleParseFileFlags (FILE *fp,
          const char *filename, int start, int flags)
     Similar to *note PyParser_SimpleParseStringFlagsFilename(): 43,
     but the Python source code is read from _fp_ instead of an
     in-memory string.

 -- C Function: PyObject* PyRun_String (const char *str, int start,
          PyObject *globals, PyObject *locals)
     Return value: New reference.

     This is a simplified interface to *note PyRun_StringFlags(): 48.
     below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_StringFlags (const char *str,
          int start, PyObject *globals, PyObject *locals,
          PyCompilerFlags *flags)
     Return value: New reference.

     Execute Python source code from _str_ in the context specified by
     the dictionaries _globals_ and _locals_ with the compiler flags
     specified by _flags_.  The parameter _start_ specifies the start
     token that should be used to parse the source code.

     Returns the result of executing the code as a Python object, or
     _NULL_ if an exception was raised.

 -- C Function: PyObject* PyRun_File (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals)
     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 4a.
     below, leaving _closeit_ set to `0' and _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_FileEx (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals, int closeit)
     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 4a.
     below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_FileFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, PyCompilerFlags *flags)
     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 4a.
     below, leaving _closeit_ set to `0'.

 -- C Function: PyObject* PyRun_FileExFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, int closeit, PyCompilerFlags *flags)
     Return value: New reference.

     Similar to *note PyRun_StringFlags(): 48, but the Python source
     code is read from _fp_ instead of an in-memory string. _filename_
     should be the name of the file, it is decoded from the filesystem
     encoding (`sys.getfilesystemencoding()').  If _closeit_ is true,
     the file is closed before *note PyRun_FileExFlags(): 4a.  returns.

 -- C Function: PyObject* Py_CompileString (const char *str, const
          char *filename, int start)
     Return value: New reference.

     This is a simplified interface to *note Py_CompileStringFlags():
     4e. below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* Py_CompileStringFlags (const char *str, const
          char *filename, int start, PyCompilerFlags *flags)
     Return value: New reference.

     This is a simplified interface to *note Py_CompileStringExFlags():
     4f. below, with _optimize_ set to `-1'.

 -- C Function: PyObject* Py_CompileStringExFlags (const char *str,
          const char *filename, int start, PyCompilerFlags *flags,
          int optimize)
     Parse and compile the Python source code in _str_, returning the
     resulting code object.  The start token is given by _start_; this
     can be used to constrain the code which can be compiled and should
     be `Py_eval_input', `Py_file_input', or `Py_single_input'.  The
     filename specified by _filename_ is used to construct the code
     object and may appear in tracebacks or `SyntaxError' exception
     messages, it is decoded from the filesystem encoding
     (`sys.getfilesystemencoding()').  This returns _NULL_ if the code
     cannot be parsed or compiled.

     The integer _optimize_ specifies the optimization level of the
     compiler; a value of `-1' selects the optimization level of the
     interpreter as given by `-O' options.  Explicit levels are `0' (no
     optimization; `__debug__' is true), `1' (asserts are removed,
     `__debug__' is false) or `2' (docstrings are removed too).

     New in version 3.2.

 -- C Function: PyObject* PyEval_EvalCode (PyObject *co,
          PyObject *globals, PyObject *locals)
     Return value: New reference.

     This is a simplified interface to *note PyEval_EvalCodeEx(): 51,
     with just the code object, and the dictionaries of global and
     local variables.  The other arguments are set to _NULL_.

 -- C Function: PyObject* PyEval_EvalCodeEx (PyObject *co,
          PyObject *globals, PyObject *locals, PyObject **args,
          int argcount, PyObject **kws, int kwcount, PyObject **defs,
          int defcount, PyObject *closure)
     Evaluate a precompiled code object, given a particular environment
     for its evaluation.  This environment consists of dictionaries of
     global and local variables, arrays of arguments, keywords and
     defaults, and a closure tuple of cells.

 -- C Function: PyObject* PyEval_EvalFrame (PyFrameObject *f)
     Evaluate an execution frame.  This is a simplified interface to
     PyEval_EvalFrameEx, for backward compatibility.

 -- C Function: PyObject* PyEval_EvalFrameEx (PyFrameObject *f,
          int throwflag)
     This is the main, unvarnished function of Python interpretation.
     It is literally 2000 lines long.  The code object associated with
     the execution frame _f_ is executed, interpreting bytecode and
     executing calls as needed.  The additional _throwflag_ parameter
     can mostly be ignored - if true, then it causes an exception to
     immediately be thrown; this is used for the `throw()' methods of
     generator objects.

 -- C Function: int PyEval_MergeCompilerFlags (PyCompilerFlags *cf)
     This function changes the flags of the current evaluation frame,
     and returns true on success, false on failure.

 -- C Variable: int Py_eval_input
     The start symbol from the Python grammar for isolated expressions;
     for use with *note Py_CompileString(): 4d.

 -- C Variable: int Py_file_input
     The start symbol from the Python grammar for sequences of
     statements as read from a file or other source; for use with *note
     Py_CompileString(): 4d.  This is the symbol to use when compiling
     arbitrarily long Python source code.

 -- C Variable: int Py_single_input
     The start symbol from the Python grammar for a single statement;
     for use with *note Py_CompileString(): 4d. This is the symbol used
     for the interactive interpreter loop.

 -- C Type: struct PyCompilerFlags
     This is the structure used to hold compiler flags.  In cases where
     code is only being compiled, it is passed as `int flags', and in
     cases where code is being executed, it is passed as
     `PyCompilerFlags *flags'.  In this case, `from __future__ import'
     can modify _flags_.

     Whenever `PyCompilerFlags *flags' is _NULL_, `cf_flags' is treated
     as equal to `0', and any modification due to `from __future__
     import' is discarded.

         struct PyCompilerFlags {
             int cf_flags;
         }



 -- C Variable: int CO_FUTURE_DIVISION
     This bit can be set in _flags_ to cause division operator `/' to be
     interpreted as "true division" according to PEP 238(1).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0238


File: python-c-api-3.2.2.info,  Node: Reference Counting,  Next: Exception Handling,  Prev: The Very High Level Layer,  Up: Top

3 Reference Counting
********************

The macros in this section are used for managing reference counts of
Python objects.

 -- C Function: void Py_INCREF (PyObject *o)
     Increment the reference count for object _o_.  The object must not
     be _NULL_; if you aren't sure that it isn't _NULL_, use *note
     Py_XINCREF(): 5d.

 -- C Function: void Py_XINCREF (PyObject *o)
     Increment the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect.

 -- C Function: void Py_DECREF (PyObject *o)
     Decrement the reference count for object _o_.  The object must not
     be _NULL_; if you aren't sure that it isn't _NULL_, use *note
     Py_XDECREF(): 12.  If the reference count reaches zero, the
     object's type's deallocation function (which must not be _NULL_)
     is invoked.

          Warning: The deallocation function can cause arbitrary Python
          code to be invoked (e.g.  when a class instance with a
          `__del__()' method is deallocated).  While exceptions in such
          code are not propagated, the executed code has free access to
          all Python global variables.  This means that any object that
          is reachable from a global variable should be in a consistent
          state before *note Py_DECREF(): f. is invoked.  For example,
          code to delete an object from a list should copy a reference
          to the deleted object in a temporary variable, update the
          list data structure, and then call *note Py_DECREF(): f. for
          the temporary variable.

 -- C Function: void Py_XDECREF (PyObject *o)
     Decrement the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect; otherwise the
     effect is the same as for *note Py_DECREF(): f, and the same
     warning applies.

 -- C Function: void Py_CLEAR (PyObject *o)
     Decrement the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect; otherwise the
     effect is the same as for *note Py_DECREF(): f, except that the
     argument is also set to _NULL_.  The warning for *note
     Py_DECREF(): f. does not apply with respect to the object passed
     because the macro carefully uses a temporary variable and sets the
     argument to _NULL_ before decrementing its reference count.

     It is a good idea to use this macro whenever decrementing the
     value of a variable that might be traversed during garbage
     collection.

  The following functions are for runtime dynamic embedding of Python:
`Py_IncRef(PyObject *o)', `Py_DecRef(PyObject *o)'. They are simply
exported function versions of *note Py_XINCREF(): 5d. and *note
Py_XDECREF(): 12, respectively.

  The following functions or macros are only for use within the
interpreter core: `_Py_Dealloc()', `_Py_ForgetReference()',
`_Py_NewReference()', as well as the global variable `_Py_RefTotal'.


File: python-c-api-3.2.2.info,  Node: Exception Handling,  Next: Utilities,  Prev: Reference Counting,  Up: Top

4 Exception Handling
********************

The functions described in this chapter will let you handle and raise
Python exceptions.  It is important to understand some of the basics of
Python exception handling.  It works somewhat like the Unix `errno'
variable: there is a global indicator (per thread) of the last error
that occurred.  Most functions don't clear this on success, but will
set it to indicate the cause of the error on failure.  Most functions
also return an error indicator, usually _NULL_ if they are supposed to
return a pointer, or `-1' if they return an integer (exception: the
`PyArg_*()' functions return `1' for success and `0' for failure).

  When a function must fail because some function it called failed, it
generally doesn't set the error indicator; the function it called
already set it.  It is responsible for either handling the error and
clearing the exception or returning after cleaning up any resources it
holds (such as object references or memory allocations); it should
_not_ continue normally if it is not prepared to handle the error.  If
returning due to an error, it is important to indicate to the caller
that an error has been set.  If the error is not handled or carefully
propagated, additional calls into the Python/C API may not behave as
intended and may fail in mysterious ways.

  The error indicator consists of three Python objects corresponding to
the result of `sys.exc_info()'.  API functions exist to interact with
the error indicator in various ways.  There is a separate error
indicator for each thread.

 -- C Function: void PyErr_PrintEx (int set_sys_last_vars)
     Print a standard traceback to `sys.stderr' and clear the error
     indicator.  Call this function only when the error indicator is
     set.  (Otherwise it will cause a fatal error!)

     If _set_sys_last_vars_ is nonzero, the variables `sys.last_type',
     `sys.last_value' and `sys.last_traceback' will be set to the type,
     value and traceback of the printed exception, respectively.

 -- C Function: void PyErr_Print ()
     Alias for `PyErr_PrintEx(1)'.

 -- C Function: PyObject* PyErr_Occurred ()
     Return value: Borrowed reference.

     Test whether the error indicator is set.  If set, return the
     exception _type_ (the first argument to the last call to one of
     the `PyErr_Set*()' functions or to *note PyErr_Restore(): 64.).
     If not set, return _NULL_.  You do not own a reference to the
     return value, so you do not need to *note Py_DECREF(): f.  it.

          Note: Do not compare the return value to a specific
          exception; use *note PyErr_ExceptionMatches(): 24. instead,
          shown below.  (The comparison could easily fail since the
          exception may be an instance instead of a class, in the case
          of a class exception, or it may the a subclass of the
          expected exception.)

 -- C Function: int PyErr_ExceptionMatches (PyObject *exc)
     Equivalent to `PyErr_GivenExceptionMatches(PyErr_Occurred(),
     exc)'.  This should only be called when an exception is actually
     set; a memory access violation will occur if no exception has been
     raised.

 -- C Function: int PyErr_GivenExceptionMatches (PyObject *given,
          PyObject *exc)
     Return true if the _given_ exception matches the exception in
     _exc_.  If _exc_ is a class object, this also returns true when
     _given_ is an instance of a subclass.  If _exc_ is a tuple, all
     exceptions in the tuple (and recursively in subtuples) are
     searched for a match.

 -- C Function: void PyErr_NormalizeException (PyObject**exc,
          PyObject**val, PyObject**tb)
     Under certain circumstances, the values returned by *note
     PyErr_Fetch(): 67. below can be "unnormalized", meaning that
     `*exc' is a class object but `*val' is not an instance of the
     same class.  This function can be used to instantiate the class in
     that case.  If the values are already normalized, nothing happens.
     The delayed normalization is implemented to improve performance.

 -- C Function: void PyErr_Clear ()
     Clear the error indicator.  If the error indicator is not set,
     there is no effect.

 -- C Function: void PyErr_Fetch (PyObject **ptype, PyObject **pvalue,
          PyObject **ptraceback)
     Retrieve the error indicator into three variables whose addresses
     are passed.  If the error indicator is not set, set all three
     variables to _NULL_.  If it is set, it will be cleared and you own
     a reference to each object retrieved.  The value and traceback
     object may be _NULL_ even when the type object is not.

          Note: This function is normally only used by code that needs
          to handle exceptions or by code that needs to save and
          restore the error indicator temporarily.

 -- C Function: void PyErr_Restore (PyObject *type, PyObject *value,
          PyObject *traceback)
     Set  the error indicator from the three objects.  If the error
     indicator is already set, it is cleared first.  If the objects are
     _NULL_, the error indicator is cleared.  Do not pass a _NULL_ type
     and non-_NULL_ value or traceback.  The exception type should be a
     class.  Do not pass an invalid exception type or value. (Violating
     these rules will cause subtle problems later.)  This call takes
     away a reference to each object: you must own a reference to each
     object before the call and after the call you no longer own these
     references.  (If you don't understand this, don't use this
     function.  I warned you.)

          Note: This function is normally only used by code that needs
          to save and restore the error indicator temporarily; use
          *note PyErr_Fetch(): 67. to save the current exception state.

 -- C Function: void PyErr_SetString (PyObject *type, const
          char *message)
     This is the most common way to set the error indicator.  The first
     argument specifies the exception type; it is normally one of the
     standard exceptions, e.g. `PyExc_RuntimeError'.  You need not
     increment its reference count.  The second argument is an error
     message; it is decoded from `'utf-8''.

 -- C Function: void PyErr_SetObject (PyObject *type, PyObject *value)
     This function is similar to *note PyErr_SetString(): 22. but lets
     you specify an arbitrary Python object for the "value" of the
     exception.

 -- C Function: PyObject* PyErr_Format (PyObject *exception, const
          char *format, ...)
     Return value: Always NULL.

     This function sets the error indicator and returns _NULL_.
     _exception_ should be a Python exception class.  The _format_ and
     subsequent parameters help format the error message; they have the
     same meaning and values as in *note PyUnicode_FromFormat(): 6a.
     _format_ is an ASCII-encoded string.

 -- C Function: void PyErr_SetNone (PyObject *type)
     This is a shorthand for `PyErr_SetObject(type, Py_None)'.

 -- C Function: int PyErr_BadArgument ()
     This is a shorthand for `PyErr_SetString(PyExc_TypeError,
     message)', where _message_ indicates that a built-in operation was
     invoked with an illegal argument.  It is mostly for internal use.

 -- C Function: PyObject* PyErr_NoMemory ()
     Return value: Always NULL.

     This is a shorthand for `PyErr_SetNone(PyExc_MemoryError)'; it
     returns _NULL_ so an object allocation function can write `return
     PyErr_NoMemory();' when it runs out of memory.

 -- C Function: PyObject* PyErr_SetFromErrno (PyObject *type)
     Return value: Always NULL.

     This is a convenience function to raise an exception when a C
     library function has returned an error and set the C variable
     `errno'.  It constructs a tuple object whose first item is the
     integer `errno' value and whose second item is the corresponding
     error message (gotten from `strerror()'), and then calls
     `PyErr_SetObject(type, object)'.  On Unix, when the `errno' value
     is `EINTR', indicating an interrupted system call, this calls
     *note PyErr_CheckSignals(): 6f, and if that set the error
     indicator, leaves it set to that.  The function always returns
     _NULL_, so a wrapper function around a system call can write
     `return PyErr_SetFromErrno(type);' when the system call returns an
     error.

 -- C Function: PyObject* PyErr_SetFromErrnoWithFilename
          (PyObject *type, const char *filename)
     Return value: Always NULL.

     Similar to *note PyErr_SetFromErrno(): 6e, with the additional
     behavior that if _filename_ is not _NULL_, it is passed to the
     constructor of _type_ as a third parameter.  In the case of
     exceptions such as `IOError' and `OSError', this is used to define
     the `filename' attribute of the exception instance.  _filename_ is
     decoded from the filesystem encoding
     (`sys.getfilesystemencoding()').

 -- C Function: PyObject* PyErr_SetFromWindowsErr (int ierr)
     Return value: Always NULL.

     This is a convenience function to raise `WindowsError'. If called
     with _ierr_ of `0', the error code returned by a call to
     `GetLastError()' is used instead.  It calls the Win32 function
     `FormatMessage()' to retrieve the Windows description of error
     code given by _ierr_ or `GetLastError()', then it constructs a
     tuple object whose first item is the _ierr_ value and whose second
     item is the corresponding error message (gotten from
     `FormatMessage()'), and then calls
     `PyErr_SetObject(PyExc_WindowsError, object)'. This function
     always returns _NULL_. Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErr (PyObject *type,
          int ierr)
     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErr(): 71, with an additional
     parameter specifying the exception type to be raised.
     Availability: Windows.

 -- C Function: PyObject* PyErr_SetFromWindowsErrWithFilename
          (int ierr, const char *filename)
     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErr(): 71, with the
     additional behavior that if _filename_ is not _NULL_, it is passed
     to the constructor of `WindowsError' as a third parameter.
     _filename_ is decoded from the filesystem encoding
     (`sys.getfilesystemencoding()').  Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErrWithFilename
          (PyObject *type, int ierr, char *filename)
     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErrWithFilename(): 73, with
     an additional parameter specifying the exception type to be
     raised. Availability: Windows.

 -- C Function: void PyErr_SyntaxLocationEx (char *filename,
          int lineno, int col_offset)
     Set file, line, and offset information for the current exception.
     If the current exception is not a `SyntaxError', then it sets
     additional attributes, which make the exception printing subsystem
     think the exception is a `SyntaxError'. _filename_ is decoded from
     the filesystem encoding (`sys.getfilesystemencoding()').

  New in version 3.2.

 -- C Function: void PyErr_SyntaxLocation (char *filename, int lineno)
     Like `PyErr_SyntaxLocationExc()', but the col_offset parameter is
     omitted.

 -- C Function: void PyErr_BadInternalCall ()
     This is a shorthand for `PyErr_SetString(PyExc_SystemError,
     message)', where _message_ indicates that an internal operation
     (e.g. a Python/C API function) was invoked with an illegal
     argument.  It is mostly for internal use.

 -- C Function: int PyErr_WarnEx (PyObject *category, char *message,
          int stack_level)
     Issue a warning message.  The _category_ argument is a warning
     category (see below) or _NULL_; the _message_ argument is an UTF-8
     encoded string.  _stack_level_ is a positive number giving a
     number of stack frames; the warning will be issued from the
     currently executing line of code in that stack frame.  A
     _stack_level_ of 1 is the function calling *note PyErr_WarnEx():
     78, 2 is  the function above that, and so forth.

     This function normally prints a warning message to _sys.stderr_;
     however, it is also possible that the user has specified that
     warnings are to be turned into errors, and in that case this will
     raise an exception.  It is also possible that the function raises
     an exception because of a problem with the warning machinery (the
     implementation imports the `warnings' module to do the heavy
     lifting).  The return value is `0' if no exception is raised, or
     `-1' if an exception is raised.  (It is not possible to determine
     whether a warning message is actually printed, nor what the reason
     is for the exception; this is intentional.)  If an exception is
     raised, the caller should do its normal exception handling (for
     example, *note Py_DECREF(): f. owned references and return an
     error value).

     Warning categories must be subclasses of `Warning'; the default
     warning category is `RuntimeWarning'.  The standard Python warning
     categories are available as global variables whose names are
     `PyExc_' followed by the Python exception name. These have the
     type *note PyObject*: a.; they are all class objects. Their names
     are `PyExc_Warning', `PyExc_UserWarning', `PyExc_UnicodeWarning',
     `PyExc_DeprecationWarning', `PyExc_SyntaxWarning',
     `PyExc_RuntimeWarning', and `PyExc_FutureWarning'.
     `PyExc_Warning' is a subclass of `PyExc_Exception'; the other
     warning categories are subclasses of `PyExc_Warning'.

     For information about warning control, see the documentation for
     the `warnings' module and the `-W' option in the command line
     documentation.  There is no C API for warning control.

 -- C Function: int PyErr_WarnExplicit (PyObject *category, const
          char *message, const char *filename, int lineno, const
          char *module, PyObject *registry)
     Issue a warning message with explicit control over all warning
     attributes.  This is a straightforward wrapper around the Python
     function `warnings.warn_explicit()', see there for more
     information.  The _module_ and _registry_ arguments may be set to
     _NULL_ to get the default effect described there. _message_ and
     _module_ are UTF-8 encoded strings, _filename_ is decoded from the
     filesystem encoding (`sys.getfilesystemencoding()').

 -- C Function: int PyErr_WarnFormat (PyObject *category,
          Py_ssize_t stack_level, const char *format, ...)
     Function similar to *note PyErr_WarnEx(): 78, but use *note
     PyUnicode_FromFormat(): 6a. to format the warning message.
     _format_ is an ASCII-encoded string.

     New in version 3.2.

 -- C Function: int PyErr_CheckSignals ()
     This function interacts with Python's signal handling.  It checks
     whether a signal has been sent to the processes and if so, invokes
     the corresponding signal handler.  If the `signal' module is
     supported, this can invoke a signal handler written in Python.  In
     all cases, the default effect for `SIGINT' is to raise the
     `KeyboardInterrupt' exception.  If an exception is raised the
     error indicator is set and the function returns `-1'; otherwise
     the function returns `0'.  The error indicator may or may not be
     cleared if it was previously set.

 -- C Function: void PyErr_SetInterrupt ()
     This function simulates the effect of a `SIGINT' signal arriving
     -- the next time *note PyErr_CheckSignals(): 6f. is called,
     `KeyboardInterrupt' will be raised.  It may be called without
     holding the interpreter lock.


 -- C Function: int PySignal_SetWakeupFd (int fd)
     This utility function specifies a file descriptor to which a
     `'\0'' byte will be written whenever a signal is received.  It
     returns the previous such file descriptor.  The value `-1'
     disables the feature; this is the initial state.  This is
     equivalent to `signal.set_wakeup_fd()' in Python, but without any
     error checking.  _fd_ should be a valid file descriptor.  The
     function should only be called from the main thread.

 -- C Function: PyObject* PyErr_NewException (char *name,
          PyObject *base, PyObject *dict)
     Return value: New reference.

     This utility function creates and returns a new exception class.
     The _name_ argument must be the name of the new exception, a C
     string of the form `module.classname'.  The _base_ and _dict_
     arguments are normally _NULL_.  This creates a class object
     derived from `Exception' (accessible in C as `PyExc_Exception').

     The `__module__' attribute of the new class is set to the first
     part (up to the last dot) of the _name_ argument, and the class
     name is set to the last part (after the last dot).  The _base_
     argument can be used to specify alternate base classes; it can
     either be only one class or a tuple of classes. The _dict_
     argument can be used to specify a dictionary of class variables
     and methods.

 -- C Function: PyObject* PyErr_NewExceptionWithDoc (char *name,
          char *doc, PyObject *base, PyObject *dict)
     Return value: New reference.

     Same as *note PyErr_NewException(): 7d, except that the new
     exception class can easily be given a docstring: If _doc_ is
     non-_NULL_, it will be used as the docstring for the exception
     class.

     New in version 3.2.

 -- C Function: void PyErr_WriteUnraisable (PyObject *obj)
     This utility function prints a warning message to `sys.stderr'
     when an exception has been set but it is impossible for the
     interpreter to actually raise the exception.  It is used, for
     example, when an exception occurs in an `__del__()' method.

     The function is called with a single argument _obj_ that
     identifies the context in which the unraisable exception occurred.
     The repr of _obj_ will be printed in the warning message.

* Menu:

* Exception Objects::
* Unicode Exception Objects::
* Recursion Control::
* Standard Exceptions::


File: python-c-api-3.2.2.info,  Node: Exception Objects,  Next: Unicode Exception Objects,  Up: Exception Handling

4.1 Exception Objects
=====================

 -- C Function: PyObject* PyException_GetTraceback (PyObject *ex)
     Return the traceback associated with the exception as a new
     reference, as accessible from Python through `__traceback__'.  If
     there is no traceback associated, this returns _NULL_.

 -- C Function: int PyException_SetTraceback (PyObject *ex,
          PyObject *tb)
     Set the traceback associated with the exception to _tb_.  Use
     `Py_None' to clear it.

 -- C Function: PyObject* PyException_GetContext (PyObject *ex)
     Return the context (another exception instance during whose
     handling _ex_ was raised) associated with the exception as a new
     reference, as accessible from Python through `__context__'.  If
     there is no context associated, this returns _NULL_.

 -- C Function: void PyException_SetContext (PyObject *ex,
          PyObject *ctx)
     Set the context associated with the exception to _ctx_.  Use
     _NULL_ to clear it.  There is no type check to make sure that
     _ctx_ is an exception instance.  This steals a reference to _ctx_.

 -- C Function: PyObject* PyException_GetCause (PyObject *ex)
     Return the cause (another exception instance set by `raise ...
     from ...') associated with the exception as a new reference, as
     accessible from Python through `__cause__'.  If there is no cause
     associated, this returns _NULL_.

 -- C Function: void PyException_SetCause (PyObject *ex, PyObject *ctx)
     Set the cause associated with the exception to _ctx_.  Use _NULL_
     to clear it.  There is no type check to make sure that _ctx_ is an
     exception instance.  This steals a reference to _ctx_.


File: python-c-api-3.2.2.info,  Node: Unicode Exception Objects,  Next: Recursion Control,  Prev: Exception Objects,  Up: Exception Handling

4.2 Unicode Exception Objects
=============================

The following functions are used to create and modify Unicode
exceptions from C.

 -- C Function: PyObject* PyUnicodeDecodeError_Create (const
          char *encoding, const char *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeDecodeError' object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.
     _encoding_ and _reason_ are UTF-8 encoded strings.

 -- C Function: PyObject* PyUnicodeEncodeError_Create (const
          char *encoding, const Py_UNICODE *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeEncodeError' object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.
     _encoding_ and _reason_ are UTF-8 encoded strings.

 -- C Function: PyObject* PyUnicodeTranslateError_Create (const
          Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start,
          Py_ssize_t end, const char *reason)
     Create a `UnicodeTranslateError' object with the attributes
     _object_, _length_, _start_, _end_ and _reason_. _reason_ is an
     UTF-8 encoded string.

 -- C Function: PyObject* PyUnicodeDecodeError_GetEncoding
          (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetEncoding
          (PyObject *exc)
     Return the _encoding_ attribute of the given exception object.

 -- C Function: PyObject* PyUnicodeDecodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetObject
          (PyObject *exc)
     Return the _object_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeEncodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeTranslateError_GetStart (PyObject *exc,
          Py_ssize_t *start)
     Get the _start_ attribute of the given exception object and place
     it into _*start_.  _start_ must not be _NULL_.  Return `0' on
     success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeEncodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeTranslateError_SetStart (PyObject *exc,
          Py_ssize_t start)
     Set the _start_ attribute of the given exception object to
     _start_.  Return `0' on success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeEncodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeTranslateError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
     Get the _end_ attribute of the given exception object and place it
     into _*end_.  _end_ must not be _NULL_.  Return `0' on success,
     `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeEncodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeTranslateError_SetEnd (PyObject *exc,
          Py_ssize_t end)
     Set the _end_ attribute of the given exception object to _end_.
     Return `0' on success, `-1' on failure.

 -- C Function: PyObject* PyUnicodeDecodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetReason
          (PyObject *exc)
     Return the _reason_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeEncodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeTranslateError_SetReason (PyObject *exc,
          const char *reason)
     Set the _reason_ attribute of the given exception object to
     _reason_.  Return `0' on success, `-1' on failure.


File: python-c-api-3.2.2.info,  Node: Recursion Control,  Next: Standard Exceptions,  Prev: Unicode Exception Objects,  Up: Exception Handling

4.3 Recursion Control
=====================

These two functions provide a way to perform safe recursive calls at
the C level, both in the core and in extension modules.  They are
needed if the recursive code does not necessarily invoke Python code
(which tracks its recursion depth automatically).

 -- C Function: int Py_EnterRecursiveCall (char *where)
     Marks a point where a recursive C-level call is about to be
     performed.

     If `USE_STACKCHECK' is defined, this function checks if the the OS
     stack overflowed using *note PyOS_CheckStack(): a5.  In this is
     the case, it sets a `MemoryError' and returns a nonzero value.

     The function then checks if the recursion limit is reached.  If
     this is the case, a `RuntimeError' is set and a nonzero value is
     returned.  Otherwise, zero is returned.

     _where_ should be a string such as `" in instance check"' to be
     concatenated to the `RuntimeError' message caused by the recursion
     depth limit.

 -- C Function: void Py_LeaveRecursiveCall ()
     Ends a *note Py_EnterRecursiveCall(): a4.  Must be called once for
     each _successful_ invocation of *note Py_EnterRecursiveCall(): a4.

  Properly implementing `tp_repr' for container types requires special
recursion handling.  In addition to protecting the stack, `tp_repr'
also needs to track objects to prevent cycles.  The following two
functions facilitate this functionality.  Effectively, these are the C
equivalent to `reprlib.recursive_repr()'.

 -- C Function: int Py_ReprEnter (PyObject *object)
     Called at the beginning of the `tp_repr' implementation to detect
     cycles.

     If the object has already been processed, the function returns a
     positive integer.  In that case the `tp_repr' implementation
     should return a string object indicating a cycle.  As examples,
     `dict' objects return `{...}' and `list' objects return `[...]'.

     The function will return a negative integer if the recursion limit
     is reached.  In that case the `tp_repr' implementation should
     typically return `NULL'.

     Otherwise, the function returns zero and the `tp_repr'
     implementation can continue normally.

 -- C Function: void Py_ReprLeave (PyObject *object)
     Ends a *note Py_ReprEnter(): a7.  Must be called once for each
     invocation of *note Py_ReprEnter(): a7. that returns zero.


File: python-c-api-3.2.2.info,  Node: Standard Exceptions,  Prev: Recursion Control,  Up: Exception Handling

4.4 Standard Exceptions
=======================

All standard Python exceptions are available as global variables whose
names are `PyExc_' followed by the Python exception name.  These have
the type *note PyObject*: a.; they are all class objects.  For
completeness, here are all the variables:

C Name                                    Python Name                      Notes
------------------------------------------------------------------------------------------ 
`PyExc_BaseException'                     `BaseException'                  (1)
`PyExc_Exception'                         `Exception'                      (1)
`PyExc_ArithmeticError'                   `ArithmeticError'                (1)
`PyExc_LookupError'                       `LookupError'                    (1)
`PyExc_AssertionError'                    `AssertionError'                 
`PyExc_AttributeError'                    `AttributeError'                 
`PyExc_EOFError'                          `EOFError'                       
`PyExc_EnvironmentError'                  `EnvironmentError'               (1)
`PyExc_FloatingPointError'                `FloatingPointError'             
`PyExc_IOError'                           `IOError'                        
`PyExc_ImportError'                       `ImportError'                    
`PyExc_IndexError'                        `IndexError'                     
`PyExc_KeyError'                          `KeyError'                       
`PyExc_KeyboardInterrupt'                 `KeyboardInterrupt'              
`PyExc_MemoryError'                       `MemoryError'                    
`PyExc_NameError'                         `NameError'                      
`PyExc_NotImplementedError'               `NotImplementedError'            
`PyExc_OSError'                           `OSError'                        
`PyExc_OverflowError'                     `OverflowError'                  
`PyExc_ReferenceError'                    `ReferenceError'                 (2)
`PyExc_RuntimeError'                      `RuntimeError'                   
`PyExc_SyntaxError'                       `SyntaxError'                    
`PyExc_SystemError'                       `SystemError'                    
`PyExc_SystemExit'                        `SystemExit'                     
`PyExc_TypeError'                         `TypeError'                      
`PyExc_ValueError'                        `ValueError'                     
`PyExc_WindowsError'                      `WindowsError'                   (3)
`PyExc_ZeroDivisionError'                 `ZeroDivisionError'              

  Notes:

  1. This is a base class for other standard exceptions.

  2. This is the same as `weakref.ReferenceError'.

  3. Only defined on Windows; protect code that uses this by testing
     that the preprocessor macro `MS_WINDOWS' is defined.


File: python-c-api-3.2.2.info,  Node: Utilities,  Next: Abstract Objects Layer,  Prev: Exception Handling,  Up: Top

5 Utilities
***********

The functions in this chapter perform various utility tasks, ranging
from helping C code be more portable across platforms, using Python
modules from C, and parsing function arguments and constructing Python
values from C values.

* Menu:

* Operating System Utilities::
* System Functions::
* Process Control::
* Importing Modules::
* Data marshalling support::
* Parsing arguments and building values::
* String conversion and formatting::
* Reflection::
* Codec registry and support functions::


File: python-c-api-3.2.2.info,  Node: Operating System Utilities,  Next: System Functions,  Up: Utilities

5.1 Operating System Utilities
==============================

 -- C Function: int Py_FdIsInteractive (FILE *fp, const char *filename)
     Return true (nonzero) if the standard I/O file _fp_ with name
     _filename_ is deemed interactive.  This is the case for files for
     which `isatty(fileno(fp))' is true.  If the global flag
     `Py_InteractiveFlag' is true, this function also returns true if
     the _filename_ pointer is _NULL_ or if the name is equal to one of
     the strings `'<stdin>'' or `'???''.

 -- C Function: void PyOS_AfterFork ()
     Function to update some internal state after a process fork; this
     should be called in the new process if the Python interpreter will
     continue to be used.  If a new executable is loaded into the new
     process, this function does not need to be called.

 -- C Function: int PyOS_CheckStack ()
     Return true when the interpreter runs out of stack space.  This is
     a reliable check, but is only available when `USE_STACKCHECK' is
     defined (currently on Windows using the Microsoft Visual C++
     compiler).  `USE_STACKCHECK' will be defined automatically; you
     should never change the definition in your own code.

 -- C Function: PyOS_sighandler_t PyOS_getsig (int i)
     Return the current signal handler for signal _i_.  This is a thin
     wrapper around either `sigaction()' or `signal()'.  Do not call
     those functions directly! `PyOS_sighandler_t' is a typedef alias
     for `void (*)(int)'.

 -- C Function: PyOS_sighandler_t PyOS_setsig (int i,
          PyOS_sighandler_t h)
     Set the signal handler for signal _i_ to be _h_; return the old
     signal handler.  This is a thin wrapper around either
     `sigaction()' or `signal()'.  Do not call those functions
     directly!  `PyOS_sighandler_t' is a typedef alias for `void
     (*)(int)'.


File: python-c-api-3.2.2.info,  Node: System Functions,  Next: Process Control,  Prev: Operating System Utilities,  Up: Utilities

5.2 System Functions
====================

These are utility functions that make functionality from the `sys'
module accessible to C code.  They all work with the current
interpreter thread's `sys' module's dict, which is contained in the
internal thread state structure.

 -- C Function: PyObject *PySys_GetObject (char *name)
     Return value: Borrowed reference.

     Return the object _name_ from the `sys' module or _NULL_ if it does
     not exist, without setting an exception.

 -- C Function: FILE *PySys_GetFile (char *name, FILE *def)
     Return the `FILE*' associated with the object _name_ in the `sys'
     module, or _def_ if _name_ is not in the module or is not
     associated with a `FILE*'.

 -- C Function: int PySys_SetObject (char *name, PyObject *v)
     Set _name_ in the `sys' module to _v_ unless _v_ is _NULL_, in
     which case _name_ is deleted from the sys module. Returns `0' on
     success, `-1' on error.

 -- C Function: void PySys_ResetWarnOptions ()
     Reset `sys.warnoptions' to an empty list.

 -- C Function: void PySys_AddWarnOption (wchar_t *s)
     Append _s_ to `sys.warnoptions'.

 -- C Function: void PySys_AddWarnOptionUnicode (PyObject *unicode)
     Append _unicode_ to `sys.warnoptions'.

 -- C Function: void PySys_SetPath (wchar_t *path)
     Set `sys.path' to a list object of paths found in _path_ which
     should be a list of paths separated with the platform's search
     path delimiter (`:' on Unix, `;' on Windows).

 -- C Function: void PySys_WriteStdout (const char *format, ...)
     Write the output string described by _format_ to `sys.stdout'.  No
     exceptions are raised, even if truncation occurs (see below).

     _format_ should limit the total size of the formatted output
     string to 1000 bytes or less - after 1000 bytes, the output string
     is truncated.  In particular, this means that no unrestricted "%s"
     formats should occur; these should be limited using "%.<N>s" where
     <N> is a decimal number calculated so that <N> plus the maximum
     size of other formatted text does not exceed 1000 bytes.  Also
     watch out for "%f", which can print hundreds of digits for very
     large numbers.

     If a problem occurs, or `sys.stdout' is unset, the formatted
     message is written to the real (C level) _stdout_.

 -- C Function: void PySys_WriteStderr (const char *format, ...)
     As *note PySys_WriteStdout(): be, but write to `sys.stderr' or
     _stderr_ instead.

 -- C Function: void PySys_FormatStdout (const char *format, ...)
     Function similar to PySys_WriteStdout() but format the message
     using *note PyUnicode_FromFormatV(): c1. and don't truncate the
     message to an arbitrary length.

     New in version 3.2.

 -- C Function: void PySys_FormatStderr (const char *format, ...)
     As *note PySys_FormatStdout(): c0, but write to `sys.stderr' or
     _stderr_ instead.

     New in version 3.2.

 -- C Function: void PySys_AddXOption (const wchar_t *s)
     Parse _s_ as a set of `-X' options and add them to the current
     options mapping as returned by *note PySys_GetXOptions(): c4.

     New in version 3.2.

 -- C Function: PyObject *PySys_GetXOptions ()
     Return value: Borrowed reference.

     Return the current dictionary of `-X' options, similarly to
     `sys._xoptions'.  On error, _NULL_ is returned and an exception is
     set.

     New in version 3.2.


File: python-c-api-3.2.2.info,  Node: Process Control,  Next: Importing Modules,  Prev: System Functions,  Up: Utilities

5.3 Process Control
===================

 -- C Function: void Py_FatalError (const char *message)
     Print a fatal error message and kill the process.  No cleanup is
     performed.  This function should only be invoked when a condition
     is detected that would make it dangerous to continue using the
     Python interpreter; e.g., when the object administration appears
     to be corrupted.  On Unix, the standard C library function
     `abort()' is called which will attempt to produce a `core' file.

 -- C Function: void Py_Exit (int status)
     Exit the current process.  This calls *note Py_Finalize(): 2c. and
     then calls the standard C library function `exit(status)'.

 -- C Function: int Py_AtExit (void (*func) ())
     Register a cleanup function to be called by *note Py_Finalize():
     2c.  The cleanup function will be called with no arguments and
     should return no value.  At most 32 cleanup functions can be
     registered.  When the registration is successful, *note
     Py_AtExit(): c9. returns `0'; on failure, it returns `-1'.  The
     cleanup function registered last is called first. Each cleanup
     function will be called at most once.  Since Python's internal
     finalization will have completed before the cleanup function, no
     Python APIs should be called by _func_.


File: python-c-api-3.2.2.info,  Node: Importing Modules,  Next: Data marshalling support,  Prev: Process Control,  Up: Utilities

5.4 Importing Modules
=====================

 -- C Function: PyObject* PyImport_ImportModule (const char *name)
     Return value: New reference.

     This is a simplified interface to *note PyImport_ImportModuleEx():
     ce. below, leaving the _globals_ and _locals_ arguments set to
     _NULL_ and _level_ set to 0.  When the _name_ argument contains a
     dot (when it specifies a submodule of a package), the _fromlist_
     argument is set to the list `['*']' so that the return value is the
     named module rather than the top-level package containing it as
     would otherwise be the case.  (Unfortunately, this has an
     additional side effect when _name_ in fact specifies a subpackage
     instead of a submodule: the submodules specified in the package's
     `__all__' variable are  loaded.)  Return a new reference to the
     imported module, or _NULL_ with an exception set on failure.  A
     failing import of a module doesn't leave the module in
     `sys.modules'.

     This function always uses absolute imports.

 -- C Function: PyObject* PyImport_ImportModuleNoBlock (const
          char *name)
     This version of *note PyImport_ImportModule(): cd. does not block.
     It's intended to be used in C functions that import other modules
     to execute a function.  The import may block if another thread
     holds the import lock. The function *note
     PyImport_ImportModuleNoBlock(): cf. never blocks. It first tries
     to fetch the module from sys.modules and falls back to *note
     PyImport_ImportModule(): cd.  unless the lock is held, in which
     case the function will raise an `ImportError'.

 -- C Function: PyObject* PyImport_ImportModuleEx (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist)
     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function `__import__()', as the standard
     `__import__()' function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure.
     Like for `__import__()', the return value when a submodule of a
     package was requested is normally the top-level package, unless a
     non-empty _fromlist_ was given.

     Failing imports remove incomplete module objects, like with *note
     PyImport_ImportModule(): cd.

 -- C Function: PyObject* PyImport_ImportModuleLevel (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist,
          int level)
     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function `__import__()', as the standard
     `__import__()' function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure.
     Like for `__import__()', the return value when a submodule of a
     package was requested is normally the top-level package, unless a
     non-empty _fromlist_ was given.

 -- C Function: PyObject* PyImport_Import (PyObject *name)
     Return value: New reference.

     This is a higher-level interface that calls the current "import
     hook function" (with an explicit _level_ of 0, meaning absolute
     import).  It invokes the `__import__()' function from the
     `__builtins__' of the current globals.  This means that the import
     is done using whatever import hooks are installed in the current
     environment.

     This function always uses absolute imports.

 -- C Function: PyObject* PyImport_ReloadModule (PyObject *m)
     Return value: New reference.

     Reload a module.  Return a new reference to the reloaded module,
     or _NULL_ with an exception set on failure (the module still
     exists in this case).

 -- C Function: PyObject* PyImport_AddModule (const char *name)
     Return value: Borrowed reference.

     Return the module object corresponding to a module name.  The
     _name_ argument may be of the form `package.module'. First check
     the modules dictionary if there's one there, and if not, create a
     new one and insert it in the modules dictionary. Return _NULL_
     with an exception set on failure.

          Note: This function does not load or import the module; if
          the module wasn't already loaded, you will get an empty
          module object. Use *note PyImport_ImportModule(): cd.  or one
          of its variants to import a module.  Package structures
          implied by a dotted name for _name_ are not created if not
          already present.

 -- C Function: PyObject* PyImport_ExecCodeModule (char *name,
          PyObject *co)
     Return value: New reference.

     Given a module name (possibly of the form `package.module') and a
     code object read from a Python bytecode file or obtained from the
     built-in function `compile()', load the module.  Return a new
     reference to the module object, or _NULL_ with an exception set if
     an error occurred.  _name_ is removed from `sys.modules' in error
     cases, even if _name_ was already in `sys.modules' on entry to
     *note PyImport_ExecCodeModule(): d4.  Leaving incompletely
     initialized modules in `sys.modules' is dangerous, as imports of
     such modules have no way to know that the module object is an
     unknown (and probably damaged with respect to the module author's
     intents) state.

     The module's `__file__' attribute will be set to the code object's
     `co_filename'.

     This function will reload the module if it was already imported.
     See *note PyImport_ReloadModule(): d2. for the intended way to
     reload a module.

     If _name_ points to a dotted name of the form `package.module',
     any package structures not already created will still not be
     created.

     See also *note PyImport_ExecCodeModuleEx(): d5. and *note
     PyImport_ExecCodeModuleWithPathnames(): d6.

 -- C Function: PyObject* PyImport_ExecCodeModuleEx (char *name,
          PyObject *co, char *pathname)
     Return value: New reference.

     Like *note PyImport_ExecCodeModule(): d4, but the `__file__'
     attribute of the module object is set to _pathname_ if it is
     non-`NULL'.

     See also *note PyImport_ExecCodeModuleWithPathnames(): d6.

 -- C Function: PyObject* PyImport_ExecCodeModuleWithPathnames
          (char *name, PyObject *co, char *pathname, char *cpathname)
     Like *note PyImport_ExecCodeModuleEx(): d5, but the `__cached__'
     attribute of the module object is set to _cpathname_ if it is
     non-`NULL'.  Of the three functions, this is the preferred one to
     use.

     New in version 3.2.

 -- C Function: long PyImport_GetMagicNumber ()
     Return the magic number for Python bytecode files (a.k.a. `.pyc'
     and `.pyo' files).  The magic number should be present in the
     first four bytes of the bytecode file, in little-endian byte order.

 -- C Function: const char * PyImport_GetMagicTag ()
     Return the magic tag string for PEP 3147(1) format Python bytecode
     file names.

     New in version 3.2.

 -- C Function: PyObject* PyImport_GetModuleDict ()
     Return value: Borrowed reference.

     Return the dictionary used for the module administration (a.k.a.
     `sys.modules').  Note that this is a per-interpreter variable.

 -- C Function: PyObject* PyImport_GetImporter (PyObject *path)
     Return an importer object for a `sys.path'/`pkg.__path__' item
     _path_, possibly by fetching it from the `sys.path_importer_cache'
     dict.  If it wasn't yet cached, traverse `sys.path_hooks' until a
     hook is found that can handle the path item.  Return `None' if no
     hook could; this tells our caller it should fall back to the
     built-in import mechanism.  Cache the result in
     `sys.path_importer_cache'.  Return a new reference to the importer
     object.

 -- C Function: void _PyImport_Init ()
     Initialize the import mechanism.  For internal use only.

 -- C Function: void PyImport_Cleanup ()
     Empty the module table.  For internal use only.

 -- C Function: void _PyImport_Fini ()
     Finalize the import mechanism.  For internal use only.

 -- C Function: PyObject* _PyImport_FindExtension (char *, char *)
     For internal use only.

 -- C Function: PyObject* _PyImport_FixupExtension (char *, char *)
     For internal use only.

 -- C Function: int PyImport_ImportFrozenModule (char *name)
     Load a frozen module named _name_.  Return `1' for success, `0' if
     the module is not found, and `-1' with an exception set if the
     initialization failed.  To access the imported module on a
     successful load, use *note PyImport_ImportModule(): cd.  (Note the
     misnomer -- this function would reload the module if it was
     already imported.)

 -- C Type: struct _frozen
     This is the structure type definition for frozen module
     descriptors, as generated by the *freeze* utility (see
     `Tools/freeze/' in the Python source distribution).  Its
     definition, found in `Include/import.h', is:

         struct _frozen {
             char *name;
             unsigned char *code;
             int size;
         };



 -- C Variable: struct _frozen* PyImport_FrozenModules
     This pointer is initialized to point to an array of `struct
     _frozen' records, terminated by one whose members are all _NULL_
     or zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

 -- C Function: int PyImport_AppendInittab (const char *name,
          PyObject* (*initfunc)(void))
     Add a single module to the existing table of built-in modules.
     This is a convenience wrapper around *note
     PyImport_ExtendInittab(): e4, returning `-1' if the table could
     not be extended.  The new module can be imported by the name
     _name_, and uses the function _initfunc_ as the initialization
     function called on the first attempted import.  This should be
     called before *note Py_Initialize(): 27.

 -- C Type: struct _inittab
     Structure describing a single entry in the list of built-in
     modules.  Each of these structures gives the name and
     initialization function for a module built into the interpreter.
     Programs which embed Python may use an array of these structures
     in conjunction with *note PyImport_ExtendInittab(): e4. to provide
     additional built-in modules.  The structure is defined in
     `Include/import.h' as:

         struct _inittab {
             char *name;
             PyObject* (*initfunc)(void);
         };



 -- C Function: int PyImport_ExtendInittab (struct _inittab *newtab)
     Add a collection of modules to the table of built-in modules.  The
     _newtab_ array must end with a sentinel entry which contains
     _NULL_ for the `name' field; failure to provide the sentinel value
     can result in a memory fault.  Returns `0' on success or `-1' if
     insufficient memory could be allocated to extend the internal
     table.  In the event of failure, no modules are added to the
     internal table.  This should be called before *note
     Py_Initialize(): 27.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3147


File: python-c-api-3.2.2.info,  Node: Data marshalling support,  Next: Parsing arguments and building values,  Prev: Importing Modules,  Up: Utilities

5.5 Data marshalling support
============================

These routines allow C code to work with serialized objects using the
same data format as the `marshal' module.  There are functions to write
data into the serialization format, and additional functions that can
be used to read the data back.  Files used to store marshalled data
must be opened in binary mode.

  Numeric values are stored with the least significant byte first.

  The module supports two versions of the data format: version 0 is the
historical version, version 1 shares interned strings in the file, and
upon unmarshalling.  Version 2 uses a binary format for floating point
numbers.  _Py_MARSHAL_VERSION_ indicates the current file format
(currently 2).

 -- C Function: void PyMarshal_WriteLongToFile (long value, FILE *file,
          int version)
     Marshal a `long' integer, _value_, to _file_.  This will only write
     the least-significant 32 bits of _value_; regardless of the size
     of the native `long' type.  _version_ indicates the file format.

 -- C Function: void PyMarshal_WriteObjectToFile (PyObject *value,
          FILE *file, int version)
     Marshal a Python object, _value_, to _file_.  _version_ indicates
     the file format.

 -- C Function: PyObject* PyMarshal_WriteObjectToString
          (PyObject *value, int version)
     Return value: New reference.

     Return a string object containing the marshalled representation of
     _value_.  _version_ indicates the file format.

  The following functions allow marshalled values to be read back in.

  XXX What about error detection?  It appears that reading past the end
of the file will always result in a negative numeric value (where
that's relevant), but it's not clear that negative values won't be
handled properly when there's no error.  What's the right way to tell?
Should only non-negative values be written using these routines?

 -- C Function: long PyMarshal_ReadLongFromFile (FILE *file)
     Return a C `long' from the data stream in a `FILE*' opened for
     reading.  Only a 32-bit value can be read in using this function,
     regardless of the native size of `long'.

 -- C Function: int PyMarshal_ReadShortFromFile (FILE *file)
     Return a C `short' from the data stream in a `FILE*' opened for
     reading.  Only a 16-bit value can be read in using this function,
     regardless of the native size of `short'.

 -- C Function: PyObject* PyMarshal_ReadObjectFromFile (FILE *file)
     Return value: New reference.

     Return a Python object from the data stream in a `FILE*' opened for
     reading.  On error, sets the appropriate exception (`EOFError' or
     `TypeError') and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadLastObjectFromFile (FILE *file)
     Return value: New reference.

     Return a Python object from the data stream in a `FILE*' opened for
     reading.  Unlike *note PyMarshal_ReadObjectFromFile(): ee, this
     function assumes that no further objects will be read from the
     file, allowing it to aggressively load file data into memory so
     that the de-serialization can operate from data in memory rather
     than reading a byte at a time from the file.  Only use these
     variant if you are certain that you won't be reading anything else
     from the file.  On error, sets the appropriate exception
     (`EOFError' or `TypeError') and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadObjectFromString (char *string,
          Py_ssize_t len)
     Return value: New reference.

     Return a Python object from the data stream in a character buffer
     containing _len_ bytes pointed to by _string_.  On error, sets the
     appropriate exception (`EOFError' or `TypeError') and returns
     _NULL_.


File: python-c-api-3.2.2.info,  Node: Parsing arguments and building values,  Next: String conversion and formatting,  Prev: Data marshalling support,  Up: Utilities

5.6 Parsing arguments and building values
=========================================

These functions are useful when creating your own extensions functions
and methods.  Additional information and examples are available in
_extending-index_.

  The first three of these functions described, *note
PyArg_ParseTuple(): f4, *note PyArg_ParseTupleAndKeywords(): f5, and
*note PyArg_Parse(): f6, all use _format strings_ which are used to
tell the function about the expected arguments.  The format strings use
the same syntax for each of these functions.

* Menu:

* Parsing arguments::
* Building values::

Parsing arguments

* Strings and buffers::
* Numbers::
* Other objects::
* API Functions::


File: python-c-api-3.2.2.info,  Node: Parsing arguments,  Next: Building values,  Up: Parsing arguments and building values

5.6.1 Parsing arguments
-----------------------

A format string consists of zero or more "format units."  A format unit
describes one Python object; it is usually a single character or a
parenthesized sequence of format units.  With a few exceptions, a
format unit that is not a parenthesized sequence normally corresponds
to a single address argument to these functions.  In the following
description, the quoted form is the format unit; the entry in (round)
parentheses is the Python object type that matches the format unit; and
the entry in [square] brackets is the type of the C variable(s) whose
address should be passed.

* Menu:

* Strings and buffers::
* Numbers::
* Other objects::
* API Functions::


File: python-c-api-3.2.2.info,  Node: Strings and buffers,  Next: Numbers,  Up: Parsing arguments

5.6.1.1 Strings and buffers
...........................

These formats allow to access an object as a contiguous chunk of memory.
You don't have to provide raw storage for the returned unicode or bytes
area.  Also, you won't have to release any memory yourself, except with
the `es', `es#', `et' and `et#' formats.

  However, when a *note Py_buffer: f9. structure gets filled, the
underlying buffer is locked so that the caller can subsequently use the
buffer even inside a *note Py_BEGIN_ALLOW_THREADS: fa. block without
the risk of mutable data being resized or destroyed.  As a result, *you
have to call* *note PyBuffer_Release(): fb. after you have finished
processing the data (or in any early abort case).

  Unless otherwise stated, buffers are not NUL-terminated.

`s' (`str') [const char *]
     Convert a Unicode object to a C pointer to a character string.  A
     pointer to an existing string is stored in the character pointer
     variable whose address you pass.  The C string is NUL-terminated.
     The Python string must not contain embedded NUL bytes; if it does,
     a `TypeError' exception is raised. Unicode objects are converted
     to C strings using `'utf-8'' encoding. If this conversion fails, a
     `UnicodeError' is raised.

          Note: This format does not accept bytes-like objects.  If you
          want to accept filesystem paths and convert them to C
          character strings, it is preferable to use the `O&' format
          with *note PyUnicode_FSConverter(): fc.  as _converter_.

`s*' (`str', `bytes', `bytearray' or buffer compatible object) [Py_buffer]
     This format accepts Unicode objects as well as objects supporting
     the buffer protocol.  It fills a *note Py_buffer: f9. structure
     provided by the caller.  In this case the resulting C string may
     contain embedded NUL bytes.  Unicode objects are converted to C
     strings using `'utf-8'' encoding.

`s#' (`str', `bytes' or read-only buffer compatible object) [const char *, int or `Py_ssize_t']
     Like `s*', except that it doesn't accept mutable buffer-like
     objects such as `bytearray'.  The result is stored into two C
     variables, the first one a pointer to a C string, the second one
     its length.  The string may contain embedded null bytes. Unicode
     objects are converted to C strings using `'utf-8'' encoding.

`z' (`str' or `None') [const char *]
     Like `s', but the Python object may also be `None', in which case
     the C pointer is set to _NULL_.

`z*' (`str', `bytes', `bytearray', buffer compatible object or `None') [Py_buffer]
     Like `s*', but the Python object may also be `None', in which case
     the `buf' member of the *note Py_buffer: f9. structure is set to
     _NULL_.

`z#' (`str', `bytes', read-only buffer compatible object or `None') [const char *, int]
     Like `s#', but the Python object may also be `None', in which case
     the C pointer is set to _NULL_.

`y' (`bytes') [const char *]
     This format converts a bytes-like object to a C pointer to a
     character string; it does not accept Unicode objects.  The bytes
     buffer must not contain embedded NUL bytes; if it does, a
     `TypeError' exception is raised.

`y*' (`bytes', `bytearray' or buffer compatible object) [Py_buffer]
     This variant on `s*' doesn't accept Unicode objects, only objects
     supporting the buffer protocol.  *This is the recommended way to
     accept binary data.*

`y#' (`bytes') [const char *, int]
     This variant on `s#' doesn't accept Unicode objects, only
     bytes-like objects.

`S' (`bytes') [PyBytesObject *]
     Requires that the Python object is a `bytes' object, without
     attempting any conversion.  Raises `TypeError' if the object is not
     a bytes object.  The C variable may also be declared as *note
     PyObject*: a.

`Y' (`bytearray') [PyByteArrayObject *]
     Requires that the Python object is a `bytearray' object, without
     attempting any conversion.  Raises `TypeError' if the object is not
     a `bytearray' object. The C variable may also be declared as *note
     PyObject*: a.

`u' (`str') [Py_UNICODE *]
     Convert a Python Unicode object to a C pointer to a NUL-terminated
     buffer of Unicode characters.  You must pass the address of a
     *note Py_UNICODE: fd.  pointer variable, which will be filled with
     the pointer to an existing Unicode buffer.  Please note that the
     width of a *note Py_UNICODE: fd.  character depends on compilation
     options (it is either 16 or 32 bits).  The Python string must not
     contain embedded NUL characters; if it does, a `TypeError'
     exception is raised.

          Note: Since `u' doesn't give you back the length of the
          string, and it may contain embedded NUL characters, it is
          recommended to use `u#' or `U' instead.

`u#' (`str') [Py_UNICODE *, int]
     This variant on `u' stores into two C variables, the first one a
     pointer to a Unicode data buffer, the second one its length.

`Z' (`str' or `None') [Py_UNICODE *]
     Like `u', but the Python object may also be `None', in which case
     the *note Py_UNICODE: fd. pointer is set to _NULL_.

`Z#' (`str' or `None') [Py_UNICODE *, int]
     Like `u#', but the Python object may also be `None', in which case
     the *note Py_UNICODE: fd. pointer is set to _NULL_.

`U' (`str') [PyUnicodeObject *]
     Requires that the Python object is a Unicode object, without
     attempting any conversion.  Raises `TypeError' if the object is
     not a Unicode object.  The C variable may also be declared as
     *note PyObject*: a.

`w*' (`bytearray' or read-write byte-oriented buffer) [Py_buffer]
     This format accepts any object which implements the read-write
     buffer interface. It fills a *note Py_buffer: f9. structure
     provided by the caller.  The buffer may contain embedded null
     bytes. The caller have to call *note PyBuffer_Release(): fb. when
     it is done with the buffer.

`es' (`str') [const char *encoding, char **buffer]
     This variant on `s' is used for encoding Unicode into a character
     buffer.  It only works for encoded data without embedded NUL bytes.

     This format requires two arguments.  The first is only used as
     input, and must be a `const char*' which points to the name of an
     encoding as a NUL-terminated string, or _NULL_, in which case
     `'utf-8'' encoding is used.  An exception is raised if the named
     encoding is not known to Python.  The second argument must be a
     `char**'; the value of the pointer it references will be set to a
     buffer with the contents of the argument text.  The text will be
     encoded in the encoding specified by the first argument.

     *note PyArg_ParseTuple(): f4. will allocate a buffer of the needed
     size, copy the encoded data into this buffer and adjust _*buffer_
     to reference the newly allocated storage.  The caller is
     responsible for calling *note PyMem_Free(): fe. to free the
     allocated buffer after use.

`et' (`str', `bytes' or `bytearray') [const char *encoding, char **buffer]
     Same as `es' except that byte string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the byte string object uses the encoding passed in as parameter.

`es#' (`str') [const char *encoding, char **buffer, int *buffer_length]
     This variant on `s#' is used for encoding Unicode into a character
     buffer.  Unlike the `es' format, this variant allows input data
     which contains NUL characters.

     It requires three arguments.  The first is only used as input, and
     must be a `const char*' which points to the name of an encoding as
     a NUL-terminated string, or _NULL_, in which case `'utf-8''
     encoding is used.  An exception is raised if the named encoding is
     not known to Python.  The second argument must be a `char**'; the
     value of the pointer it references will be set to a buffer with
     the contents of the argument text.  The text will be encoded in
     the encoding specified by the first argument.  The third argument
     must be a pointer to an integer; the referenced integer will be
     set to the number of bytes in the output buffer.

     There are two modes of operation:

     If _*buffer_ points a _NULL_ pointer, the function will allocate a
     buffer of the needed size, copy the encoded data into this buffer
     and set _*buffer_ to reference the newly allocated storage.  The
     caller is responsible for calling *note PyMem_Free(): fe. to free
     the allocated buffer after usage.

     If _*buffer_ points to a non-_NULL_ pointer (an already allocated
     buffer), *note PyArg_ParseTuple(): f4. will use this location as
     the buffer and interpret the initial value of _*buffer_length_ as
     the buffer size.  It will then copy the encoded data into the
     buffer and NUL-terminate it.  If the buffer is not large enough, a
     `ValueError' will be set.

     In both cases, _*buffer_length_ is set to the length of the
     encoded data without the trailing NUL byte.

`et#' (`str', `bytes' or `bytearray') [const char *encoding, char **buffer, int *buffer_length]
     Same as `es#' except that byte string objects are passed through
     without recoding them. Instead, the implementation assumes that
     the byte string object uses the encoding passed in as parameter.


File: python-c-api-3.2.2.info,  Node: Numbers,  Next: Other objects,  Prev: Strings and buffers,  Up: Parsing arguments

5.6.1.2 Numbers
...............

`b' (`int') [unsigned char]
     Convert a nonnegative Python integer to an unsigned tiny int,
     stored in a C `unsigned char'.

`B' (`int') [unsigned char]
     Convert a Python integer to a tiny int without overflow checking,
     stored in a C `unsigned char'.

`h' (`int') [short int]
     Convert a Python integer to a C `short int'.

`H' (`int') [unsigned short int]
     Convert a Python integer to a C `unsigned short int', without
     overflow checking.

`i' (`int') [int]
     Convert a Python integer to a plain C `int'.

`I' (`int') [unsigned int]
     Convert a Python integer to a C `unsigned int', without overflow
     checking.

`l' (`int') [long int]
     Convert a Python integer to a C `long int'.

`k' (`int') [unsigned long]
     Convert a Python integer to a C `unsigned long' without overflow
     checking.

`L' (`int') [PY_LONG_LONG]
     Convert a Python integer to a C `long long'.  This format is only
     available on platforms that support `long long' (or `_int64' on
     Windows).

`K' (`int') [unsigned PY_LONG_LONG]
     Convert a Python integer to a C `unsigned long long' without
     overflow checking.  This format is only available on platforms that
     support `unsigned long long' (or `unsigned _int64' on Windows).

`n' (`int') [Py_ssize_t]
     Convert a Python integer to a C `Py_ssize_t'.

`c' (`bytes' of length 1) [char]
     Convert a Python byte, represented as a `bytes' object of length 1,
     to a C `char'.

`C' (`str' of length 1) [int]
     Convert a Python character, represented as a `str' object of
     length 1, to a C `int'.

`f' (`float') [float]
     Convert a Python floating point number to a C `float'.

`d' (`float') [double]
     Convert a Python floating point number to a C `double'.

`D' (`complex') [Py_complex]
     Convert a Python complex number to a C *note Py_complex: 100.
     structure.


File: python-c-api-3.2.2.info,  Node: Other objects,  Next: API Functions,  Prev: Numbers,  Up: Parsing arguments

5.6.1.3 Other objects
.....................

`O' (object) [PyObject *]
     Store a Python object (without any conversion) in a C object
     pointer.  The C program thus receives the actual object that was
     passed.  The object's reference count is not increased.  The
     pointer stored is not _NULL_.

`O!' (object) [_typeobject_, PyObject *]
     Store a Python object in a C object pointer.  This is similar to
     `O', but takes two C arguments: the first is the address of a
     Python type object, the second is the address of the C variable
     (of type *note PyObject*: a.) into which the object pointer is
     stored.  If the Python object does not have the required type,
     `TypeError' is raised.

`O&' (object) [_converter_, _anything_]
     Convert a Python object to a C variable through a _converter_
     function.  This takes two arguments: the first is a function, the
     second is the address of a C variable (of arbitrary type),
     converted to `void *'.  The _converter_ function in turn is called
     as follows:

         status = converter(object, address);

     where _object_ is the Python object to be converted and _address_
     is the `void*' argument that was passed to the *note
     PyArg_Parse*(): f6. function.  The returned _status_ should be `1'
     for a successful conversion and `0' if the conversion has failed.
     When the conversion fails, the _converter_ function should raise
     an exception and leave the content of _address_ unmodified.

     If the _converter_ returns `Py_CLEANUP_SUPPORTED', it may get
     called a second time if the argument parsing eventually fails,
     giving the converter a chance to release any memory that it had
     already allocated. In this second call, the _object_ parameter
     will be NULL; _address_ will have the same value as in the
     original call.

     Changed in version 3.1: `Py_CLEANUP_SUPPORTED' was added.

`(items)' (`tuple') [_matching-items_]
     The object must be a Python sequence whose length is the number of
     format units in _items_.  The C arguments must correspond to the
     individual format units in _items_.  Format units for sequences
     may be nested.

  It is possible to pass "long" integers (integers whose value exceeds
the platform's `LONG_MAX') however no proper range checking is done --
the most significant bits are silently truncated when the receiving
field is too small to receive the value (actually, the semantics are
inherited from downcasts in C -- your mileage may vary).

  A few other characters have a meaning in a format string.  These may
not occur inside nested parentheses.  They are:

`|'
     Indicates that the remaining arguments in the Python argument list
     are optional.  The C variables corresponding to optional arguments
     should be initialized to their default value -- when an optional
     argument is not specified, *note PyArg_ParseTuple(): f4. does not
     touch the contents of the corresponding C variable(s).

`:'
     The list of format units ends here; the string after the colon is
     used as the function name in error messages (the "associated
     value" of the exception that *note PyArg_ParseTuple(): f4. raises).

`;'
     The list of format units ends here; the string after the semicolon
     is used as the error message _instead_ of the default error
     message.  `:' and `;' mutually exclude each other.

  Note that any Python object references which are provided to the
caller are _borrowed_ references; do not decrement their reference
count!

  Additional arguments passed to these functions must be addresses of
variables whose type is determined by the format string; these are used
to store values from the input tuple.  There are a few cases, as
described in the list of format units above, where these parameters are
used as input values; they should match what is specified for the
corresponding format unit in that case.

  For the conversion to succeed, the _arg_ object must match the format
and the format must be exhausted.  On success, the *note
PyArg_Parse*(): f6. functions return true, otherwise they return false
and raise an appropriate exception. When the *note PyArg_Parse*(): f6.
functions fail due to conversion failure in one of the format units,
the variables at the addresses corresponding to that and the following
format units are left untouched.


File: python-c-api-3.2.2.info,  Node: API Functions,  Prev: Other objects,  Up: Parsing arguments

5.6.1.4 API Functions
.....................

 -- C Function: int PyArg_ParseTuple (PyObject *args, const
          char *format, ...)
     Parse the parameters of a function that takes only positional
     parameters into local variables.  Returns true on success; on
     failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParse (PyObject *args, const char *format,
          va_list vargs)
     Identical to *note PyArg_ParseTuple(): f4, except that it accepts
     a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[], ...)
     Parse the parameters of a function that takes both positional and
     keyword parameters into local variables.  Returns true on success;
     on failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[],
          va_list vargs)
     Identical to *note PyArg_ParseTupleAndKeywords(): f5, except that
     it accepts a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ValidateKeywordArguments (PyObject *)
     Ensure that the keys in the keywords argument dictionary are
     strings.  This is only needed if *note
     PyArg_ParseTupleAndKeywords(): f5. is not used, since the latter
     already does this check.

     New in version 3.2.

 -- C Function: int PyArg_Parse (PyObject *args, const char *format,
          ...)
     Function used to deconstruct the argument lists of "old-style"
     functions -- these are functions which use the `METH_OLDARGS'
     parameter parsing method.  This is not recommended for use in
     parameter parsing in new code, and most code in the standard
     interpreter has been modified to no longer use this for that
     purpose.  It does remain a convenient way to decompose other
     tuples, however, and may continue to be used for that purpose.

 -- C Function: int PyArg_UnpackTuple (PyObject *args, const
          char *name, Py_ssize_t min, Py_ssize_t max, ...)
     A simpler form of parameter retrieval which does not use a format
     string to specify the types of the arguments.  Functions which use
     this method to retrieve their parameters should be declared as
     *note METH_VARARGS: 107. in function or method tables.  The tuple
     containing the actual parameters should be passed as _args_; it
     must actually be a tuple.  The length of the tuple must be at least
     _min_ and no more than _max_; _min_ and _max_ may be equal.
     Additional arguments must be passed to the function, each of which
     should be a pointer to a *note PyObject*: a. variable; these will
     be filled in with the values from _args_; they will contain
     borrowed references.  The variables which correspond to optional
     parameters not given by _args_ will not be filled in; these should
     be initialized by the caller. This function returns true on
     success and false if _args_ is not a tuple or contains the wrong
     number of elements; an exception will be set if there was a
     failure.

     This is an example of the use of this function, taken from the
     sources for the `_weakref' helper module for weak references:

         static PyObject *
         weakref_ref(PyObject *self, PyObject *args)
         {
             PyObject *object;
             PyObject *callback = NULL;
             PyObject *result = NULL;

             if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                 result = PyWeakref_NewRef(object, callback);
             }
             return result;
         }

     The call to *note PyArg_UnpackTuple(): 106. in this example is
     entirely equivalent to this call to *note PyArg_ParseTuple(): f4.:

         PyArg_ParseTuple(args, "O|O:ref", &object, &callback)




File: python-c-api-3.2.2.info,  Node: Building values,  Prev: Parsing arguments,  Up: Parsing arguments and building values

5.6.2 Building values
---------------------

 -- C Function: PyObject* Py_BuildValue (const char *format, ...)
     Return value: New reference.

     Create a new value based on a format string similar to those
     accepted by the *note PyArg_Parse*(): f6. family of functions and
     a sequence of values.  Returns the value or _NULL_ in the case of
     an error; an exception will be raised if _NULL_ is returned.

     *note Py_BuildValue(): 19. does not always build a tuple.  It
     builds a tuple only if its format string contains two or more
     format units.  If the format string is empty, it returns `None';
     if it contains exactly one format unit, it returns whatever object
     is described by that format unit.  To force it to return a tuple
     of size 0 or one, parenthesize the format string.

     When memory buffers are passed as parameters to supply data to
     build objects, as for the `s' and `s#' formats, the required data
     is copied.  Buffers provided by the caller are never referenced by
     the objects created by *note Py_BuildValue(): 19.  In other words,
     if your code invokes `malloc()' and passes the allocated memory to
     *note Py_BuildValue(): 19, your code is responsible for calling
     `free()' for that memory once *note Py_BuildValue(): 19. returns.

     In the following description, the quoted form is the format unit;
     the entry in (round) parentheses is the Python object type that
     the format unit will return; and the entry in [square] brackets is
     the type of the C value(s) to be passed.

     The characters space, tab, colon and comma are ignored in format
     strings (but not within format units such as `s#').  This can be
     used to make long format strings a tad more readable.

    `s' (`str' or `None') [char *]
          Convert a null-terminated C string to a Python `str' object
          using `'utf-8'' encoding. If the C string pointer is _NULL_,
          `None' is used.

    `s#' (`str' or `None') [char *, int]
          Convert a C string and its length to a Python `str' object
          using `'utf-8'' encoding. If the C string pointer is _NULL_,
          the length is ignored and `None' is returned.

    `y' (`bytes') [char *]
          This converts a C string to a Python `bytes()' object.  If
          the C string pointer is _NULL_, `None' is returned.

    `y#' (`bytes') [char *, int]
          This converts a C string and its lengths to a Python object.
          If the C string pointer is _NULL_, `None' is returned.

    `z' (`str' or `None') [char *]
          Same as `s'.

    `z#' (`str' or `None') [char *, int]
          Same as `s#'.

    `u' (`str') [Py_UNICODE *]
          Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
          data to a Python Unicode object.  If the Unicode buffer
          pointer is _NULL_, `None' is returned.

    `u#' (`str') [Py_UNICODE *, int]
          Convert a Unicode (UCS-2 or UCS-4) data buffer and its length
          to a Python Unicode object.   If the Unicode buffer pointer
          is _NULL_, the length is ignored and `None' is returned.

    `U' (`str' or `None') [char *]
          Same as `s'.

    `U#' (`str' or `None') [char *, int]
          Same as `s#'.

    `i' (`int') [int]
          Convert a plain C `int' to a Python integer object.

    `b' (`int') [char]
          Convert a plain C `char' to a Python integer object.

    `h' (`int') [short int]
          Convert a plain C `short int' to a Python integer object.

    `l' (`int') [long int]
          Convert a C `long int' to a Python integer object.

    `B' (`int') [unsigned char]
          Convert a C `unsigned char' to a Python integer object.

    `H' (`int') [unsigned short int]
          Convert a C `unsigned short int' to a Python integer object.

    `I' (`int') [unsigned int]
          Convert a C `unsigned int' to a Python integer object.

    `k' (`int') [unsigned long]
          Convert a C `unsigned long' to a Python integer object.

    `L' (`int') [PY_LONG_LONG]
          Convert a C `long long' to a Python integer object. Only
          available on platforms that support `long long' (or `_int64'
          on Windows).

    `K' (`int') [unsigned PY_LONG_LONG]
          Convert a C `unsigned long long' to a Python integer object.
          Only available on platforms that support `unsigned long long'
          (or `unsigned _int64' on Windows).

    `n' (`int') [Py_ssize_t]
          Convert a C `Py_ssize_t' to a Python integer.

    `c' (`bytes' of length 1) [char]
          Convert a C `int' representing a byte to a Python `bytes'
          object of length 1.

    `C' (`str' of length 1) [int]
          Convert a C `int' representing a character to Python `str'
          object of length 1.

    `d' (`float') [double]
          Convert a C `double' to a Python floating point number.

    `f' (`float') [float]
          Convert a C `float' to a Python floating point number.

    `D' (`complex') [Py_complex *]
          Convert a C *note Py_complex: 100. structure to a Python
          complex number.

    `O' (object) [PyObject *]
          Pass a Python object untouched (except for its reference
          count, which is incremented by one).  If the object passed in
          is a _NULL_ pointer, it is assumed that this was caused
          because the call producing the argument found an error and
          set an exception. Therefore, *note Py_BuildValue(): 19. will
          return _NULL_ but won't raise an exception.  If no exception
          has been raised yet, `SystemError' is set.

    `S' (object) [PyObject *]
          Same as `O'.

    `N' (object) [PyObject *]
          Same as `O', except it doesn't increment the reference count
          on the object.  Useful when the object is created by a call
          to an object constructor in the argument list.

    `O&' (object) [_converter_, _anything_]
          Convert _anything_ to a Python object through a _converter_
          function.  The function is called with _anything_ (which
          should be compatible with `void *') as its argument and
          should return a "new" Python object, or _NULL_ if an error
          occurred.

    `(items)' (`tuple') [_matching-items_]
          Convert a sequence of C values to a Python tuple with the
          same number of items.

    `[items]' (`list') [_matching-items_]
          Convert a sequence of C values to a Python list with the same
          number of items.

    `{items}' (`dict') [_matching-items_]
          Convert a sequence of C values to a Python dictionary.  Each
          pair of consecutive C values adds one item to the dictionary,
          serving as key and value, respectively.

     If there is an error in the format string, the `SystemError'
     exception is set and _NULL_ returned.

 -- C Function: PyObject* Py_VaBuildValue (const char *format,
          va_list vargs)
     Identical to *note Py_BuildValue(): 19, except that it accepts a
     va_list rather than a variable number of arguments.


File: python-c-api-3.2.2.info,  Node: String conversion and formatting,  Next: Reflection,  Prev: Parsing arguments and building values,  Up: Utilities

5.7 String conversion and formatting
====================================

Functions for number conversion and formatted string output.

 -- C Function: int PyOS_snprintf (char *str, size_t size, const
          char *format, ...)
     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the extra arguments. See the Unix man page
     `snprintf(2)'.

 -- C Function: int PyOS_vsnprintf (char *str, size_t size, const
          char *format, va_list va)
     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the variable argument list _va_. Unix man page
     `vsnprintf(2)'.

  *note PyOS_snprintf(): 10d. and *note PyOS_vsnprintf(): 10e. wrap the
Standard C library functions `snprintf()' and `vsnprintf()'. Their
purpose is to guarantee consistent behavior in corner cases, which the
Standard C functions do not.

  The wrappers ensure that _str*[*size_-1] is always `'\0'' upon
return. They never write more than _size_ bytes (including the trailing
`'\0'') into str.  Both functions require that `str != NULL', `size >
0' and `format != NULL'.

  If the platform doesn't have `vsnprintf()' and the buffer size needed
to avoid truncation exceeds _size_ by more than 512 bytes, Python
aborts with a _Py_FatalError_.

  The return value (_rv_) for these functions should be interpreted as
follows:

   * When `0 <= rv < size', the output conversion was successful and
     _rv_ characters were written to _str_ (excluding the trailing
     `'\0'' byte at _str*[*rv_]).

   * When `rv >= size', the output conversion was truncated and a
     buffer with `rv + 1' bytes would have been needed to succeed.
     _str*[*size_-1] is `'\0'' in this case.

   * When `rv < 0', "something bad happened." _str*[*size_-1] is `'\0''
     in this case too, but the rest of _str_ is undefined. The exact
     cause of the error depends on the underlying platform.

  The following functions provide locale-independent string to number
conversions.

 -- C Function: double PyOS_string_to_double (const char *s,
          char **endptr, PyObject *overflow_exception)
     Convert a string `s' to a `double', raising a Python exception on
     failure.  The set of accepted strings corresponds to the set of
     strings accepted by Python's `float()' constructor, except that
     `s' must not have leading or trailing whitespace.  The conversion
     is independent of the current locale.

     If `endptr' is `NULL', convert the whole string.  Raise ValueError
     and return `-1.0' if the string is not a valid representation of a
     floating-point number.

     If endptr is not `NULL', convert as much of the string as possible
     and set `*endptr' to point to the first unconverted character.  If
     no initial segment of the string is the valid representation of a
     floating-point number, set `*endptr' to point to the beginning of
     the string, raise ValueError, and return `-1.0'.

     If `s' represents a value that is too large to store in a float
     (for example, `"1e500"' is such a string on many platforms) then
     if `overflow_exception' is `NULL' return `Py_HUGE_VAL' (with an
     appropriate sign) and don't set any exception.  Otherwise,
     `overflow_exception' must point to a Python exception object;
     raise that exception and return `-1.0'.  In both cases, set
     `*endptr' to point to the first character after the converted
     value.

     If any other error occurs during the conversion (for example an
     out-of-memory error), set the appropriate Python exception and
     return `-1.0'.

     New in version 3.1.

 -- C Function: char* PyOS_double_to_string (double val,
          char format_code, int precision, int flags, int *ptype)
     Convert a `double' _val_ to a string using supplied _format_code_,
     _precision_, and _flags_.

     _format_code_ must be one of `'e'', `'E'', `'f'', `'F'', `'g'',
     `'G'' or `'r''.  For `'r'', the supplied _precision_ must be 0 and
     is ignored.  The `'r'' format code specifies the standard `repr()'
     format.

     _flags_ can be zero or more of the values _Py_DTSF_SIGN_,
     _Py_DTSF_ADD_DOT_0_, or _Py_DTSF_ALT_, or-ed together:

        * _Py_DTSF_SIGN_ means to always precede the returned string
          with a sign character, even if _val_ is non-negative.

        * _Py_DTSF_ADD_DOT_0_ means to ensure that the returned string
          will not look like an integer.

        * _Py_DTSF_ALT_ means to apply "alternate" formatting rules.
          See the documentation for the *note PyOS_snprintf(): 10d.
          `'#'' specifier for details.

     If _ptype_ is non-NULL, then the value it points to will be set to
     one of _Py_DTST_FINITE_, _Py_DTST_INFINITE_, or _Py_DTST_NAN_,
     signifying that _val_ is a finite number, an infinite number, or
     not a number, respectively.

     The return value is a pointer to _buffer_ with the converted
     string or _NULL_ if the conversion failed. The caller is
     responsible for freeing the returned string by calling *note
     PyMem_Free(): fe.

     New in version 3.1.

 -- C Function: char* PyOS_stricmp (char *s1, char *s2)
     Case insensitive comparison of strings. The function works almost
     identically to `strcmp()' except that it ignores the case.

 -- C Function: char* PyOS_strnicmp (char *s1, char *s2, Py_ssize_t
           size)
     Case insensitive comparison of strings. The function works almost
     identically to `strncmp()' except that it ignores the case.


File: python-c-api-3.2.2.info,  Node: Reflection,  Next: Codec registry and support functions,  Prev: String conversion and formatting,  Up: Utilities

5.8 Reflection
==============

 -- C Function: PyObject* PyEval_GetBuiltins ()
     Return value: Borrowed reference.

     Return a dictionary of the builtins in the current execution frame,
     or the interpreter of the thread state if no frame is currently
     executing.

 -- C Function: PyObject* PyEval_GetLocals ()
     Return value: Borrowed reference.

     Return a dictionary of the local variables in the current
     execution frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyObject* PyEval_GetGlobals ()
     Return value: Borrowed reference.

     Return a dictionary of the global variables in the current
     execution frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyFrameObject* PyEval_GetFrame ()
     Return value: Borrowed reference.

     Return the current thread state's frame, which is _NULL_ if no
     frame is currently executing.

 -- C Function: int PyFrame_GetLineNumber (PyFrameObject *frame)
     Return the line number that _frame_ is currently executing.

 -- C Function: const char* PyEval_GetFuncName (PyObject *func)
     Return the name of _func_ if it is a function, class or instance
     object, else the name of _func_s type.

 -- C Function: const char* PyEval_GetFuncDesc (PyObject *func)
     Return a description string, depending on the type of _func_.
     Return values include "()" for functions and methods, "
     constructor", " instance", and " object".  Concatenated with the
     result of *note PyEval_GetFuncName(): 11b, the result will be a
     description of _func_.


File: python-c-api-3.2.2.info,  Node: Codec registry and support functions,  Prev: Reflection,  Up: Utilities

5.9 Codec registry and support functions
========================================

 -- C Function: int PyCodec_Register (PyObject *search_function)
     Register a new codec search function.

     As side effect, this tries to load the `encodings' package, if not
     yet done, to make sure that it is always first in the list of
     search functions.

 -- C Function: int PyCodec_KnownEncoding (const char *encoding)
     Return `1' or `0' depending on whether there is a registered codec
     for the given _encoding_.

 -- C Function: PyObject* PyCodec_Encode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based encoding API.

     _object_ is passed through the encoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a `LookupError' if no encoder can be found.

 -- C Function: PyObject* PyCodec_Decode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based decoding API.

     _object_ is passed through the decoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a `LookupError' if no encoder can be found.

* Menu:

* Codec lookup API::
* Registry API for Unicode encoding error handlers::


File: python-c-api-3.2.2.info,  Node: Codec lookup API,  Next: Registry API for Unicode encoding error handlers,  Up: Codec registry and support functions

5.9.1 Codec lookup API
----------------------

In the following functions, the _encoding_ string is looked up
converted to all lower-case characters, which makes encodings looked up
through this mechanism effectively case-insensitive.  If no codec is
found, a `KeyError' is set and _NULL_ returned.

 -- C Function: PyObject* PyCodec_Encoder (const char *encoding)
     Get an encoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_Decoder (const char *encoding)
     Get a decoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalEncoder (const
          char *encoding, const char *errors)
     Get an `IncrementalEncoder' object for the given _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalDecoder (const
          char *encoding, const char *errors)
     Get an `IncrementalDecoder' object for the given _encoding_.

 -- C Function: PyObject* PyCodec_StreamReader (const char *encoding,
          PyObject *stream, const char *errors)
     Get a `StreamReader' factory function for the given _encoding_.

 -- C Function: PyObject* PyCodec_StreamWriter (const char *encoding,
          PyObject *stream, const char *errors)
     Get a `StreamWriter' factory function for the given _encoding_.


File: python-c-api-3.2.2.info,  Node: Registry API for Unicode encoding error handlers,  Prev: Codec lookup API,  Up: Codec registry and support functions

5.9.2 Registry API for Unicode encoding error handlers
------------------------------------------------------

 -- C Function: int PyCodec_RegisterError (const char *name,
          PyObject *error)
     Register the error handling callback function _error_ under the
     given _name_.  This callback function will be called by a codec
     when it encounters unencodable characters/undecodable bytes and
     _name_ is specified as the error parameter in the call to the
     encode/decode function.

     The callback gets a single argument, an instance of
     `UnicodeEncodeError', `UnicodeDecodeError' or
     `UnicodeTranslateError' that holds information about the
     problematic sequence of characters or bytes and their offset in
     the original string (see *note Unicode Exception Objects: 88. for
     functions to extract this information).  The callback must either
     raise the given exception, or return a two-item tuple containing
     the replacement for the problematic sequence, and an integer
     giving the offset in the original string at which
     encoding/decoding should be resumed.

     Return `0' on success, `-1' on error.

 -- C Function: PyObject* PyCodec_LookupError (const char *name)
     Lookup the error handling callback function registered under
     _name_.  As a special case _NULL_ can be passed, in which case the
     error handling callback for "strict" will be returned.

 -- C Function: PyObject* PyCodec_StrictErrors (PyObject *exc)
     Raise _exc_ as an exception.

 -- C Function: PyObject* PyCodec_IgnoreErrors (PyObject *exc)
     Ignore the unicode error, skipping the faulty input.

 -- C Function: PyObject* PyCodec_ReplaceErrors (PyObject *exc)
     Replace the unicode encode error with `?' or `U+FFFD'.

 -- C Function: PyObject* PyCodec_XMLCharRefReplaceErrors
          (PyObject *exc)
     Replace the unicode encode error with XML character references.

 -- C Function: PyObject* PyCodec_BackslashReplaceErrors (PyObject *exc)
     Replace the unicode encode error with backslash escapes (`\x',
     `\u' and `\U').


File: python-c-api-3.2.2.info,  Node: Abstract Objects Layer,  Next: Concrete Objects Layer,  Prev: Utilities,  Up: Top

6 Abstract Objects Layer
************************

The functions in this chapter interact with Python objects regardless
of their type, or with wide classes of object types (e.g. all numerical
types, or all sequence types).  When used on object types for which
they do not apply, they will raise a Python exception.

  It is not possible to use these functions on objects that are not
properly initialized, such as a list object that has been created by
*note PyList_New(): 18, but whose items have not been set to some
non-`NULL' value yet.

* Menu:

* Object Protocol::
* Number Protocol::
* Sequence Protocol::
* Mapping Protocol::
* Iterator Protocol::
* Buffer Protocol::
* Old Buffer Protocol::


File: python-c-api-3.2.2.info,  Node: Object Protocol,  Next: Number Protocol,  Up: Abstract Objects Layer

6.1 Object Protocol
===================

 -- C Function: int PyObject_Print (PyObject *o, FILE *fp, int flags)
     Print an object _o_, on file _fp_.  Returns `-1' on error.  The
     flags argument is used to enable certain printing options.  The
     only option currently supported is `Py_PRINT_RAW'; if given, the
     `str()' of the object is written instead of the `repr()'.

 -- C Function: int PyObject_HasAttr (PyObject *o, PyObject *attr_name)
     Returns `1' if _o_ has the attribute _attr_name_, and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: int PyObject_HasAttrString (PyObject *o, const
          char *attr_name)
     Returns `1' if _o_ has the attribute _attr_name_, and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: PyObject* PyObject_GetAttr (PyObject *o,
          PyObject *attr_name)
     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_. Returns
     the attribute value on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GetAttrString (PyObject *o, const
          char *attr_name)
     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_. Returns
     the attribute value on success, or _NULL_ on failure. This is the
     equivalent of the Python expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GenericGetAttr (PyObject *o,
          PyObject *name)
     Generic attribute getter function that is meant to be put into a
     type object's `tp_getattro' slot.  It looks for a descriptor in
     the dictionary of classes in the object's MRO as well as an
     attribute in the object's `__dict__' (if present).  As outlined in
     _descriptors_, data descriptors take preference over instance
     attributes, while non-data descriptors don't.  Otherwise, an
     `AttributeError' is raised.

 -- C Function: int PyObject_SetAttr (PyObject *o, PyObject *attr_name,
          PyObject *v)
     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_. Returns `-1' on failure.  This is the equivalent
     of the Python statement `o.attr_name = v'.

 -- C Function: int PyObject_SetAttrString (PyObject *o, const
          char *attr_name, PyObject *v)
     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_. Returns `-1' on failure.  This is the equivalent
     of the Python statement `o.attr_name = v'.

 -- C Function: int PyObject_GenericSetAttr (PyObject *o,
          PyObject *name, PyObject *value)
     Generic attribute setter function that is meant to be put into a
     type object's `tp_setattro' slot.  It looks for a data descriptor
     in the dictionary of classes in the object's MRO, and if found it
     takes preference over setting the attribute in the instance
     dictionary. Otherwise, the attribute is set in the object's
     `__dict__' (if present).  Otherwise, an `AttributeError' is raised
     and `-1' is returned.

 -- C Function: int PyObject_DelAttr (PyObject *o, PyObject *attr_name)
     Delete attribute named _attr_name_, for object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: int PyObject_DelAttrString (PyObject *o, const
          char *attr_name)
     Delete attribute named _attr_name_, for object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: PyObject* PyObject_RichCompare (PyObject *o1,
          PyObject *o2, int opid)
     Return value: New reference.

     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of `Py_LT', `Py_LE', `Py_EQ',
     `Py_NE', `Py_GT', or `Py_GE', corresponding to `<', `<=', `==',
     `!=', `>', or `>=' respectively. This is the equivalent of the
     Python expression `o1 op o2', where `op' is the operator
     corresponding to _opid_. Returns the value of the comparison on
     success, or _NULL_ on failure.

 -- C Function: int PyObject_RichCompareBool (PyObject *o1,
          PyObject *o2, int opid)
     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of `Py_LT', `Py_LE', `Py_EQ',
     `Py_NE', `Py_GT', or `Py_GE', corresponding to `<', `<=', `==',
     `!=', `>', or `>=' respectively. Returns `-1' on error, `0' if the
     result is false, `1' otherwise. This is the equivalent of the
     Python expression `o1 op o2', where `op' is the operator
     corresponding to _opid_.

     Note: If _o1_ and _o2_ are the same object, *note
     PyObject_RichCompareBool(): 145.  will always return `1' for
     `Py_EQ' and `0' for `Py_NE'.

 -- C Function: PyObject* PyObject_Repr (PyObject *o)
     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression `repr(o)'.  Called by the
     `repr()' built-in function.

 -- C Function: PyObject* PyObject_ASCII (PyObject *o)
     As *note PyObject_Repr(): 146, compute a string representation of
     object _o_, but escape the non-ASCII characters in the string
     returned by *note PyObject_Repr(): 146. with `\x', `\u' or `\U'
     escapes.  This generates a string similar to that returned by
     *note PyObject_Repr(): 146. in Python 2.  Called by the `ascii()'
     built-in function.

 -- C Function: PyObject* PyObject_Str (PyObject *o)
     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression `str(o)'.  Called by the
     `str()' built-in function and, therefore, by the `print()'
     function.

 -- C Function: PyObject* PyObject_Bytes (PyObject *o)
     Compute a bytes representation of object _o_.  _NULL_ is returned
     on failure and a bytes object on success.  This is equivalent to
     the Python expression `bytes(o)', when _o_ is not an integer.
     Unlike `bytes(o)', a TypeError is raised when _o_ is an integer
     instead of a zero-initialized bytes object.

 -- C Function: int PyObject_IsInstance (PyObject *inst, PyObject *cls)
     Returns `1' if _inst_ is an instance of the class _cls_ or a
     subclass of _cls_, or `0' if not.  On error, returns `-1' and sets
     an exception.  If _cls_ is a type object rather than a class
     object, *note PyObject_IsInstance(): 14a.  returns `1' if _inst_
     is of type _cls_.  If _cls_ is a tuple, the check will be done
     against every entry in _cls_. The result will be `1' when at least
     one of the checks returns `1', otherwise it will be `0'. If _inst_
     is not a class instance and _cls_ is neither a type object, nor a
     class object, nor a tuple, _inst_ must have a `__class__'
     attribute -- the class relationship of the value of that attribute
     with _cls_ will be used to determine the result of this function.

  Subclass determination is done in a fairly straightforward way, but
includes a wrinkle that implementors of extensions to the class system
may want to be aware of.  If `A' and `B' are class objects, `B' is a
subclass of `A' if it inherits from `A' either directly or indirectly.
If either is not a class object, a more general mechanism is used to
determine the class relationship of the two objects.  When testing if
_B_ is a subclass of _A_, if _A_ is _B_, *note PyObject_IsSubclass():
14b. returns true.  If _A_ and _B_ are different objects, _B_'s
`__bases__' attribute is searched in a depth-first fashion for _A_ --
the presence of the `__bases__' attribute is considered sufficient for
this determination.

 -- C Function: int PyObject_IsSubclass (PyObject *derived,
          PyObject *cls)
     Returns `1' if the class _derived_ is identical to or derived from
     the class _cls_, otherwise returns `0'.  In case of an error,
     returns `-1'. If _cls_ is a tuple, the check will be done against
     every entry in _cls_. The result will be `1' when at least one of
     the checks returns `1', otherwise it will be `0'. If either
     _derived_ or _cls_ is not an actual class object (or tuple), this
     function uses the generic algorithm described above.

 -- C Function: int PyCallable_Check (PyObject *o)
     Determine if the object _o_ is callable.  Return `1' if the object
     is callable and `0' otherwise.  This function always succeeds.

 -- C Function: PyObject* PyObject_Call (PyObject *callable_object,
          PyObject *args, PyObject *kw)
     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_, and named arguments given by the
     dictionary _kw_. If no named arguments are needed, _kw_ may be
     _NULL_. _args_ must not be _NULL_, use an empty tuple if no
     arguments are needed. Returns the result of the call on success,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `callable_object(*args, **kw)'.

 -- C Function: PyObject* PyObject_CallObject
          (PyObject *callable_object, PyObject *args)
     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_.  If no arguments are needed, then
     _args_ may be _NULL_.  Returns the result of the call on success,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `callable_object(*args)'.

 -- C Function: PyObject* PyObject_CallFunction (PyObject *callable,
          char *format, ...)
     Return value: New reference.

     Call a callable Python object _callable_, with a variable number
     of C arguments.  The C arguments are described using a *note
     Py_BuildValue(): 19. style format string.  The format may be
     _NULL_, indicating that no arguments are provided.  Returns the
     result of the call on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `callable(*args)'. Note that
     if you only pass *note PyObject *: a. args, *note
     PyObject_CallFunctionObjArgs(): 150. is a faster alternative.

 -- C Function: PyObject* PyObject_CallMethod (PyObject *o,
          char *method, char *format, ...)
     Return value: New reference.

     Call the method named _method_ of object _o_ with a variable
     number of C arguments.  The C arguments are described by a *note
     Py_BuildValue(): 19. format string that should  produce a tuple.
     The format may be _NULL_, indicating that no arguments are
     provided. Returns the result of the call on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression
     `o.method(args)'.  Note that if you only pass *note PyObject *: a.
     args, *note PyObject_CallMethodObjArgs(): 152. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallFunctionObjArgs
          (PyObject *callable, ..., NULL)
     Return value: New reference.

     Call a callable Python object _callable_, with a variable number of
     *note PyObject*: a. arguments.  The arguments are provided as a
     variable number of parameters followed by _NULL_. Returns the
     result of the call on success, or _NULL_ on failure.

 -- C Function: PyObject* PyObject_CallMethodObjArgs (PyObject *o,
          PyObject *name, ..., NULL)
     Return value: New reference.

     Calls a method of the object _o_, where the name of the method is
     given as a Python string object in _name_.  It is called with a
     variable number of *note PyObject*: a. arguments.  The arguments
     are provided as a variable number of parameters followed by
     _NULL_. Returns the result of the call on success, or _NULL_ on
     failure.

 -- C Function: Py_hash_t PyObject_Hash (PyObject *o)
     Compute and return the hash value of an object _o_.  On failure,
     return `-1'.  This is the equivalent of the Python expression
     `hash(o)'.

     Changed in version 3.2: The return type is now Py_hash_t.  This is
     a signed integer the same size as Py_ssize_t.

 -- C Function: Py_hash_t PyObject_HashNotImplemented (PyObject *o)
     Set a `TypeError' indicating that `type(o)' is not hashable and
     return `-1'.  This function receives special treatment when stored
     in a `tp_hash' slot, allowing a type to explicitly indicate to the
     interpreter that it is not hashable.

 -- C Function: int PyObject_IsTrue (PyObject *o)
     Returns `1' if the object _o_ is considered to be true, and `0'
     otherwise.  This is equivalent to the Python expression `not not
     o'.  On failure, return `-1'.

 -- C Function: int PyObject_Not (PyObject *o)
     Returns `0' if the object _o_ is considered to be true, and `1'
     otherwise.  This is equivalent to the Python expression `not o'.
     On failure, return `-1'.

 -- C Function: PyObject* PyObject_Type (PyObject *o)
     Return value: New reference.

     When _o_ is non-_NULL_, returns a type object corresponding to the
     object type of object _o_. On failure, raises `SystemError' and
     returns _NULL_.  This is equivalent to the Python expression
     `type(o)'. This function increments the reference count of the
     return value. There's really no reason to use this function
     instead of the common expression `o->ob_type', which returns a
     pointer of type *note PyTypeObject*: b, except when the
     incremented reference count is needed.

 -- C Function: int PyObject_TypeCheck (PyObject *o, PyTypeObject *type)
     Return true if the object _o_ is of type _type_ or a subtype of
     _type_.  Both parameters must be non-_NULL_.

 -- C Function: Py_ssize_t PyObject_Length (PyObject *o)
 -- C Function: Py_ssize_t PyObject_Size (PyObject *o)
     Return the length of object _o_.  If the object _o_ provides
     either the sequence and mapping protocols, the sequence length is
     returned.  On error, `-1' is returned.  This is the equivalent to
     the Python expression `len(o)'.

 -- C Function: PyObject* PyObject_GetItem (PyObject *o, PyObject *key)
     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     `o[key]'.

 -- C Function: int PyObject_SetItem (PyObject *o, PyObject *key,
          PyObject *v)
     Map the object _key_ to the value _v_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `o[key] = v'.

 -- C Function: int PyObject_DelItem (PyObject *o, PyObject *key)
     Delete the mapping for _key_ from _o_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[key]'.

 -- C Function: PyObject* PyObject_Dir (PyObject *o)
     Return value: New reference.

     This is equivalent to the Python expression `dir(o)', returning a
     (possibly empty) list of strings appropriate for the object
     argument, or _NULL_ if there was an error.  If the argument is
     _NULL_, this is like the Python `dir()', returning the names of
     the current locals; in this case, if no execution frame is active
     then _NULL_ is returned but *note PyErr_Occurred(): 21. will
     return false.

 -- C Function: PyObject* PyObject_GetIter (PyObject *o)
     Return value: New reference.

     This is equivalent to the Python expression `iter(o)'. It returns
     a new iterator for the object argument, or the object  itself if
     the object is already an iterator.  Raises `TypeError' and returns
     _NULL_ if the object cannot be iterated.


File: python-c-api-3.2.2.info,  Node: Number Protocol,  Next: Sequence Protocol,  Prev: Object Protocol,  Up: Abstract Objects Layer

6.2 Number Protocol
===================

 -- C Function: int PyNumber_Check (PyObject *o)
     Returns `1' if the object _o_ provides numeric protocols, and
     false otherwise.  This function always succeeds.

 -- C Function: PyObject* PyNumber_Add (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     This is the equivalent of the Python expression `o1 + o2'.

 -- C Function: PyObject* PyNumber_Subtract (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 -
     o2'.

 -- C Function: PyObject* PyNumber_Multiply (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 *
     o2'.

 -- C Function: PyObject* PyNumber_FloorDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return the floor of _o1_ divided by _o2_, or _NULL_ on failure.
     This is equivalent to the "classic" division of integers.

 -- C Function: PyObject* PyNumber_TrueDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.

 -- C Function: PyObject* PyNumber_Remainder (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 %
     o2'.

 -- C Function: PyObject* PyNumber_Divmod (PyObject *o1, PyObject *o2)
     Return value: New reference.

     See the built-in function `divmod()'. Returns _NULL_ on failure.
     This is the equivalent of the Python expression `divmod(o1, o2)'.

 -- C Function: PyObject* PyNumber_Power (PyObject *o1, PyObject *o2,
          PyObject *o3)
     Return value: New reference.

     See the built-in function `pow()'. Returns _NULL_ on failure.
     This is the equivalent of the Python expression `pow(o1, o2, o3)',
     where _o3_ is optional.  If _o3_ is to be ignored, pass *note
     Py_None: 16a. in its place (passing _NULL_ for _o3_ would cause an
     illegal memory access).

 -- C Function: PyObject* PyNumber_Negative (PyObject *o)
     Return value: New reference.

     Returns the negation of _o_ on success, or _NULL_ on failure. This
     is the equivalent of the Python expression `-o'.

 -- C Function: PyObject* PyNumber_Positive (PyObject *o)
     Return value: New reference.

     Returns _o_ on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `+o'.

 -- C Function: PyObject* PyNumber_Absolute (PyObject *o)
     Return value: New reference.

     Returns the absolute value of _o_, or _NULL_ on failure.  This is
     the equivalent of the Python expression `abs(o)'.

 -- C Function: PyObject* PyNumber_Invert (PyObject *o)
     Return value: New reference.

     Returns the bitwise negation of _o_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression `~o'.

 -- C Function: PyObject* PyNumber_Lshift (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 << o2'.

 -- C Function: PyObject* PyNumber_Rshift (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 >> o2'.

 -- C Function: PyObject* PyNumber_And (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_
     on failure.  This is the equivalent of the Python expression `o1 &
     o2'.

 -- C Function: PyObject* PyNumber_Xor (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 ^ o2'.

 -- C Function: PyObject* PyNumber_Or (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 |
     o2'.

 -- C Function: PyObject* PyNumber_InPlaceAdd (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     The operation is done _in-place_ when _o1_ supports it.  This is
     the equivalent of the Python statement `o1 += o2'.

 -- C Function: PyObject* PyNumber_InPlaceSubtract (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 -= o2'.

 -- C Function: PyObject* PyNumber_InPlaceMultiply (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 *= o2'.

 -- C Function: PyObject* PyNumber_InPlaceFloorDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the mathematical floor of dividing _o1_ by _o2_, or _NULL_
     on failure.  The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python statement `o1 //= o2'.

 -- C Function: PyObject* PyNumber_InPlaceTrueDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.  The operation is done _in-place_ when _o1_
     supports it.

 -- C Function: PyObject* PyNumber_InPlaceRemainder (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 %= o2'.

 -- C Function: PyObject* PyNumber_InPlacePower (PyObject *o1,
          PyObject *o2, PyObject *o3)
     Return value: New reference.

     See the built-in function `pow()'. Returns _NULL_ on failure.  The
     operation is done _in-place_ when _o1_ supports it.  This is the
     equivalent of the Python statement `o1 **= o2' when o3 is *note
     Py_None: 16a, or an in-place variant of `pow(o1, o2, o3)'
     otherwise. If _o3_ is to be ignored, pass *note Py_None: 16a.  in
     its place (passing _NULL_ for _o3_ would cause an illegal memory
     access).

 -- C Function: PyObject* PyNumber_InPlaceLshift (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     <<= o2'.

 -- C Function: PyObject* PyNumber_InPlaceRshift (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     >>= o2'.

 -- C Function: PyObject* PyNumber_InPlaceAnd (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_
     on failure. The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python statement `o1 &= o2'.

 -- C Function: PyObject* PyNumber_InPlaceXor (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     ^= o2'.

 -- C Function: PyObject* PyNumber_InPlaceOr (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 |= o2'.

 -- C Function: PyObject* PyNumber_Long (PyObject *o)
     Return value: New reference.

     Returns the _o_ converted to an integer object on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `int(o)'.

 -- C Function: PyObject* PyNumber_Float (PyObject *o)
     Return value: New reference.

     Returns the _o_ converted to a float object on success, or _NULL_
     on failure.  This is the equivalent of the Python expression
     `float(o)'.

 -- C Function: PyObject* PyNumber_Index (PyObject *o)
     Returns the _o_ converted to a Python int on success or _NULL_
     with a `TypeError' exception raised on failure.

 -- C Function: PyObject* PyNumber_ToBase (PyObject *n, int base)
     Returns the integer _n_ converted to _base_ as a string with a base
     marker of `'0b'', `'0o'', or `'0x'' if applicable.  When _base_ is
     not 2, 8, 10, or 16, the format is `'x#num'' where x is the base.
     If _n_ is not an int object, it is converted with *note
     PyNumber_Index(): 182. first.

 -- C Function: Py_ssize_t PyNumber_AsSsize_t (PyObject *o,
          PyObject *exc)
     Returns _o_ converted to a Py_ssize_t value if _o_ can be
     interpreted as an integer.  If the call fails, an exception is
     raised and -1 is returned.

     If _o_ can be converted to a Python int but the attempt to convert
     to a Py_ssize_t value would raise an `OverflowError', then the
     _exc_ argument is the type of exception that will be raised
     (usually `IndexError' or `OverflowError').  If _exc_ is _NULL_,
     then the exception is cleared and the value is clipped to
     _PY_SSIZE_T_MIN_ for a negative integer or _PY_SSIZE_T_MAX_ for a
     positive integer.

 -- C Function: int PyIndex_Check (PyObject *o)
     Returns True if _o_ is an index integer (has the nb_index slot of
     the tp_as_number structure filled in).


File: python-c-api-3.2.2.info,  Node: Sequence Protocol,  Next: Mapping Protocol,  Prev: Number Protocol,  Up: Abstract Objects Layer

6.3 Sequence Protocol
=====================

 -- C Function: int PySequence_Check (PyObject *o)
     Return `1' if the object provides sequence protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PySequence_Size (PyObject *o)
 -- C Function: Py_ssize_t PySequence_Length (PyObject *o)
     Returns the number of objects in sequence _o_ on success, and `-1'
     on failure.  For objects that do not provide sequence protocol,
     this is equivalent to the Python expression `len(o)'.

 -- C Function: PyObject* PySequence_Concat (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_
     on failure.  This is the equivalent of the Python expression `o1 +
     o2'.

 -- C Function: PyObject* PySequence_Repeat (PyObject *o,
          Py_ssize_t count)
     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `o * count'.

 -- C Function: PyObject* PySequence_InPlaceConcat (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_
     on failure.  The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python expression `o1 += o2'.

 -- C Function: PyObject* PySequence_InPlaceRepeat (PyObject *o,
          Py_ssize_t count)
     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  The operation is done _in-place_ when _o_
     supports it.  This is the equivalent of the Python expression `o
     *= count'.

 -- C Function: PyObject* PySequence_GetItem (PyObject *o, Py_ssize_t i)
     Return value: New reference.

     Return the _i_th element of _o_, or _NULL_ on failure. This is the
     equivalent of the Python expression `o[i]'.

 -- C Function: PyObject* PySequence_GetSlice (PyObject *o,
          Py_ssize_t i1, Py_ssize_t i2)
     Return value: New reference.

     Return the slice of sequence object _o_ between _i1_ and _i2_, or
     _NULL_ on failure. This is the equivalent of the Python expression
     `o[i1:i2]'.

 -- C Function: int PySequence_SetItem (PyObject *o, Py_ssize_t i,
          PyObject *v)
     Assign object _v_ to the _i_th element of _o_.  Returns `-1' on
     failure.  This is the equivalent of the Python statement `o[i] =
     v'.  This function _does not_ steal a reference to _v_.

 -- C Function: int PySequence_DelItem (PyObject *o, Py_ssize_t i)
     Delete the _i_th element of object _o_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[i]'.

 -- C Function: int PySequence_SetSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2, PyObject *v)
     Assign the sequence object _v_ to the slice in sequence object _o_
     from _i1_ to _i2_.  This is the equivalent of the Python statement
     `o[i1:i2] = v'.

 -- C Function: int PySequence_DelSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2)
     Delete the slice in sequence object _o_ from _i1_ to _i2_.
     Returns `-1' on failure.  This is the equivalent of the Python
     statement `del o[i1:i2]'.

 -- C Function: Py_ssize_t PySequence_Count (PyObject *o,
          PyObject *value)
     Return the number of occurrences of _value_ in _o_, that is,
     return the number of keys for which `o[key] == value'.  On
     failure, return `-1'.  This is equivalent to the Python expression
     `o.count(value)'.

 -- C Function: int PySequence_Contains (PyObject *o, PyObject *value)
     Determine if _o_ contains _value_.  If an item in _o_ is equal to
     _value_, return `1', otherwise return `0'. On error, return `-1'.
     This is equivalent to the Python expression `value in o'.

 -- C Function: Py_ssize_t PySequence_Index (PyObject *o,
          PyObject *value)
     Return the first index _i_ for which `o[i] == value'.  On error,
     return `-1'.    This is equivalent to the Python expression
     `o.index(value)'.

 -- C Function: PyObject* PySequence_List (PyObject *o)
     Return value: New reference.

     Return a list object with the same contents as the arbitrary
     sequence _o_.  The returned list is guaranteed to be new.

 -- C Function: PyObject* PySequence_Tuple (PyObject *o)
     Return value: New reference.

     Return a tuple object with the same contents as the arbitrary
     sequence _o_ or _NULL_ on failure.  If _o_ is a tuple, a new
     reference will be returned, otherwise a tuple will be constructed
     with the appropriate contents.  This is equivalent to the Python
     expression `tuple(o)'.

 -- C Function: PyObject* PySequence_Fast (PyObject *o, const char *m)
     Return value: New reference.

     Returns the sequence _o_ as a tuple, unless it is already a tuple
     or list, in which case _o_ is returned.  Use *note
     PySequence_Fast_GET_ITEM(): 19a. to access the members of the
     result.  Returns _NULL_ on failure.  If the object is not a
     sequence, raises `TypeError' with _m_ as the message text.

 -- C Function: PyObject* PySequence_Fast_GET_ITEM (PyObject *o,
          Py_ssize_t i)
     Return value: Borrowed reference.

     Return the _i_th element of _o_, assuming that _o_ was returned by
     *note PySequence_Fast(): 199, _o_ is not _NULL_, and that _i_ is
     within bounds.

 -- C Function: PyObject** PySequence_Fast_ITEMS (PyObject *o)
     Return the underlying array of PyObject pointers.  Assumes that
     _o_ was returned by *note PySequence_Fast(): 199. and _o_ is not
     _NULL_.

     Note, if a list gets resized, the reallocation may relocate the
     items array.  So, only use the underlying array pointer in
     contexts where the sequence cannot change.

 -- C Function: PyObject* PySequence_ITEM (PyObject *o, Py_ssize_t i)
     Return value: New reference.

     Return the _i_th element of _o_ or _NULL_ on failure. Macro form of
     *note PySequence_GetItem(): 1b. but without checking that *note
     PySequence_Check(): 189. on _o_ is true and without adjustment for
     negative indices.

 -- C Function: Py_ssize_t PySequence_Fast_GET_SIZE (PyObject *o)
     Returns the length of _o_, assuming that _o_ was returned by *note
     PySequence_Fast(): 199. and that _o_ is not _NULL_.  The size can
     also be gotten by calling *note PySequence_Size(): 18a. on _o_, but
     *note PySequence_Fast_GET_SIZE(): 19d. is faster because it can
     assume _o_ is a list or tuple.


File: python-c-api-3.2.2.info,  Node: Mapping Protocol,  Next: Iterator Protocol,  Prev: Sequence Protocol,  Up: Abstract Objects Layer

6.4 Mapping Protocol
====================

 -- C Function: int PyMapping_Check (PyObject *o)
     Return `1' if the object provides mapping protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PyMapping_Size (PyObject *o)
 -- C Function: Py_ssize_t PyMapping_Length (PyObject *o)
     Returns the number of keys in object _o_ on success, and `-1' on
     failure.  For objects that do not provide mapping protocol, this
     is equivalent to the Python expression `len(o)'.

 -- C Function: int PyMapping_DelItemString (PyObject *o, char *key)
     Remove the mapping for object _key_ from the object _o_. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_DelItem (PyObject *o, PyObject *key)
     Remove the mapping for object _key_ from the object _o_. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_HasKeyString (PyObject *o, char *key)
     On success, return `1' if the mapping object has the key _key_ and
     `0' otherwise.  This is equivalent to the Python expression `key
     in o'.  This function always succeeds.

 -- C Function: int PyMapping_HasKey (PyObject *o, PyObject *key)
     Return `1' if the mapping object has the key _key_ and `0'
     otherwise.  This is equivalent to the Python expression `key in
     o'.  This function always succeeds.

 -- C Function: PyObject* PyMapping_Keys (PyObject *o)
     Return value: New reference.

     On success, return a list of the keys in object _o_.  On failure,
     return _NULL_.  This is equivalent to the Python expression
     `list(o.keys())'.

 -- C Function: PyObject* PyMapping_Values (PyObject *o)
     Return value: New reference.

     On success, return a list of the values in object _o_.  On
     failure, return _NULL_. This is equivalent to the Python
     expression `list(o.values())'.

 -- C Function: PyObject* PyMapping_Items (PyObject *o)
     Return value: New reference.

     On success, return a list of the items in object _o_, where each
     item is a tuple containing a key-value pair.  On failure, return
     _NULL_. This is equivalent to the Python expression
     `list(o.items())'.

 -- C Function: PyObject* PyMapping_GetItemString (PyObject *o,
          char *key)
     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     `o[key]'.

 -- C Function: int PyMapping_SetItemString (PyObject *o, char *key,
          PyObject *v)
     Map the object _key_ to the value _v_ in object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement
     `o[key] = v'.


File: python-c-api-3.2.2.info,  Node: Iterator Protocol,  Next: Buffer Protocol,  Prev: Mapping Protocol,  Up: Abstract Objects Layer

6.5 Iterator Protocol
=====================

There are only a couple of functions specifically for working with
iterators.

 -- C Function: int PyIter_Check (PyObject *o)
     Return true if the object _o_ supports the iterator protocol.

 -- C Function: PyObject* PyIter_Next (PyObject *o)
     Return value: New reference.

     Return the next value from the iteration _o_.  If the object is an
     iterator, this retrieves the next value from the iteration, and
     returns _NULL_ with no exception set if there are no remaining
     items.  If the object is not an iterator, `TypeError' is raised,
     or if there is an error in retrieving the item, returns _NULL_ and
     passes along the exception.

  To write a loop which iterates over an iterator, the C code should
look something like this:

    PyObject *iterator = PyObject_GetIter(obj);
    PyObject *item;

    if (iterator == NULL) {
        /* propagate error */
    }

    while (item = PyIter_Next(iterator)) {
        /* do something with item */
        ...
        /* release reference when done */
        Py_DECREF(item);
    }

    Py_DECREF(iterator);

    if (PyErr_Occurred()) {
        /* propagate error */
    }
    else {
        /* continue doing useful work */
    }



File: python-c-api-3.2.2.info,  Node: Buffer Protocol,  Next: Old Buffer Protocol,  Prev: Iterator Protocol,  Up: Abstract Objects Layer

6.6 Buffer Protocol
===================

Certain objects available in Python wrap access to an underlying memory
array or _buffer_.  Such objects include the built-in `bytes' and
`bytearray', and some extension types like `array.array'.  Third-party
libraries may define their own types for special purposes, such as
image processing or numeric analysis.

  While each of these types have their own semantics, they share the
common characteristic of being backed by a possibly large memory
buffer.  It is then desireable, in some situations, to access that
buffer directly and without intermediate copying.

  Python provides such a facility at the C level in the form of the
_buffer protocol_.  This protocol has two sides:

   - on the producer side, a type can export a "buffer interface" which
     allows objects of that type to expose information about their
     underlying buffer.  This interface is described in the section
     *note Buffer Object Structures: 1b5.;

   - on the consumer side, several means are available to obtain a
     pointer to the raw underlying data of an object (for example a
     method parameter).

  Simple objects such as `bytes' and `bytearray' expose their
underlying buffer in byte-oriented form.  Other forms are possible; for
example, the elements exposed by a `array.array' can be multi-byte
values.

  An example consumer of the buffer interface is the `write()' method
of file objects: any object that can export a series of bytes through
the buffer interface can be written to a file.  While `write()' only
needs read-only access to the internal contents of the object passed to
it, other methods such as `readinto()' need write access to the
contents of their argument.  The buffer interface allows objects to
selectively allow or reject exporting of read-write and read-only
buffers.

  There are two ways for a consumer of the buffer interface to acquire
a buffer over a target object:

   * call *note PyObject_GetBuffer(): 1b6. with the right parameters;

   * call *note PyArg_ParseTuple(): f4. (or one of its siblings) with
     one of the `y*', `w*' or `s*' *note format codes: f1.

  In both cases, *note PyBuffer_Release(): fb. must be called when the
buffer isn't needed anymore.  Failure to do so could lead to various
issues such as resource leaks.

* Menu:

* The buffer structure::
* Buffer-related functions::


File: python-c-api-3.2.2.info,  Node: The buffer structure,  Next: Buffer-related functions,  Up: Buffer Protocol

6.6.1 The buffer structure
--------------------------

Buffer structures (or simply "buffers") are useful as a way to expose
the binary data from another object to the Python programmer.  They can
also be used as a zero-copy slicing mechanism.  Using their ability to
reference a block of memory, it is possible to expose any data to the
Python programmer quite easily.  The memory could be a large, constant
array in a C extension, it could be a raw block of memory for
manipulation before passing to an operating system library, or it could
be used to pass around structured data in its native, in-memory format.

  Contrary to most data types exposed by the Python interpreter, buffers
are not *note PyObject: a. pointers but rather simple C structures.
This allows them to be created and copied very simply.  When a generic
wrapper around a buffer is needed, a *note memoryview: 1b8. object can
be created.

 -- C Type: Py_buffer
      -- C Member: void *buf
          A pointer to the start of the memory for the object.

      -- C Member: Py_ssize_t len
          The total length of the memory in bytes.

      -- C Member: int readonly
          An indicator of whether the buffer is read only.

      -- C Member: const char *format
          A _NULL_ terminated string in `struct' module style syntax
          giving the contents of the elements available through the
          buffer.  If this is _NULL_, `"B"' (unsigned bytes) is assumed.

      -- C Member: int ndim
          The number of dimensions the memory represents as a
          multi-dimensional array.  If it is 0, `strides' and
          `suboffsets' must be _NULL_.

      -- C Member: Py_ssize_t *shape
          An array of `Py_ssize_t's the length of `ndim' giving the
          shape of the memory as a multi-dimensional array.  Note that
          `((*shape)[0] * ... * (*shape)[ndims-1])*itemsize' should be
          equal to `len'.

      -- C Member: Py_ssize_t *strides
          An array of `Py_ssize_t's the length of `ndim' giving the
          number of bytes to skip to get to a new element in each
          dimension.

      -- C Member: Py_ssize_t *suboffsets
          An array of `Py_ssize_t's the length of `ndim'.  If these
          suboffset numbers are greater than or equal to 0, then the
          value stored along the indicated dimension is a pointer and
          the suboffset value dictates how many bytes to add to the
          pointer after de-referencing. A suboffset value that it
          negative indicates that no de-referencing should occur
          (striding in a contiguous memory block).

          Here is a function that returns a pointer to the element in
          an N-D array pointed to by an N-dimensional index when there
          are both non-NULL strides and suboffsets:

              void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                  Py_ssize_t *suboffsets, Py_ssize_t *indices) {
                  char *pointer = (char*)buf;
                  int i;
                  for (i = 0; i < ndim; i++) {
                      pointer += strides[i] * indices[i];
                      if (suboffsets[i] >=0 ) {
                          pointer = *((char**)pointer) + suboffsets[i];
                      }
                  }
                  return (void*)pointer;
               }



      -- C Member: Py_ssize_t itemsize
          This is a storage for the itemsize (in bytes) of each element
          of the shared memory. It is technically un-necessary as it
          can be obtained using *note PyBuffer_SizeFromFormat(): 1c0,
          however an exporter may know this information without parsing
          the format string and it is necessary to know the itemsize
          for proper interpretation of striding. Therefore, storing it
          is more convenient and faster.

      -- C Member: void *internal
          This is for use internally by the exporting object. For
          example, this might be re-cast as an integer by the exporter
          and used to store flags about whether or not the shape,
          strides, and suboffsets arrays must be freed when the buffer
          is released. The consumer should never alter this value.


File: python-c-api-3.2.2.info,  Node: Buffer-related functions,  Prev: The buffer structure,  Up: Buffer Protocol

6.6.2 Buffer-related functions
------------------------------

 -- C Function: int PyObject_CheckBuffer (PyObject *obj)
     Return 1 if _obj_ supports the buffer interface otherwise 0.  When
     1 is returned, it doesn't guarantee that *note
     PyObject_GetBuffer(): 1b6. will succeed.

 -- C Function: int PyObject_GetBuffer (PyObject *obj, Py_buffer *view,
          int flags)
     Export a view over some internal data from the target object _obj_.
     _obj_ must not be NULL, and _view_ must point to an existing *note
     Py_buffer: f9. structure allocated by the caller (most uses of
     this function will simply declare a local variable of type *note
     Py_buffer: f9.).  The _flags_ argument is a bit field indicating
     what kind of buffer is requested.  The buffer interface allows for
     complicated memory layout possibilities; however, some callers
     won't want to handle all the complexity and instead request a
     simple view of the target object (using *note PyBUF_SIMPLE: 1c4.
     for a read-only view and *note PyBUF_WRITABLE: 1c5. for a
     read-write view).

     Some exporters may not be able to share memory in every possible
     way and may need to raise errors to signal to some consumers that
     something is just not possible. These errors should be a
     `BufferError' unless there is another error that is actually
     causing the problem. The exporter can use flags information to
     simplify how much of the *note Py_buffer: f9. structure is filled
     in with non-default values and/or raise an error if the object
     can't support a simpler view of its memory.

     On success, 0 is returned and the _view_ structure is filled with
     useful values.  On error, -1 is returned and an exception is
     raised; the _view_ is left in an undefined state.

     The following are the possible values to the _flags_ arguments.

      -- C Macro: PyBUF_SIMPLE
          This is the default flag.  The returned buffer exposes a
          read-only memory area.  The format of data is assumed to be
          raw unsigned bytes, without any particular structure.  This
          is a "stand-alone" flag constant.  It never needs to be '|'d
          to the others.  The exporter will raise an error if it cannot
          provide such a contiguous buffer of bytes.

      -- C Macro: PyBUF_WRITABLE
          Like *note PyBUF_SIMPLE: 1c4, but the returned buffer is
          writable.  If the exporter doesn't support writable buffers,
          an error is raised.

      -- C Macro: PyBUF_STRIDES
          This implies *note PyBUF_ND: 1c7.  The returned buffer must
          provide strides information (i.e. the strides cannot be
          NULL).  This would be used when the consumer can handle
          strided, discontiguous arrays.  Handling strides
          automatically assumes you can handle shape.  The exporter can
          raise an error if a strided representation of the data is not
          possible (i.e. without the suboffsets).

      -- C Macro: PyBUF_ND
          The returned buffer must provide shape information.  The
          memory will be assumed C-style contiguous (last dimension
          varies the fastest).  The exporter may raise an error if it
          cannot provide this kind of contiguous buffer.  If this is
          not given then shape will be _NULL_.

      -- C Macro: PyBUF_C_CONTIGUOUS
      -- C Macro: PyBUF_F_CONTIGUOUS
      -- C Macro: PyBUF_ANY_CONTIGUOUS
          These flags indicate that the contiguity returned buffer must
          be respectively, C-contiguous (last dimension varies the
          fastest), Fortran contiguous (first dimension varies the
          fastest) or either one.  All of these flags imply *note
          PyBUF_STRIDES: 1c6. and guarantee that the strides buffer
          info structure will be filled in correctly.

      -- C Macro: PyBUF_INDIRECT
          This flag indicates the returned buffer must have suboffsets
          information (which can be NULL if no suboffsets are needed).
          This can be used when the consumer can handle indirect array
          referencing implied by these suboffsets. This implies *note
          PyBUF_STRIDES: 1c6.

      -- C Macro: PyBUF_FORMAT
          The returned buffer must have true format information if this
          flag is provided.  This would be used when the consumer is
          going to be checking for what 'kind' of data is actually
          stored.  An exporter should always be able to provide this
          information if requested.  If format is not explicitly
          requested then the format must be returned as _NULL_ (which
          means `'B'', or unsigned bytes).

      -- C Macro: PyBUF_STRIDED
          This is equivalent to `(PyBUF_STRIDES | PyBUF_WRITABLE)'.

      -- C Macro: PyBUF_STRIDED_RO
          This is equivalent to `(PyBUF_STRIDES)'.

      -- C Macro: PyBUF_RECORDS
          This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT |
          PyBUF_WRITABLE)'.

      -- C Macro: PyBUF_RECORDS_RO
          This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT)'.

      -- C Macro: PyBUF_FULL
          This is equivalent to `(PyBUF_INDIRECT | PyBUF_FORMAT |
          PyBUF_WRITABLE)'.

      -- C Macro: PyBUF_FULL_RO
          This is equivalent to `(PyBUF_INDIRECT | PyBUF_FORMAT)'.

      -- C Macro: PyBUF_CONTIG
          This is equivalent to `(PyBUF_ND | PyBUF_WRITABLE)'.

      -- C Macro: PyBUF_CONTIG_RO
          This is equivalent to `(PyBUF_ND)'.

 -- C Function: void PyBuffer_Release (Py_buffer *view)
     Release the buffer _view_.  This should be called when the buffer
     is no longer being used as it may free memory from it.

 -- C Function: Py_ssize_t PyBuffer_SizeFromFormat (const char *)
     Return the implied *note itemsize: 1bf. from the struct-stype
     `format'.

 -- C Function: int PyBuffer_IsContiguous (Py_buffer *view,
          char fortran)
     Return 1 if the memory defined by the _view_ is C-style (_fortran_
     is `'C'') or Fortran-style (_fortran_ is `'F'') contiguous or
     either one (_fortran_ is `'A'').  Return 0 otherwise.

 -- C Function: void PyBuffer_FillContiguousStrides (int ndim,
          Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize,
          char fortran)
     Fill the _strides_ array with byte-strides of a contiguous
     (C-style if _fortran_ is `'C'' or Fortran-style if _fortran_ is
     `'F'') array of the given shape with the given number of bytes per
     element.

 -- C Function: int PyBuffer_FillInfo (Py_buffer *view, PyObject *obj,
          void *buf, Py_ssize_t len, int readonly, int infoflags)
     Fill in a buffer-info structure, _view_, correctly for an exporter
     that can only share a contiguous chunk of memory of "unsigned
     bytes" of the given length.  Return 0 on success and -1 (with
     raising an error) on error.


File: python-c-api-3.2.2.info,  Node: Old Buffer Protocol,  Prev: Buffer Protocol,  Up: Abstract Objects Layer

6.7 Old Buffer Protocol
=======================

Deprecated since version 3.0.

  These functions were part of the "old buffer protocol" API in Python
2.  In Python 3, this protocol doesn't exist anymore but the functions
are still exposed to ease porting 2.x code.  They act as a
compatibility wrapper around the *note new buffer protocol: 1b4, but
they don't give you control over the lifetime of the resources acquired
when a buffer is exported.

  Therefore, it is recommended that you call *note
PyObject_GetBuffer(): 1b6.  (or the `y*' or `w*' *note format codes:
f1. with the *note PyArg_ParseTuple(): f4. family of functions) to get
a buffer view over an object, and *note PyBuffer_Release(): fb. when
the buffer view can be released.

 -- C Function: int PyObject_AsCharBuffer (PyObject *obj, const
          char **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location usable as
     character-based input.  The _obj_ argument must support the
     single-segment character buffer interface.  On success, returns
     `0', sets _buffer_ to the memory location and _buffer_len_ to the
     buffer length.  Returns `-1' and sets a `TypeError' on error.

 -- C Function: int PyObject_AsReadBuffer (PyObject *obj, const
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location containing
     arbitrary data.  The _obj_ argument must support the
     single-segment readable buffer interface.  On success, returns
     `0', sets _buffer_ to the memory location and _buffer_len_ to the
     buffer length.  Returns `-1' and sets a `TypeError' on error.

 -- C Function: int PyObject_CheckReadBuffer (PyObject *o)
     Returns `1' if _o_ supports the single-segment readable buffer
     interface.  Otherwise returns `0'.

 -- C Function: int PyObject_AsWriteBuffer (PyObject *obj,
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a writable memory location.  The _obj_
     argument must support the single-segment, character buffer
     interface.  On success, returns `0', sets _buffer_ to the memory
     location and _buffer_len_ to the buffer length.  Returns `-1' and
     sets a `TypeError' on error.


File: python-c-api-3.2.2.info,  Node: Concrete Objects Layer,  Next: Initialization Finalization and Threads,  Prev: Abstract Objects Layer,  Up: Top

7 Concrete Objects Layer
************************

The functions in this chapter are specific to certain Python object
types.  Passing them an object of the wrong type is not a good idea; if
you receive an object from a Python program and you are not sure that
it has the right type, you must perform a type check first; for
example, to check that an object is a dictionary, use *note
PyDict_Check(): 1e1.  The chapter is structured like the "family tree"
of Python object types.

     Warning: While the functions described in this chapter carefully
     check the type of the objects which are passed in, many of them do
     not check for _NULL_ being passed instead of a valid object.
     Allowing _NULL_ to be passed in can cause memory access violations
     and immediate termination of the interpreter.

* Menu:

* Fundamental Objects::
* Numeric Objects::
* Sequence Objects::
* Mapping Objects::
* Other Objects::

Fundamental Objects

* Type Objects::
* The None Object::

Numeric Objects

* Integer Objects::
* Boolean Objects::
* Floating Point Objects::
* Complex Number Objects::

Complex Number Objects

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::

Sequence Objects

* Bytes Objects::
* Byte Array Objects::
* Unicode Objects and Codecs::
* Tuple Objects::
* List Objects::

Byte Array Objects

* Type check macros::
* Direct API functions::
* Macros::

Unicode Objects and Codecs

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* File System Encoding::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::

Mapping Objects

* Dictionary Objects::

Other Objects

* Set Objects::
* Function Objects::
* Instance Method Objects::
* Method Objects::
* File Objects::
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* MemoryView objects::
* Weak Reference Objects::
* Capsules::
* Cell Objects::
* Generator Objects::
* DateTime Objects::
* Code Objects::

Module Objects

* Initializing C modules::


File: python-c-api-3.2.2.info,  Node: Fundamental Objects,  Next: Numeric Objects,  Up: Concrete Objects Layer

7.1 Fundamental Objects
=======================

This section describes Python type objects and the singleton object
`None'.

* Menu:

* Type Objects::
* The None Object::


File: python-c-api-3.2.2.info,  Node: Type Objects,  Next: The None Object,  Up: Fundamental Objects

7.1.1 Type Objects
------------------

 -- C Type: PyTypeObject
     The C structure of the objects used to describe built-in types.

 -- C Variable: PyObject* PyType_Type
     This is the type object for type objects; it is the same object as
     `type' in the Python layer.

 -- C Function: int PyType_Check (PyObject *o)
     Return true if the object _o_ is a type object, including
     instances of types derived from the standard type object.  Return
     false in all other cases.

 -- C Function: int PyType_CheckExact (PyObject *o)
     Return true if the object _o_ is a type object, but not a subtype
     of the standard type object.  Return false in all other cases.

 -- C Function: unsigned int PyType_ClearCache ()
     Clear the internal lookup cache. Return the current version tag.

 -- C Function: long PyType_GetFlags (PyTypeObject* type)
     Return the `tp_flags' member of _type_. This function is primarily
     meant for use with `Py_LIMITED_API'; the individual flag bits are
     guaranteed to be stable across Python releases, but access to
     `tp_flags' itself is not part of the limited API.

     New in version 3.2.

 -- C Function: void PyType_Modified (PyTypeObject *type)
     Invalidate the internal lookup cache for the type and all of its
     subtypes.  This function must be called after any manual
     modification of the attributes or base classes of the type.

 -- C Function: int PyType_HasFeature (PyObject *o, int feature)
     Return true if the type object _o_ sets the feature _feature_.
     Type features are denoted by single bit flags.

 -- C Function: int PyType_IS_GC (PyObject *o)
     Return true if the type object includes support for the cycle
     detector; this tests the type flag *note Py_TPFLAGS_HAVE_GC: 1ef.

 -- C Function: int PyType_IsSubtype (PyTypeObject *a, PyTypeObject *b)
     Return true if _a_ is a subtype of _b_.

 -- C Function: PyObject* PyType_GenericAlloc (PyTypeObject *type,
          Py_ssize_t nitems)
     Return value: New reference.

     XXX: Document.

 -- C Function: PyObject* PyType_GenericNew (PyTypeObject *type,
          PyObject *args, PyObject *kwds)
     Return value: New reference.

     XXX: Document.

 -- C Function: int PyType_Ready (PyTypeObject *type)
     Finalize a type object.  This should be called on all type objects
     to finish their initialization.  This function is responsible for
     adding inherited slots from a type's base class.  Return `0' on
     success, or return `-1' and sets an exception on error.


File: python-c-api-3.2.2.info,  Node: The None Object,  Prev: Type Objects,  Up: Fundamental Objects

7.1.2 The None Object
---------------------

Note that the *note PyTypeObject: b. for `None' is not directly exposed
in the Python/C API.  Since `None' is a singleton, testing for object
identity (using `==' in C) is sufficient. There is no `PyNone_Check()'
function for the same reason.

 -- C Variable: PyObject* Py_None
     The Python `None' object, denoting lack of value.  This object has
     no methods.  It needs to be treated just like any other object
     with respect to reference counts.

 -- C Macro: Py_RETURN_NONE
     Properly handle returning *note Py_None: 16a. from within a C
     function (that is, increment the reference count of None and
     return it.)


File: python-c-api-3.2.2.info,  Node: Numeric Objects,  Next: Sequence Objects,  Prev: Fundamental Objects,  Up: Concrete Objects Layer

7.2 Numeric Objects
===================

* Menu:

* Integer Objects::
* Boolean Objects::
* Floating Point Objects::
* Complex Number Objects::


File: python-c-api-3.2.2.info,  Node: Integer Objects,  Next: Boolean Objects,  Up: Numeric Objects

7.2.1 Integer Objects
---------------------

All integers are implemented as "long" integer objects of arbitrary
size.

 -- C Type: PyLongObject
     This subtype of *note PyObject: a. represents a Python integer
     object.

 -- C Variable: PyTypeObject PyLong_Type
     This instance of *note PyTypeObject: b. represents the Python
     integer type.  This is the same object as `int' in the Python
     layer.

 -- C Function: int PyLong_Check (PyObject *p)
     Return true if its argument is a *note PyLongObject: 1fd. or a
     subtype of *note PyLongObject: 1fd.

 -- C Function: int PyLong_CheckExact (PyObject *p)
     Return true if its argument is a *note PyLongObject: 1fd, but not
     a subtype of *note PyLongObject: 1fd.

 -- C Function: PyObject* PyLong_FromLong (long v)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. object from _v_, or _NULL_
     on failure.

     The current implementation keeps an array of integer objects for
     all integers between `-5' and `256', when you create an int in
     that range you actually just get back a reference to the existing
     object. So it should be possible to change the value of `1'.  I
     suspect the behaviour of Python in this case is undefined. :-)

 -- C Function: PyObject* PyLong_FromUnsignedLong (unsigned long v)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. object from a C `unsigned
     long', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)
     Return a new *note PyLongObject: 1fd. object from a C
     `Py_ssize_t', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)
     Return a new *note PyLongObject: 1fd. object from a C `size_t', or
     _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromLongLong (PY_LONG_LONG v)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. object from a C `long long',
     or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLongLong (unsigned
          PY_LONG_LONG v)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. object from a C `unsigned
     long long', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromDouble (double v)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. object from the integer part
     of _v_, or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromString (char *str, char **pend,
          int base)
     Return value: New reference.

     Return a new *note PyLongObject: 1fd. based on the string value in
     _str_, which is interpreted according to the radix in _base_.  If
     _pend_ is non-_NULL_, _*pend_ will point to the first character in
     _str_ which follows the representation of the number.  If _base_
     is `0', the radix will be determined based on the leading
     characters of _str_: if _str_ starts with `'0x'' or `'0X'', radix
     16 will be used; if _str_ starts with `'0o'' or `'0O'', radix 8
     will be used; if _str_ starts with `'0b'' or `'0B'', radix 2 will
     be used; otherwise radix 10 will be used.  If _base_ is not `0',
     it must be between `2' and `36', inclusive.  Leading spaces are
     ignored.  If there are no digits, `ValueError' will be raised.

 -- C Function: PyObject* PyLong_FromUnicode (Py_UNICODE *u,
          Py_ssize_t length, int base)
     Return value: New reference.

     Convert a sequence of Unicode digits to a Python integer value.
     The Unicode string is first encoded to a byte string using
     `PyUnicode_EncodeDecimal()' and then converted using *note
     PyLong_FromString(): 207.

 -- C Function: PyObject* PyLong_FromVoidPtr (void *p)
     Return value: New reference.

     Create a Python integer from the pointer _p_. The pointer value
     can be retrieved from the resulting value using *note
     PyLong_AsVoidPtr(): 20a.

 -- C Function: long PyLong_AsLong (PyObject *pylong)
     Return a C `long' representation of the contents of _pylong_.  If
     _pylong_ is greater than `LONG_MAX', raise an `OverflowError', and
     return -1. Convert non-long objects automatically to long first,
     and return -1 if that raises exceptions.

 -- C Function: long PyLong_AsLongAndOverflow (PyObject *pylong,
          int *overflow)
     Return a C `long' representation of the contents of _pylong_.  If
     _pylong_ is greater than `LONG_MAX' or less than `LONG_MIN', set
     _*overflow_ to `1' or `-1', respectively, and return `-1';
     otherwise, set _*overflow_ to `0'.  If any other exception occurs
     (for example a TypeError or MemoryError), then `-1' will be
     returned and _*overflow_ will be `0'.

 -- C Function: PY_LONG_LONG PyLong_AsLongLongAndOverflow
          (PyObject *pylong, int *overflow)
     Return a C `long long' representation of the contents of _pylong_.
     If _pylong_ is greater than `PY_LLONG_MAX' or less than
     `PY_LLONG_MIN', set _*overflow_ to `1' or `-1', respectively, and
     return `-1'; otherwise, set _*overflow_ to `0'.  If any other
     exception occurs (for example a TypeError or MemoryError), then
     `-1' will be returned and _*overflow_ will be `0'.

     New in version 3.2.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)
     Return a C `Py_ssize_t' representation of the contents of _pylong_.
     If _pylong_ is greater than `PY_SSIZE_T_MAX', an `OverflowError'
     is raised and `-1' will be returned.

 -- C Function: unsigned long PyLong_AsUnsignedLong (PyObject *pylong)
     Return a C `unsigned long' representation of the contents of
     _pylong_.  If _pylong_ is greater than `ULONG_MAX', an
     `OverflowError' is raised.

 -- C Function: size_t PyLong_AsSize_t (PyObject *pylong)
     Return a `size_t' representation of the contents of _pylong_.  If
     _pylong_ is greater than the maximum value for a `size_t', an
     `OverflowError' is raised.

 -- C Function: PY_LONG_LONG PyLong_AsLongLong (PyObject *pylong)
     Return a C `long long' from a Python integer.  If _pylong_ cannot
     be represented as a `long long', an `OverflowError' is raised and
     `-1' is returned.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong
          (PyObject *pylong)
     Return a C `unsigned long long' from a Python integer. If _pylong_
     cannot be represented as an `unsigned long long', an
     `OverflowError' is raised and `(unsigned long long)-1' is returned.

     Changed in version 3.1: A negative _pylong_ now raises
     `OverflowError', not `TypeError'.

 -- C Function: unsigned long PyLong_AsUnsignedLongMask (PyObject *io)
     Return a C `unsigned long' from a Python integer, without checking
     for overflow.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask
          (PyObject *io)
     Return a C `unsigned long long' from a Python integer, without
     checking for overflow.

 -- C Function: double PyLong_AsDouble (PyObject *pylong)
     Return a C `double' representation of the contents of _pylong_.  If
     _pylong_ cannot be approximately represented as a `double', an
     `OverflowError' exception is raised and `-1.0' will be returned.

 -- C Function: void* PyLong_AsVoidPtr (PyObject *pylong)
     Convert a Python integer _pylong_ to a C `void' pointer.  If
     _pylong_ cannot be converted, an `OverflowError' will be raised.
     This is only assured to produce a usable `void' pointer for values
     created with *note PyLong_FromVoidPtr(): 209.


File: python-c-api-3.2.2.info,  Node: Boolean Objects,  Next: Floating Point Objects,  Prev: Integer Objects,  Up: Numeric Objects

7.2.2 Boolean Objects
---------------------

Booleans in Python are implemented as a subclass of integers.  There
are only two booleans, `Py_False' and `Py_True'.  As such, the normal
creation and deletion functions don't apply to booleans.  The following
macros are available, however.

 -- C Function: int PyBool_Check (PyObject *o)
     Return true if _o_ is of type `PyBool_Type'.

 -- C Variable: PyObject* Py_False
     The Python `False' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Variable: PyObject* Py_True
     The Python `True' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Macro: Py_RETURN_FALSE
     Return `Py_False' from a function, properly incrementing its
     reference count.

 -- C Macro: Py_RETURN_TRUE
     Return `Py_True' from a function, properly incrementing its
     reference count.

 -- C Function: PyObject* PyBool_FromLong (long v)
     Return value: New reference.

     Return a new reference to `Py_True' or `Py_False' depending on the
     truth value of _v_.


File: python-c-api-3.2.2.info,  Node: Floating Point Objects,  Next: Complex Number Objects,  Prev: Boolean Objects,  Up: Numeric Objects

7.2.3 Floating Point Objects
----------------------------

 -- C Type: PyFloatObject
     This subtype of *note PyObject: a. represents a Python floating
     point object.

 -- C Variable: PyTypeObject PyFloat_Type
     This instance of *note PyTypeObject: b. represents the Python
     floating point type.  This is the same object as `float' in the
     Python layer.

 -- C Function: int PyFloat_Check (PyObject *p)
     Return true if its argument is a *note PyFloatObject: 222. or a
     subtype of *note PyFloatObject: 222.

 -- C Function: int PyFloat_CheckExact (PyObject *p)
     Return true if its argument is a *note PyFloatObject: 222, but not
     a subtype of *note PyFloatObject: 222.

 -- C Function: PyObject* PyFloat_FromString (PyObject *str)
     Return value: New reference.

     Create a *note PyFloatObject: 222. object based on the string
     value in _str_, or _NULL_ on failure.

 -- C Function: PyObject* PyFloat_FromDouble (double v)
     Return value: New reference.

     Create a *note PyFloatObject: 222. object from _v_, or _NULL_ on
     failure.

 -- C Function: double PyFloat_AsDouble (PyObject *pyfloat)
     Return a C `double' representation of the contents of _pyfloat_.
     If _pyfloat_ is not a Python floating point object but has a
     `__float__()' method, this method will first be called to convert
     _pyfloat_ into a float.

 -- C Function: double PyFloat_AS_DOUBLE (PyObject *pyfloat)
     Return a C `double' representation of the contents of _pyfloat_,
     but without error checking.

 -- C Function: PyObject* PyFloat_GetInfo (void)
     Return a structseq instance which contains information about the
     precision, minimum and maximum values of a float. It's a thin
     wrapper around the header file `float.h'.

 -- C Function: double PyFloat_GetMax ()
     Return the maximum representable finite float _DBL_MAX_ as C
     `double'.

 -- C Function: double PyFloat_GetMin ()
     Return the minimum normalized positive float _DBL_MIN_ as C
     `double'.

 -- C Function: int PyFloat_ClearFreeList ()
     Clear the float free list. Return the number of items that could
     not be freed.


File: python-c-api-3.2.2.info,  Node: Complex Number Objects,  Prev: Floating Point Objects,  Up: Numeric Objects

7.2.4 Complex Number Objects
----------------------------

Python's complex number objects are implemented as two distinct types
when viewed from the C API:  one is the Python object exposed to Python
programs, and the other is a C structure which represents the actual
complex number value.  The API provides functions for working with both.

* Menu:

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::


File: python-c-api-3.2.2.info,  Node: Complex Numbers as C Structures,  Next: Complex Numbers as Python Objects,  Up: Complex Number Objects

7.2.4.1 Complex Numbers as C Structures
.......................................

Note that the functions which accept these structures as parameters and
return them as results do so _by value_ rather than dereferencing them
through pointers.  This is consistent throughout the API.

 -- C Type: Py_complex
     The C structure which corresponds to the value portion of a Python
     complex number object.  Most of the functions for dealing with
     complex number objects use structures of this type as input or
     output values, as appropriate.  It is defined as:

         typedef struct {
            double real;
            double imag;
         } Py_complex;



 -- C Function: Py_complex _Py_c_sum (Py_complex left, Py_complex right)
     Return the sum of two complex numbers, using the C *note
     Py_complex: 100.  representation.

 -- C Function: Py_complex _Py_c_diff (Py_complex left,
          Py_complex right)
     Return the difference between two complex numbers, using the C
     *note Py_complex: 100. representation.

 -- C Function: Py_complex _Py_c_neg (Py_complex complex)
     Return the negation of the complex number _complex_, using the C
     *note Py_complex: 100. representation.

 -- C Function: Py_complex _Py_c_prod (Py_complex left,
          Py_complex right)
     Return the product of two complex numbers, using the C *note
     Py_complex: 100.  representation.

 -- C Function: Py_complex _Py_c_quot (Py_complex dividend,
          Py_complex divisor)
     Return the quotient of two complex numbers, using the C *note
     Py_complex: 100.  representation.

 -- C Function: Py_complex _Py_c_pow (Py_complex num, Py_complex exp)
     Return the exponentiation of _num_ by _exp_, using the C *note
     Py_complex: 100.  representation.


File: python-c-api-3.2.2.info,  Node: Complex Numbers as Python Objects,  Prev: Complex Numbers as C Structures,  Up: Complex Number Objects

7.2.4.2 Complex Numbers as Python Objects
.........................................

 -- C Type: PyComplexObject
     This subtype of *note PyObject: a. represents a Python complex
     number object.

 -- C Variable: PyTypeObject PyComplex_Type
     This instance of *note PyTypeObject: b. represents the Python
     complex number type. It is the same object as `complex' in the
     Python layer.

 -- C Function: int PyComplex_Check (PyObject *p)
     Return true if its argument is a *note PyComplexObject: 239. or a
     subtype of *note PyComplexObject: 239.

 -- C Function: int PyComplex_CheckExact (PyObject *p)
     Return true if its argument is a *note PyComplexObject: 239, but
     not a subtype of *note PyComplexObject: 239.

 -- C Function: PyObject* PyComplex_FromCComplex (Py_complex v)
     Return value: New reference.

     Create a new Python complex number object from a C *note
     Py_complex: 100. value.

 -- C Function: PyObject* PyComplex_FromDoubles (double real,
          double imag)
     Return value: New reference.

     Return a new *note PyComplexObject: 239. object from _real_ and
     _imag_.

 -- C Function: double PyComplex_RealAsDouble (PyObject *op)
     Return the real part of _op_ as a C `double'.

 -- C Function: double PyComplex_ImagAsDouble (PyObject *op)
     Return the imaginary part of _op_ as a C `double'.

 -- C Function: Py_complex PyComplex_AsCComplex (PyObject *op)
     Return the *note Py_complex: 100. value of the complex number _op_.

     If _op_ is not a Python complex number object but has a
     `__complex__()' method, this method will first be called to
     convert _op_ to a Python complex number object.


File: python-c-api-3.2.2.info,  Node: Sequence Objects,  Next: Mapping Objects,  Prev: Numeric Objects,  Up: Concrete Objects Layer

7.3 Sequence Objects
====================

Generic operations on sequence objects were discussed in the previous
chapter; this section deals with the specific kinds of sequence objects
that are intrinsic to the Python language.

* Menu:

* Bytes Objects::
* Byte Array Objects::
* Unicode Objects and Codecs::
* Tuple Objects::
* List Objects::


File: python-c-api-3.2.2.info,  Node: Bytes Objects,  Next: Byte Array Objects,  Up: Sequence Objects

7.3.1 Bytes Objects
-------------------

These functions raise `TypeError' when expecting a bytes parameter and
are called with a non-bytes parameter.

 -- C Type: PyBytesObject
     This subtype of *note PyObject: a. represents a Python bytes
     object.

 -- C Variable: PyTypeObject PyBytes_Type
     This instance of *note PyTypeObject: b. represents the Python
     bytes type; it is the same object as `bytes' in the Python layer.

 -- C Function: int PyBytes_Check (PyObject *o)
     Return true if the object _o_ is a bytes object or an instance of
     a subtype of the bytes type.

 -- C Function: int PyBytes_CheckExact (PyObject *o)
     Return true if the object _o_ is a bytes object, but not an
     instance of a subtype of the bytes type.

 -- C Function: PyObject* PyBytes_FromString (const char *v)
     Return a new bytes object with a copy of the string _v_ as value
     on success, and _NULL_ on failure.  The parameter _v_ must not be
     _NULL_; it will not be checked.

 -- C Function: PyObject* PyBytes_FromStringAndSize (const char *v,
          Py_ssize_t len)
     Return a new bytes object with a copy of the string _v_ as value
     and length _len_ on success, and _NULL_ on failure.  If _v_ is
     _NULL_, the contents of the bytes object are uninitialized.

 -- C Function: PyObject* PyBytes_FromFormat (const char *format, ...)
     Take a C `printf()'-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python bytes object
     and return a bytes object with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the _format_ string.  The following
     format characters are allowed:

     Format Characters       Type                Comment
     --------------------------------------------------------------------------------- 
     `%%'                    _n/a_               The literal % character.
     `%c'                    int                 A single character, represented as
                                                 an C int.
     `%d'                    int                 Exactly equivalent to
                                                 `printf("%d")'.
     `%u'                    unsigned int        Exactly equivalent to
                                                 `printf("%u")'.
     `%ld'                   long                Exactly equivalent to
                                                 `printf("%ld")'.
     `%lu'                   unsigned long       Exactly equivalent to
                                                 `printf("%lu")'.
     `%zd'                   Py_ssize_t          Exactly equivalent to
                                                 `printf("%zd")'.
     `%zu'                   size_t              Exactly equivalent to
                                                 `printf("%zu")'.
     `%i'                    int                 Exactly equivalent to
                                                 `printf("%i")'.
     `%x'                    int                 Exactly equivalent to
                                                 `printf("%x")'.
     `%s'                    char*               A null-terminated C character array.
     `%p'                    void*               The hex representation of a C
                                                 pointer. Mostly equivalent to
                                                 `printf("%p")' except that it is
                                                 guaranteed to start with the
                                                 literal `0x' regardless of what the
                                                 platform's `printf' yields.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

 -- C Function: PyObject* PyBytes_FromFormatV (const char *format,
          va_list vargs)
     Identical to *note PyBytes_FromFormat(): 24d. except that it takes
     exactly two arguments.

 -- C Function: PyObject* PyBytes_FromObject (PyObject *o)
     Return the bytes representation of object _o_ that implements the
     buffer protocol.

 -- C Function: Py_ssize_t PyBytes_Size (PyObject *o)
     Return the length of the bytes in bytes object _o_.

 -- C Function: Py_ssize_t PyBytes_GET_SIZE (PyObject *o)
     Macro form of *note PyBytes_Size(): 250. but without error
     checking.

 -- C Function: char* PyBytes_AsString (PyObject *o)
     Return a NUL-terminated representation of the contents of _o_.
     The pointer refers to the internal buffer of _o_, not a copy.  The
     data must not be modified in any way, unless the string was just
     created using `PyBytes_FromStringAndSize(NULL, size)'. It must not
     be deallocated.  If _o_ is not a string object at all, *note
     PyBytes_AsString(): 252. returns _NULL_ and raises `TypeError'.

 -- C Function: char* PyBytes_AS_STRING (PyObject *string)
     Macro form of *note PyBytes_AsString(): 252. but without error
     checking.

 -- C Function: int PyBytes_AsStringAndSize (PyObject *obj,
          char **buffer, Py_ssize_t *length)
     Return a NUL-terminated representation of the contents of the
     object _obj_ through the output variables _buffer_ and _length_.

     If _length_ is _NULL_, the resulting buffer may not contain NUL
     characters; if it does, the function returns `-1' and a
     `TypeError' is raised.

     The buffer refers to an internal string buffer of _obj_, not a
     copy. The data must not be modified in any way, unless the string
     was just created using `PyBytes_FromStringAndSize(NULL, size)'.
     It must not be deallocated.  If _string_ is not a string object at
     all, *note PyBytes_AsStringAndSize(): 254.  returns `-1' and
     raises `TypeError'.

 -- C Function: void PyBytes_Concat (PyObject **bytes,
          PyObject *newpart)
     Create a new bytes object in _*bytes_ containing the contents of
     _newpart_ appended to _bytes_; the caller will own the new
     reference.  The reference to the old value of _bytes_ will be
     stolen.  If the new string cannot be created, the old reference to
     _bytes_ will still be discarded and the value of _*bytes_ will be
     set to _NULL_; the appropriate exception will be set.

 -- C Function: void PyBytes_ConcatAndDel (PyObject **bytes,
          PyObject *newpart)
     Create a new string object in _*bytes_ containing the contents of
     _newpart_ appended to _bytes_.  This version decrements the
     reference count of _newpart_.

 -- C Function: int _PyBytes_Resize (PyObject **bytes,
          Py_ssize_t newsize)
     A way to resize a bytes object even though it is "immutable". Only
     use this to build up a brand new bytes object; don't use this if
     the bytes may already be known in other parts of the code.  It is
     an error to call this function if the refcount on the input bytes
     object is not one. Pass the address of an existing bytes object as
     an lvalue (it may be written into), and the new size desired.  On
     success, _*bytes_ holds the resized bytes object and `0' is
     returned; the address in _*bytes_ may differ from its input value.
     If the reallocation fails, the original bytes object at _*bytes_
     is deallocated, _*bytes_ is set to _NULL_, a memory exception is
     set, and `-1' is returned.


File: python-c-api-3.2.2.info,  Node: Byte Array Objects,  Next: Unicode Objects and Codecs,  Prev: Bytes Objects,  Up: Sequence Objects

7.3.2 Byte Array Objects
------------------------

 -- C Type: PyByteArrayObject
     This subtype of *note PyObject: a. represents a Python bytearray
     object.

 -- C Variable: PyTypeObject PyByteArray_Type
     This instance of *note PyTypeObject: b. represents the Python
     bytearray type; it is the same object as `bytearray' in the Python
     layer.

* Menu:

* Type check macros::
* Direct API functions::
* Macros::


File: python-c-api-3.2.2.info,  Node: Type check macros,  Next: Direct API functions,  Up: Byte Array Objects

7.3.2.1 Type check macros
.........................

 -- C Function: int PyByteArray_Check (PyObject *o)
     Return true if the object _o_ is a bytearray object or an instance
     of a subtype of the bytearray type.

 -- C Function: int PyByteArray_CheckExact (PyObject *o)
     Return true if the object _o_ is a bytearray object, but not an
     instance of a subtype of the bytearray type.


File: python-c-api-3.2.2.info,  Node: Direct API functions,  Next: Macros,  Prev: Type check macros,  Up: Byte Array Objects

7.3.2.2 Direct API functions
............................

 -- C Function: PyObject* PyByteArray_FromObject (PyObject *o)
     Return a new bytearray object from any object, _o_, that
     implements the buffer protocol.


 -- C Function: PyObject* PyByteArray_FromStringAndSize (const
          char *string, Py_ssize_t len)
     Create a new bytearray object from _string_ and its length, _len_.
     On failure, _NULL_ is returned.

 -- C Function: PyObject* PyByteArray_Concat (PyObject *a, PyObject *b)
     Concat bytearrays _a_ and _b_ and return a new bytearray with the
     result.

 -- C Function: Py_ssize_t PyByteArray_Size (PyObject *bytearray)
     Return the size of _bytearray_ after checking for a _NULL_ pointer.

 -- C Function: char* PyByteArray_AsString (PyObject *bytearray)
     Return the contents of _bytearray_ as a char array after checking
     for a _NULL_ pointer.

 -- C Function: int PyByteArray_Resize (PyObject *bytearray,
          Py_ssize_t len)
     Resize the internal buffer of _bytearray_ to _len_.


File: python-c-api-3.2.2.info,  Node: Macros,  Prev: Direct API functions,  Up: Byte Array Objects

7.3.2.3 Macros
..............

These macros trade safety for speed and they don't check pointers.

 -- C Function: char* PyByteArray_AS_STRING (PyObject *bytearray)
     Macro version of *note PyByteArray_AsString(): 265.

 -- C Function: Py_ssize_t PyByteArray_GET_SIZE (PyObject *bytearray)
     Macro version of *note PyByteArray_Size(): 264.


File: python-c-api-3.2.2.info,  Node: Unicode Objects and Codecs,  Next: Tuple Objects,  Prev: Byte Array Objects,  Up: Sequence Objects

7.3.3 Unicode Objects and Codecs
--------------------------------

* Menu:

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* File System Encoding::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::


File: python-c-api-3.2.2.info,  Node: Unicode Objects,  Next: Built-in Codecs,  Up: Unicode Objects and Codecs

7.3.3.1 Unicode Objects
.......................

* Menu:

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* File System Encoding::
* wchar_t Support::


File: python-c-api-3.2.2.info,  Node: Unicode Type,  Next: Unicode Character Properties,  Up: Unicode Objects

7.3.3.2 Unicode Type
....................

These are the basic Unicode object types used for the Unicode
implementation in Python:

 -- C Type: Py_UNICODE
     This type represents the storage type which is used by Python
     internally as basis for holding Unicode ordinals.  Python's
     default builds use a 16-bit type for *note Py_UNICODE: fd. and
     store Unicode values internally as UCS2. It is also possible to
     build a UCS4 version of Python (most recent Linux distributions
     come with UCS4 builds of Python). These builds then use a 32-bit
     type for *note Py_UNICODE: fd. and store Unicode data internally
     as UCS4. On platforms where `wchar_t' is available and compatible
     with the chosen Python Unicode build variant, *note Py_UNICODE:
     fd. is a typedef alias for `wchar_t' to enhance native platform
     compatibility. On all other platforms, *note Py_UNICODE: fd. is a
     typedef alias for either `unsigned short' (UCS2) or `unsigned
     long' (UCS4).

  Note that UCS2 and UCS4 Python builds are not binary compatible.
Please keep this in mind when writing extensions or interfaces.

 -- C Type: PyUnicodeObject
     This subtype of *note PyObject: a. represents a Python Unicode
     object.

 -- C Variable: PyTypeObject PyUnicode_Type
     This instance of *note PyTypeObject: b. represents the Python
     Unicode type.  It is exposed to Python code as `str'.

  The following APIs are really C macros and can be used to do fast
checks and to access internal read-only data of Unicode objects:

 -- C Function: int PyUnicode_Check (PyObject *o)
     Return true if the object _o_ is a Unicode object or an instance
     of a Unicode subtype.

 -- C Function: int PyUnicode_CheckExact (PyObject *o)
     Return true if the object _o_ is a Unicode object, but not an
     instance of a subtype.

 -- C Function: Py_ssize_t PyUnicode_GET_SIZE (PyObject *o)
     Return the size of the object.  _o_ has to be a *note
     PyUnicodeObject: 26f. (not checked).

 -- C Function: Py_ssize_t PyUnicode_GET_DATA_SIZE (PyObject *o)
     Return the size of the object's internal buffer in bytes.  _o_ has
     to be a *note PyUnicodeObject: 26f. (not checked).

 -- C Function: Py_UNICODE* PyUnicode_AS_UNICODE (PyObject *o)
     Return a pointer to the internal *note Py_UNICODE: fd. buffer of
     the object.  _o_ has to be a *note PyUnicodeObject: 26f. (not
     checked).

 -- C Function: const char* PyUnicode_AS_DATA (PyObject *o)
     Return a pointer to the internal buffer of the object. _o_ has to
     be a *note PyUnicodeObject: 26f. (not checked).

 -- C Function: int PyUnicode_ClearFreeList ()
     Clear the free list. Return the total number of freed items.


File: python-c-api-3.2.2.info,  Node: Unicode Character Properties,  Next: Plain Py_UNICODE,  Prev: Unicode Type,  Up: Unicode Objects

7.3.3.3 Unicode Character Properties
....................................

Unicode provides many different character properties. The most often
needed ones are available through these macros which are mapped to C
functions depending on the Python configuration.

 -- C Function: int Py_UNICODE_ISSPACE (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a whitespace character.

 -- C Function: int Py_UNICODE_ISLOWER (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a lowercase character.

 -- C Function: int Py_UNICODE_ISUPPER (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an uppercase character.

 -- C Function: int Py_UNICODE_ISTITLE (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a titlecase character.

 -- C Function: int Py_UNICODE_ISLINEBREAK (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a linebreak character.

 -- C Function: int Py_UNICODE_ISDECIMAL (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a decimal character.

 -- C Function: int Py_UNICODE_ISDIGIT (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a digit character.

 -- C Function: int Py_UNICODE_ISNUMERIC (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a numeric character.

 -- C Function: int Py_UNICODE_ISALPHA (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an alphabetic character.

 -- C Function: int Py_UNICODE_ISALNUM (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an alphanumeric
     character.

 -- C Function: int Py_UNICODE_ISPRINTABLE (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a printable character.
     Nonprintable characters are those characters defined in the
     Unicode character database as "Other" or "Separator", excepting
     the ASCII space (0x20) which is considered printable.  (Note that
     printable characters in this context are those which should not be
     escaped when `repr()' is invoked on a string.  It has no bearing
     on the handling of strings written to `sys.stdout' or
     `sys.stderr'.)

  These APIs can be used for fast direct character conversions:

 -- C Function: Py_UNICODE Py_UNICODE_TOLOWER (Py_UNICODE ch)
     Return the character _ch_ converted to lower case.

 -- C Function: Py_UNICODE Py_UNICODE_TOUPPER (Py_UNICODE ch)
     Return the character _ch_ converted to upper case.

 -- C Function: Py_UNICODE Py_UNICODE_TOTITLE (Py_UNICODE ch)
     Return the character _ch_ converted to title case.

 -- C Function: int Py_UNICODE_TODECIMAL (Py_UNICODE ch)
     Return the character _ch_ converted to a decimal positive integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: int Py_UNICODE_TODIGIT (Py_UNICODE ch)
     Return the character _ch_ converted to a single digit integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: double Py_UNICODE_TONUMERIC (Py_UNICODE ch)
     Return the character _ch_ converted to a double. Return `-1.0' if
     this is not possible.  This macro does not raise exceptions.


File: python-c-api-3.2.2.info,  Node: Plain Py_UNICODE,  Next: File System Encoding,  Prev: Unicode Character Properties,  Up: Unicode Objects

7.3.3.4 Plain Py_UNICODE
........................

To create Unicode objects and access their basic sequence properties,
use these APIs:

 -- C Function: PyObject* PyUnicode_FromUnicode (const Py_UNICODE *u,
          Py_ssize_t size)
     Return value: New reference.

     Create a Unicode object from the Py_UNICODE buffer _u_ of the
     given size. _u_ may be _NULL_ which causes the contents to be
     undefined. It is the user's responsibility to fill in the needed
     data.  The buffer is copied into the new object. If the buffer is
     not _NULL_, the return value might be a shared object.  Therefore,
     modification of the resulting Unicode object is only allowed when
     _u_ is _NULL_.

 -- C Function: PyObject* PyUnicode_FromStringAndSize (const char *u,
          Py_ssize_t size)
     Create a Unicode object from the char buffer _u_.  The bytes will
     be interpreted as being UTF-8 encoded.  _u_ may also be _NULL_
     which causes the contents to be undefined. It is the user's
     responsibility to fill in the needed data.  The buffer is copied
     into the new object. If the buffer is not _NULL_, the return value
     might be a shared object. Therefore, modification of the resulting
     Unicode object is only allowed when _u_ is _NULL_.

 -- C Function: PyObject *PyUnicode_FromString (const char *u)
     Create a Unicode object from an UTF-8 encoded null-terminated char
     buffer _u_.

 -- C Function: PyObject* PyUnicode_FromFormat (const char *format, ...)
     Take a C `printf()'-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python unicode
     string and return a string with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the _format_ ASCII-encoded string. The
     following format characters are allowed:

     Format Characters       Type                      Comment
     --------------------------------------------------------------------------------------- 
     `%%'                    _n/a_                     The literal % character.
     `%c'                    int                       A single character, represented as
                                                       an C int.
     `%d'                    int                       Exactly equivalent to
                                                       `printf("%d")'.
     `%u'                    unsigned int              Exactly equivalent to
                                                       `printf("%u")'.
     `%ld'                   long                      Exactly equivalent to
                                                       `printf("%ld")'.
     `%lu'                   unsigned long             Exactly equivalent to
                                                       `printf("%lu")'.
     `%lld'                  long long                 Exactly equivalent to
                                                       `printf("%lld")'.
     `%llu'                  unsigned long long        Exactly equivalent to
                                                       `printf("%llu")'.
     `%zd'                   Py_ssize_t                Exactly equivalent to
                                                       `printf("%zd")'.
     `%zu'                   size_t                    Exactly equivalent to
                                                       `printf("%zu")'.
     `%i'                    int                       Exactly equivalent to
                                                       `printf("%i")'.
     `%x'                    int                       Exactly equivalent to
                                                       `printf("%x")'.
     `%s'                    char*                     A null-terminated C character array.
     `%p'                    void*                     The hex representation of a C
                                                       pointer. Mostly equivalent to
                                                       `printf("%p")' except that it is
                                                       guaranteed to start with the
                                                       literal `0x' regardless of what the
                                                       platform's `printf' yields.
     `%A'                    PyObject*                 The result of calling `ascii()'.
     `%U'                    PyObject*                 A unicode object.
     `%V'                    PyObject*, char *         A unicode object (which may be
                                                       _NULL_) and a null-terminated C
                                                       character array as a second
                                                       parameter (which will be used, if
                                                       the first parameter is _NULL_).
     `%S'                    PyObject*                 The result of calling *note
                                                       PyObject_Str(): 148.
     `%R'                    PyObject*                 The result of calling *note
                                                       PyObject_Repr(): 146.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

          Note: The `"%lld"' and `"%llu"' format specifiers are only
          available when `HAVE_LONG_LONG' is defined.

     Changed in version 3.2: Support for `"%lld"' and `"%llu"' added.

 -- C Function: PyObject* PyUnicode_FromFormatV (const char *format,
          va_list vargs)
     Identical to *note PyUnicode_FromFormat(): 6a. except that it
     takes exactly two arguments.

 -- C Function: PyObject* PyUnicode_TransformDecimalToASCII
          (Py_UNICODE *s, Py_ssize_t size)
     Create a Unicode object by replacing all decimal digits in *note
     Py_UNICODE: fd. buffer of the given _size_ by ASCII digits 0-9
     according to their decimal value.  Return _NULL_ if an exception
     occurs.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicode (PyObject *unicode)
     Return a read-only pointer to the Unicode object's internal *note
     Py_UNICODE: fd.  buffer, _NULL_ if _unicode_ is not a Unicode
     object.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicodeCopy (PyObject *unicode)
     Create a copy of a Unicode string ending with a nul character.
     Return _NULL_ and raise a `MemoryError' exception on memory
     allocation failure, otherwise return a new allocated buffer (use
     *note PyMem_Free(): fe. to free the buffer).

     New in version 3.2.

 -- C Function: Py_ssize_t PyUnicode_GetSize (PyObject *unicode)
     Return the length of the Unicode object.

 -- C Function: PyObject* PyUnicode_FromEncodedObject (PyObject *obj,
          const char *encoding, const char *errors)
     Return value: New reference.

     Coerce an encoded object _obj_ to an Unicode object and return a
     reference with incremented refcount.

     `bytes', `bytearray' and other char buffer compatible objects are
     decoded according to the given _encoding_ and using the error
     handling defined by _errors_. Both can be _NULL_ to have the
     interface use the default values (see the next section for
     details).

     All other objects, including Unicode objects, cause a `TypeError'
     to be set.

     The API returns _NULL_ if there was an error.  The caller is
     responsible for decref'ing the returned objects.

 -- C Function: PyObject* PyUnicode_FromObject (PyObject *obj)
     Return value: New reference.

     Shortcut for `PyUnicode_FromEncodedObject(obj, NULL, "strict")'
     which is used throughout the interpreter whenever coercion to
     Unicode is needed.

  If the platform supports `wchar_t' and provides a header file wchar.h,
Python can interface directly to this type using the following
functions.  Support is optimized if Python's own *note Py_UNICODE: fd.
type is identical to the system's `wchar_t'.


File: python-c-api-3.2.2.info,  Node: File System Encoding,  Next: wchar_t Support,  Prev: Plain Py_UNICODE,  Up: Unicode Objects

7.3.3.5 File System Encoding
............................

To encode and decode file names and other environment strings,
`Py_FileSystemEncoding' should be used as the encoding, and
`"surrogateescape"' should be used as the error handler ( PEP 383(1)).
To encode file names during argument parsing, the `"O&"' converter
should be used, passing *note PyUnicode_FSConverter(): fc. as the
conversion function:

 -- C Function: int PyUnicode_FSConverter (PyObject* obj, void* result)
     ParseTuple converter: encode `str' objects to `bytes' using *note
     PyUnicode_EncodeFSDefault(): 295.; `bytes' objects are output
     as-is.  _result_ must be a *note PyBytesObject*: 247. which must
     be released when it is no longer used.

     New in version 3.1.

  To decode file names during argument parsing, the `"O&"' converter
should be used, passing *note PyUnicode_FSDecoder(): 296. as the
conversion function:

 -- C Function: int PyUnicode_FSDecoder (PyObject* obj, void* result)
     ParseTuple converter: decode `bytes' objects to `str' using *note
     PyUnicode_DecodeFSDefaultAndSize(): 297.; `str' objects are output
     as-is. _result_ must be a *note PyUnicodeObject*: 26f. which must
     be released when it is no longer used.

     New in version 3.2.

 -- C Function: PyObject* PyUnicode_DecodeFSDefaultAndSize (const
          char *s, Py_ssize_t size)
     Decode a string using `Py_FileSystemDefaultEncoding' and the
     `'surrogateescape'' error handler, or `'strict'' on Windows.

     If `Py_FileSystemDefaultEncoding' is not set, fall back to the
     locale encoding.

     Changed in version 3.2: Use `'strict'' error handler on Windows.

 -- C Function: PyObject* PyUnicode_DecodeFSDefault (const char *s)
     Decode a null-terminated string using
     `Py_FileSystemDefaultEncoding' and the `'surrogateescape'' error
     handler, or `'strict'' on Windows.

     If `Py_FileSystemDefaultEncoding' is not set, fall back to the
     locale encoding.

     Use *note PyUnicode_DecodeFSDefaultAndSize(): 297. if you know the
     string length.

     Changed in version 3.2: Use `'strict'' error handler on Windows.

 -- C Function: PyObject* PyUnicode_EncodeFSDefault (PyObject *unicode)
     Encode a Unicode object to `Py_FileSystemDefaultEncoding' with the
     `'surrogateescape'' error handler, or `'strict'' on Windows, and
     return `bytes'.

     If `Py_FileSystemDefaultEncoding' is not set, fall back to the
     locale encoding.

     New in version 3.2.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0383


File: python-c-api-3.2.2.info,  Node: wchar_t Support,  Prev: File System Encoding,  Up: Unicode Objects

7.3.3.6 wchar_t Support
.......................

`wchar_t' support for platforms which support it:

 -- C Function: PyObject* PyUnicode_FromWideChar (const wchar_t *w,
          Py_ssize_t size)
     Return value: New reference.

     Create a Unicode object from the `wchar_t' buffer _w_ of the given
     _size_.  Passing -1 as the _size_ indicates that the function must
     itself compute the length, using wcslen.  Return _NULL_ on failure.

 -- C Function: Py_ssize_t PyUnicode_AsWideChar
          (PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)
     Copy the Unicode object contents into the `wchar_t' buffer _w_.
     At most _size_ `wchar_t' characters are copied (excluding a
     possibly trailing 0-termination character).  Return the number of
     `wchar_t' characters copied or -1 in case of an error.  Note that
     the resulting `wchar_t' string may or may not be 0-terminated.  It
     is the responsibility of the caller to make sure that the
     `wchar_t' string is 0-terminated in case this is required by the
     application.

 -- C Function: wchar_t* PyUnicode_AsWideCharString (PyObject *unicode,
          Py_ssize_t *size)
     Convert the Unicode object to a wide character string. The output
     string always ends with a nul character. If _size_ is not _NULL_,
     write the number of wide characters (excluding the trailing
     0-termination character) into _*size_.

     Returns a buffer allocated by `PyMem_Alloc()' (use *note
     PyMem_Free(): fe.  to free it) on success. On error, returns
     _NULL_, _*size_ is undefined and raises a `MemoryError'.

     New in version 3.2.


File: python-c-api-3.2.2.info,  Node: Built-in Codecs,  Next: Methods and Slot Functions,  Prev: Unicode Objects,  Up: Unicode Objects and Codecs

7.3.3.7 Built-in Codecs
.......................

Python provides a set of built-in codecs which are written in C for
speed. All of these codecs are directly usable via the following
functions.

  Many of the following APIs take two arguments encoding and errors,
and they have the same semantics as the ones of the built-in `str()'
string object constructor.

  Setting encoding to _NULL_ causes the default encoding to be used
which is ASCII.  The file system calls should use *note
PyUnicode_FSConverter(): fc. for encoding file names. This uses the
variable `Py_FileSystemDefaultEncoding' internally. This variable
should be treated as read-only: on some systems, it will be a pointer
to a static string, on others, it will change at run-time (such as when
the application invokes setlocale).

  Error handling is set by errors which may also be set to _NULL_
meaning to use the default handling defined for the codec.  Default
error handling for all built-in codecs is "strict" (`ValueError' is
raised).

  The codecs all use a similar interface.  Only deviation from the
following generic ones are documented for simplicity.

* Menu:

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::


File: python-c-api-3.2.2.info,  Node: Generic Codecs,  Next: UTF-8 Codecs,  Up: Built-in Codecs

7.3.3.8 Generic Codecs
......................

These are the generic codec APIs:

 -- C Function: PyObject* PyUnicode_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the `unicode()' built-in function.
     The codec to be used is looked up using the Python codec registry.
     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_Encode (const Py_UNICODE *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer _s_ of the given _size_
     and return a Python bytes object.  _encoding_ and _errors_ have
     the same meaning as the parameters of the same name in the Unicode
     `encode()' method.  The codec to be used is looked up using the
     Python codec registry.  Return _NULL_ if an exception was raised
     by the codec.

 -- C Function: PyObject* PyUnicode_AsEncodedString (PyObject *unicode,
          const char *encoding, const char *errors)
     Return value: New reference.

     Encode a Unicode object and return the result as Python bytes
     object.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the Unicode `encode()' method. The
     codec to be used is looked up using the Python codec registry.
     Return _NULL_ if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: UTF-8 Codecs,  Next: UTF-32 Codecs,  Prev: Generic Codecs,  Up: Built-in Codecs

7.3.3.9 UTF-8 Codecs
....................

These are the UTF-8 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF8 (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the UTF-8
     encoded string _s_. Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF8Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF8():
     2a4. If _consumed_ is not _NULL_, trailing incomplete UTF-8 byte
     sequences will not be treated as an error. Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF8 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer _s_ of the given _size_
     using UTF-8 and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsUTF8String (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using UTF-8 and return the result as
     Python bytes object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: UTF-32 Codecs,  Next: UTF-16 Codecs,  Prev: UTF-8 Codecs,  Up: Built-in Codecs

7.3.3.10 UTF-32 Codecs
......................

These are the UTF-32 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF32 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     Decode _size_ bytes from a UTF-32 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_)
     defines the error handling. It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first four bytes of the input
     data are a byte order mark (BOM), the decoder switches to this
     byte order and the BOM is not copied into the resulting Unicode
     string.  If `*byteorder' is `-1' or `1', any byte order mark is
     copied to the output.

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     In a narrow build codepoints outside the BMP will be decoded as
     surrogate pairs.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF32Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     If _consumed_ is _NULL_, behave like *note
     PyUnicode_DecodeUTF32(): 2a9. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF32Stateful(): 2aa. will not treat trailing
     incomplete UTF-32 byte sequences (such as a number of bytes not
     divisible by four) as an error. Those bytes will not be decoded
     and the number of bytes that have been decoded will be stored in
     _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF32 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     Return a Python bytes object holding the UTF-32 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is not defined, surrogate pairs will be output
     as a single codepoint.

     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsUTF32String (PyObject *unicode)
     Return a Python byte string using the UTF-32 encoding in native
     byte order. The string always starts with a BOM mark.  Error
     handling is "strict".  Return _NULL_ if an exception was raised by
     the codec.


File: python-c-api-3.2.2.info,  Node: UTF-16 Codecs,  Next: UTF-7 Codecs,  Prev: UTF-32 Codecs,  Up: Built-in Codecs

7.3.3.11 UTF-16 Codecs
......................

These are the UTF-16 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF16 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     Return value: New reference.

     Decode _size_ bytes from a UTF-16 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_)
     defines the error handling. It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first two bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If `*byteorder' is `-1' or `1', any byte order mark is copied to
     the output (where it will result in either a `\ufeff' or a
     `\ufffe' character).

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF16Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note
     PyUnicode_DecodeUTF16(): 2ae. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF16Stateful(): 2af. will not treat trailing
     incomplete UTF-16 byte sequences (such as an odd number of bytes
     or a split surrogate pair) as an error. Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF16 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     Return value: New reference.

     Return a Python bytes object holding the UTF-16 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is defined, a single *note Py_UNICODE: fd.
     value may get represented as a surrogate pair. If it is not
     defined, each *note Py_UNICODE: fd.  values is interpreted as an
     UCS-2 character.

     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsUTF16String (PyObject *unicode)
     Return value: New reference.

     Return a Python byte string using the UTF-16 encoding in native
     byte order. The string always starts with a BOM mark.  Error
     handling is "strict".  Return _NULL_ if an exception was raised by
     the codec.


File: python-c-api-3.2.2.info,  Node: UTF-7 Codecs,  Next: Unicode-Escape Codecs,  Prev: UTF-16 Codecs,  Up: Built-in Codecs

7.3.3.12 UTF-7 Codecs
.....................

These are the UTF-7 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF7 (const char *s,
          Py_ssize_t size, const char *errors)
     Create a Unicode object by decoding _size_ bytes of the UTF-7
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF7Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF7():
     2b3.  If _consumed_ is not _NULL_, trailing incomplete UTF-7
     base-64 sections will not be treated as an error.  Those bytes
     will not be decoded and the number of bytes that have been decoded
     will be stored in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF7 (const Py_UNICODE *s,
          Py_ssize_t size, int base64SetO, int base64WhiteSpace, const
          char *errors)
     Encode the *note Py_UNICODE: fd. buffer of the given size using
     UTF-7 and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

     If _base64SetO_ is nonzero, "Set O" (punctuation that has no
     otherwise special meaning) will be encoded in base-64.  If
     _base64WhiteSpace_ is nonzero, whitespace will be encoded in
     base-64.  Both are set to zero for the Python "utf-7" codec.


File: python-c-api-3.2.2.info,  Node: Unicode-Escape Codecs,  Next: Raw-Unicode-Escape Codecs,  Prev: UTF-7 Codecs,  Up: Built-in Codecs

7.3.3.13 Unicode-Escape Codecs
..............................

These are the "Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUnicodeEscape (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Unicode-Escape encoded string _s_.  Return _NULL_ if an exception
     was raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     Unicode-Escape and return a Python string object.  Return _NULL_
     if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsUnicodeEscapeString
          (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Unicode-Escape and return the result
     as Python string object.  Error handling is "strict". Return
     _NULL_ if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: Raw-Unicode-Escape Codecs,  Next: Latin-1 Codecs,  Prev: Unicode-Escape Codecs,  Up: Built-in Codecs

7.3.3.14 Raw-Unicode-Escape Codecs
..................................

These are the "Raw Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeRawUnicodeEscape (const
          char *s, Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Raw-Unicode-Escape encoded string _s_.  Return _NULL_ if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_EncodeRawUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     Raw-Unicode-Escape and return a Python string object.  Return
     _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsRawUnicodeEscapeString
          (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Raw-Unicode-Escape and return the
     result as Python string object. Error handling is "strict". Return
     _NULL_ if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: Latin-1 Codecs,  Next: ASCII Codecs,  Prev: Raw-Unicode-Escape Codecs,  Up: Built-in Codecs

7.3.3.15 Latin-1 Codecs
.......................

These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256
Unicode ordinals and only these are accepted by the codecs during
encoding.

 -- C Function: PyObject* PyUnicode_DecodeLatin1 (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the Latin-1
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_EncodeLatin1 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     Latin-1 and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsLatin1String (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Latin-1 and return the result as
     Python bytes object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: ASCII Codecs,  Next: Character Map Codecs,  Prev: Latin-1 Codecs,  Up: Built-in Codecs

7.3.3.16 ASCII Codecs
.....................

These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All
other codes generate errors.

 -- C Function: PyObject* PyUnicode_DecodeASCII (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the ASCII
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_EncodeASCII (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     ASCII and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsASCIIString (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using ASCII and return the result as
     Python bytes object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: Character Map Codecs,  Next: MBCS codecs for Windows,  Prev: ASCII Codecs,  Up: Built-in Codecs

7.3.3.17 Character Map Codecs
.............................

This codec is special in that it can be used to implement many
different codecs (and this is in fact what was done to obtain most of
the standard codecs included in the `encodings' package). The codec
uses mapping to encode and decode characters.

  Decoding mappings must map single string characters to single Unicode
characters, integers (which are then interpreted as Unicode ordinals)
or None (meaning "undefined mapping" and causing an error).

  Encoding mappings must map single Unicode characters to single string
characters, integers (which are then interpreted as Latin-1 ordinals)
or None (meaning "undefined mapping" and causing an error).

  The mapping objects provided must only support the __getitem__ mapping
interface.

  If a character lookup fails with a LookupError, the character is
copied as-is meaning that its ordinal value will be interpreted as
Unicode or Latin-1 ordinal resp. Because of this, mappings only need to
contain those mappings which map characters to different code points.

  These are the mapping codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeCharmap (const char *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_ using the given _mapping_ object.  Return _NULL_ if an
     exception was raised by the codec. If _mapping_ is _NULL_ latin-1
     decoding will be done. Else it can be a dictionary mapping byte or
     a unicode string, which is treated as a lookup table.  Byte values
     greater that the length of the string and U+FFFE "characters" are
     treated as "undefined mapping".

 -- C Function: PyObject* PyUnicode_EncodeCharmap (const Py_UNICODE *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     the given _mapping_ object and return a Python string object.
     Return _NULL_ if an exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsCharmapString (PyObject *unicode,
          PyObject *mapping)
     Return value: New reference.

     Encode a Unicode object using the given _mapping_ object and
     return the result as Python string object.  Error handling is
     "strict".  Return _NULL_ if an exception was raised by the codec.

  The following codec API is special in that maps Unicode to Unicode.

 -- C Function: PyObject* PyUnicode_TranslateCharmap (const
          Py_UNICODE *s, Py_ssize_t size, PyObject *table, const
          char *errors)
     Return value: New reference.

     Translate a *note Py_UNICODE: fd. buffer of the given _size_ by
     applying a character mapping _table_ to it and return the
     resulting Unicode object.  Return _NULL_ when an exception was
     raised by the codec.

     The _mapping_ table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the `__getitem__()' interface;
     dictionaries and sequences work well.  Unmapped character ordinals
     (ones which cause a `LookupError') are left untouched and are
     copied as-is.


File: python-c-api-3.2.2.info,  Node: MBCS codecs for Windows,  Next: Methods & Slots,  Prev: Character Map Codecs,  Up: Built-in Codecs

7.3.3.18 MBCS codecs for Windows
................................

These are the MBCS codec APIs. They are currently only available on
Windows and use the Win32 MBCS converters to implement the conversions.
Note that MBCS (or DBCS) is a class of encodings, not just one.  The
target encoding is defined by the user settings on the machine running
the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCS (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the MBCS
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCSStateful (const char *s,
          int size, const char *errors, int *consumed)
     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeMBCS():
     2cc. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeMBCSStateful(): 2cd. will not decode trailing lead
     byte and the number of bytes that have been decoded will be stored
     in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeMBCS (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: fd. buffer of the given _size_ using
     MBCS and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

 -- C Function: PyObject* PyUnicode_AsMBCSString (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using MBCS and return the result as Python
     bytes object.  Error handling is "strict".  Return _NULL_ if an
     exception was raised by the codec.


File: python-c-api-3.2.2.info,  Node: Methods & Slots,  Prev: MBCS codecs for Windows,  Up: Built-in Codecs

7.3.3.19 Methods & Slots
........................


File: python-c-api-3.2.2.info,  Node: Methods and Slot Functions,  Prev: Built-in Codecs,  Up: Unicode Objects and Codecs

7.3.3.20 Methods and Slot Functions
...................................

The following APIs are capable of handling Unicode objects and strings
on input (we refer to them as strings in the descriptions) and return
Unicode objects or integers as appropriate.

  They all return _NULL_ or `-1' if an exception occurs.

 -- C Function: PyObject* PyUnicode_Concat (PyObject *left,
          PyObject *right)
     Return value: New reference.

     Concat two strings giving a new Unicode string.

 -- C Function: PyObject* PyUnicode_Split (PyObject *s, PyObject *sep,
          Py_ssize_t maxsplit)
     Return value: New reference.

     Split a string giving a list of Unicode strings.  If _sep_ is
     _NULL_, splitting will be done at all whitespace substrings.
     Otherwise, splits occur at the given separator.  At most
     _maxsplit_ splits will be done.  If negative, no limit is set.
     Separators are not included in the resulting list.

 -- C Function: PyObject* PyUnicode_Splitlines (PyObject *s,
          int keepend)
     Return value: New reference.

     Split a Unicode string at line breaks, returning a list of Unicode
     strings.  CRLF is considered to be one line break.  If _keepend_
     is 0, the Line break characters are not included in the resulting
     strings.

 -- C Function: PyObject* PyUnicode_Translate (PyObject *str,
          PyObject *table, const char *errors)
     Return value: New reference.

     Translate a string by applying a character mapping table to it and
     return the resulting Unicode object.

     The mapping table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the `__getitem__()' interface;
     dictionaries and sequences work well.  Unmapped character ordinals
     (ones which cause a `LookupError') are left untouched and are
     copied as-is.

     _errors_ has the usual meaning for codecs. It may be _NULL_ which
     indicates to use the default error handling.

 -- C Function: PyObject* PyUnicode_Join (PyObject *separator,
          PyObject *seq)
     Return value: New reference.

     Join a sequence of strings using the given _separator_ and return
     the resulting Unicode string.

 -- C Function: int PyUnicode_Tailmatch (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return 1 if _substr_ matches `str[start:end]' at the given tail end
     (_direction_ == -1 means to do a prefix match, _direction_ == 1 a
     suffix match), 0 otherwise. Return `-1' if an error occurred.

 -- C Function: Py_ssize_t PyUnicode_Find (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return the first position of _substr_ in `str[start:end]' using
     the given _direction_ (_direction_ == 1 means to do a forward
     search, _direction_ == -1 a backward search).  The return value is
     the index of the first match; a value of `-1' indicates that no
     match was found, and `-2' indicates that an error occurred and an
     exception has been set.

 -- C Function: Py_ssize_t PyUnicode_Count (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end)
     Return the number of non-overlapping occurrences of _substr_ in
     `str[start:end]'.  Return `-1' if an error occurred.

 -- C Function: PyObject* PyUnicode_Replace (PyObject *str,
          PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)
     Return value: New reference.

     Replace at most _maxcount_ occurrences of _substr_ in _str_ with
     _replstr_ and return the resulting Unicode object. _maxcount_ ==
     -1 means replace all occurrences.

 -- C Function: int PyUnicode_Compare (PyObject *left, PyObject *right)
     Compare two strings and return -1, 0, 1 for less than, equal, and
     greater than, respectively.

 -- C Function: int PyUnicode_CompareWithASCIIString (PyObject *uni,
          char *string)
     Compare a unicode object, _uni_, with _string_ and return -1, 0, 1
     for less than, equal, and greater than, respectively. It is best
     to pass only ASCII-encoded strings, but the function interprets
     the input string as ISO-8859-1 if it contains non-ASCII
     characters".

 -- C Function: int PyUnicode_RichCompare (PyObject *left,
          PyObject *right, int op)
     Rich compare two unicode strings and return one of the following:

        * `NULL' in case an exception was raised

        * `Py_True' or `Py_False' for successful comparisons

        * `Py_NotImplemented' in case the type combination is unknown

     Note that `Py_EQ' and `Py_NE' comparisons can cause a
     `UnicodeWarning' in case the conversion of the arguments to
     Unicode fails with a `UnicodeDecodeError'.

     Possible values for _op_ are `Py_GT', `Py_GE', `Py_EQ', `Py_NE',
     `Py_LT', and `Py_LE'.

 -- C Function: PyObject* PyUnicode_Format (PyObject *format,
          PyObject *args)
     Return value: New reference.

     Return a new string object from _format_ and _args_; this is
     analogous to `format % args'.  The _args_ argument must be a tuple.

 -- C Function: int PyUnicode_Contains (PyObject *container,
          PyObject *element)
     Check whether _element_ is contained in _container_ and return
     true or false accordingly.

     _element_ has to coerce to a one element Unicode string. `-1' is
     returned if there was an error.

 -- C Function: void PyUnicode_InternInPlace (PyObject **string)
     Intern the argument _*string_ in place.  The argument must be the
     address of a pointer variable pointing to a Python unicode string
     object.  If there is an existing interned string that is the same
     as _*string_, it sets _*string_ to it (decrementing the reference
     count of the old string object and incrementing the reference
     count of the interned string object), otherwise it leaves
     _*string_ alone and interns it (incrementing its reference count).
     (Clarification: even though there is a lot of talk about reference
     counts, think of this function as reference-count-neutral; you own
     the object after the call if and only if you owned it before the
     call.)

 -- C Function: PyObject* PyUnicode_InternFromString (const char *v)
     A combination of *note PyUnicode_FromString(): 28d. and *note
     PyUnicode_InternInPlace(): 2e1, returning either a new unicode
     string object that has been interned, or a new ("owned") reference
     to an earlier interned string object with the same value.


File: python-c-api-3.2.2.info,  Node: Tuple Objects,  Next: List Objects,  Prev: Unicode Objects and Codecs,  Up: Sequence Objects

7.3.4 Tuple Objects
-------------------

 -- C Type: PyTupleObject
     This subtype of *note PyObject: a. represents a Python tuple
     object.

 -- C Variable: PyTypeObject PyTuple_Type
     This instance of *note PyTypeObject: b. represents the Python
     tuple type; it is the same object as `tuple' in the Python layer.

 -- C Function: int PyTuple_Check (PyObject *p)
     Return true if _p_ is a tuple object or an instance of a subtype
     of the tuple type.

 -- C Function: int PyTuple_CheckExact (PyObject *p)
     Return true if _p_ is a tuple object, but not an instance of a
     subtype of the tuple type.

 -- C Function: PyObject* PyTuple_New (Py_ssize_t len)
     Return value: New reference.

     Return a new tuple object of size _len_, or _NULL_ on failure.

 -- C Function: PyObject* PyTuple_Pack (Py_ssize_t n, ...)
     Return value: New reference.

     Return a new tuple object of size _n_, or _NULL_ on failure. The
     tuple values are initialized to the subsequent _n_ C arguments
     pointing to Python objects.  `PyTuple_Pack(2, a, b)' is equivalent
     to `Py_BuildValue("(OO)", a, b)'.

 -- C Function: Py_ssize_t PyTuple_Size (PyObject *p)
     Take a pointer to a tuple object, and return the size of that
     tuple.

 -- C Function: Py_ssize_t PyTuple_GET_SIZE (PyObject *p)
     Return the size of the tuple _p_, which must be non-_NULL_ and
     point to a tuple; no error checking is performed.

 -- C Function: PyObject* PyTuple_GetItem (PyObject *p, Py_ssize_t pos)
     Return value: Borrowed reference.

     Return the object at position _pos_ in the tuple pointed to by
     _p_.  If _pos_ is out of bounds, return _NULL_ and sets an
     `IndexError' exception.

 -- C Function: PyObject* PyTuple_GET_ITEM (PyObject *p, Py_ssize_t pos)
     Return value: Borrowed reference.

     Like *note PyTuple_GetItem(): 2ee, but does no checking of its
     arguments.

 -- C Function: PyObject* PyTuple_GetSlice (PyObject *p,
          Py_ssize_t low, Py_ssize_t high)
     Return value: New reference.

     Take a slice of the tuple pointed to by _p_ from _low_ to _high_
     and return it as a new tuple.

 -- C Function: int PyTuple_SetItem (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Insert a reference to object _o_ at position _pos_ of the tuple
     pointed to by _p_. Return `0' on success.

          Note: This function "steals" a reference to _o_.

 -- C Function: void PyTuple_SET_ITEM (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Like *note PyTuple_SetItem(): 14, but does no error checking, and
     should _only_ be used to fill in brand new tuples.

          Note: This function "steals" a reference to _o_.

 -- C Function: int _PyTuple_Resize (PyObject **p, Py_ssize_t newsize)
     Can be used to resize a tuple.  _newsize_ will be the new length
     of the tuple.  Because tuples are _supposed_ to be immutable, this
     should only be used if there is only one reference to the object.
     Do _not_ use this if the tuple may already be known to some other
     part of the code.  The tuple will always grow or shrink at the
     end.  Think of this as destroying the old tuple and creating a new
     one, only more efficiently.  Returns `0' on success. Client code
     should never assume that the resulting value of `*p' will be the
     same as before calling this function. If the object referenced by
     `*p' is replaced, the original `*p' is destroyed.  On failure,
     returns `-1' and sets `*p' to _NULL_, and raises `MemoryError' or
     `SystemError'.

 -- C Function: int PyTuple_ClearFreeList ()
     Clear the free list. Return the total number of freed items.


File: python-c-api-3.2.2.info,  Node: List Objects,  Prev: Tuple Objects,  Up: Sequence Objects

7.3.5 List Objects
------------------

 -- C Type: PyListObject
     This subtype of *note PyObject: a. represents a Python list object.

 -- C Variable: PyTypeObject PyList_Type
     This instance of *note PyTypeObject: b. represents the Python list
     type.  This is the same object as `list' in the Python layer.

 -- C Function: int PyList_Check (PyObject *p)
     Return true if _p_ is a list object or an instance of a subtype of
     the list type.

 -- C Function: int PyList_CheckExact (PyObject *p)
     Return true if _p_ is a list object, but not an instance of a
     subtype of the list type.

 -- C Function: PyObject* PyList_New (Py_ssize_t len)
     Return value: New reference.

     Return a new list of length _len_ on success, or _NULL_ on failure.

          Note: If _len_ is greater than zero, the returned list
          object's items are set to `NULL'.  Thus you cannot use
          abstract API functions such as *note PySequence_SetItem():
          16.  or expose the object to Python code before setting all
          items to a real object with *note PyList_SetItem(): 13.

 -- C Function: Py_ssize_t PyList_Size (PyObject *list)
     Return the length of the list object in _list_; this is equivalent
     to `len(list)' on a list object.

 -- C Function: Py_ssize_t PyList_GET_SIZE (PyObject *list)
     Macro form of *note PyList_Size(): 2fb. without error checking.

 -- C Function: PyObject* PyList_GetItem (PyObject *list,
          Py_ssize_t index)
     Return value: Borrowed reference.

     Return the object at position _index_ in the list pointed to by
     _list_.  The position must be positive, indexing from the end of
     the list is not supported.  If _index_ is out of bounds, return
     _NULL_ and set an `IndexError' exception.

 -- C Function: PyObject* PyList_GET_ITEM (PyObject *list, Py_ssize_t i)
     Return value: Borrowed reference.

     Macro form of *note PyList_GetItem(): 1c. without error checking.

 -- C Function: int PyList_SetItem (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Set the item at index _index_ in list to _item_.  Return `0' on
     success or `-1' on failure.

          Note: This function "steals" a reference to _item_ and
          discards a reference to an item already in the list at the
          affected position.

 -- C Function: void PyList_SET_ITEM (PyObject *list, Py_ssize_t i,
          PyObject *o)
     Macro form of *note PyList_SetItem(): 13. without error checking.
     This is normally only used to fill in new lists where there is no
     previous content.

          Note: This macro "steals" a reference to _item_, and, unlike
          *note PyList_SetItem(): 13, does _not_ discard a reference to
          any item that is being replaced; any reference in _list_ at
          position _i_ will be leaked.

 -- C Function: int PyList_Insert (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Insert the item _item_ into list _list_ in front of index _index_.
     Return `0' if successful; return `-1' and set an exception if
     unsuccessful.  Analogous to `list.insert(index, item)'.

 -- C Function: int PyList_Append (PyObject *list, PyObject *item)
     Append the object _item_ at the end of list _list_. Return `0' if
     successful; return `-1' and set an exception if unsuccessful.
     Analogous to `list.append(item)'.

 -- C Function: PyObject* PyList_GetSlice (PyObject *list,
          Py_ssize_t low, Py_ssize_t high)
     Return value: New reference.

     Return a list of the objects in _list_ containing the objects
     _between_ _low_ and _high_.  Return _NULL_ and set an exception if
     unsuccessful.  Analogous to `list[low:high]'.  Negative indices,
     as when slicing from Python, are not supported.

 -- C Function: int PyList_SetSlice (PyObject *list, Py_ssize_t low,
          Py_ssize_t high, PyObject *itemlist)
     Set the slice of _list_ between _low_ and _high_ to the contents of
     _itemlist_.  Analogous to `list[low:high] = itemlist'. The
     _itemlist_ may be _NULL_, indicating the assignment of an empty
     list (slice deletion).  Return `0' on success, `-1' on failure.
     Negative indices, as when slicing from Python, are not supported.

 -- C Function: int PyList_Sort (PyObject *list)
     Sort the items of _list_ in place.  Return `0' on success, `-1' on
     failure.  This is equivalent to `list.sort()'.

 -- C Function: int PyList_Reverse (PyObject *list)
     Reverse the items of _list_ in place.  Return `0' on success, `-1'
     on failure.  This is the equivalent of `list.reverse()'.

 -- C Function: PyObject* PyList_AsTuple (PyObject *list)
     Return value: New reference.

     Return a new tuple object containing the contents of _list_;
     equivalent to `tuple(list)'.


File: python-c-api-3.2.2.info,  Node: Mapping Objects,  Next: Other Objects,  Prev: Sequence Objects,  Up: Concrete Objects Layer

7.4 Mapping Objects
===================

* Menu:

* Dictionary Objects::


File: python-c-api-3.2.2.info,  Node: Dictionary Objects,  Up: Mapping Objects

7.4.1 Dictionary Objects
------------------------

 -- C Type: PyDictObject
     This subtype of *note PyObject: a. represents a Python dictionary
     object.

 -- C Variable: PyTypeObject PyDict_Type
     This instance of *note PyTypeObject: b. represents the Python
     dictionary type.  This is the same object as `dict' in the Python
     layer.

 -- C Function: int PyDict_Check (PyObject *p)
     Return true if _p_ is a dict object or an instance of a subtype of
     the dict type.

 -- C Function: int PyDict_CheckExact (PyObject *p)
     Return true if _p_ is a dict object, but not an instance of a
     subtype of the dict type.

 -- C Function: PyObject* PyDict_New ()
     Return value: New reference.

     Return a new empty dictionary, or _NULL_ on failure.

 -- C Function: PyObject* PyDictProxy_New (PyObject *dict)
     Return value: New reference.

     Return a proxy object for a mapping which enforces read-only
     behavior.  This is normally used to create a proxy to prevent
     modification of the dictionary for non-dynamic class types.

 -- C Function: void PyDict_Clear (PyObject *p)
     Empty an existing dictionary of all key-value pairs.

 -- C Function: int PyDict_Contains (PyObject *p, PyObject *key)
     Determine if dictionary _p_ contains _key_.  If an item in _p_ is
     matches _key_, return `1', otherwise return `0'.  On error, return
     `-1'.  This is equivalent to the Python expression `key in p'.

 -- C Function: PyObject* PyDict_Copy (PyObject *p)
     Return value: New reference.

     Return a new dictionary that contains the same key-value pairs as
     _p_.

 -- C Function: int PyDict_SetItem (PyObject *p, PyObject *key,
          PyObject *val)
     Insert _value_ into the dictionary _p_ with a key of _key_.  _key_
     must be _hashable_; if it isn't, `TypeError' will be raised. Return
     `0' on success or `-1' on failure.

 -- C Function: int PyDict_SetItemString (PyObject *p, const char *key,
          PyObject *val)
     Insert _value_ into the dictionary _p_ using _key_ as a key. _key_
     should be a `char*'.  The key object is created using
     `PyUnicode_FromString(key)'.  Return `0' on success or `-1' on
     failure.

 -- C Function: int PyDict_DelItem (PyObject *p, PyObject *key)
     Remove the entry in dictionary _p_ with key _key_. _key_ must be
     hashable; if it isn't, `TypeError' is raised.  Return `0' on
     success or `-1' on failure.

 -- C Function: int PyDict_DelItemString (PyObject *p, char *key)
     Remove the entry in dictionary _p_ which has a key specified by
     the string _key_.  Return `0' on success or `-1' on failure.

 -- C Function: PyObject* PyDict_GetItem (PyObject *p, PyObject *key)
     Return value: Borrowed reference.

     Return the object from dictionary _p_ which has a key _key_.
     Return _NULL_ if the key _key_ is not present, but _without_
     setting an exception.

 -- C Function: PyObject* PyDict_GetItemWithError (PyObject *p,
          PyObject *key)
     Variant of *note PyDict_GetItem(): 317. that does not suppress
     exceptions. Return _NULL_ *with* an exception set if an exception
     occurred.  Return _NULL_ *without* an exception set if the key
     wasn't present.

 -- C Function: PyObject* PyDict_GetItemString (PyObject *p, const
          char *key)
     Return value: Borrowed reference.

     This is the same as *note PyDict_GetItem(): 317, but _key_ is
     specified as a `char*', rather than a *note PyObject*: a.

 -- C Function: PyObject* PyDict_Items (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2f7. containing all the items from
     the dictionary.

 -- C Function: PyObject* PyDict_Keys (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2f7. containing all the keys from the
     dictionary.

 -- C Function: PyObject* PyDict_Values (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2f7. containing all the values from
     the dictionary _p_.

 -- C Function: Py_ssize_t PyDict_Size (PyObject *p)
     Return the number of items in the dictionary.  This is equivalent
     to `len(p)' on a dictionary.

 -- C Function: int PyDict_Next (PyObject *p, Py_ssize_t *ppos,
          PyObject **pkey, PyObject **pvalue)
     Iterate over all key-value pairs in the dictionary _p_.  The
     `Py_ssize_t' referred to by _ppos_ must be initialized to `0'
     prior to the first call to this function to start the iteration;
     the function returns true for each pair in the dictionary, and
     false once all pairs have been reported.  The parameters _pkey_
     and _pvalue_ should either point to *note PyObject*: a. variables
     that will be filled in with each key and value, respectively, or
     may be _NULL_.  Any references returned through them are borrowed.
     _ppos_ should not be altered during iteration. Its value
     represents offsets within the internal dictionary structure, and
     since the structure is sparse, the offsets are not consecutive.

     For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             /* do something interesting with the values... */
             ...
         }

     The dictionary _p_ should not be mutated during iteration.  It is
     safe to modify the values of the keys as you iterate over the
     dictionary, but only so long as the set of keys does not change.
     For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             long i = PyLong_AsLong(value);
             if (i == -1 && PyErr_Occurred()) {
                 return -1;
             }
             PyObject *o = PyLong_FromLong(i + 1);
             if (o == NULL)
                 return -1;
             if (PyDict_SetItem(self->dict, key, o) < 0) {
                 Py_DECREF(o);
                 return -1;
             }
             Py_DECREF(o);
         }



 -- C Function: int PyDict_Merge (PyObject *a, PyObject *b,
          int override)
     Iterate over mapping object _b_ adding key-value pairs to
     dictionary _a_.  _b_ may be a dictionary, or any object supporting
     *note PyMapping_Keys(): 1a8.  and *note PyObject_GetItem(): 1a. If
     _override_ is true, existing pairs in _a_ will be replaced if a
     matching key is found in _b_, otherwise pairs will only be added
     if there is not a matching key in _a_. Return `0' on success or
     `-1' if an exception was raised.

 -- C Function: int PyDict_Update (PyObject *a, PyObject *b)
     This is the same as `PyDict_Merge(a, b, 1)' in C, or `a.update(b)'
     in Python.  Return `0' on success or `-1' if an exception was
     raised.

 -- C Function: int PyDict_MergeFromSeq2 (PyObject *a, PyObject *seq2,
          int override)
     Update or merge into dictionary _a_, from the key-value pairs in
     _seq2_.  _seq2_ must be an iterable object producing iterable
     objects of length 2, viewed as key-value pairs.  In case of
     duplicate keys, the last wins if _override_ is true, else the
     first wins. Return `0' on success or `-1' if an exception was
     raised. Equivalent Python (except for the return value):

         def PyDict_MergeFromSeq2(a, seq2, override):
             for key, value in seq2:
                 if override or key not in a:
                     a[key] = value




File: python-c-api-3.2.2.info,  Node: Other Objects,  Prev: Mapping Objects,  Up: Concrete Objects Layer

7.5 Other Objects
=================

* Menu:

* Set Objects::
* Function Objects::
* Instance Method Objects::
* Method Objects::
* File Objects::
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* MemoryView objects::
* Weak Reference Objects::
* Capsules::
* Cell Objects::
* Generator Objects::
* DateTime Objects::
* Code Objects::


File: python-c-api-3.2.2.info,  Node: Set Objects,  Next: Function Objects,  Up: Other Objects

7.5.1 Set Objects
-----------------

This section details the public API for `set' and `frozenset' objects.
Any functionality not listed below is best accessed using the either
the abstract object protocol (including *note PyObject_CallMethod():
151, *note PyObject_RichCompareBool(): 145, *note PyObject_Hash(): 153,
*note PyObject_Repr(): 146, *note PyObject_IsTrue(): 155, *note
PyObject_Print(): 139, and *note PyObject_GetIter(): 15d.) or the
abstract number protocol (including *note PyNumber_And(): 171, *note
PyNumber_Subtract(): 163, *note PyNumber_Or(): 173, *note
PyNumber_Xor(): 172, *note PyNumber_InPlaceAnd(): 17d, *note
PyNumber_InPlaceSubtract(): 175, *note PyNumber_InPlaceOr(): 17f, and
*note PyNumber_InPlaceXor(): 17e.).

 -- C Type: PySetObject
     This subtype of *note PyObject: a. is used to hold the internal
     data for both `set' and `frozenset' objects.  It is like a *note
     PyDictObject: 30b.  in that it is a fixed size for small sets
     (much like tuple storage) and will point to a separate, variable
     sized block of memory for medium and large sized sets (much like
     list storage). None of the fields of this structure should be
     considered public and are subject to change.  All access should be
     done through the documented API rather than by manipulating the
     values in the structure.

 -- C Variable: PyTypeObject PySet_Type
     This is an instance of *note PyTypeObject: b. representing the
     Python `set' type.

 -- C Variable: PyTypeObject PyFrozenSet_Type
     This is an instance of *note PyTypeObject: b. representing the
     Python `frozenset' type.

  The following type check macros work on pointers to any Python
object. Likewise, the constructor functions work with any iterable
Python object.

 -- C Function: int PySet_Check (PyObject *p)
     Return true if _p_ is a `set' object or an instance of a subtype.

 -- C Function: int PyFrozenSet_Check (PyObject *p)
     Return true if _p_ is a `frozenset' object or an instance of a
     subtype.

 -- C Function: int PyAnySet_Check (PyObject *p)
     Return true if _p_ is a `set' object, a `frozenset' object, or an
     instance of a subtype.

 -- C Function: int PyAnySet_CheckExact (PyObject *p)
     Return true if _p_ is a `set' object or a `frozenset' object but
     not an instance of a subtype.

 -- C Function: int PyFrozenSet_CheckExact (PyObject *p)
     Return true if _p_ is a `frozenset' object but not an instance of a
     subtype.

 -- C Function: PyObject* PySet_New (PyObject *iterable)
     Return value: New reference.

     Return a new `set' containing objects returned by the _iterable_.
     The _iterable_ may be _NULL_ to create a new empty set.  Return
     the new set on success or _NULL_ on failure.  Raise `TypeError' if
     _iterable_ is not actually iterable.  The constructor is also
     useful for copying a set (`c=set(s)').

 -- C Function: PyObject* PyFrozenSet_New (PyObject *iterable)
     Return value: New reference.

     Return a new `frozenset' containing objects returned by the
     _iterable_.  The _iterable_ may be _NULL_ to create a new empty
     frozenset.  Return the new set on success or _NULL_ on failure.
     Raise `TypeError' if _iterable_ is not actually iterable.

  The following functions and macros are available for instances of
`set' or `frozenset' or instances of their subtypes.

 -- C Function: Py_ssize_t PySet_Size (PyObject *anyset)
     Return the length of a `set' or `frozenset' object. Equivalent to
     `len(anyset)'.  Raises a `PyExc_SystemError' if _anyset_ is not a
     `set', `frozenset', or an instance of a subtype.

 -- C Function: Py_ssize_t PySet_GET_SIZE (PyObject *anyset)
     Macro form of *note PySet_Size(): 331. without error checking.

 -- C Function: int PySet_Contains (PyObject *anyset, PyObject *key)
     Return 1 if found, 0 if not found, and -1 if an error is
     encountered.  Unlike the Python `__contains__()' method, this
     function does not automatically convert unhashable sets into
     temporary frozensets.  Raise a `TypeError' if the _key_ is
     unhashable. Raise `PyExc_SystemError' if _anyset_ is not a `set',
     `frozenset', or an instance of a subtype.

 -- C Function: int PySet_Add (PyObject *set, PyObject *key)
     Add _key_ to a `set' instance.  Also works with `frozenset'
     instances (like *note PyTuple_SetItem(): 14. it can be used to
     fill-in the values of brand new frozensets before they are exposed
     to other code).  Return 0 on success or -1 on failure. Raise a
     `TypeError' if the _key_ is unhashable. Raise a `MemoryError' if
     there is no room to grow.  Raise a `SystemError' if _set_ is an
     not an instance of `set' or its subtype.

  The following functions are available for instances of `set' or its
subtypes but not for instances of `frozenset' or its subtypes.

 -- C Function: int PySet_Discard (PyObject *set, PyObject *key)
     Return 1 if found and removed, 0 if not found (no action taken),
     and -1 if an error is encountered.  Does not raise `KeyError' for
     missing keys.  Raise a `TypeError' if the _key_ is unhashable.
     Unlike the Python `discard()' method, this function does not
     automatically convert unhashable sets into temporary frozensets.
     Raise `PyExc_SystemError' if _set_ is an not an instance of `set'
     or its subtype.

 -- C Function: PyObject* PySet_Pop (PyObject *set)
     Return value: New reference.

     Return a new reference to an arbitrary object in the _set_, and
     removes the object from the _set_.  Return _NULL_ on failure.
     Raise `KeyError' if the set is empty. Raise a `SystemError' if
     _set_ is an not an instance of `set' or its subtype.

 -- C Function: int PySet_Clear (PyObject *set)
     Empty an existing set of all elements.


File: python-c-api-3.2.2.info,  Node: Function Objects,  Next: Instance Method Objects,  Prev: Set Objects,  Up: Other Objects

7.5.2 Function Objects
----------------------

There are a few functions specific to Python functions.

 -- C Type: PyFunctionObject
     The C structure used for functions.

 -- C Variable: PyTypeObject PyFunction_Type
     This is an instance of *note PyTypeObject: b. and represents the
     Python function type.  It is exposed to Python programmers as
     `types.FunctionType'.

 -- C Function: int PyFunction_Check (PyObject *o)
     Return true if _o_ is a function object (has type *note
     PyFunction_Type: 33c.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyFunction_New (PyObject *code,
          PyObject *globals)
     Return value: New reference.

     Return a new function object associated with the code object
     _code_. _globals_ must be a dictionary with the global variables
     accessible to the function.

     The function's docstring, name and ___module___ are retrieved from
     the code object, the argument defaults and closure are set to
     _NULL_.

 -- C Function: PyObject* PyFunction_GetCode (PyObject *op)
     Return value: Borrowed reference.

     Return the code object associated with the function object _op_.

 -- C Function: PyObject* PyFunction_GetGlobals (PyObject *op)
     Return value: Borrowed reference.

     Return the globals dictionary associated with the function object
     _op_.

 -- C Function: PyObject* PyFunction_GetModule (PyObject *op)
     Return value: Borrowed reference.

     Return the ___module___ attribute of the function object _op_.
     This is normally a string containing the module name, but can be
     set to any other object by Python code.

 -- C Function: PyObject* PyFunction_GetDefaults (PyObject *op)
     Return value: Borrowed reference.

     Return the argument default values of the function object _op_.
     This can be a tuple of arguments or _NULL_.

 -- C Function: int PyFunction_SetDefaults (PyObject *op,
          PyObject *defaults)
     Set the argument default values for the function object _op_.
     _defaults_ must be _Py_None_ or a tuple.

     Raises `SystemError' and returns `-1' on failure.

 -- C Function: PyObject* PyFunction_GetClosure (PyObject *op)
     Return value: Borrowed reference.

     Return the closure associated with the function object _op_. This
     can be _NULL_ or a tuple of cell objects.

 -- C Function: int PyFunction_SetClosure (PyObject *op,
          PyObject *closure)
     Set the closure associated with the function object _op_.
     _closure_ must be _Py_None_ or a tuple of cell objects.

     Raises `SystemError' and returns `-1' on failure.

 -- C Function: PyObject *PyFunction_GetAnnotations (PyObject *op)
     Return the annotations of the function object _op_. This can be a
     mutable dictionary or _NULL_.

 -- C Function: int PyFunction_SetAnnotations (PyObject *op,
          PyObject *annotations)
     Set the annotations for the function object _op_. _annotations_
     must be a dictionary or _Py_None_.

     Raises `SystemError' and returns `-1' on failure.


File: python-c-api-3.2.2.info,  Node: Instance Method Objects,  Next: Method Objects,  Prev: Function Objects,  Up: Other Objects

7.5.3 Instance Method Objects
-----------------------------

An instance method is a wrapper for a *note PyCFunction: 34b. and the
new way to bind a *note PyCFunction: 34b. to a class object. It
replaces the former call `PyMethod_New(func, NULL, class)'.

 -- C Variable: PyTypeObject PyInstanceMethod_Type
     This instance of *note PyTypeObject: b. represents the Python
     instance method type. It is not exposed to Python programs.

 -- C Function: int PyInstanceMethod_Check (PyObject *o)
     Return true if _o_ is an instance method object (has type *note
     PyInstanceMethod_Type: 34c.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyInstanceMethod_New (PyObject *func)
     Return a new instance method object, with _func_ being any
     callable object _func_ is is the function that will be called when
     the instance method is called.

 -- C Function: PyObject* PyInstanceMethod_Function (PyObject *im)
     Return the function object associated with the instance method
     _im_.

 -- C Function: PyObject* PyInstanceMethod_GET_FUNCTION (PyObject *im)
     Macro version of *note PyInstanceMethod_Function(): 34f. which
     avoids error checking.


File: python-c-api-3.2.2.info,  Node: Method Objects,  Next: File Objects,  Prev: Instance Method Objects,  Up: Other Objects

7.5.4 Method Objects
--------------------

Methods are bound function objects. Methods are always bound to an
instance of an user-defined class. Unbound methods (methods bound to a
class object) are no longer available.

 -- C Variable: PyTypeObject PyMethod_Type
     This instance of *note PyTypeObject: b. represents the Python
     method type.  This is exposed to Python programs as
     `types.MethodType'.

 -- C Function: int PyMethod_Check (PyObject *o)
     Return true if _o_ is a method object (has type *note
     PyMethod_Type: 353.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyMethod_New (PyObject *func, PyObject *self)
     Return value: New reference.

     Return a new method object, with _func_ being any callable object
     and _self_ the instance the method should be bound. _func_ is is
     the function that will be called when the method is called. _self_
     must not be _NULL_.

 -- C Function: PyObject* PyMethod_Function (PyObject *meth)
     Return value: Borrowed reference.

     Return the function object associated with the method _meth_.

 -- C Function: PyObject* PyMethod_GET_FUNCTION (PyObject *meth)
     Return value: Borrowed reference.

     Macro version of *note PyMethod_Function(): 356. which avoids
     error checking.

 -- C Function: PyObject* PyMethod_Self (PyObject *meth)
     Return value: Borrowed reference.

     Return the instance associated with the method _meth_.

 -- C Function: PyObject* PyMethod_GET_SELF (PyObject *meth)
     Return value: Borrowed reference.

     Macro version of *note PyMethod_Self(): 358. which avoids error
     checking.

 -- C Function: int PyMethod_ClearFreeList ()
     Clear the free list. Return the total number of freed items.


File: python-c-api-3.2.2.info,  Node: File Objects,  Next: Module Objects,  Prev: Method Objects,  Up: Other Objects

7.5.5 File Objects
------------------

These APIs are a minimal emulation of the Python 2 C API for built-in
file objects, which used to rely on the buffered I/O (`FILE*') support
from the C standard library.  In Python 3, files and streams use the new
`io' module, which defines several layers over the low-level unbuffered
I/O of the operating system.  The functions described below are
convenience C wrappers over these new APIs, and meant mostly for
internal error reporting in the interpreter; third-party code is
advised to access the `io' APIs instead.

 -- C Function: PyFile_FromFd (int fd, char *name, char *mode,
          int buffering, char *encoding, char *errors, char *newline,
          int closefd)
     Create a Python file object from the file descriptor of an already
     opened file _fd_.  The arguments _name_, _encoding_, _errors_ and
     _newline_ can be _NULL_ to use the defaults; _buffering_ can be
     _-1_ to use the default. _name_ is ignored and kept for backward
     compatibility. Return _NULL_ on failure. For a more comprehensive
     description of the arguments, please refer to the `io.open()'
     function documentation.

          Warning: Since Python streams have their own buffering layer,
          mixing them with OS-level file descriptors can produce
          various issues (such as unexpected ordering of data).

     Changed in version 3.2: Ignore _name_ attribute.

 -- C Function: int PyObject_AsFileDescriptor (PyObject *p)
     Return the file descriptor associated with _p_ as an `int'.  If the
     object is an integer, its value is returned.  If not, the object's
     `fileno()' method is called if it exists; the method must return
     an integer, which is returned as the file descriptor value.  Sets
     an exception and returns `-1' on failure.

 -- C Function: PyObject* PyFile_GetLine (PyObject *p, int n)
     Return value: New reference.

     Equivalent to `p.readline([n])', this function reads one line from
     the object _p_.  _p_ may be a file object or any object with a
     `readline()' method.  If _n_ is `0', exactly one line is read,
     regardless of the length of the line.  If _n_ is greater than `0',
     no more than _n_ bytes will be read from the file; a partial line
     can be returned.  In both cases, an empty string is returned if
     the end of the file is reached immediately.  If _n_ is less than
     `0', however, one line is read regardless of length, but
     `EOFError' is raised if the end of the file is reached immediately.

 -- C Function: int PyFile_WriteObject (PyObject *obj, PyObject *p,
          int flags)
     Write object _obj_ to file object _p_.  The only supported flag
     for _flags_ is `Py_PRINT_RAW'; if given, the `str()' of the object
     is written instead of the `repr()'.  Return `0' on success or `-1'
     on failure; the appropriate exception will be set.

 -- C Function: int PyFile_WriteString (const char *s, PyObject *p)
     Write string _s_ to file object _p_.  Return `0' on success or
     `-1' on failure; the appropriate exception will be set.


File: python-c-api-3.2.2.info,  Node: Module Objects,  Next: Iterator Objects,  Prev: File Objects,  Up: Other Objects

7.5.6 Module Objects
--------------------

There are only a few functions special to module objects.

 -- C Variable: PyTypeObject PyModule_Type
     This instance of *note PyTypeObject: b. represents the Python
     module type.  This is exposed to Python programs as
     `types.ModuleType'.

 -- C Function: int PyModule_Check (PyObject *p)
     Return true if _p_ is a module object, or a subtype of a module
     object.

 -- C Function: int PyModule_CheckExact (PyObject *p)
     Return true if _p_ is a module object, but not a subtype of *note
     PyModule_Type: 366.

 -- C Function: PyObject* PyModule_New (const char *name)
     Return value: New reference.

     Return a new module object with the `__name__' attribute set to
     _name_.  Only the module's `__doc__' and `__name__' attributes are
     filled in; the caller is responsible for providing a `__file__'
     attribute.

 -- C Function: PyObject* PyModule_GetDict (PyObject *module)
     Return value: Borrowed reference.

     Return the dictionary object that implements _module_'s namespace;
     this object is the same as the `__dict__' attribute of the module
     object.  This function never fails.  It is recommended extensions
     use other `PyModule_*()' and `PyObject_*()' functions rather than
     directly manipulate a module's `__dict__'.

 -- C Function: char* PyModule_GetName (PyObject *module)
     Return _module_'s `__name__' value.  If the module does not
     provide one, or if it is not a string, `SystemError' is raised and
     _NULL_ is returned.

 -- C Function: char* PyModule_GetFilename (PyObject *module)
     Similar to *note PyModule_GetFilenameObject(): 36d. but return the
     filename encoded to 'utf-8'.

     Deprecated since version 3.2: *note PyModule_GetFilename(): 36c.
     raises `UnicodeEncodeError' on unencodable filenames, use *note
     PyModule_GetFilenameObject(): 36d. instead.

 -- C Function: PyObject* PyModule_GetFilenameObject (PyObject *module)
     Return the name of the file from which _module_ was loaded using
     _module_'s `__file__' attribute.  If this is not defined, or if it
     is not a unicode string, raise `SystemError' and return _NULL_;
     otherwise return a reference to a *note PyUnicodeObject: 26f.

     New in version 3.2.

 -- C Function: void* PyModule_GetState (PyObject *module)
     Return the "state" of the module, that is, a pointer to the block
     of memory allocated at module creation time, or _NULL_.  See *note
     PyModuleDef.m_size: 36f.

 -- C Function: PyModuleDef* PyModule_GetDef (PyObject *module)
     Return a pointer to the *note PyModuleDef: 371. struct from which
     the module was created, or _NULL_ if the module wasn't created with
     *note PyModule_Create(): 372.

* Menu:

* Initializing C modules::


File: python-c-api-3.2.2.info,  Node: Initializing C modules,  Up: Module Objects

7.5.6.1 Initializing C modules
..............................

These functions are usually used in the module initialization function.

 -- C Function: PyObject* PyModule_Create (PyModuleDef *module)
     Create a new module object, given the definition in _module_.
     This behaves like *note PyModule_Create2(): 374. with
     _module_api_version_ set to `PYTHON_API_VERSION'.

 -- C Function: PyObject* PyModule_Create2 (PyModuleDef *module,
          int module_api_version)
     Create a new module object, given the definition in _module_,
     assuming the API version _module_api_version_.  If that version
     does not match the version of the running interpreter, a
     `RuntimeWarning' is emitted.

          Note: Most uses of this function should be using *note
          PyModule_Create(): 372.  instead; only use this if you are
          sure you need it.

 -- C Type: PyModuleDef
     This struct holds all information that is needed to create a
     module object.  There is usually only one static variable of that
     type for each module, which is statically initialized and then
     passed to *note PyModule_Create(): 372. in the module
     initialization function.

      -- C Member: PyModuleDef_Base m_base
          Always initialize this member to `PyModuleDef_HEAD_INIT'.

      -- C Member: char* m_name
          Name for the new module.

      -- C Member: char* m_doc
          Docstring for the module; usually a docstring variable
          created with `PyDoc_STRVAR()' is used.

      -- C Member: Py_ssize_t m_size
          If the module object needs additional memory, this should be
          set to the number of bytes to allocate; a pointer to the
          block of memory can be retrieved with *note
          PyModule_GetState(): 36e.  If no memory is needed, set this
          to `-1'.

          This memory should be used, rather than static globals, to
          hold per-module state, since it is then safe for use in
          multiple sub-interpreters.  It is freed when the module
          object is deallocated, after the `m_free' function has been
          called, if present.

      -- C Member: PyMethodDef* m_methods
          A pointer to a table of module-level functions, described by
          *note PyMethodDef: 379. values.  Can be _NULL_ if no
          functions are present.

      -- C Member: inquiry m_reload
          Currently unused, should be _NULL_.

      -- C Member: traverseproc m_traverse
          A traversal function to call during GC traversal of the
          module object, or _NULL_ if not needed.

      -- C Member: inquiry m_clear
          A clear function to call during GC clearing of the module
          object, or _NULL_ if not needed.

      -- C Member: freefunc m_free
          A function to call during deallocation of the module object,
          or _NULL_ if not needed.

 -- C Function: int PyModule_AddObject (PyObject *module, const
          char *name, PyObject *value)
     Add an object to _module_ as _name_.  This is a convenience
     function which can be used from the module's initialization
     function.  This steals a reference to _value_.  Return `-1' on
     error, `0' on success.

 -- C Function: int PyModule_AddIntConstant (PyObject *module, const
          char *name, long value)
     Add an integer constant to _module_ as _name_.  This convenience
     function can be used from the module's initialization function.
     Return `-1' on error, `0' on success.

 -- C Function: int PyModule_AddStringConstant (PyObject *module, const
          char *name, const char *value)
     Add a string constant to _module_ as _name_.  This convenience
     function can be used from the module's initialization function.
     The string _value_ must be null-terminated.  Return `-1' on error,
     `0' on success.

 -- C Function: int PyModule_AddIntMacro (PyObject *module, macro)
     Add an int constant to _module_. The name and the value are taken
     from _macro_. For example `PyModule_AddIntMacro(module, AF_INET)'
     adds the int constant _AF_INET_ with the value of _AF_INET_ to
     _module_.  Return `-1' on error, `0' on success.

 -- C Function: int PyModule_AddStringMacro (PyObject *module, macro)
     Add a string constant to _module_.


File: python-c-api-3.2.2.info,  Node: Iterator Objects,  Next: Descriptor Objects,  Prev: Module Objects,  Up: Other Objects

7.5.7 Iterator Objects
----------------------

Python provides two general-purpose iterator objects.  The first, a
sequence iterator, works with an arbitrary sequence supporting the
`__getitem__()' method.  The second works with a callable object and a
sentinel value, calling the callable for each item in the sequence, and
ending the iteration when the sentinel value is returned.

 -- C Variable: PyTypeObject PySeqIter_Type
     Type object for iterator objects returned by *note
     PySeqIter_New(): 387. and the one-argument form of the `iter()'
     built-in function for built-in sequence types.

 -- C Function: int PySeqIter_Check (op)
     Return true if the type of _op_ is *note PySeqIter_Type: 386.

 -- C Function: PyObject* PySeqIter_New (PyObject *seq)
     Return value: New reference.

     Return an iterator that works with a general sequence object,
     _seq_.  The iteration ends when the sequence raises `IndexError'
     for the subscripting operation.

 -- C Variable: PyTypeObject PyCallIter_Type
     Type object for iterator objects returned by *note
     PyCallIter_New(): 38a. and the two-argument form of the `iter()'
     built-in function.

 -- C Function: int PyCallIter_Check (op)
     Return true if the type of _op_ is *note PyCallIter_Type: 389.

 -- C Function: PyObject* PyCallIter_New (PyObject *callable,
          PyObject *sentinel)
     Return value: New reference.

     Return a new iterator.  The first parameter, _callable_, can be
     any Python callable object that can be called with no parameters;
     each call to it should return the next item in the iteration.
     When _callable_ returns a value equal to _sentinel_, the iteration
     will be terminated.


File: python-c-api-3.2.2.info,  Node: Descriptor Objects,  Next: Slice Objects,  Prev: Iterator Objects,  Up: Other Objects

7.5.8 Descriptor Objects
------------------------

"Descriptors" are objects that describe some attribute of an object.
They are found in the dictionary of type objects.

 -- C Variable: PyTypeObject PyProperty_Type
     The type object for the built-in descriptor types.

 -- C Function: PyObject* PyDescr_NewGetSet (PyTypeObject *type, struct
          PyGetSetDef *getset)
     Return value: New reference.

 -- C Function: PyObject* PyDescr_NewMember (PyTypeObject *type, struct
          PyMemberDef *meth)
     Return value: New reference.

 -- C Function: PyObject* PyDescr_NewMethod (PyTypeObject *type, struct
          PyMethodDef *meth)
     Return value: New reference.

 -- C Function: PyObject* PyDescr_NewWrapper (PyTypeObject *type,
          struct wrapperbase *wrapper, void *wrapped)
     Return value: New reference.

 -- C Function: PyObject* PyDescr_NewClassMethod (PyTypeObject *type,
          PyMethodDef *method)
     Return value: New reference.

 -- C Function: int PyDescr_IsData (PyObject *descr)
     Return true if the descriptor objects _descr_ describes a data
     attribute, or false if it describes a method.  _descr_ must be a
     descriptor object; there is no error checking.

 -- C Function: PyObject* PyWrapper_New (PyObject *, PyObject *)
     Return value: New reference.


File: python-c-api-3.2.2.info,  Node: Slice Objects,  Next: MemoryView objects,  Prev: Descriptor Objects,  Up: Other Objects

7.5.9 Slice Objects
-------------------

 -- C Variable: PyTypeObject PySlice_Type
     The type object for slice objects.  This is the same as `slice' in
     the Python layer.

 -- C Function: int PySlice_Check (PyObject *ob)
     Return true if _ob_ is a slice object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PySlice_New (PyObject *start, PyObject *stop,
          PyObject *step)
     Return value: New reference.

     Return a new slice object with the given values.  The _start_,
     _stop_, and _step_ parameters are used as the values of the slice
     object attributes of the same names.  Any of the values may be
     _NULL_, in which case the `None' will be used for the
     corresponding attribute.  Return _NULL_ if the new object could
     not be allocated.

 -- C Function: int PySlice_GetIndices (PyObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step)
     Retrieve the start, stop and step indices from the slice object
     _slice_, assuming a sequence of length _length_. Treats indices
     greater than _length_ as errors.

     Returns 0 on success and -1 on error with no exception set (unless
     one of the indices was not `None' and failed to be converted to an
     integer, in which case -1 is returned with an exception set).

     You probably do not want to use this function.

     Changed in version 3.2: The parameter type for the _slice_
     parameter was `PySliceObject*' before.

 -- C Function: int PySlice_GetIndicesEx (PyObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step, Py_ssize_t *slicelength)
     Usable replacement for *note PySlice_GetIndices(): 39d.  Retrieve
     the start, stop, and step indices from the slice object _slice_
     assuming a sequence of length _length_, and store the length of
     the slice in _slicelength_.  Out of bounds indices are clipped in
     a manner consistent with the handling of normal slices.

     Returns 0 on success and -1 on error with exception set.

     Changed in version 3.2: The parameter type for the _slice_
     parameter was `PySliceObject*' before.
  

File: python-c-api-3.2.2.info,  Node: MemoryView objects,  Next: Weak Reference Objects,  Prev: Slice Objects,  Up: Other Objects

7.5.10 MemoryView objects
-------------------------

A `memoryview' object exposes the C level *note buffer interface: 1b4.
as a Python object which can then be passed around like any other
object.

 -- C Function: PyObject *PyMemoryView_FromObject (PyObject *obj)
     Create a memoryview object from an object that provides the buffer
     interface.  If _obj_ supports writable buffer exports, the
     memoryview object will be readable and writable, other it will be
     read-only.

 -- C Function: PyObject *PyMemoryView_FromBuffer (Py_buffer *view)
     Create a memoryview object wrapping the given buffer structure
     _view_.  The memoryview object then owns the buffer represented by
     _view_, which means you shouldn't try to call *note
     PyBuffer_Release(): fb. yourself: it will be done on deallocation
     of the memoryview object.

 -- C Function: PyObject *PyMemoryView_GetContiguous (PyObject *obj,
          int buffertype, char order)
     Create a memoryview object to a contiguous chunk of memory (in
     either 'C' or 'F'ortran _order_) from an object that defines the
     buffer interface. If memory is contiguous, the memoryview object
     points to the original memory. Otherwise copy is made and the
     memoryview points to a new bytes object.

 -- C Function: int PyMemoryView_Check (PyObject *obj)
     Return true if the object _obj_ is a memoryview object.  It is not
     currently allowed to create subclasses of `memoryview'.

 -- C Function: Py_buffer *PyMemoryView_GET_BUFFER (PyObject *obj)
     Return a pointer to the buffer structure wrapped by the given
     memoryview object.  The object *must* be a memoryview instance;
     this macro doesn't check its type, you must do it yourself or you
     will risk crashes.


File: python-c-api-3.2.2.info,  Node: Weak Reference Objects,  Next: Capsules,  Prev: MemoryView objects,  Up: Other Objects

7.5.11 Weak Reference Objects
-----------------------------

Python supports _weak references_ as first-class objects.  There are two
specific object types which directly implement weak references.  The
first is a simple reference object, and the second acts as a proxy for
the original object as much as it can.

 -- C Function: int PyWeakref_Check (ob)
     Return true if _ob_ is either a reference or proxy object.

 -- C Function: int PyWeakref_CheckRef (ob)
     Return true if _ob_ is a reference object.

 -- C Function: int PyWeakref_CheckProxy (ob)
     Return true if _ob_ is a proxy object.

 -- C Function: PyObject* PyWeakref_NewRef (PyObject *ob,
          PyObject *callback)
     Return value: New reference.

     Return a weak reference object for the object _ob_.  This will
     always return a new reference, but is not guaranteed to create a
     new object; an existing reference object may be returned.  The
     second parameter, _callback_, can be a callable object that
     receives notification when _ob_ is garbage collected; it should
     accept a single parameter, which will be the weak reference object
     itself. _callback_ may also be `None' or _NULL_.  If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     `None', or _NULL_, this will return _NULL_ and raise `TypeError'.

 -- C Function: PyObject* PyWeakref_NewProxy (PyObject *ob,
          PyObject *callback)
     Return value: New reference.

     Return a weak reference proxy object for the object _ob_.  This
     will always return a new reference, but is not guaranteed to
     create a new object; an existing proxy object may be returned.
     The second parameter, _callback_, can be a callable object that
     receives notification when _ob_ is garbage collected; it should
     accept a single parameter, which will be the weak reference object
     itself. _callback_ may also be `None' or _NULL_.  If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     `None', or _NULL_, this will return _NULL_ and raise `TypeError'.

 -- C Function: PyObject* PyWeakref_GetObject (PyObject *ref)
     Return value: Borrowed reference.

     Return the referenced object from a weak reference, _ref_.  If the
     referent is no longer live, returns `Py_None'.

          Note: This function returns a *borrowed reference* to the
          referenced object.  This means that you should always call
          *note Py_INCREF(): e. on the object except if you know that
          it cannot be destroyed while you are still using it.

 -- C Function: PyObject* PyWeakref_GET_OBJECT (PyObject *ref)
     Return value: Borrowed reference.

     Similar to *note PyWeakref_GetObject(): 3ae, but implemented as a
     macro that does no error checking.


File: python-c-api-3.2.2.info,  Node: Capsules,  Next: Cell Objects,  Prev: Weak Reference Objects,  Up: Other Objects

7.5.12 Capsules
---------------

Refer to _using-capsules_ for more information on using these objects.

 -- C Type: PyCapsule
     This subtype of *note PyObject: a. represents an opaque value,
     useful for C extension modules who need to pass an opaque value
     (as a `void*' pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Type: PyCapsule_Destructor
     The type of a destructor callback for a capsule.  Defined as:

         typedef void (*PyCapsule_Destructor)(PyObject *);

     See *note PyCapsule_New(): 3b5. for the semantics of
     PyCapsule_Destructor callbacks.

 -- C Function: int PyCapsule_CheckExact (PyObject *p)
     Return true if its argument is a *note PyCapsule: 3b3.

 -- C Function: PyObject* PyCapsule_New (void *pointer, const
          char *name, PyCapsule_Destructor destructor)
     Return value: New reference.

     Create a *note PyCapsule: 3b3. encapsulating the _pointer_.  The
     _pointer_ argument may not be _NULL_.

     On failure, set an exception and return _NULL_.

     The _name_ string may either be _NULL_ or a pointer to a valid C
     string.  If non-_NULL_, this string must outlive the capsule.
     (Though it is permitted to free it inside the _destructor_.)

     If the _destructor_ argument is not _NULL_, it will be called with
     the capsule as its argument when it is destroyed.

     If this capsule will be stored as an attribute of a module, the
     _name_ should be specified as `modulename.attributename'.  This
     will enable other modules to import the capsule using *note
     PyCapsule_Import(): 3b7.

 -- C Function: void* PyCapsule_GetPointer (PyObject *capsule, const
          char *name)
     Retrieve the _pointer_ stored in the capsule.  On failure, set an
     exception and return _NULL_.

     The _name_ parameter must compare exactly to the name stored in
     the capsule.  If the name stored in the capsule is _NULL_, the
     _name_ passed in must also be _NULL_.  Python uses the C function
     `strcmp()' to compare capsule names.

 -- C Function: PyCapsule_Destructor PyCapsule_GetDestructor
          (PyObject *capsule)
     Return the current destructor stored in the capsule.  On failure,
     set an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ destructor.  This makes
     a _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 3ba. or *note PyErr_Occurred(): 21. to
     disambiguate.

 -- C Function: void* PyCapsule_GetContext (PyObject *capsule)
     Return the current context stored in the capsule.  On failure, set
     an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ context.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 3ba. or *note PyErr_Occurred(): 21. to
     disambiguate.

 -- C Function: const char* PyCapsule_GetName (PyObject *capsule)
     Return the current name stored in the capsule.  On failure, set an
     exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ name.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 3ba. or *note PyErr_Occurred(): 21. to
     disambiguate.

 -- C Function: void* PyCapsule_Import (const char *name, int no_block)
     Import a pointer to a C object from a capsule attribute in a
     module.  The _name_ parameter should specify the full name to the
     attribute, as in `module.attribute'.  The _name_ stored in the
     capsule must match this string exactly.  If _no_block_ is true,
     import the module without blocking (using *note
     PyImport_ImportModuleNoBlock(): cf.).  If _no_block_ is false,
     import the module conventionally (using *note
     PyImport_ImportModule(): cd.).

     Return the capsule's internal _pointer_ on success.  On failure,
     set an exception and return _NULL_.  However, if *note
     PyCapsule_Import(): 3b7. failed to import the module, and
     _no_block_ was true, no exception is set.

 -- C Function: int PyCapsule_IsValid (PyObject *capsule, const
          char *name)
     Determines whether or not _capsule_ is a valid capsule.  A valid
     capsule is non-_NULL_, passes *note PyCapsule_CheckExact(): 3b6,
     has a non-_NULL_ pointer stored in it, and its internal name
     matches the _name_ parameter.  (See *note PyCapsule_GetPointer():
     3b8. for information on how capsule names are compared.)

     In other words, if *note PyCapsule_IsValid(): 3ba. returns a true
     value, calls to any of the accessors (any function starting with
     `PyCapsule_Get()') are guaranteed to succeed.

     Return a nonzero value if the object is valid and matches the name
     passed in.  Return 0 otherwise.  This function will not fail.

 -- C Function: int PyCapsule_SetContext (PyObject *capsule,
          void *context)
     Set the context pointer inside _capsule_ to _context_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetDestructor (PyObject *capsule,
          PyCapsule_Destructor destructor)
     Set the destructor inside _capsule_ to _destructor_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetName (PyObject *capsule, const
          char *name)
     Set the name inside _capsule_ to _name_.  If non-_NULL_, the name
     must outlive the capsule.  If the previous _name_ stored in the
     capsule was not _NULL_, no attempt is made to free it.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetPointer (PyObject *capsule,
          void *pointer)
     Set the void pointer inside _capsule_ to _pointer_.  The pointer
     may not be _NULL_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.


File: python-c-api-3.2.2.info,  Node: Cell Objects,  Next: Generator Objects,  Prev: Capsules,  Up: Other Objects

7.5.13 Cell Objects
-------------------

"Cell" objects are used to implement variables referenced by multiple
scopes.  For each such variable, a cell object is created to store the
value; the local variables of each stack frame that references the
value contains a reference to the cells from outer scopes which also
use that variable.  When the value is accessed, the value contained in
the cell is used instead of the cell object itself.  This
de-referencing of the cell object requires support from the generated
byte-code; these are not automatically de-referenced when accessed.
Cell objects are not likely to be useful elsewhere.

 -- C Type: PyCellObject
     The C structure used for cell objects.

 -- C Variable: PyTypeObject PyCell_Type
     The type object corresponding to cell objects.

 -- C Function: int PyCell_Check (ob)
     Return true if _ob_ is a cell object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PyCell_New (PyObject *ob)
     Return value: New reference.

     Create and return a new cell object containing the value _ob_. The
     parameter may be _NULL_.

 -- C Function: PyObject* PyCell_Get (PyObject *cell)
     Return value: New reference.

     Return the contents of the cell _cell_.

 -- C Function: PyObject* PyCell_GET (PyObject *cell)
     Return value: Borrowed reference.

     Return the contents of the cell _cell_, but without checking that
     _cell_ is non-_NULL_ and a cell object.

 -- C Function: int PyCell_Set (PyObject *cell, PyObject *value)
     Set the contents of the cell object _cell_ to _value_.  This
     releases the reference to any current content of the cell. _value_
     may be _NULL_.  _cell_ must be non-_NULL_; if it is not a cell
     object, `-1' will be returned.  On success, `0' will be returned.

 -- C Function: void PyCell_SET (PyObject *cell, PyObject *value)
     Sets the value of the cell object _cell_ to _value_.  No reference
     counts are adjusted, and no checks are made for safety; _cell_
     must be non-_NULL_ and must be a cell object.


File: python-c-api-3.2.2.info,  Node: Generator Objects,  Next: DateTime Objects,  Prev: Cell Objects,  Up: Other Objects

7.5.14 Generator Objects
------------------------

Generator objects are what Python uses to implement generator
iterators. They are normally created by iterating over a function that
yields values, rather than explicitly calling *note PyGen_New(): 3cf.

 -- C Type: PyGenObject
     The C structure used for generator objects.

 -- C Variable: PyTypeObject PyGen_Type
     The type object corresponding to generator objects

 -- C Function: int PyGen_Check (ob)
     Return true if _ob_ is a generator object; _ob_ must not be _NULL_.

 -- C Function: int PyGen_CheckExact (ob)
     Return true if _ob_'s type is _PyGen_Type_ is a generator object;
     _ob_ must not be _NULL_.

 -- C Function: PyObject* PyGen_New (PyFrameObject *frame)
     Return value: New reference.

     Create and return a new generator object based on the _frame_
     object. A reference to _frame_ is stolen by this function. The
     parameter must not be _NULL_.


File: python-c-api-3.2.2.info,  Node: DateTime Objects,  Next: Code Objects,  Prev: Generator Objects,  Up: Other Objects

7.5.15 DateTime Objects
-----------------------

Various date and time objects are supplied by the `datetime' module.
Before using any of these functions, the header file `datetime.h' must
be included in your source (note that this is not included by
`Python.h'), and the macro `PyDateTime_IMPORT' must be invoked, usually
as part of the module initialisation function.  The macro puts a
pointer to a C structure into a static variable, `PyDateTimeAPI', that
is used by the following macros.

  Type-check macros:

 -- C Function: int PyDate_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateType' or a subtype
     of `PyDateTime_DateType'.  _ob_ must not be _NULL_.

 -- C Function: int PyDate_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateType'. _ob_ must
     not be _NULL_.

 -- C Function: int PyDateTime_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateTimeType' or a
     subtype of `PyDateTime_DateTimeType'.  _ob_ must not be _NULL_.

 -- C Function: int PyDateTime_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateTimeType'. _ob_
     must not be _NULL_.

 -- C Function: int PyTime_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TimeType' or a subtype
     of `PyDateTime_TimeType'.  _ob_ must not be _NULL_.

 -- C Function: int PyTime_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TimeType'. _ob_ must
     not be _NULL_.

 -- C Function: int PyDelta_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DeltaType' or a subtype
     of `PyDateTime_DeltaType'.  _ob_ must not be _NULL_.

 -- C Function: int PyDelta_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DeltaType'. _ob_ must
     not be _NULL_.

 -- C Function: int PyTZInfo_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TZInfoType' or a
     subtype of `PyDateTime_TZInfoType'.  _ob_ must not be _NULL_.

 -- C Function: int PyTZInfo_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TZInfoType'. _ob_ must
     not be _NULL_.

  Macros to create objects:

 -- C Function: PyObject* PyDate_FromDate (int year, int month, int day)
     Return value: New reference.

     Return a `datetime.date' object with the specified year, month and
     day.

 -- C Function: PyObject* PyDateTime_FromDateAndTime (int year,
          int month, int day, int hour, int minute, int second,
          int usecond)
     Return value: New reference.

     Return a `datetime.datetime' object with the specified year,
     month, day, hour, minute, second and microsecond.

 -- C Function: PyObject* PyTime_FromTime (int hour, int minute,
          int second, int usecond)
     Return value: New reference.

     Return a `datetime.time' object with the specified hour, minute,
     second and microsecond.

 -- C Function: PyObject* PyDelta_FromDSU (int days, int seconds,
          int useconds)
     Return value: New reference.

     Return a `datetime.timedelta' object representing the given number
     of days, seconds and microseconds.  Normalization is performed so
     that the resulting number of microseconds and seconds lie in the
     ranges documented for `datetime.timedelta' objects.

  Macros to extract fields from date objects.  The argument must be an
instance of `PyDateTime_Date', including subclasses (such as
`PyDateTime_DateTime').  The argument must not be _NULL_, and the type
is not checked:

 -- C Function: int PyDateTime_GET_YEAR (PyDateTime_Date *o)
     Return the year, as a positive int.

 -- C Function: int PyDateTime_GET_MONTH (PyDateTime_Date *o)
     Return the month, as an int from 1 through 12.

 -- C Function: int PyDateTime_GET_DAY (PyDateTime_Date *o)
     Return the day, as an int from 1 through 31.

  Macros to extract fields from datetime objects.  The argument must be
an instance of `PyDateTime_DateTime', including subclasses. The argument
must not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)
     Return the hour, as an int from 0 through 23.

 -- C Function: int PyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)
     Return the minute, as an int from 0 through 59.

 -- C Function: int PyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)
     Return the second, as an int from 0 through 59.

 -- C Function: int PyDateTime_DATE_GET_MICROSECOND
          (PyDateTime_DateTime *o)
     Return the microsecond, as an int from 0 through 999999.

  Macros to extract fields from time objects.  The argument must be an
instance of `PyDateTime_Time', including subclasses. The argument must
not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)
     Return the hour, as an int from 0 through 23.

 -- C Function: int PyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)
     Return the minute, as an int from 0 through 59.

 -- C Function: int PyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)
     Return the second, as an int from 0 through 59.

 -- C Function: int PyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)
     Return the microsecond, as an int from 0 through 999999.

  Macros for the convenience of modules implementing the DB API:

 -- C Function: PyObject* PyDateTime_FromTimestamp (PyObject *args)
     Return value: New reference.

     Create and return a new `datetime.datetime' object given an
     argument tuple suitable for passing to
     `datetime.datetime.fromtimestamp()'.

 -- C Function: PyObject* PyDate_FromTimestamp (PyObject *args)
     Return value: New reference.

     Create and return a new `datetime.date' object given an argument
     tuple suitable for passing to `datetime.date.fromtimestamp()'.


File: python-c-api-3.2.2.info,  Node: Code Objects,  Prev: DateTime Objects,  Up: Other Objects

7.5.16 Code Objects
-------------------

Code objects are a low-level detail of the CPython implementation.
Each one represents a chunk of executable code that hasn't yet been
bound into a function.

 -- C Type: PyCodeObject
     The C structure of the objects used to describe code objects.  The
     fields of this type are subject to change at any time.

 -- C Variable: PyTypeObject PyCode_Type
     This is an instance of *note PyTypeObject: b. representing the
     Python `code' type.

 -- C Function: int PyCode_Check (PyObject *co)
     Return true if _co_ is a `code' object

 -- C Function: int PyCode_GetNumFree (PyObject *co)
     Return the number of free variables in _co_.

 -- C Function: PyCodeObject *PyCode_New (int argcount, int nlocals,
          int stacksize, int flags, PyObject *code, PyObject *consts,
          PyObject *names, PyObject *varnames, PyObject *freevars,
          PyObject *cellvars, PyObject *filename, PyObject *name,
          int firstlineno, PyObject *lnotab)
     Return a new code object.  If you need a dummy code object to
     create a frame, use *note PyCode_NewEmpty(): 3fa. instead.  Calling
     *note PyCode_New(): 3f9. directly can bind you to a precise Python
     version since the definition of the bytecode changes often.

 -- C Function: int PyCode_NewEmpty (const char *filename, const
          char *funcname, int firstlineno)
     Return a new empty code object with the specified filename,
     function name, and first line number.  It is illegal to `exec()'
     or `eval()' the resulting code object.


File: python-c-api-3.2.2.info,  Node: Initialization Finalization and Threads,  Next: Memory Management,  Prev: Concrete Objects Layer,  Up: Top

8 Initialization, Finalization, and Threads
*******************************************

* Menu:

* Initializing and finalizing the interpreter::
* Process-wide parameters::
* Thread State and the Global Interpreter Lock::
* Sub-interpreter support::
* Asynchronous Notifications::
* Profiling and Tracing::
* Advanced Debugger Support::


File: python-c-api-3.2.2.info,  Node: Initializing and finalizing the interpreter,  Next: Process-wide parameters,  Up: Initialization Finalization and Threads

8.1 Initializing and finalizing the interpreter
===============================================

 -- C Function: void Py_Initialize ()
     Initialize the Python interpreter.  In an application embedding
     Python, this should be called before using any other Python/C API
     functions; with the exception of *note Py_SetProgramName(): 3ff.
     and *note Py_SetPath(): 400.  This initializes the table of loaded
     modules (`sys.modules'), and creates the fundamental modules
     `builtins', `__main__' and `sys'.  It also initializes the module
     search path (`sys.path'). It does not set `sys.argv'; use *note
     PySys_SetArgvEx(): 401. for that.  This is a no-op when called for
     a second time (without calling *note Py_Finalize(): 2c. first).
     There is no return value; it is a fatal error if the
     initialization fails.

 -- C Function: void Py_InitializeEx (int initsigs)
     This function works like *note Py_Initialize(): 27. if _initsigs_
     is 1. If _initsigs_ is 0, it skips initialization registration of
     signal handlers, which might be useful when Python is embedded.

 -- C Function: int Py_IsInitialized ()
     Return true (nonzero) when the Python interpreter has been
     initialized, false (zero) if not.  After *note Py_Finalize(): 2c.
     is called, this returns false until *note Py_Initialize(): 27. is
     called again.

 -- C Function: void Py_Finalize ()
     Undo all initializations made by *note Py_Initialize(): 27. and
     subsequent use of Python/C API functions, and destroy all
     sub-interpreters (see *note Py_NewInterpreter(): 403. below) that
     were created and not yet destroyed since the last call to *note
     Py_Initialize(): 27.  Ideally, this frees all memory allocated by
     the Python interpreter.  This is a no-op when called for a second
     time (without calling *note Py_Initialize(): 27. again first).
     There is no return value; errors during finalization are ignored.

     This function is provided for a number of reasons.  An embedding
     application might want to restart Python without having to restart
     the application itself.  An application that has loaded the Python
     interpreter from a dynamically loadable library (or DLL) might
     want to free all memory allocated by Python before unloading the
     DLL. During a hunt for memory leaks in an application a developer
     might want to free all memory allocated by Python before exiting
     from the application.

     *Bugs and caveats:* The destruction of modules and objects in
     modules is done in random order; this may cause destructors
     (`__del__()' methods) to fail when they depend on other objects
     (even functions) or modules.  Dynamically loaded extension modules
     loaded by Python are not unloaded.  Small amounts of memory
     allocated by the Python interpreter may not be freed (if you find
     a leak, please report it).  Memory tied up in circular references
     between objects is not freed.  Some memory allocated by extension
     modules may not be freed.  Some extensions may not work properly
     if their initialization routine is called more than once; this can
     happen if an application calls *note Py_Initialize(): 27. and
     *note Py_Finalize(): 2c. more than once.


File: python-c-api-3.2.2.info,  Node: Process-wide parameters,  Next: Thread State and the Global Interpreter Lock,  Prev: Initializing and finalizing the interpreter,  Up: Initialization Finalization and Threads

8.2 Process-wide parameters
===========================

 -- C Function: void Py_SetProgramName (wchar_t *name)
     This function should be called before *note Py_Initialize(): 27.
     is called for the first time, if it is called at all.  It tells
     the interpreter the value of the `argv[0]' argument to the
     `main()' function of the program (converted to wide characters).
     This is used by *note Py_GetPath(): 28. and some other functions
     below to find the Python run-time libraries relative to the
     interpreter executable.  The default value is `'python''.  The
     argument should point to a zero-terminated wide character string
     in static storage whose contents will not change for the duration
     of the program's execution.  No code in the Python interpreter
     will change the contents of this storage.

 -- C Function: wchar* Py_GetProgramName ()
     Return the program name set with *note Py_SetProgramName(): 3ff,
     or the default.  The returned string points into static storage;
     the caller should not modify its value.

 -- C Function: wchar_t* Py_GetPrefix ()
     Return the _prefix_ for installed platform-independent files. This
     is derived through a number of complicated rules from the program
     name set with *note Py_SetProgramName(): 3ff. and some environment
     variables; for example, if the program name is
     `'/usr/local/bin/python'', the prefix is `'/usr/local''. The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the *prefix* variable in
     the top-level `Makefile' and the `--prefix' argument to the
     *configure* script at build time.  The value is available to
     Python code as `sys.prefix'.  It is only useful on Unix.  See also
     the next function.

 -- C Function: wchar_t* Py_GetExecPrefix ()
     Return the _exec-prefix_ for installed platform-_dependent_ files.
     This is derived through a number of complicated rules from the
     program name set with *note Py_SetProgramName(): 3ff. and some
     environment variables; for example, if the program name is
     `'/usr/local/bin/python'', the exec-prefix is `'/usr/local''.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the *exec_prefix* variable
     in the top-level `Makefile' and the `--exec-prefix' argument to
     the *configure* script at build  time.  The value is available to
     Python code as `sys.exec_prefix'.  It is only useful on Unix.

     Background: The exec-prefix differs from the prefix when platform
     dependent files (such as executables and shared libraries) are
     installed in a different directory tree.  In a typical
     installation, platform dependent files may be installed in the
     `/usr/local/plat' subtree while platform independent may be
     installed in `/usr/local'.

     Generally speaking, a platform is a combination of hardware and
     software families, e.g.  Sparc machines running the Solaris 2.x
     operating system are considered the same platform, but Intel
     machines running Solaris 2.x are another platform, and Intel
     machines running Linux are yet another platform.  Different major
     revisions of the same operating system generally also form
     different platforms.  Non-Unix operating systems are a different
     story; the installation strategies on those systems are so
     different that the prefix and exec-prefix are meaningless, and set
     to the empty string. Note that compiled Python bytecode files are
     platform independent (but not independent from the Python version
     by which they were compiled!).

     System administrators will know how to configure the *mount* or
     *automount* programs to share `/usr/local' between platforms while
     having `/usr/local/plat' be a different filesystem for each
     platform.

 -- C Function: wchar_t* Py_GetProgramFullPath ()
     Return the full program name of the Python executable; this is
     computed as a side-effect of deriving the default module search
     path  from the program name (set by *note Py_SetProgramName():
     3ff. above). The returned string points into static storage; the
     caller should not modify its value.  The value is available to
     Python code as `sys.executable'.

 -- C Function: wchar_t* Py_GetPath ()
     Return the default module search path; this is computed from the
     program name (set by *note Py_SetProgramName(): 3ff. above) and
     some environment variables.  The returned string consists of a
     series of directory names separated by a platform dependent
     delimiter character.  The delimiter character is `':'' on Unix and
     Mac OS X, `';'' on Windows.  The returned string points into
     static storage; the caller should not modify its value.  The list
     `sys.path' is initialized with this value on interpreter startup;
     it can be (and usually is) modified later to change the search
     path for loading modules.


 -- C Function: void Py_SetPath (const wchar_t *)
     Set the default module search path.  If this function is called
     before *note Py_Initialize(): 27, then *note Py_GetPath(): 28.
     won't attempt to compute a default search path but uses the one
     provided instead.  This is useful if Python is embedded by an
     application that has full knowledge of the location of all
     modules.  The path components should be separated by semicolons.

     This also causes `sys.executable' to be set only to the raw program
     name (see *note Py_SetProgramName(): 3ff.) and for `sys.prefix' and
     `sys.exec_prefix' to be empty.  It is up to the caller to modify
     these if required after calling *note Py_Initialize(): 27.

 -- C Function: const char* Py_GetVersion ()
     Return the version of this Python interpreter.  This is a string
     that looks something like

         "3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \n[GCC 4.2.3]"

     
     The first word (up to the first space character) is the current
     Python version; the first three characters are the major and minor
     version separated by a period.  The returned string points into
     static storage; the caller should not modify its value.  The value
     is available to Python code as `sys.version'.

 -- C Function: const char* Py_GetPlatform ()
     Return the platform identifier for the current platform.  On Unix,
     this is formed from the "official" name of the operating system,
     converted to lower case, followed by the major revision number;
     e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value
     is `'sunos5''.  On Mac OS X, it is `'darwin''.  On Windows, it is
     `'win''.  The returned string points into static storage; the
     caller should not modify its value.  The value is available to
     Python code as `sys.platform'.

 -- C Function: const char* Py_GetCopyright ()
     Return the official copyright string for the current Python
     version, for example

     `'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam''

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     `sys.copyright'.

 -- C Function: const char* Py_GetCompiler ()
     Return an indication of the compiler used to build the current
     Python version, in square brackets, for example:

         "[GCC 2.7.2.2]"

     
     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable `sys.version'.

 -- C Function: const char* Py_GetBuildInfo ()
     Return information about the sequence number and build date and
     time  of the current Python interpreter instance, for example

         "#67, Aug  1 1997, 22:34:28"

     
     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable `sys.version'.

 -- C Function: void PySys_SetArgvEx (int argc, wchar_t **argv,
          int updatepath)
     Set `sys.argv' based on _argc_ and _argv_.  These parameters are
     similar to those passed to the program's `main()' function with the
     difference that the first entry should refer to the script file to
     be executed rather than the executable hosting the Python
     interpreter.  If there isn't a script that will be run, the first
     entry in _argv_ can be an empty string.  If this function fails to
     initialize `sys.argv', a fatal condition is signalled using *note
     Py_FatalError(): c7.

     If _updatepath_ is zero, this is all the function does.  If
     _updatepath_ is non-zero, the function also modifies `sys.path'
     according to the following algorithm:

        - If the name of an existing script is passed in `argv[0]', the
          absolute path of the directory where the script is located is
          prepended to `sys.path'.

        - Otherwise (that is, if _argc_ is 0 or `argv[0]' doesn't point
          to an existing file name), an empty string is prepended to
          `sys.path', which is the same as prepending the current
          working directory (`"."').

          Note: It is recommended that applications embedding the
          Python interpreter for purposes other than executing a single
          script pass 0 as _updatepath_, and update `sys.path'
          themselves if desired.  See CVE-2008-5983(1).

          On versions before 3.1.3, you can achieve the same effect by
          manually popping the first `sys.path' element after having
          called *note PySys_SetArgv(): 40b, for example using:

              PyRun_SimpleString("import sys; sys.path.pop(0)\n");



     New in version 3.1.3.


 -- C Function: void PySys_SetArgv (int argc, wchar_t **argv)
     This function works like *note PySys_SetArgvEx(): 401. with
     _updatepath_ set to 1.

 -- C Function: void Py_SetPythonHome (wchar_t *home)
     Set the default "home" directory, that is, the location of the
     standard Python libraries.  See `PYTHONHOME' for the meaning of the
     argument string.

     The argument should point to a zero-terminated character string in
     static storage whose contents will not change for the duration of
     the program's execution.  No code in the Python interpreter will
     change the contents of this storage.

 -- C Function: w_char* Py_GetPythonHome ()
     Return the default "home", that is, the value set by a previous
     call to *note Py_SetPythonHome(): 40c, or the value of the `PYTHONHOME'
     environment variable if it is set.

  ---------- Footnotes ----------

  (1) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983


File: python-c-api-3.2.2.info,  Node: Thread State and the Global Interpreter Lock,  Next: Sub-interpreter support,  Prev: Process-wide parameters,  Up: Initialization Finalization and Threads

8.3 Thread State and the Global Interpreter Lock
================================================

The Python interpreter is not fully thread-safe.  In order to support
multi-threaded Python programs, there's a global lock, called the
_global interpreter lock_ or _GIL_, that must be held by the current
thread before it can safely access Python objects. Without the lock,
even the simplest operations could cause problems in a multi-threaded
program: for example, when two threads simultaneously increment the
reference count of the same object, the reference count could end up
being incremented only once instead of twice.

  Therefore, the rule exists that only the thread that has acquired the
_GIL_ may operate on Python objects or call Python/C API functions.  In
order to emulate concurrency of execution, the interpreter regularly
tries to switch threads (see `sys.setswitchinterval()').  The lock is
also released around potentially blocking I/O operations like reading
or writing a file, so that other Python threads can run in the meantime.

  The Python interpreter keeps some thread-specific bookkeeping
information inside a data structure called *note PyThreadState: 410.
There's also one global variable pointing to the current *note
PyThreadState: 410.: it can be retrieved using *note
PyThreadState_Get(): 411.

* Menu:

* Releasing the GIL from extension code::
* Non-Python created threads::
* High-level API::
* Low-level API::


File: python-c-api-3.2.2.info,  Node: Releasing the GIL from extension code,  Next: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

8.3.1 Releasing the GIL from extension code
-------------------------------------------

Most extension code manipulating the _GIL_ has the following simple
structure:

    Save the thread state in a local variable.
    Release the global interpreter lock.
    ... Do some blocking I/O operation ...
    Reacquire the global interpreter lock.
    Restore the thread state from the local variable.

This is so common that a pair of macros exists to simplify it:

    Py_BEGIN_ALLOW_THREADS
    ... Do some blocking I/O operation ...
    Py_END_ALLOW_THREADS


  The *note Py_BEGIN_ALLOW_THREADS: fa. macro opens a new block and
declares a hidden local variable; the *note Py_END_ALLOW_THREADS: 413.
macro closes the block.  These two macros are still available when
Python is compiled without thread support (they simply have an empty
expansion).

  When thread support is enabled, the block above expands to the
following code:

    PyThreadState *_save;

    _save = PyEval_SaveThread();
    ...Do some blocking I/O operation...
    PyEval_RestoreThread(_save);


  Here is how these functions work: the global interpreter lock is used
to protect the pointer to the current thread state.  When releasing the
lock and saving the thread state, the current thread state pointer must
be retrieved before the lock is released (since another thread could
immediately acquire the lock and store its own thread state in the
global variable). Conversely, when acquiring the lock and restoring the
thread state, the lock must be acquired before storing the thread state
pointer.

     Note: Calling system I/O functions is the most common use case for
     releasing the GIL, but it can also be useful before calling
     long-running computations which don't need access to Python
     objects, such as compression or cryptographic functions operating
     over memory buffers.  For example, the standard `zlib' and
     `hashlib' modules release the GIL when compressing or hashing data.


File: python-c-api-3.2.2.info,  Node: Non-Python created threads,  Next: High-level API,  Prev: Releasing the GIL from extension code,  Up: Thread State and the Global Interpreter Lock

8.3.2 Non-Python created threads
--------------------------------

When threads are created using the dedicated Python APIs (such as the
`threading' module), a thread state is automatically associated to them
and the code showed above is therefore correct.  However, when threads
are created from C (for example by a third-party library with its own
thread management), they don't hold the GIL, nor is there a thread
state structure for them.

  If you need to call Python code from these threads (often this will
be part of a callback API provided by the aforementioned third-party
library), you must first register these threads with the interpreter by
creating a thread state data structure, then acquiring the GIL, and
finally storing their thread state pointer, before you can start using
the Python/C API.  When you are done, you should reset the thread state
pointer, release the GIL, and finally free the thread state data
structure.

  The *note PyGILState_Ensure(): 415. and *note PyGILState_Release():
416. functions do all of the above automatically.  The typical idiom
for calling into Python from a C thread is:

    PyGILState_STATE gstate;
    gstate = PyGILState_Ensure();

    /* Perform Python actions here. */
    result = CallSomeFunction();
    /* evaluate result or handle exception */

    /* Release the thread. No Python API allowed beyond this point. */
    PyGILState_Release(gstate);

Note that the `PyGILState_*()' functions assume there is only one global
interpreter (created automatically by *note Py_Initialize(): 27.).
Python supports the creation of additional interpreters (using *note
Py_NewInterpreter(): 403.), but mixing multiple interpreters and the
`PyGILState_*()' API is unsupported.

  Another important thing to note about threads is their behaviour in
the face of the C `fork()' call. On most systems with `fork()', after a
process forks only the thread that issued the fork will exist. That also
means any locks held by other threads will never be released. Python
solves this for `os.fork()' by acquiring the locks it uses internally
before the fork, and releasing them afterwards. In addition, it resets
any _lock-objects_ in the child. When extending or embedding Python,
there is no way to inform Python of additional (non-Python) locks that
need to be acquired before or reset after a fork. OS facilities such as
`pthread_atfork()' would need to be used to accomplish the same thing.
Additionally, when extending or embedding Python, calling `fork()'
directly rather than through `os.fork()' (and returning to or calling
into Python) may result in a deadlock by one of Python's internal locks
being held by a thread that is defunct after the fork.  *note
PyOS_AfterFork(): b2. tries to reset the necessary locks, but is not
always able to.


File: python-c-api-3.2.2.info,  Node: High-level API,  Next: Low-level API,  Prev: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

8.3.3 High-level API
--------------------

These are the most commonly used types and functions when writing C
extension code, or when embedding the Python interpreter:

 -- C Type: PyInterpreterState
     This data structure represents the state shared by a number of
     cooperating threads.  Threads belonging to the same interpreter
     share their module administration and a few other internal items.
     There are no public members in this structure.

     Threads belonging to different interpreters initially share
     nothing, except process state like available memory, open file
     descriptors and such.  The global interpreter lock is also shared
     by all threads, regardless of to which interpreter they belong.

 -- C Type: PyThreadState
     This data structure represents the state of a single thread.  The
     only public data member is *note PyInterpreterState *:
     418.`interp', which points to this thread's interpreter state.

 -- C Function: void PyEval_InitThreads ()
     Initialize and acquire the global interpreter lock.  It should be
     called in the main thread before creating a second thread or
     engaging in any other thread operations such as
     `PyEval_ReleaseThread(tstate)'. It is not needed before calling
     *note PyEval_SaveThread(): 41a. or *note PyEval_RestoreThread():
     41b.

     This is a no-op when called for a second time.

     Changed in version 3.2: This function cannot be called before
     *note Py_Initialize(): 27. anymore.


 -- C Function: int PyEval_ThreadsInitialized ()
     Returns a non-zero value if *note PyEval_InitThreads(): 419. has
     been called.  This function can be called without holding the GIL,
     and therefore can be used to avoid calls to the locking API when
     running single-threaded.  This function is not available when
     thread support is disabled at compile time.

 -- C Function: PyThreadState* PyEval_SaveThread ()
     Release the global interpreter lock (if it has been created and
     thread support is enabled) and reset the thread state to _NULL_,
     returning the previous thread state (which is not _NULL_).  If the
     lock has been created, the current thread must have acquired it.
     (This function is available even when thread support is disabled
     at compile time.)

 -- C Function: void PyEval_RestoreThread (PyThreadState *tstate)
     Acquire the global interpreter lock (if it has been created and
     thread support is enabled) and set the thread state to _tstate_,
     which must not be _NULL_.  If the lock has been created, the
     current thread must not have acquired it, otherwise deadlock
     ensues.  (This function is available even when thread support is
     disabled at compile time.)

 -- C Function: PyThreadState* PyThreadState_Get ()
     Return the current thread state.  The global interpreter lock must
     be held.  When the current thread state is _NULL_, this issues a
     fatal error (so that the caller needn't check for _NULL_).

 -- C Function: PyThreadState* PyThreadState_Swap
          (PyThreadState *tstate)
     Swap the current thread state with the thread state given by the
     argument _tstate_, which may be _NULL_.  The global interpreter
     lock must be held and is not released.

 -- C Function: void PyEval_ReInitThreads ()
     This function is called from *note PyOS_AfterFork(): b2. to ensure
     that newly created child processes don't hold locks referring to
     threads which are not running in the child process.

  The following functions use thread-local storage, and are not
compatible with sub-interpreters:

 -- C Function: PyGILState_STATE PyGILState_Ensure ()
     Ensure that the current thread is ready to call the Python C API
     regardless of the current state of Python, or of the global
     interpreter lock. This may be called as many times as desired by a
     thread as long as each call is matched with a call to *note
     PyGILState_Release(): 416. In general, other thread-related APIs
     may be used between *note PyGILState_Ensure(): 415. and *note
     PyGILState_Release(): 416. calls as long as the thread state is
     restored to its previous state before the Release().  For example,
     normal usage of the *note Py_BEGIN_ALLOW_THREADS: fa. and *note
     Py_END_ALLOW_THREADS: 413. macros is acceptable.

     The return value is an opaque "handle" to the thread state when
     *note PyGILState_Ensure(): 415. was called, and must be passed to
     *note PyGILState_Release(): 416. to ensure Python is left in the
     same state. Even though recursive calls are allowed, these handles
     _cannot_ be shared - each unique call to *note
     PyGILState_Ensure(): 415. must save the handle for its call to
     *note PyGILState_Release(): 416.

     When the function returns, the current thread will hold the GIL
     and be able to call arbitrary Python code.  Failure is a fatal
     error.

 -- C Function: void PyGILState_Release (PyGILState_STATE)
     Release any resources previously acquired.  After this call,
     Python's state will be the same as it was prior to the
     corresponding *note PyGILState_Ensure(): 415. call (but generally
     this state will be unknown to the caller, hence the use of the
     GILState API).

     Every call to *note PyGILState_Ensure(): 415. must be matched by a
     call to *note PyGILState_Release(): 416. on the same thread.

 -- C Function: PyThreadState PyGILState_GetThisThreadState ()
     Get the current thread state for this thread.  May return `NULL'
     if no GILState API has been used on the current thread.  Note that
     the main thread always has such a thread-state, even if no
     auto-thread-state call has been made on the main thread.  This is
     mainly a helper/diagnostic function.

  The following macros are normally used without a trailing semicolon;
look for example usage in the Python source distribution.

 -- C Macro: Py_BEGIN_ALLOW_THREADS
     This macro expands to `{ PyThreadState *_save; _save =
     PyEval_SaveThread();'.  Note that it contains an opening brace; it
     must be matched with a following *note Py_END_ALLOW_THREADS: 413.
     macro.  See above for further discussion of this macro.  It is a
     no-op when thread support is disabled at compile time.

 -- C Macro: Py_END_ALLOW_THREADS
     This macro expands to `PyEval_RestoreThread(_save); }'. Note that
     it contains a closing brace; it must be matched with an earlier
     *note Py_BEGIN_ALLOW_THREADS: fa. macro.  See above for further
     discussion of this macro.  It is a no-op when thread support is
     disabled at compile time.

 -- C Macro: Py_BLOCK_THREADS
     This macro expands to `PyEval_RestoreThread(_save);': it is
     equivalent to *note Py_END_ALLOW_THREADS: 413. without the closing
     brace.  It is a no-op when thread support is disabled at compile
     time.

 -- C Macro: Py_UNBLOCK_THREADS
     This macro expands to `_save = PyEval_SaveThread();': it is
     equivalent to *note Py_BEGIN_ALLOW_THREADS: fa. without the
     opening brace and variable declaration.  It is a no-op when thread
     support is disabled at compile time.


File: python-c-api-3.2.2.info,  Node: Low-level API,  Prev: High-level API,  Up: Thread State and the Global Interpreter Lock

8.3.4 Low-level API
-------------------

All of the following functions are only available when thread support
is enabled at compile time, and must be called only when the global
interpreter lock has been created.

 -- C Function: PyInterpreterState* PyInterpreterState_New ()
     Create a new interpreter state object.  The global interpreter
     lock need not be held, but may be held if it is necessary to
     serialize calls to this function.

 -- C Function: void PyInterpreterState_Clear
          (PyInterpreterState *interp)
     Reset all information in an interpreter state object.  The global
     interpreter lock must be held.

 -- C Function: void PyInterpreterState_Delete
          (PyInterpreterState *interp)
     Destroy an interpreter state object.  The global interpreter lock
     need not be held.  The interpreter state must have been reset with
     a previous call to *note PyInterpreterState_Clear(): 424.

 -- C Function: PyThreadState* PyThreadState_New
          (PyInterpreterState *interp)
     Create a new thread state object belonging to the given
     interpreter object.  The global interpreter lock need not be held,
     but may be held if it is necessary to serialize calls to this
     function.

 -- C Function: void PyThreadState_Clear (PyThreadState *tstate)
     Reset all information in a thread state object.  The global
     interpreter lock must be held.

 -- C Function: void PyThreadState_Delete (PyThreadState *tstate)
     Destroy a thread state object.  The global interpreter lock need
     not be held.  The thread state must have been reset with a
     previous call to *note PyThreadState_Clear(): 427.

 -- C Function: PyObject* PyThreadState_GetDict ()
     Return value: Borrowed reference.

     Return a dictionary in which extensions can store thread-specific
     state information.  Each extension should use a unique key to use
     to store state in the dictionary.  It is okay to call this
     function when no current thread state is available. If this
     function returns _NULL_, no exception has been raised and the
     caller should assume no current thread state is available.

 -- C Function: int PyThreadState_SetAsyncExc (long id, PyObject *exc)
     Asynchronously raise an exception in a thread. The _id_ argument
     is the thread id of the target thread; _exc_ is the exception
     object to be raised. This function does not steal any references
     to _exc_. To prevent naive misuse, you must write your own C
     extension to call this.  Must be called with the GIL held.
     Returns the number of thread states modified; this is normally
     one, but will be zero if the thread id isn't found.  If _exc_ is
     `NULL', the pending exception (if any) for the thread is cleared.
     This raises no exceptions.

 -- C Function: void PyEval_AcquireThread (PyThreadState *tstate)
     Acquire the global interpreter lock and set the current thread
     state to _tstate_, which should not be _NULL_.  The lock must have
     been created earlier.  If this thread already has the lock,
     deadlock ensues.

     *note PyEval_RestoreThread(): 41b. is a higher-level function
     which is always available (even when thread support isn't enabled
     or when threads have not been initialized).

 -- C Function: void PyEval_ReleaseThread (PyThreadState *tstate)
     Reset the current thread state to _NULL_ and release the global
     interpreter lock.  The lock must have been created earlier and
     must be held by the current thread.  The _tstate_ argument, which
     must not be _NULL_, is only used to check that it represents the
     current thread state -- if it isn't, a fatal error is reported.

     *note PyEval_SaveThread(): 41a. is a higher-level function which
     is always available (even when thread support isn't enabled or
     when threads have not been initialized).

 -- C Function: void PyEval_AcquireLock ()
     Acquire the global interpreter lock.  The lock must have been
     created earlier.  If this thread already has the lock, a deadlock
     ensues.

     Deprecated since version 3.2: This function does not update the
     current thread state.  Please use *note PyEval_RestoreThread():
     41b. or *note PyEval_AcquireThread(): 42b.  instead.

 -- C Function: void PyEval_ReleaseLock ()
     Release the global interpreter lock.  The lock must have been
     created earlier.

     Deprecated since version 3.2: This function does not update the
     current thread state.  Please use *note PyEval_SaveThread(): 41a.
     or *note PyEval_ReleaseThread(): 42c.  instead.


File: python-c-api-3.2.2.info,  Node: Sub-interpreter support,  Next: Asynchronous Notifications,  Prev: Thread State and the Global Interpreter Lock,  Up: Initialization Finalization and Threads

8.4 Sub-interpreter support
===========================

While in most uses, you will only embed a single Python interpreter,
there are cases where you need to create several independent
interpreters in the same process and perhaps even in the same thread.
Sub-interpreters allow you to do that.  You can switch between
sub-interpreters using the *note PyThreadState_Swap(): 41d. function.
You can create and destroy them using the following functions:

 -- C Function: PyThreadState* Py_NewInterpreter ()
     Create a new sub-interpreter.  This is an (almost) totally
     separate environment for the execution of Python code.  In
     particular, the new interpreter has separate, independent versions
     of all imported modules, including the fundamental modules
     `builtins', `__main__' and `sys'.  The table of loaded modules
     (`sys.modules') and the module search path (`sys.path') are also
     separate.  The new environment has no `sys.argv' variable.  It has
     new standard I/O stream file objects `sys.stdin', `sys.stdout' and
     `sys.stderr' (however these refer to the same underlying file
     descriptors).

     The return value points to the first thread state created in the
     new sub-interpreter.  This thread state is made in the current
     thread state.  Note that no actual thread is created; see the
     discussion of thread states below.  If creation of the new
     interpreter is unsuccessful, _NULL_ is returned; no exception is
     set since the exception state is stored in the current thread
     state and there may not be a current thread state.  (Like all
     other Python/C API functions, the global interpreter lock must be
     held before calling this function and is still held when it
     returns; however, unlike most other Python/C API functions, there
     needn't be a current thread state on entry.)

     Extension modules are shared between (sub-)interpreters as
     follows: the first time a particular extension is imported, it is
     initialized normally, and a (shallow) copy of its module's
     dictionary is squirreled away.  When the same extension is
     imported by another (sub-)interpreter, a new module is initialized
     and filled with the contents of this copy; the extension's `init'
     function is not called.  Note that this is different from what
     happens when an extension is imported after the interpreter has
     been completely re-initialized by calling *note Py_Finalize(): 2c.
     and *note Py_Initialize(): 27.; in that case, the extension's
     `initmodule' function _is_ called again.


 -- C Function: void Py_EndInterpreter (PyThreadState *tstate)
     Destroy the (sub-)interpreter represented by the given thread
     state. The given thread state must be the current thread state.
     See the discussion of thread states below.  When the call returns,
     the current thread state is _NULL_.  All thread states associated
     with this interpreter are destroyed.  (The global interpreter lock
     must be held before calling this function and is still held when
     it returns.)  *note Py_Finalize(): 2c. will destroy all
     sub-interpreters that haven't been explicitly destroyed at that
     point.

* Menu:

* Bugs and caveats::


File: python-c-api-3.2.2.info,  Node: Bugs and caveats,  Up: Sub-interpreter support

8.4.1 Bugs and caveats
----------------------

Because sub-interpreters (and the main interpreter) are part of the same
process, the insulation between them isn't perfect -- for example, using
low-level file operations like  `os.close()' they can (accidentally or
maliciously) affect each other's open files.  Because of the way
extensions are shared between (sub-)interpreters, some extensions may
not work properly; this is especially likely when the extension makes
use of (static) global variables, or when the extension manipulates its
module's dictionary after its initialization.  It is possible to insert
objects created in one sub-interpreter into a namespace of another
sub-interpreter; this should be done with great care to avoid sharing
user-defined functions, methods, instances or classes between
sub-interpreters, since import operations executed by such objects may
affect the wrong (sub-)interpreter's dictionary of loaded modules.

  Also note that combining this functionality with `PyGILState_*()' APIs
is delicate, because these APIs assume a bijection between Python
thread states and OS-level threads, an assumption broken by the
presence of sub-interpreters.  It is highly recommended that you don't
switch sub-interpreters between a pair of matching *note
PyGILState_Ensure(): 415. and *note PyGILState_Release(): 416. calls.
Furthermore, extensions (such as `ctypes') using these APIs to allow
calling of Python code from non-Python created threads will probably be
broken when using sub-interpreters.


File: python-c-api-3.2.2.info,  Node: Asynchronous Notifications,  Next: Profiling and Tracing,  Prev: Sub-interpreter support,  Up: Initialization Finalization and Threads

8.5 Asynchronous Notifications
==============================

A mechanism is provided to make asynchronous notifications to the main
interpreter thread.  These notifications take the form of a function
pointer and a void argument.

  Every check interval, when the global interpreter lock is released and
reacquired, Python will also call any such provided functions.  This
can be used for example by asynchronous IO handlers.  The notification
can be scheduled from a worker thread and the actual call than made at
the earliest convenience by the main thread where it has possession of
the global interpreter lock and can perform any Python API calls.

 -- C Function: int Py_AddPendingCall (int (*func)(void *), void *arg)
     Post a notification to the Python main thread.  If successful,
     _func_ will be called with the argument _arg_ at the earliest
     convenience.  _func_ will be called having the global interpreter
     lock held and can thus use the full Python API and can take any
     action such as setting object attributes to signal IO completion.
     It must return 0 on success, or -1 signalling an exception.  The
     notification function won't be interrupted to perform another
     asynchronous notification recursively, but it can still be
     interrupted to switch threads if the global interpreter lock is
     released, for example, if it calls back into Python code.

     This function returns 0 on success in which case the notification
     has been scheduled.  Otherwise, for example if the notification
     buffer is full, it returns -1 without setting any exception.

     This function can be called on any thread, be it a Python thread
     or some other system thread.  If it is a Python thread, it doesn't
     matter if it holds the global interpreter lock or not.

     New in version 3.1.


File: python-c-api-3.2.2.info,  Node: Profiling and Tracing,  Next: Advanced Debugger Support,  Prev: Asynchronous Notifications,  Up: Initialization Finalization and Threads

8.6 Profiling and Tracing
=========================

The Python interpreter provides some low-level support for attaching
profiling and execution tracing facilities.  These are used for
profiling, debugging, and coverage analysis tools.

  This C interface allows the profiling or tracing code to avoid the
overhead of calling through Python-level callable objects, making a
direct C function call instead.  The essential attributes of the
facility have not changed; the interface allows trace functions to be
installed per-thread, and the basic events reported to the trace
function are the same as had been reported to the Python-level trace
functions in previous versions.

 -- C Type: int (*Py_tracefunc) (PyObject *obj, PyFrameObject *frame,
          int what, PyObject *arg)
     The type of the trace function registered using *note
     PyEval_SetProfile(): 437. and *note PyEval_SetTrace(): 438. The
     first parameter is the object passed to the registration function
     as _obj_, _frame_ is the frame object to which the event pertains,
     _what_ is one of the constants `PyTrace_CALL',
     `PyTrace_EXCEPTION', `PyTrace_LINE', `PyTrace_RETURN',
     `PyTrace_C_CALL', `PyTrace_C_EXCEPTION', or `PyTrace_C_RETURN',
     and _arg_ depends on the value of _what_:

     Value of _what_                    Meaning of _arg_
     ------------------------------------------------------------------------------ 
     `PyTrace_CALL'                     Always _NULL_.
     `PyTrace_EXCEPTION'                Exception information as returned by
                                        `sys.exc_info()'.
     `PyTrace_LINE'                     Always _NULL_.
     `PyTrace_RETURN'                   Value being returned to the caller, or
                                        _NULL_ if caused by an exception.
     `PyTrace_C_CALL'                   Function object being called.
     `PyTrace_C_EXCEPTION'              Function object being called.
     `PyTrace_C_RETURN'                 Function object being called.


 -- C Variable: int PyTrace_CALL
     The value of the _what_ parameter to a *note Py_tracefunc: 436.
     function when a new call to a function or method is being
     reported, or a new entry into a generator.  Note that the creation
     of the iterator for a generator function is not reported as there
     is no control transfer to the Python bytecode in the corresponding
     frame.

 -- C Variable: int PyTrace_EXCEPTION
     The value of the _what_ parameter to a *note Py_tracefunc: 436.
     function when an exception has been raised.  The callback function
     is called with this value for _what_ when after any bytecode is
     processed after which the exception becomes set within the frame
     being executed.  The effect of this is that as exception
     propagation causes the Python stack to unwind, the callback is
     called upon return to each frame as the exception propagates.
     Only trace functions receives these events; they are not needed by
     the profiler.

 -- C Variable: int PyTrace_LINE
     The value passed as the _what_ parameter to a trace function (but
     not a profiling function) when a line-number event is being
     reported.

 -- C Variable: int PyTrace_RETURN
     The value for the _what_ parameter to *note Py_tracefunc: 436.
     functions when a call is returning without propagating an
     exception.

 -- C Variable: int PyTrace_C_CALL
     The value for the _what_ parameter to *note Py_tracefunc: 436.
     functions when a C function is about to be called.

 -- C Variable: int PyTrace_C_EXCEPTION
     The value for the _what_ parameter to *note Py_tracefunc: 436.
     functions when a C function has raised an exception.

 -- C Variable: int PyTrace_C_RETURN
     The value for the _what_ parameter to *note Py_tracefunc: 436.
     functions when a C function has returned.

 -- C Function: void PyEval_SetProfile (Py_tracefunc func,
          PyObject *obj)
     Set the profiler function to _func_.  The _obj_ parameter is
     passed to the function as its first parameter, and may be any
     Python object, or _NULL_.  If the profile function needs to
     maintain state, using a different value for _obj_ for each thread
     provides a convenient and thread-safe place to store it.  The
     profile function is called for all monitored events except the
     line-number events.

 -- C Function: void PyEval_SetTrace (Py_tracefunc func, PyObject *obj)
     Set the tracing function to _func_.  This is similar to *note
     PyEval_SetProfile(): 437, except the tracing function does receive
     line-number events.

 -- C Function: PyObject* PyEval_GetCallStats (PyObject *self)
     Return a tuple of function call counts.  There are constants
     defined for the positions within the tuple:

     Name                                Value
     ------------------------------------------------ 
     `PCALL_ALL'                         0
     `PCALL_FUNCTION'                    1
     `PCALL_FAST_FUNCTION'               2
     `PCALL_FASTER_FUNCTION'             3
     `PCALL_METHOD'                      4
     `PCALL_BOUND_METHOD'                5
     `PCALL_CFUNCTION'                   6
     `PCALL_TYPE'                        7
     `PCALL_GENERATOR'                   8
     `PCALL_OTHER'                       9
     `PCALL_POP'                         10

     `PCALL_FAST_FUNCTION' means no argument tuple needs to be created.
     `PCALL_FASTER_FUNCTION' means that the fast-path frame setup code
     is used.

     If there is a method call where the call can be optimized by
     changing the argument tuple and calling the function directly, it
     gets recorded twice.

     This function is only present if Python is compiled with
     `CALL_PROFILE' defined.


File: python-c-api-3.2.2.info,  Node: Advanced Debugger Support,  Prev: Profiling and Tracing,  Up: Initialization Finalization and Threads

8.7 Advanced Debugger Support
=============================

These functions are only intended to be used by advanced debugging
tools.

 -- C Function: PyInterpreterState* PyInterpreterState_Head ()
     Return the interpreter state object at the head of the list of all
     such objects.

 -- C Function: PyInterpreterState* PyInterpreterState_Next
          (PyInterpreterState *interp)
     Return the next interpreter state object after _interp_ from the
     list of all such objects.

 -- C Function: PyThreadState * PyInterpreterState_ThreadHead
          (PyInterpreterState *interp)
     Return the a pointer to the first *note PyThreadState: 410. object
     in the list of threads associated with the interpreter _interp_.

 -- C Function: PyThreadState* PyThreadState_Next
          (PyThreadState *tstate)
     Return the next thread state object after _tstate_ from the list
     of all such objects belonging to the same *note
     PyInterpreterState: 418. object.


File: python-c-api-3.2.2.info,  Node: Memory Management,  Next: Object Implementation Support,  Prev: Initialization Finalization and Threads,  Up: Top

9 Memory Management
*******************

* Menu:

* Overview::
* Memory Interface::
* Examples::


File: python-c-api-3.2.2.info,  Node: Overview,  Next: Memory Interface,  Up: Memory Management

9.1 Overview
============

Memory management in Python involves a private heap containing all
Python objects and data structures. The management of this private heap
is ensured internally by the _Python memory manager_.  The Python
memory manager has different components which deal with various dynamic
storage management aspects, like sharing, segmentation, preallocation
or caching.

  At the lowest level, a raw memory allocator ensures that there is
enough room in the private heap for storing all Python-related data by
interacting with the memory manager of the operating system. On top of
the raw memory allocator, several object-specific allocators operate on
the same heap and implement distinct memory management policies adapted
to the peculiarities of every object type. For example, integer objects
are managed differently within the heap than strings, tuples or
dictionaries because integers imply different storage requirements and
speed/space tradeoffs. The Python memory manager thus delegates some of
the work to the object-specific allocators, but ensures that the latter
operate within the bounds of the private heap.

  It is important to understand that the management of the Python heap
is performed by the interpreter itself and that the user has no control
over it, even if she regularly manipulates object pointers to memory
blocks inside that heap.  The allocation of heap space for Python
objects and other internal buffers is performed on demand by the Python
memory manager through the Python/C API functions listed in this
document.

  To avoid memory corruption, extension writers should never try to
operate on Python objects with the functions exported by the C library:
`malloc()', `calloc()', `realloc()' and `free()'.  This will result in
mixed calls between the C allocator and the Python memory manager with
fatal consequences, because they implement different algorithms and
operate on different heaps.  However, one may safely allocate and
release memory blocks with the C library allocator for individual
purposes, as shown in the following example:

    PyObject *res;
    char *buf = (char *) malloc(BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    ...Do some I/O operation involving buf...
    res = PyString_FromString(buf);
    free(buf); /* malloc'ed */
    return res;

In this example, the memory request for the I/O buffer is handled by
the C library allocator. The Python memory manager is involved only in
the allocation of the string object returned as a result.

  In most situations, however, it is recommended to allocate memory
from the Python heap specifically because the latter is under control
of the Python memory manager. For example, this is required when the
interpreter is extended with new object types written in C. Another
reason for using the Python heap is the desire to _inform_ the Python
memory manager about the memory needs of the extension module. Even
when the requested memory is used exclusively for internal,
highly-specific purposes, delegating all memory requests to the Python
memory manager causes the interpreter to have a more accurate image of
its memory footprint as a whole. Consequently, under certain
circumstances, the Python memory manager may or may not trigger
appropriate actions, like garbage collection, memory compaction or
other preventive procedures. Note that by using the C library allocator
as shown in the previous example, the allocated memory for the I/O
buffer escapes completely the Python memory manager.


File: python-c-api-3.2.2.info,  Node: Memory Interface,  Next: Examples,  Prev: Overview,  Up: Memory Management

9.2 Memory Interface
====================

The following function sets, modeled after the ANSI C standard, but
specifying behavior when requesting zero bytes, are available for
allocating and releasing memory from the Python heap:

 -- C Function: void* PyMem_Malloc (size_t n)
     Allocates _n_ bytes and returns a pointer of type `void*' to the
     allocated memory, or _NULL_ if the request fails. Requesting zero
     bytes returns a distinct non-_NULL_ pointer if possible, as if
     `PyMem_Malloc(1)()' had been called instead. The memory will not
     have been initialized in any way.

 -- C Function: void* PyMem_Realloc (void *p, size_t n)
     Resizes the memory block pointed to by _p_ to _n_ bytes. The
     contents will be unchanged to the minimum of the old and the new
     sizes. If _p_ is _NULL_, the call is equivalent to
     `PyMem_Malloc(n)()'; else if _n_ is equal to zero, the memory
     block is resized but is not freed, and the returned pointer is
     non-_NULL_.  Unless _p_ is _NULL_, it must have been returned by a
     previous call to *note PyMem_Malloc(): 44e. or *note
     PyMem_Realloc(): 44f. If the request fails, *note PyMem_Realloc():
     44f. returns _NULL_ and _p_ remains a valid pointer to the
     previous memory area.

 -- C Function: void PyMem_Free (void *p)
     Frees the memory block pointed to by _p_, which must have been
     returned by a previous call to *note PyMem_Malloc(): 44e. or *note
     PyMem_Realloc(): 44f.  Otherwise, or if `PyMem_Free(p)()' has been
     called before, undefined behavior occurs. If _p_ is _NULL_, no
     operation is performed.

  The following type-oriented macros are provided for convenience.
Note  that _TYPE_ refers to any C type.

 -- C Function: TYPE* PyMem_New (TYPE, size_t n)
     Same as *note PyMem_Malloc(): 44e, but allocates `(n *
     sizeof(TYPE))' bytes of memory.  Returns a pointer cast to
     `TYPE*'.  The memory will not have been initialized in any way.

 -- C Function: TYPE* PyMem_Resize (void *p, TYPE, size_t n)
     Same as *note PyMem_Realloc(): 44f, but the memory block is
     resized to `(n * sizeof(TYPE))' bytes.  Returns a pointer cast to
     `TYPE*'. On return, _p_ will be a pointer to the new memory area,
     or _NULL_ in the event of failure.  This is a C preprocessor
     macro; p is always reassigned.  Save the original value of p to
     avoid losing memory when handling errors.

 -- C Function: void PyMem_Del (void *p)
     Same as *note PyMem_Free(): fe.

  In addition, the following macro sets are provided for calling the
Python memory allocator directly, without involving the C API functions
listed above. However, note that their use does not preserve binary
compatibility across Python versions and is therefore deprecated in
extension modules.

  `PyMem_MALLOC()', `PyMem_REALLOC()', `PyMem_FREE()'.

  `PyMem_NEW()', `PyMem_RESIZE()', `PyMem_DEL()'.


File: python-c-api-3.2.2.info,  Node: Examples,  Prev: Memory Interface,  Up: Memory Management

9.3 Examples
============

Here is the example from section *note Overview: 44b, rewritten so that
the I/O buffer is allocated from the Python heap by using the first
function set:

    PyObject *res;
    char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    /* ...Do some I/O operation involving buf... */
    res = PyString_FromString(buf);
    PyMem_Free(buf); /* allocated with PyMem_Malloc */
    return res;

The same code using the type-oriented function set:

    PyObject *res;
    char *buf = PyMem_New(char, BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    /* ...Do some I/O operation involving buf... */
    res = PyString_FromString(buf);
    PyMem_Del(buf); /* allocated with PyMem_New */
    return res;

Note that in the two examples above, the buffer is always manipulated
via functions belonging to the same set. Indeed, it is required to use
the same memory API family for a given memory block, so that the risk
of mixing different allocators is reduced to a minimum. The following
code sequence contains two errors, one of which is labeled as _fatal_
because it mixes two different allocators operating on different heaps.

    char *buf1 = PyMem_New(char, BUFSIZ);
    char *buf2 = (char *) malloc(BUFSIZ);
    char *buf3 = (char *) PyMem_Malloc(BUFSIZ);
    ...
    PyMem_Del(buf3);  /* Wrong -- should be PyMem_Free() */
    free(buf2);       /* Right -- allocated via malloc() */
    free(buf1);       /* Fatal -- should be PyMem_Del()  */

In addition to the functions aimed at handling raw memory blocks from
the Python heap, objects in Python are allocated and released with
*note PyObject_New(): 455, *note PyObject_NewVar(): 456. and *note
PyObject_Del(): 457.

  These will be explained in the next chapter on defining and
implementing new object types in C.


File: python-c-api-3.2.2.info,  Node: Object Implementation Support,  Next: Index,  Prev: Memory Management,  Up: Top

10 Object Implementation Support
********************************

This chapter describes the functions, types, and macros used when
defining new object types.

* Menu:

* Allocating Objects on the Heap::
* Common Object Structures::
* Type Objects: Type Objects<2>.
* Number Object Structures::
* Mapping Object Structures::
* Sequence Object Structures::
* Buffer Object Structures::
* Supporting Cyclic Garbage Collection::


File: python-c-api-3.2.2.info,  Node: Allocating Objects on the Heap,  Next: Common Object Structures,  Up: Object Implementation Support

10.1 Allocating Objects on the Heap
===================================

 -- C Function: PyObject* _PyObject_New (PyTypeObject *type)
     Return value: New reference.

 -- C Function: PyVarObject* _PyObject_NewVar (PyTypeObject *type,
          Py_ssize_t size)
     Return value: New reference.

 -- C Function: PyObject* PyObject_Init (PyObject *op,
          PyTypeObject *type)
     Return value: Borrowed reference.

     Initialize a newly-allocated object _op_ with its type and initial
     reference.  Returns the initialized object.  If _type_ indicates
     that the object participates in the cyclic garbage detector, it is
     added to the detector's set of observed objects. Other fields of
     the object are not affected.

 -- C Function: PyVarObject* PyObject_InitVar (PyVarObject *op,
          PyTypeObject *type, Py_ssize_t size)
     Return value: Borrowed reference.

     This does everything *note PyObject_Init(): 460. does, and also
     initializes the length information for a variable-size object.

 -- C Function: TYPE* PyObject_New (TYPE, PyTypeObject *type)
     Return value: New reference.

     Allocate a new Python object using the C structure type _TYPE_ and
     the Python type object _type_.  Fields not defined by the Python
     object header are not initialized; the object's reference count
     will be one.  The size of the memory allocation is determined from
     the `tp_basicsize' field of the type object.

 -- C Function: TYPE* PyObject_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)
     Return value: New reference.

     Allocate a new Python object using the C structure type _TYPE_ and
     the Python type object _type_.  Fields not defined by the Python
     object header are not initialized.  The allocated memory allows
     for the _TYPE_ structure plus _size_ fields of the size given by
     the `tp_itemsize' field of _type_.  This is useful for
     implementing objects like tuples, which are able to determine
     their size at construction time.  Embedding the array of fields
     into the same allocation decreases the number of allocations,
     improving the memory management efficiency.

 -- C Function: void PyObject_Del (PyObject *op)
     Releases memory allocated to an object using *note PyObject_New():
     455. or *note PyObject_NewVar(): 456.  This is normally called
     from the `tp_dealloc' handler specified in the object's type.  The
     fields of the object should not be accessed after this call as the
     memory is no longer a valid Python object.

 -- C Variable: PyObject _Py_NoneStruct
     Object which is visible in Python as `None'.  This should only be
     accessed using the *note Py_None: 16a. macro, which evaluates to a
     pointer to this object.

See also
........

*note PyModule_Create(): 372.
     To allocate and create extension modules.


File: python-c-api-3.2.2.info,  Node: Common Object Structures,  Next: Type Objects<2>,  Prev: Allocating Objects on the Heap,  Up: Object Implementation Support

10.2 Common Object Structures
=============================

There are a large number of structures which are used in the definition
of object types for Python.  This section describes these structures
and how they are used.

  All Python objects ultimately share a small number of fields at the
beginning of the object's representation in memory.  These are
represented by the *note PyObject: a. and *note PyVarObject: 466.
types, which are defined, in turn, by the expansions of some macros
also used, whether directly or indirectly, in the definition of all
other Python objects.

 -- C Type: PyObject
     All object types are extensions of this type.  This is a type which
     contains the information Python needs to treat a pointer to an
     object as an object.  In a normal "release" build, it contains
     only the object's reference count and a pointer to the
     corresponding type object.  It corresponds to the fields defined
     by the expansion of the `PyObject_HEAD' macro.

 -- C Type: PyVarObject
     This is an extension of *note PyObject: a. that adds the `ob_size'
     field.  This is only used for objects that have some notion of
     _length_.  This type does not often appear in the Python/C API.
     It corresponds to the fields defined by the expansion of the
     `PyObject_VAR_HEAD' macro.

  These macros are used in the definition of *note PyObject: a. and
*note PyVarObject: 466.:

 -- C Macro: PyObject_HEAD
     This is a macro which expands to the declarations of the fields of
     the *note PyObject: a. type; it is used when declaring new types
     which represent objects without a varying length.  The specific
     fields it expands to depend on the definition of `Py_TRACE_REFS'.
     By default, that macro is not defined, and *note PyObject_HEAD:
     467. expands to:

         Py_ssize_t ob_refcnt;
         PyTypeObject *ob_type;

     When `Py_TRACE_REFS' is defined, it expands to:

         PyObject *_ob_next, *_ob_prev;
         Py_ssize_t ob_refcnt;
         PyTypeObject *ob_type;



 -- C Macro: PyObject_VAR_HEAD
     This is a macro which expands to the declarations of the fields of
     the *note PyVarObject: 466. type; it is used when declaring new
     types which represent objects with a length that varies from
     instance to instance.  This macro always expands to:

         PyObject_HEAD
         Py_ssize_t ob_size;

     Note that *note PyObject_HEAD: 467. is part of the expansion, and
     that its own expansion varies depending on the definition of
     `Py_TRACE_REFS'.

 -- C Macro: PyObject_HEAD_INIT (type)
     This is a macro which expands to initialization values for a new
     *note PyObject: a. type.  This macro expands to:

         _PyObject_EXTRA_INIT
         1, type,



 -- C Macro: PyVarObject_HEAD_INIT (type, size)
     This is a macro which expands to initialization values for a new
     *note PyVarObject: 466. type, including the `ob_size' field.  This
     macro expands to:

         _PyObject_EXTRA_INIT
         1, type, size,



 -- C Type: PyCFunction
     Type of the functions used to implement most Python callables in C.
     Functions of this type take two *note PyObject*: a. parameters and
     return one such value.  If the return value is _NULL_, an
     exception shall have been set.  If not _NULL_, the return value is
     interpreted as the return value of the function as exposed in
     Python.  The function must return a new reference.

 -- C Type: PyCFunctionWithKeywords
     Type of the functions used to implement Python callables in C that
     take keyword arguments: they take three *note PyObject*: a.
     parameters and return one such value.  See *note PyCFunction: 34b.
     above for the meaning of the return value.

 -- C Type: PyMethodDef
     Structure used to describe a method of an extension type.  This
     structure has four fields:

     Field                  C Type            Meaning
     ----------------------------------------------------------------------------- 
     `ml_name'              char *            name of the method
     `ml_meth'              PyCFunction       pointer to the C implementation
     `ml_flags'             int               flag bits indicating how the call
                                              should be constructed
     `ml_doc'               char *            points to the contents of the
                                              docstring


  The `ml_meth' is a C function pointer.  The functions may be of
different types, but they always return *note PyObject*: a.  If the
function is not of the *note PyCFunction: 34b, the compiler will
require a cast in the method table.  Even though *note PyCFunction:
34b. defines the first parameter as *note PyObject*: a, it is common
that the method implementation uses a the specific C type of the _self_
object.

  The `ml_flags' field is a bitfield which can include the following
flags.  The individual flags indicate either a calling convention or a
binding convention.  Of the calling convention flags, only *note
METH_VARARGS: 107. and *note METH_KEYWORDS: 46c. can be combined (but
note that *note METH_KEYWORDS: 46c.  alone is equivalent to
`METH_VARARGS | METH_KEYWORDS'). Any of the calling convention flags
can be combined with a binding flag.

 -- Data: METH_VARARGS
     This is the typical calling convention, where the methods have the
     type *note PyCFunction: 34b. The function expects two *note
     PyObject*: a. values.  The first one is the _self_ object for
     methods; for module functions, it is the module object.  The
     second parameter (often called _args_) is a tuple object
     representing all arguments. This parameter is typically processed
     using *note PyArg_ParseTuple(): f4. or *note PyArg_UnpackTuple():
     106.

 -- Data: METH_KEYWORDS
     Methods with these flags must be of type *note
     PyCFunctionWithKeywords: 46b.  The function expects three
     parameters: _self_, _args_, and a dictionary of all the keyword
     arguments.  The flag is typically combined with *note
     METH_VARARGS: 107, and the parameters are typically processed using
     *note PyArg_ParseTupleAndKeywords(): f5.

 -- Data: METH_NOARGS
     Methods without parameters don't need to check whether arguments
     are given if they are listed with the *note METH_NOARGS: 46d.
     flag.  They need to be of type *note PyCFunction: 34b.  The first
     parameter is typically named _self_ and will hold a reference to
     the module or object instance.  In all cases the second parameter
     will be _NULL_.

 -- Data: METH_O
     Methods with a single object argument can be listed with the *note
     METH_O: 46e.  flag, instead of invoking *note PyArg_ParseTuple():
     f4. with a `"O"' argument.  They have the type *note PyCFunction:
     34b, with the _self_ parameter, and a *note PyObject*: a.
     parameter representing the single argument.

  These two constants are not used to indicate the calling convention
but the binding when use with methods of classes.  These may not be
used for functions defined for modules.  At most one of these flags may
be set for any given method.

 -- Data: METH_CLASS
     The method will be passed the type object as the first parameter
     rather than an instance of the type.  This is used to create
     _class methods_, similar to what is created when using the
     `classmethod()' built-in function.

 -- Data: METH_STATIC
     The method will be passed _NULL_ as the first parameter rather
     than an instance of the type.  This is used to create _static
     methods_, similar to what is created when using the
     `staticmethod()' built-in function.

  One other constant controls whether a method is loaded in place of
another definition with the same method name.

 -- Data: METH_COEXIST
     The method will be loaded in place of existing definitions.
     Without _METH_COEXIST_, the default is to skip repeated
     definitions.  Since slot wrappers are loaded before the method
     table, the existence of a _sq_contains_ slot, for example, would
     generate a wrapped method named `__contains__()' and preclude the
     loading of a corresponding PyCFunction with the same name.  With
     the flag defined, the PyCFunction will be loaded in place of the
     wrapper object and will co-exist with the slot.  This is helpful
     because calls to PyCFunctions are optimized more than wrapper
     object calls.

 -- C Type: PyMemberDef
     Structure which describes an attribute of a type which corresponds
     to a C struct member.  Its fields are:

     Field                  C Type            Meaning
     ----------------------------------------------------------------------------- 
     `name'                 char *            name of the member
     `type'                 int               the type of the member in the C
                                              struct
     `offset'               Py_ssize_t        the offset in bytes that the
                                              member is located on the type's
                                              object struct
     `flags'                int               flag bits indicating if the field
                                              should be read-only or writable
     `doc'                  char *            points to the contents of the
                                              docstring

     `type' can be one of many `T_' macros corresponding to various C
     types.  When the member is accessed in Python, it will be
     converted to the equivalent Python type.

     Macro name          C type
     ------------------------------------------- 
     T_SHORT             short
     T_INT               int
     T_LONG              long
     T_FLOAT             float
     T_DOUBLE            double
     T_STRING            char *
     T_OBJECT            PyObject *
     T_OBJECT_EX         PyObject *
     T_CHAR              char
     T_BYTE              char
     T_UBYTE             unsigned char
     T_UINT              unsigned int
     T_USHORT            unsigned short
     T_ULONG             unsigned long
     T_BOOL              char
     T_LONGLONG          long long
     T_ULONGLONG         unsigned long long
     T_PYSSIZET          Py_ssize_t

     `T_OBJECT' and `T_OBJECT_EX' differ in that `T_OBJECT' returns
     `None' if the member is _NULL_ and `T_OBJECT_EX' raises an
     `AttributeError'.  Try to use `T_OBJECT_EX' over `T_OBJECT'
     because `T_OBJECT_EX' handles use of the `del' statement on that
     attribute more correctly than `T_OBJECT'.

     `flags' can be 0 for write and read access or `READONLY' for
     read-only access.  Using `T_STRING' for `type' implies `READONLY'.
     Only `T_OBJECT' and `T_OBJECT_EX' members can be deleted.  (They
     are set to _NULL_).


File: python-c-api-3.2.2.info,  Node: Type Objects<2>,  Next: Number Object Structures,  Prev: Common Object Structures,  Up: Object Implementation Support

10.3 Type Objects
=================

Perhaps one of the most important structures of the Python object
system is the structure that defines a new type: the *note
PyTypeObject: b. structure.  Type objects can be handled using any of
the `PyObject_*()' or `PyType_*()' functions, but do not offer much
that's interesting to most Python applications. These objects are
fundamental to how objects behave, so they are very important to the
interpreter itself and to any extension module that implements new
types.

  Type objects are fairly large compared to most of the standard types.
The reason for the size is that each type object stores a large number
of values, mostly C function pointers, each of which implements a small
part of the type's functionality.  The fields of the type object are
examined in detail in this section.  The fields will be described in
the order in which they occur in the structure.

  Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, intargfunc,
intintargfunc, intobjargproc, intintobjargproc, objobjargproc,
destructor, freefunc, printfunc, getattrfunc, getattrofunc,
setattrfunc, setattrofunc, reprfunc, hashfunc

  The structure definition for *note PyTypeObject: b. can be found in
`Include/object.h'.  For convenience of reference, this repeats the
definition found there:

    typedef struct _typeobject {
        PyObject_VAR_HEAD
        char *tp_name; /* For printing, in format "<module>.<name>" */
        int tp_basicsize, tp_itemsize; /* For allocation */

        /* Methods to implement standard operations */

        destructor tp_dealloc;
        printfunc tp_print;
        getattrfunc tp_getattr;
        setattrfunc tp_setattr;
        void *tp_reserved;
        reprfunc tp_repr;

        /* Method suites for standard classes */

        PyNumberMethods *tp_as_number;
        PySequenceMethods *tp_as_sequence;
        PyMappingMethods *tp_as_mapping;

        /* More standard operations (here for binary compatibility) */

        hashfunc tp_hash;
        ternaryfunc tp_call;
        reprfunc tp_str;
        getattrofunc tp_getattro;
        setattrofunc tp_setattro;

        /* Functions to access object as input/output buffer */
        PyBufferProcs *tp_as_buffer;

        /* Flags to define presence of optional/expanded features */
        long tp_flags;

        char *tp_doc; /* Documentation string */

        /* call function for all accessible objects */
        traverseproc tp_traverse;

        /* delete references to contained objects */
        inquiry tp_clear;

        /* rich comparisons */
        richcmpfunc tp_richcompare;

        /* weak reference enabler */
        long tp_weaklistoffset;

        /* Iterators */
        getiterfunc tp_iter;
        iternextfunc tp_iternext;

        /* Attribute descriptor and subclassing stuff */
        struct PyMethodDef *tp_methods;
        struct PyMemberDef *tp_members;
        struct PyGetSetDef *tp_getset;
        struct _typeobject *tp_base;
        PyObject *tp_dict;
        descrgetfunc tp_descr_get;
        descrsetfunc tp_descr_set;
        long tp_dictoffset;
        initproc tp_init;
        allocfunc tp_alloc;
        newfunc tp_new;
        freefunc tp_free; /* Low-level free-memory routine */
        inquiry tp_is_gc; /* For PyObject_IS_GC */
        PyObject *tp_bases;
        PyObject *tp_mro; /* method resolution order */
        PyObject *tp_cache;
        PyObject *tp_subclasses;
        PyObject *tp_weaklist;

    } PyTypeObject;

The type object structure extends the *note PyVarObject: 466.
structure. The `ob_size' field is used for dynamic types (created by
`type_new()', usually called from a class statement). Note that *note
PyType_Type: 1e7. (the metatype) initializes `tp_itemsize', which means
that its instances (i.e.  type objects) _must_ have the `ob_size' field.

 -- C Member: PyObject* PyObject._ob_next
 -- C Member: PyObject* PyObject._ob_prev
     These fields are only present when the macro `Py_TRACE_REFS' is
     defined.  Their initialization to _NULL_ is taken care of by the
     `PyObject_HEAD_INIT' macro.  For statically allocated objects,
     these fields always remain _NULL_.  For dynamically allocated
     objects, these two fields are used to link the object into a
     doubly-linked list of _all_ live objects on the heap.  This could
     be used for various debugging purposes; currently the only use is
     to print the objects that are still alive at the end of a run when
     the environment variable `PYTHONDUMPREFS' is set.

     These fields are not inherited by subtypes.

 -- C Member: Py_ssize_t PyObject.ob_refcnt
     This is the type object's reference count, initialized to `1' by
     the `PyObject_HEAD_INIT' macro.  Note that for statically
     allocated type objects, the type's instances (objects whose
     `ob_type' points back to the type) do _not_ count as references.
     But for dynamically allocated type objects, the instances _do_
     count as references.

     This field is not inherited by subtypes.

 -- C Member: PyTypeObject* PyObject.ob_type
     This is the type's type, in other words its metatype.  It is
     initialized by the argument to the `PyObject_HEAD_INIT' macro, and
     its value should normally be `&PyType_Type'.  However, for
     dynamically loadable extension modules that must be usable on
     Windows (at least), the compiler complains that this is not a valid
     initializer.  Therefore, the convention is to pass _NULL_ to the
     `PyObject_HEAD_INIT' macro and to initialize this field explicitly
     at the start of the module's initialization function, before doing
     anything else.  This is typically done like this:

         Foo_Type.ob_type = &PyType_Type;

     This should be done before any instances of the type are created.
     *note PyType_Ready(): 1f3. checks if `ob_type' is _NULL_, and if
     so, initializes it to the `ob_type' field of the base class.
     *note PyType_Ready(): 1f3. will not change this field if it is
     non-zero.

     This field is inherited by subtypes.

 -- C Member: Py_ssize_t PyVarObject.ob_size
     For statically allocated type objects, this should be initialized
     to zero.  For dynamically allocated type objects, this field has a
     special internal meaning.

     This field is not inherited by subtypes.

 -- C Member: char* PyTypeObject.tp_name
     Pointer to a NUL-terminated string containing the name of the
     type. For types that are accessible as module globals, the string
     should be the full module name, followed by a dot, followed by the
     type name; for built-in types, it should be just the type name.
     If the module is a submodule of a package, the full package name
     is part of the full module name.  For example, a type named `T'
     defined in module `M' in subpackage `Q' in package `P' should have
     the `tp_name' initializer `"P.Q.M.T"'.

     For dynamically allocated type objects, this should just be the
     type name, and the module name explicitly stored in the type dict
     as the value for key `'__module__''.

     For statically allocated type objects, the tp_name field should
     contain a dot.  Everything before the last dot is made accessible
     as the `__module__' attribute, and everything after the last dot
     is made accessible as the `__name__' attribute.

     If no dot is present, the entire `tp_name' field is made
     accessible as the `__name__' attribute, and the `__module__'
     attribute is undefined (unless explicitly set in the dictionary,
     as explained above).  This means your type will be impossible to
     pickle.

     This field is not inherited by subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_basicsize
 -- C Member: Py_ssize_t PyTypeObject.tp_itemsize
     These fields allow calculating the size in bytes of instances of
     the type.

     There are two kinds of types: types with fixed-length instances
     have a zero `tp_itemsize' field, types with variable-length
     instances have a non-zero `tp_itemsize' field.  For a type with
     fixed-length instances, all instances have the same size, given in
     `tp_basicsize'.

     For a type with variable-length instances, the instances must have
     an `ob_size' field, and the instance size is `tp_basicsize' plus N
     times `tp_itemsize', where N is the "length" of the object.  The
     value of N is typically stored in the instance's `ob_size' field.
     There are exceptions:  for example, ints use a negative `ob_size'
     to indicate a negative number, and N is `abs(ob_size)' there.
     Also, the presence of an `ob_size' field in the instance layout
     doesn't mean that the instance structure is variable-length (for
     example, the structure for the list type has fixed-length
     instances, yet those instances have a meaningful `ob_size' field).

     The basic size includes the fields in the instance declared by the
     macro *note PyObject_HEAD: 467. or *note PyObject_VAR_HEAD: 468.
     (whichever is used to declare the instance struct) and this in
     turn includes the `_ob_prev' and `_ob_next' fields if they are
     present.  This means that the only correct way to get an
     initializer for the `tp_basicsize' is to use the `sizeof' operator
     on the struct used to declare the instance layout.  The basic size
     does not include the GC header size.

     These fields are inherited separately by subtypes.  If the base
     type has a non-zero `tp_itemsize', it is generally not safe to set
     `tp_itemsize' to a different non-zero value in a subtype (though
     this depends on the implementation of the base type).

     A note about alignment: if the variable items require a particular
     alignment, this should be taken care of by the value of
     `tp_basicsize'.  Example: suppose a type implements an array of
     `double'. `tp_itemsize' is `sizeof(double)'. It is the
     programmer's responsibility that `tp_basicsize' is a multiple of
     `sizeof(double)' (assuming this is the alignment requirement for
     `double').

 -- C Member: destructor PyTypeObject.tp_dealloc
     A pointer to the instance destructor function.  This function must
     be defined unless the type guarantees that its instances will
     never be deallocated (as is the case for the singletons `None' and
     `Ellipsis').

     The destructor function is called by the *note Py_DECREF(): f. and
     *note Py_XDECREF(): 12. macros when the new reference count is
     zero.  At this point, the instance is still in existence, but
     there are no references to it.  The destructor function should
     free all references which the instance owns, free all memory
     buffers owned by the instance (using the freeing function
     corresponding to the allocation function used to allocate the
     buffer), and finally (as its last action) call the type's
     `tp_free' function.  If the type is not subtypable (doesn't have
     the *note Py_TPFLAGS_BASETYPE: 47f. flag bit set), it is
     permissible to call the object deallocator directly instead of via
     `tp_free'.  The object deallocator should be the one used to
     allocate the instance; this is normally *note PyObject_Del(): 457.
     if the instance was allocated using *note PyObject_New(): 455. or
     `PyObject_VarNew()', or *note PyObject_GC_Del(): 480. if the
     instance was allocated using *note PyObject_GC_New(): 481. or
     *note PyObject_GC_NewVar(): 482.

     This field is inherited by subtypes.

 -- C Member: printfunc PyTypeObject.tp_print
     An optional pointer to the instance print function.

     The print function is only called when the instance is printed to
     a _real_ file; when it is printed to a pseudo-file (like a
     `StringIO' instance), the instance's `tp_repr' or `tp_str'
     function is called to convert it to a string.  These are also
     called when the type's `tp_print' field is _NULL_.  A type should
     never implement `tp_print' in a way that produces different output
     than `tp_repr' or `tp_str' would.

     The print function is called with the same signature as *note
     PyObject_Print(): 139.: `int tp_print(PyObject *self, FILE *file,
     int flags)'.  The _self_ argument is the instance to be printed.
     The _file_ argument is the stdio file to which it is to be
     printed.  The _flags_ argument is composed of flag bits. The only
     flag bit currently defined is `Py_PRINT_RAW'. When the
     `Py_PRINT_RAW' flag bit is set, the instance should be printed the
     same way as `tp_str' would format it; when the `Py_PRINT_RAW' flag
     bit is clear, the instance should be printed the same was as
     `tp_repr' would format it. It should return `-1' and set an
     exception condition when an error occurred during the comparison.

     It is possible that the `tp_print' field will be deprecated. In
     any case, it is recommended not to define `tp_print', but instead
     to rely on `tp_repr' and `tp_str' for printing.

     This field is inherited by subtypes.

 -- C Member: getattrfunc PyTypeObject.tp_getattr
     An optional pointer to the get-attribute-string function.

     This field is deprecated.  When it is defined, it should point to
     a function that acts the same as the `tp_getattro' function, but
     taking a C string instead of a Python string object to give the
     attribute name.  The signature is the same as for *note
     PyObject_GetAttrString(): 13d.

     This field is inherited by subtypes together with `tp_getattro': a
     subtype inherits both `tp_getattr' and `tp_getattro' from its base
     type when the subtype's `tp_getattr' and `tp_getattro' are both
     _NULL_.

 -- C Member: setattrfunc PyTypeObject.tp_setattr
     An optional pointer to the set-attribute-string function.

     This field is deprecated.  When it is defined, it should point to
     a function that acts the same as the `tp_setattro' function, but
     taking a C string instead of a Python string object to give the
     attribute name.  The signature is the same as for *note
     PyObject_SetAttrString(): 140.

     This field is inherited by subtypes together with `tp_setattro': a
     subtype inherits both `tp_setattr' and `tp_setattro' from its base
     type when the subtype's `tp_setattr' and `tp_setattro' are both
     _NULL_.

 -- C Member: void* PyTypeObject.tp_reserved
     Reserved slot, formerly known as tp_compare.

 -- C Member: reprfunc PyTypeObject.tp_repr
     An optional pointer to a function that implements the built-in
     function `repr()'.

     The signature is the same as for *note PyObject_Repr(): 146.; it
     must return a string or a Unicode object.  Ideally, this function
     should return a string that, when passed to `eval()', given a
     suitable environment, returns an object with the same value.  If
     this is not feasible, it should return a string starting with
     `'<'' and ending with `'>'' from which both the type and the value
     of the object can be deduced.

     When this field is not set, a string of the form `<%s object at
     %p>' is returned, where `%s' is replaced by the type name, and
     `%p' by the object's memory address.

     This field is inherited by subtypes.

 -- C Member: PyNumberMethods* tp_as_number
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the number protocol.  These fields
     are documented in *note Number Object Structures: 489.

     The `tp_as_number' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PySequenceMethods* tp_as_sequence
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the sequence protocol.  These
     fields are documented in *note Sequence Object Structures: 48b.

     The `tp_as_sequence' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PyMappingMethods* tp_as_mapping
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the mapping protocol.  These
     fields are documented in *note Mapping Object Structures: 48d.

     The `tp_as_mapping' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: hashfunc PyTypeObject.tp_hash
     An optional pointer to a function that implements the built-in
     function `hash()'.

     The signature is the same as for *note PyObject_Hash(): 153.; it
     must return a value of the type Py_hash_t.  The value `-1' should
     not be returned as a normal return value; when an error occurs
     during the computation of the hash value, the function should set
     an exception and return `-1'.

     This field can be set explicitly to *note
     PyObject_HashNotImplemented(): 154. to block inheritance of the
     hash method from a parent type. This is interpreted as the
     equivalent of `__hash__ = None' at the Python level, causing
     `isinstance(o, collections.Hashable)' to correctly return `False'.
     Note that the converse is also true - setting `__hash__ = None' on
     a class at the Python level will result in the `tp_hash' slot
     being set to *note PyObject_HashNotImplemented(): 154.

     When this field is not set, an attempt to take the hash of the
     object raises `TypeError'.

     This field is inherited by subtypes together with
     `tp_richcompare': a subtype inherits both of `tp_richcompare' and
     `tp_hash', when the subtype's `tp_richcompare' and `tp_hash' are
     both _NULL_.

 -- C Member: ternaryfunc PyTypeObject.tp_call
     An optional pointer to a function that implements calling the
     object.  This should be _NULL_ if the object is not callable.  The
     signature is the same as for *note PyObject_Call(): 14d.

     This field is inherited by subtypes.

 -- C Member: reprfunc PyTypeObject.tp_str
     An optional pointer to a function that implements the built-in
     operation `str()'.  (Note that `str' is a type now, and `str()'
     calls the constructor for that type.  This constructor calls *note
     PyObject_Str(): 148. to do the actual work, and *note
     PyObject_Str(): 148. will call this handler.)

     The signature is the same as for *note PyObject_Str(): 148.; it
     must return a string or a Unicode object.  This function should
     return a "friendly" string representation of the object, as this
     is the representation that will be used, among other things, by
     the `print()' function.

     When this field is not set, *note PyObject_Repr(): 146. is called
     to return a string representation.

     This field is inherited by subtypes.

 -- C Member: getattrofunc PyTypeObject.tp_getattro
     An optional pointer to the get-attribute function.

     The signature is the same as for *note PyObject_GetAttr(): 13c.
     It is usually convenient to set this field to *note
     PyObject_GenericGetAttr(): 13e, which implements the normal way of
     looking for object attributes.

     This field is inherited by subtypes together with `tp_getattr': a
     subtype inherits both `tp_getattr' and `tp_getattro' from its base
     type when the subtype's `tp_getattr' and `tp_getattro' are both
     _NULL_.

 -- C Member: setattrofunc PyTypeObject.tp_setattro
     An optional pointer to the set-attribute function.

     The signature is the same as for *note PyObject_SetAttr(): 13f.
     It is usually convenient to set this field to *note
     PyObject_GenericSetAttr(): 141, which implements the normal way of
     setting object attributes.

     This field is inherited by subtypes together with `tp_setattr': a
     subtype inherits both `tp_setattr' and `tp_setattro' from its base
     type when the subtype's `tp_setattr' and `tp_setattro' are both
     _NULL_.

 -- C Member: PyBufferProcs* PyTypeObject.tp_as_buffer
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the buffer interface.  These
     fields are documented in *note Buffer Object Structures: 1b5.

     The `tp_as_buffer' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: long PyTypeObject.tp_flags
     This field is a bit mask of various flags.  Some flags indicate
     variant semantics for certain situations; others are used to
     indicate that certain fields in the type object (or in the
     extension structures referenced via `tp_as_number',
     `tp_as_sequence', `tp_as_mapping', and `tp_as_buffer') that were
     historically not always present are valid; if such a flag bit is
     clear, the type fields it guards must not be accessed and must be
     considered to have a zero or _NULL_ value instead.

     Inheritance of this field is complicated.  Most flag bits are
     inherited individually, i.e. if the base type has a flag bit set,
     the subtype inherits this flag bit.  The flag bits that pertain to
     extension structures are strictly inherited if the extension
     structure is inherited, i.e. the base type's value of the flag bit
     is copied into the subtype together with a pointer to the extension
     structure.  The *note Py_TPFLAGS_HAVE_GC: 1ef. flag bit is
     inherited together with the `tp_traverse' and `tp_clear' fields,
     i.e. if the *note Py_TPFLAGS_HAVE_GC: 1ef. flag bit is clear in
     the subtype and the `tp_traverse' and `tp_clear' fields in the
     subtype exist and have _NULL_ values.

     The following bit masks are currently defined; these can be ORed
     together using the `|' operator to form the value of the
     `tp_flags' field.  The macro *note PyType_HasFeature(): 1ed. takes
     a type and a flags value, _tp_ and _f_, and checks whether
     `tp->tp_flags & f' is non-zero.

      -- Data: Py_TPFLAGS_HEAPTYPE
          This bit is set when the type object itself is allocated on
          the heap.  In this case, the `ob_type' field of its instances
          is considered a reference to the type, and the type object is
          INCREF'ed when a new instance is created, and DECREF'ed when
          an instance is destroyed (this does not apply to instances of
          subtypes; only the type referenced by the instance's ob_type
          gets INCREF'ed or DECREF'ed).

      -- Data: Py_TPFLAGS_BASETYPE
          This bit is set when the type can be used as the base type of
          another type.  If this bit is clear, the type cannot be
          subtyped (similar to a "final" class in Java).

      -- Data: Py_TPFLAGS_READY
          This bit is set when the type object has been fully
          initialized by *note PyType_Ready(): 1f3.

      -- Data: Py_TPFLAGS_READYING
          This bit is set while *note PyType_Ready(): 1f3. is in the
          process of initializing the type object.

      -- Data: Py_TPFLAGS_HAVE_GC
          This bit is set when the object supports garbage collection.
          If this bit is set, instances must be created using *note
          PyObject_GC_New(): 481. and destroyed using *note
          PyObject_GC_Del(): 480.  More information in section *note
          Supporting Cyclic Garbage Collection: 498.  This bit also
          implies that the GC-related fields `tp_traverse' and
          `tp_clear' are present in the type object.

      -- Data: Py_TPFLAGS_DEFAULT
          This is a bitmask of all the bits that pertain to the
          existence of certain fields in the type object and its
          extension structures. Currently, it includes the following
          bits: `Py_TPFLAGS_HAVE_STACKLESS_EXTENSION',
          `Py_TPFLAGS_HAVE_VERSION_TAG'.

 -- C Member: char* PyTypeObject.tp_doc
     An optional pointer to a NUL-terminated C string giving the
     docstring for this type object.  This is exposed as the `__doc__'
     attribute on the type and instances of the type.

     This field is _not_ inherited by subtypes.

 -- C Member: traverseproc PyTypeObject.tp_traverse
     An optional pointer to a traversal function for the garbage
     collector.  This is only used if the *note Py_TPFLAGS_HAVE_GC:
     1ef. flag bit is set.  More information about Python's garbage
     collection scheme can be found in section *note Supporting Cyclic
     Garbage Collection: 498.

     The `tp_traverse' pointer is used by the garbage collector to
     detect reference cycles. A typical implementation of a
     `tp_traverse' function simply calls *note Py_VISIT(): 49c. on each
     of the instance's members that are Python objects.  For example,
     this is function `local_traverse()' from the `_thread' extension
     module:

         static int
         local_traverse(localobject *self, visitproc visit, void *arg)
         {
             Py_VISIT(self->args);
             Py_VISIT(self->kw);
             Py_VISIT(self->dict);
             return 0;
         }

     Note that *note Py_VISIT(): 49c. is called only on those members
     that can participate in reference cycles.  Although there is also
     a `self->key' member, it can only be _NULL_ or a Python string and
     therefore cannot be part of a reference cycle.

     On the other hand, even if you know a member can never be part of
     a cycle, as a debugging aid you may want to visit it anyway just
     so the `gc' module's `get_referents()' function will include it.

     Note that *note Py_VISIT(): 49c. requires the _visit_ and _arg_
     parameters to `local_traverse()' to have these specific names;
     don't name them just anything.

     This field is inherited by subtypes together with `tp_clear' and
     the *note Py_TPFLAGS_HAVE_GC: 1ef. flag bit: the flag bit,
     `tp_traverse', and `tp_clear' are all inherited from the base type
     if they are all zero in the subtype.

 -- C Member: inquiry PyTypeObject.tp_clear
     An optional pointer to a clear function for the garbage collector.
     This is only used if the *note Py_TPFLAGS_HAVE_GC: 1ef. flag bit
     is set.

     The `tp_clear' member function is used to break reference cycles
     in cyclic garbage detected by the garbage collector.  Taken
     together, all `tp_clear' functions in the system must combine to
     break all reference cycles.  This is subtle, and if in any doubt
     supply a `tp_clear' function.  For example, the tuple type does
     not implement a `tp_clear' function, because it's possible to
     prove that no reference cycle can be composed entirely of tuples.
     Therefore the `tp_clear' functions of other types must be
     sufficient to break any cycle containing a tuple.  This isn't
     immediately obvious, and there's rarely a good reason to avoid
     implementing `tp_clear'.

     Implementations of `tp_clear' should drop the instance's
     references to those of its members that may be Python objects, and
     set its pointers to those members to _NULL_, as in the following
     example:

         static int
         local_clear(localobject *self)
         {
             Py_CLEAR(self->key);
             Py_CLEAR(self->args);
             Py_CLEAR(self->kw);
             Py_CLEAR(self->dict);
             return 0;
         }

     The *note Py_CLEAR(): 5e. macro should be used, because clearing
     references is delicate:  the reference to the contained object
     must not be decremented until after the pointer to the contained
     object is set to _NULL_.  This is because decrementing the
     reference count may cause the contained object to become trash,
     triggering a chain of reclamation activity that may include
     invoking arbitrary Python code (due to finalizers, or weakref
     callbacks, associated with the contained object). If it's possible
     for such code to reference _self_ again, it's important that the
     pointer to the contained object be _NULL_ at that time, so that
     _self_ knows the contained object can no longer be used.  The
     *note Py_CLEAR(): 5e. macro performs the operations in a safe
     order.

     Because the goal of `tp_clear' functions is to break reference
     cycles, it's not necessary to clear contained objects like Python
     strings or Python integers, which can't participate in reference
     cycles. On the other hand, it may be convenient to clear all
     contained Python objects, and write the type's `tp_dealloc'
     function to invoke `tp_clear'.

     More information about Python's garbage collection scheme can be
     found in section *note Supporting Cyclic Garbage Collection: 498.

     This field is inherited by subtypes together with `tp_traverse'
     and the *note Py_TPFLAGS_HAVE_GC: 1ef. flag bit: the flag bit,
     `tp_traverse', and `tp_clear' are all inherited from the base type
     if they are all zero in the subtype.

 -- C Member: richcmpfunc PyTypeObject.tp_richcompare
     An optional pointer to the rich comparison function, whose
     signature is `PyObject *tp_richcompare(PyObject *a, PyObject *b,
     int op)'.

     The function should return the result of the comparison (usually
     `Py_True' or `Py_False').  If the comparison is undefined, it must
     return `Py_NotImplemented', if another error occurred it must
     return `NULL' and set an exception condition.

          Note: If you want to implement a type for which only a
          limited set of comparisons makes sense (e.g. `==' and `!=',
          but not `<' and friends), directly raise `TypeError' in the
          rich comparison function.

     This field is inherited by subtypes together with `tp_hash': a
     subtype inherits `tp_richcompare' and `tp_hash' when the subtype's
     `tp_richcompare' and `tp_hash' are both _NULL_.

     The following constants are defined to be used as the third
     argument for `tp_richcompare' and for *note
     PyObject_RichCompare(): 144.:

     Constant             Comparison
     -------------------------------------- 
     `Py_LT'              `<'
     `Py_LE'              `<='
     `Py_EQ'              `=='
     `Py_NE'              `!='
     `Py_GT'              `>'
     `Py_GE'              `>='


 -- C Member: long PyTypeObject.tp_weaklistoffset
     If the instances of this type are weakly referenceable, this field
     is greater than zero and contains the offset in the instance
     structure of the weak reference list head (ignoring the GC header,
     if present); this offset is used by `PyObject_ClearWeakRefs()' and
     the `PyWeakref_*()' functions.  The instance structure needs to
     include a field of type *note PyObject*: a. which is initialized
     to _NULL_.

     Do not confuse this field with `tp_weaklist'; that is the list
     head for weak references to the type object itself.

     This field is inherited by subtypes, but see the rules listed
     below. A subtype may override this offset; this means that the
     subtype uses a different weak reference list head than the base
     type.  Since the list head is always found via
     `tp_weaklistoffset', this should not be a problem.

     When a type defined by a class statement has no `__slots__'
     declaration, and none of its base types are weakly referenceable,
     the type is made weakly referenceable by adding a weak reference
     list head slot to the instance layout and setting the
     `tp_weaklistoffset' of that slot's offset.

     When a type's `__slots__' declaration contains a slot named
     `__weakref__', that slot becomes the weak reference list head for
     instances of the type, and the slot's offset is stored in the
     type's `tp_weaklistoffset'.

     When a type's `__slots__' declaration does not contain a slot named
     `__weakref__', the type inherits its `tp_weaklistoffset' from its
     base type.

 -- C Member: getiterfunc PyTypeObject.tp_iter
     An optional pointer to a function that returns an iterator for the
     object.  Its presence normally signals that the instances of this
     type are iterable (although sequences may be iterable without this
     function).

     This function has the same signature as *note PyObject_GetIter():
     15d.

     This field is inherited by subtypes.

 -- C Member: iternextfunc PyTypeObject.tp_iternext
     An optional pointer to a function that returns the next item in an
     iterator.  When the iterator is exhausted, it must return _NULL_;
     a `StopIteration' exception may or may not be set.  When another
     error occurs, it must return _NULL_ too.  Its presence signals
     that the instances of this type are iterators.

     Iterator types should also define the `tp_iter' function, and that
     function should return the iterator instance itself (not a new
     iterator instance).

     This function has the same signature as *note PyIter_Next(): 1b1.

     This field is inherited by subtypes.

 -- C Member: struct PyMethodDef* PyTypeObject.tp_methods
     An optional pointer to a static _NULL_-terminated array of *note
     PyMethodDef: 379.  structures, declaring regular methods of this
     type.

     For each entry in the array, an entry is added to the type's
     dictionary (see `tp_dict' below) containing a method descriptor.

     This field is not inherited by subtypes (methods are inherited
     through a different mechanism).

 -- C Member: struct PyMemberDef* PyTypeObject.tp_members
     An optional pointer to a static _NULL_-terminated array of *note
     PyMemberDef: 472.  structures, declaring regular data members
     (fields or slots) of instances of this type.

     For each entry in the array, an entry is added to the type's
     dictionary (see `tp_dict' below) containing a member descriptor.

     This field is not inherited by subtypes (members are inherited
     through a different mechanism).

 -- C Member: struct PyGetSetDef* PyTypeObject.tp_getset
     An optional pointer to a static _NULL_-terminated array of
     `PyGetSetDef' structures, declaring computed attributes of
     instances of this type.

     For each entry in the array, an entry is added to the type's
     dictionary (see `tp_dict' below) containing a getset descriptor.

     This field is not inherited by subtypes (computed attributes are
     inherited through a different mechanism).

     Docs for PyGetSetDef:

         typedef PyObject *(*getter)(PyObject *, void *);
         typedef int (*setter)(PyObject *, PyObject *, void *);

         typedef struct PyGetSetDef {
             char *name;    /* attribute name */
             getter get;    /* C function to get the attribute */
             setter set;    /* C function to set the attribute */
             char *doc;     /* optional doc string */
             void *closure; /* optional additional data for getter and setter */
         } PyGetSetDef;



 -- C Member: PyTypeObject* PyTypeObject.tp_base
     An optional pointer to a base type from which type properties are
     inherited.  At this level, only single inheritance is supported;
     multiple inheritance require dynamically creating a type object by
     calling the metatype.

     This field is not inherited by subtypes (obviously), but it
     defaults to `&PyBaseObject_Type' (which to Python programmers is
     known as the type `object').

 -- C Member: PyObject* PyTypeObject.tp_dict
     The type's dictionary is stored here by *note PyType_Ready(): 1f3.

     This field should normally be initialized to _NULL_ before
     PyType_Ready is called; it may also be initialized to a dictionary
     containing initial attributes for the type.  Once *note
     PyType_Ready(): 1f3. has initialized the type, extra attributes
     for the type may be added to this dictionary only if they don't
     correspond to overloaded operations (like `__add__()').

     This field is not inherited by subtypes (though the attributes
     defined in here are inherited through a different mechanism).

          Warning: It is not safe to use *note PyDict_SetItem(): 313.
          on or otherwise modify `tp_dict' with the dictionary C-API.

 -- C Member: descrgetfunc PyTypeObject.tp_descr_get
     An optional pointer to a "descriptor get" function.

     The function signature is

         PyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);


     This field is inherited by subtypes.

 -- C Member: descrsetfunc PyTypeObject.tp_descr_set
     An optional pointer to a "descriptor set" function.

     The function signature is

         int tp_descr_set(PyObject *self, PyObject *obj, PyObject *value);

     This field is inherited by subtypes.


 -- C Member: long PyTypeObject.tp_dictoffset
     If the instances of this type have a dictionary containing
     instance variables, this field is non-zero and contains the offset
     in the instances of the type of the instance variable dictionary;
     this offset is used by *note PyObject_GenericGetAttr(): 13e.

     Do not confuse this field with `tp_dict'; that is the dictionary
     for attributes of the type object itself.

     If the value of this field is greater than zero, it specifies the
     offset from the start of the instance structure.  If the value is
     less than zero, it specifies the offset from the _end_ of the
     instance structure.  A negative offset is more expensive to use,
     and should only be used when the instance structure contains a
     variable-length part.  This is used for example to add an instance
     variable dictionary to subtypes of `str' or `tuple'. Note that the
     `tp_basicsize' field should account for the dictionary added to
     the end in that case, even though the dictionary is not included
     in the basic object layout.  On a system with a pointer size of 4
     bytes, `tp_dictoffset' should be set to `-4' to indicate that the
     dictionary is at the very end of the structure.

     The real dictionary offset in an instance can be computed from a
     negative `tp_dictoffset' as follows:

         dictoffset = tp_basicsize + abs(ob_size)*tp_itemsize + tp_dictoffset
         if dictoffset is not aligned on sizeof(void*):
             round up to sizeof(void*)

     where `tp_basicsize', `tp_itemsize' and `tp_dictoffset' are taken
     from the type object, and `ob_size' is taken from the instance.
     The absolute value is taken because ints use the sign of `ob_size'
     to store the sign of the number.  (There's never a need to do this
     calculation yourself; it is done for you by
     `_PyObject_GetDictPtr()'.)

     This field is inherited by subtypes, but see the rules listed
     below. A subtype may override this offset; this means that the
     subtype instances store the dictionary at a difference offset than
     the base type.  Since the dictionary is always found via
     `tp_dictoffset', this should not be a problem.

     When a type defined by a class statement has no `__slots__'
     declaration, and none of its base types has an instance variable
     dictionary, a dictionary slot is added to the instance layout and
     the `tp_dictoffset' is set to that slot's offset.

     When a type defined by a class statement has a `__slots__'
     declaration, the type inherits its `tp_dictoffset' from its base
     type.

     (Adding a slot named `__dict__' to the `__slots__' declaration does
     not have the expected effect, it just causes confusion.  Maybe
     this should be added as a feature just like `__weakref__' though.)

 -- C Member: initproc PyTypeObject.tp_init
     An optional pointer to an instance initialization function.

     This function corresponds to the `__init__()' method of classes.
     Like `__init__()', it is possible to create an instance without
     calling `__init__()', and it is possible to reinitialize an
     instance by calling its `__init__()' method again.

     The function signature is

         int tp_init(PyObject *self, PyObject *args, PyObject *kwds)

     The self argument is the instance to be initialized; the _args_
     and _kwds_ arguments represent positional and keyword arguments of
     the call to `__init__()'.

     The `tp_init' function, if not _NULL_, is called when an instance
     is created normally by calling its type, after the type's `tp_new'
     function has returned an instance of the type.  If the `tp_new'
     function returns an instance of some other type that is not a
     subtype of the original type, no `tp_init' function is called; if
     `tp_new' returns an instance of a subtype of the original type,
     the subtype's `tp_init' is called.

     This field is inherited by subtypes.

 -- C Member: allocfunc PyTypeObject.tp_alloc
     An optional pointer to an instance allocation function.

     The function signature is

         PyObject *tp_alloc(PyTypeObject *self, Py_ssize_t nitems)

     The purpose of this function is to separate memory allocation from
     memory initialization.  It should return a pointer to a block of
     memory of adequate length for the instance, suitably aligned, and
     initialized to zeros, but with `ob_refcnt' set to `1' and
     `ob_type' set to the type argument.  If the type's `tp_itemsize'
     is non-zero, the object's `ob_size' field should be initialized to
     _nitems_ and the length of the allocated memory block should be
     `tp_basicsize + nitems*tp_itemsize', rounded up to a multiple of
     `sizeof(void*)'; otherwise, _nitems_ is not used and the length of
     the block should be `tp_basicsize'.

     Do not use this function to do any other instance initialization,
     not even to allocate additional memory; that should be done by
     `tp_new'.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is always set to *note PyType_GenericAlloc(): 1f1, to
     force a standard heap allocation strategy.  That is also the
     recommended value for statically defined types.

 -- C Member: newfunc PyTypeObject.tp_new
     An optional pointer to an instance creation function.

     If this function is _NULL_ for a particular type, that type cannot
     be called to create new instances; presumably there is some other
     way to create instances, like a factory function.

     The function signature is

         PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)

     The subtype argument is the type of the object being created; the
     _args_ and _kwds_ arguments represent positional and keyword
     arguments of the call to the type.  Note that subtype doesn't have
     to equal the type whose `tp_new' function is called; it may be a
     subtype of that type (but not an unrelated type).

     The `tp_new' function should call `subtype->tp_alloc(subtype,
     nitems)' to allocate space for the object, and then do only as
     much further initialization as is absolutely necessary.
     Initialization that can safely be ignored or repeated should be
     placed in the `tp_init' handler.  A good rule of thumb is that for
     immutable types, all initialization should take place in `tp_new',
     while for mutable types, most initialization should be deferred to
     `tp_init'.

     This field is inherited by subtypes, except it is not inherited by
     static types whose `tp_base' is _NULL_ or `&PyBaseObject_Type'.

 -- C Member: destructor PyTypeObject.tp_free
     An optional pointer to an instance deallocation function.  Its
     signature is `freefunc':

         void tp_free(void *)

     An initializer that is compatible with this signature is
     `PyObject_Free()'.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is set to a deallocator suitable to match *note
     PyType_GenericAlloc(): 1f1. and the value of the *note
     Py_TPFLAGS_HAVE_GC: 1ef. flag bit.

 -- C Member: inquiry PyTypeObject.tp_is_gc
     An optional pointer to a function called by the garbage collector.

     The garbage collector needs to know whether a particular object is
     collectible or not.  Normally, it is sufficient to look at the
     object's type's `tp_flags' field, and check the *note
     Py_TPFLAGS_HAVE_GC: 1ef. flag bit.  But some types have a mixture
     of statically and dynamically allocated instances, and the
     statically allocated instances are not collectible.  Such types
     should define this function; it should return `1' for a
     collectible instance, and `0' for a non-collectible instance. The
     signature is

         int tp_is_gc(PyObject *self)

     (The only example of this are types themselves.  The metatype,
     *note PyType_Type: 1e7, defines this function to distinguish
     between statically and dynamically allocated types.)

     This field is inherited by subtypes.

 -- C Member: PyObject* PyTypeObject.tp_bases
     Tuple of base types.

     This is set for types created by a class statement.  It should be
     _NULL_ for statically defined types.

     This field is not inherited.

 -- C Member: PyObject* PyTypeObject.tp_mro
     Tuple containing the expanded set of base types, starting with the
     type itself and ending with `object', in Method Resolution Order.

     This field is not inherited; it is calculated fresh by *note
     PyType_Ready(): 1f3.

 -- C Member: PyObject* PyTypeObject.tp_cache
     Unused.  Not inherited.  Internal use only.

 -- C Member: PyObject* PyTypeObject.tp_subclasses
     List of weak references to subclasses.  Not inherited.  Internal
     use only.

 -- C Member: PyObject* PyTypeObject.tp_weaklist
     Weak reference list head, for weak references to this type object.
     Not inherited.  Internal use only.

  The remaining fields are only defined if the feature test macro
`COUNT_ALLOCS' is defined, and are for internal use only. They are
documented here for completeness.  None of these fields are inherited by
subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_allocs
     Number of allocations.

 -- C Member: Py_ssize_t PyTypeObject.tp_frees
     Number of frees.

 -- C Member: Py_ssize_t PyTypeObject.tp_maxalloc
     Maximum simultaneously allocated objects.

 -- C Member: PyTypeObject* PyTypeObject.tp_next
     Pointer to the next type object with a non-zero `tp_allocs' field.

  Also, note that, in a garbage collected Python, tp_dealloc may be
called from any Python thread, not just the thread which created the
object (if the object becomes part of a refcount cycle, that cycle
might be collected by a garbage collection on any thread).  This is not
a problem for Python API calls, since the thread on which tp_dealloc is
called will own the Global Interpreter Lock (GIL). However, if the
object being destroyed in turn destroys objects from some other C or
C++ library, care should be taken to ensure that destroying those
objects on the thread which called tp_dealloc will not violate any
assumptions of the library.


File: python-c-api-3.2.2.info,  Node: Number Object Structures,  Next: Mapping Object Structures,  Prev: Type Objects<2>,  Up: Object Implementation Support

10.4 Number Object Structures
=============================

 -- C Type: PyNumberMethods
     This structure holds pointers to the functions which an object
     uses to implement the number protocol.  Each function is used by
     the function of similar name documented in the *note Number
     Protocol: 15f. section.

     Here is the structure definition:

         typedef struct {
              binaryfunc nb_add;
              binaryfunc nb_subtract;
              binaryfunc nb_multiply;
              binaryfunc nb_remainder;
              binaryfunc nb_divmod;
              ternaryfunc nb_power;
              unaryfunc nb_negative;
              unaryfunc nb_positive;
              unaryfunc nb_absolute;
              inquiry nb_bool;
              unaryfunc nb_invert;
              binaryfunc nb_lshift;
              binaryfunc nb_rshift;
              binaryfunc nb_and;
              binaryfunc nb_xor;
              binaryfunc nb_or;
              unaryfunc nb_int;
              void *nb_reserved;
              unaryfunc nb_float;

              binaryfunc nb_inplace_add;
              binaryfunc nb_inplace_subtract;
              binaryfunc nb_inplace_multiply;
              binaryfunc nb_inplace_remainder;
              ternaryfunc nb_inplace_power;
              binaryfunc nb_inplace_lshift;
              binaryfunc nb_inplace_rshift;
              binaryfunc nb_inplace_and;
              binaryfunc nb_inplace_xor;
              binaryfunc nb_inplace_or;

              binaryfunc nb_floor_divide;
              binaryfunc nb_true_divide;
              binaryfunc nb_inplace_floor_divide;
              binaryfunc nb_inplace_true_divide;

              unaryfunc nb_index;
         } PyNumberMethods;


          Note: Binary and ternary functions must check the type of all
          their operands, and implement the necessary conversions (at
          least one of the operands is an instance of the defined
          type).  If the operation is not defined for the given
          operands, binary and ternary functions must return
          `Py_NotImplemented', if another error occurred they must
          return `NULL' and set an exception.

          Note: The `nb_reserved' field should always be `NULL'.  It
          was previously called `nb_long', and was renamed in Python
          3.0.1.


File: python-c-api-3.2.2.info,  Node: Mapping Object Structures,  Next: Sequence Object Structures,  Prev: Number Object Structures,  Up: Object Implementation Support

10.5 Mapping Object Structures
==============================

 -- C Type: PyMappingMethods
     This structure holds pointers to the functions which an object
     uses to implement the mapping protocol.  It has three members:

 -- C Member: lenfunc PyMappingMethods.mp_length
     This function is used by *note PyMapping_Length(): 1a3. and *note
     PyObject_Size(): 15a, and has the same signature.  This slot may
     be set to _NULL_ if the object has no defined length.

 -- C Member: binaryfunc PyMappingMethods.mp_subscript
     This function is used by *note PyObject_GetItem(): 1a. and has the
     same signature.  This slot must be filled for the *note
     PyMapping_Check(): 1a1.  function to return `1', it can be _NULL_
     otherwise.

 -- C Member: objobjargproc PyMappingMethods.mp_ass_subscript
     This function is used by *note PyObject_SetItem(): 17. and has the
     same signature.  If this slot is _NULL_, the object does not
     support item assignment.


File: python-c-api-3.2.2.info,  Node: Sequence Object Structures,  Next: Buffer Object Structures,  Prev: Mapping Object Structures,  Up: Object Implementation Support

10.6 Sequence Object Structures
===============================

 -- C Type: PySequenceMethods
     This structure holds pointers to the functions which an object
     uses to implement the sequence protocol.

 -- C Member: lenfunc PySequenceMethods.sq_length
     This function is used by *note PySequence_Size(): 18a. and *note
     PyObject_Size(): 15a, and has the same signature.

 -- C Member: binaryfunc PySequenceMethods.sq_concat
     This function is used by *note PySequence_Concat(): 18c. and has
     the same signature.  It is also used by the `+' operator, after
     trying the numeric addition via the `tp_as_number.nb_add' slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_repeat
     This function is used by *note PySequence_Repeat(): 18d. and has
     the same signature.  It is also used by the `*' operator, after
     trying numeric multiplication via the `tp_as_number.nb_mul' slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_item
     This function is used by *note PySequence_GetItem(): 1b. and has
     the same signature.  This slot must be filled for the *note
     PySequence_Check(): 189.  function to return `1', it can be _NULL_
     otherwise.

     Negative indexes are handled as follows: if the `sq_length' slot is
     filled, it is called and the sequence length is used to compute a
     positive index which is passed to `sq_item'.  If `sq_length' is
     _NULL_, the index is passed as is to the function.

 -- C Member: ssizeobjargproc PySequenceMethods.sq_ass_item
     This function is used by *note PySequence_SetItem(): 16. and has
     the same signature.  This slot may be left to _NULL_ if the object
     does not support item assignment.

 -- C Member: objobjproc PySequenceMethods.sq_contains
     This function may be used by *note PySequence_Contains(): 195. and
     has the same signature.  This slot may be left to _NULL_, in this
     case *note PySequence_Contains(): 195. simply traverses the
     sequence until it finds a match.

 -- C Member: binaryfunc PySequenceMethods.sq_inplace_concat
     This function is used by *note PySequence_InPlaceConcat(): 18e.
     and has the same signature.  It should modify its first operand,
     and return it.

 -- C Member: ssizeargfunc PySequenceMethods.sq_inplace_repeat
     This function is used by *note PySequence_InPlaceRepeat(): 18f.
     and has the same signature.  It should modify its first operand,
     and return it.


File: python-c-api-3.2.2.info,  Node: Buffer Object Structures,  Next: Supporting Cyclic Garbage Collection,  Prev: Sequence Object Structures,  Up: Object Implementation Support

10.7 Buffer Object Structures
=============================

The *note buffer interface: 1b4. exports a model where an object can
expose its internal data.

  If an object does not export the buffer interface, then its
`tp_as_buffer' member in the *note PyTypeObject: b. structure should be
_NULL_.  Otherwise, the `tp_as_buffer' will point to a *note
PyBufferProcs: 4ca. structure.

 -- C Type: PyBufferProcs
     Structure used to hold the function pointers which define an
     implementation of the buffer protocol.

      -- C Member: getbufferproc bf_getbuffer
          This should fill a *note Py_buffer: f9. with the necessary
          data for exporting the type.  The signature of
          `getbufferproc' is `int (PyObject *obj, Py_buffer *view, int
          flags)'.  _obj_ is the object to export, _view_ is the *note
          Py_buffer: f9. struct to fill, and _flags_ gives the
          conditions the caller wants the memory under.  (See *note
          PyObject_GetBuffer(): 1b6. for all flags.)  `bf_getbuffer' is
          responsible for filling _view_ with the appropriate
          information.  (`PyBuffer_FillView()' can be used in simple
          cases.)  See *note Py_buffer: f9.s docs for what needs to be
          filled in.

      -- C Member: releasebufferproc bf_releasebuffer
          This should release the resources of the buffer.  The
          signature of `releasebufferproc' is `void (PyObject *obj,
          Py_buffer *view)'.  If the `bf_releasebuffer' function is not
          provided (i.e. it is _NULL_), then it does not ever need to
          be called.

          The exporter of the buffer interface must make sure that any
          memory pointed to in the *note Py_buffer: f9. structure
          remains valid until releasebuffer is called.  Exporters will
          need to define a `bf_releasebuffer' function if they can
          re-allocate their memory, strides, shape, suboffsets, or
          format variables which they might share through the struct
          bufferinfo.

          See *note PyBuffer_Release(): fb.


File: python-c-api-3.2.2.info,  Node: Supporting Cyclic Garbage Collection,  Prev: Buffer Object Structures,  Up: Object Implementation Support

10.8 Supporting Cyclic Garbage Collection
=========================================

Python's support for detecting and collecting garbage which involves
circular references requires support from object types which are
"containers" for other objects which may also be containers.  Types
which do not store references to other objects, or which only store
references to atomic types (such as numbers or strings), do not need to
provide any explicit support for garbage collection.

  To create a container type, the `tp_flags' field of the type object
must include the *note Py_TPFLAGS_HAVE_GC: 1ef. and provide an
implementation of the `tp_traverse' handler.  If instances of the type
are mutable, a `tp_clear' implementation must also be provided.

 -- Data: Py_TPFLAGS_HAVE_GC
     Objects with a type with this flag set must conform with the rules
     documented here.  For convenience these objects will be referred
     to as container objects.

  Constructors for container types must conform to two rules:

  1. The memory for the object must be allocated using *note
     PyObject_GC_New(): 481.  or *note PyObject_GC_NewVar(): 482.

  2. Once all the fields which may contain references to other
     containers are initialized, it must call *note
     PyObject_GC_Track(): 4cf.

 -- C Function: TYPE* PyObject_GC_New (TYPE, PyTypeObject *type)
     Analogous to *note PyObject_New(): 455. but for container objects
     with the *note Py_TPFLAGS_HAVE_GC: 1ef. flag set.

 -- C Function: TYPE* PyObject_GC_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)
     Analogous to *note PyObject_NewVar(): 456. but for container
     objects with the *note Py_TPFLAGS_HAVE_GC: 1ef. flag set.

 -- C Function: TYPE* PyObject_GC_Resize (TYPE, PyVarObject *op,
          Py_ssize_t newsize)
     Resize an object allocated by *note PyObject_NewVar(): 456.
     Returns the resized object or _NULL_ on failure.

 -- C Function: void PyObject_GC_Track (PyObject *op)
     Adds the object _op_ to the set of container objects tracked by the
     collector.  The collector can run at unexpected times so objects
     must be valid while being tracked.  This should be called once all
     the fields followed by the `tp_traverse' handler become valid,
     usually near the end of the constructor.

 -- C Function: void _PyObject_GC_TRACK (PyObject *op)
     A macro version of *note PyObject_GC_Track(): 4cf.  It should not
     be used for extension modules.

  Similarly, the deallocator for the object must conform to a similar
pair of rules:

  1. Before fields which refer to other containers are invalidated,
     *note PyObject_GC_UnTrack(): 4d2. must be called.

  2. The object's memory must be deallocated using *note
     PyObject_GC_Del(): 480.

 -- C Function: void PyObject_GC_Del (void *op)
     Releases memory allocated to an object using *note
     PyObject_GC_New(): 481. or *note PyObject_GC_NewVar(): 482.

 -- C Function: void PyObject_GC_UnTrack (void *op)
     Remove the object _op_ from the set of container objects tracked
     by the collector.  Note that *note PyObject_GC_Track(): 4cf. can
     be called again on this object to add it back to the set of
     tracked objects.  The deallocator (`tp_dealloc' handler) should
     call this for the object before any of the fields used by the
     `tp_traverse' handler become invalid.

 -- C Function: void _PyObject_GC_UNTRACK (PyObject *op)
     A macro version of *note PyObject_GC_UnTrack(): 4d2.  It should
     not be used for extension modules.

  The `tp_traverse' handler accepts a function parameter of this type:

 -- C Type: int (*visitproc) (PyObject *object, void *arg)
     Type of the visitor function passed to the `tp_traverse' handler.
     The function should be called with an object to traverse as
     _object_ and the third parameter to the `tp_traverse' handler as
     _arg_.  The Python core uses several visitor functions to
     implement cyclic garbage detection; it's not expected that users
     will need to write their own visitor functions.

  The `tp_traverse' handler must have the following type:

 -- C Type: int (*traverseproc) (PyObject *self, visitproc visit,
          void *arg)
     Traversal function for a container object.  Implementations must
     call the _visit_ function for each object directly contained by
     _self_, with the parameters to _visit_ being the contained object
     and the _arg_ value passed to the handler.  The _visit_ function
     must not be called with a _NULL_ object argument.  If _visit_
     returns a non-zero value that value should be returned immediately.

  To simplify writing `tp_traverse' handlers, a *note Py_VISIT(): 49c.
macro is provided.  In order to use this macro, the `tp_traverse'
implementation must name its arguments exactly _visit_ and _arg_:

 -- C Function: void Py_VISIT (PyObject *o)
     Call the _visit_ callback, with arguments _o_ and _arg_. If
     _visit_ returns a non-zero value, then return it.  Using this
     macro, `tp_traverse' handlers look like:

         static int
         my_traverse(Noddy *self, visitproc visit, void *arg)
         {
             Py_VISIT(self->foo);
             Py_VISIT(self->bar);
             return 0;
         }



  The `tp_clear' handler must be of the *note inquiry: 4d6. type, or
_NULL_ if the object is immutable.

 -- C Type: int (*inquiry) (PyObject *self)
     Drop references that may have created reference cycles.  Immutable
     objects do not have to define this method since they can never
     directly create reference cycles.  Note that the object must still
     be valid after calling this method (don't just call *note
     Py_DECREF(): f. on a reference).  The collector will call this
     method if it detects that this object is involved in a reference
     cycle.


File: python-c-api-3.2.2.info,  Node: Index,  Prev: Object Implementation Support,  Up: Top

Index
*****

 [index ]
* Menu:

* __all__ (package variable):            Importing Modules.  (line    9)
* __dict__ (module attribute):           Module Objects.     (line   32)
* __doc__ (module attribute):            Module Objects.     (line   24)
* __file__ (module attribute):           Module Objects.     (line   52)
* __name__ (module attribute):           Module Objects.     (line   39)
* _frozen (C type):                      Importing Modules.  (line  202)
* _inittab (C type):                     Importing Modules.  (line  233)
* _Py_c_diff (C function):               Complex Numbers as C Structures.
                                                             (line   27)
* _Py_c_neg (C function):                Complex Numbers as C Structures.
                                                             (line   32)
* _Py_c_pow (C function):                Complex Numbers as C Structures.
                                                             (line   46)
* _Py_c_prod (C function):               Complex Numbers as C Structures.
                                                             (line   36)
* _Py_c_quot (C function):               Complex Numbers as C Structures.
                                                             (line   41)
* _Py_c_sum (C function):                Complex Numbers as C Structures.
                                                             (line   23)
* _Py_NoneStruct (C variable):           Allocating Objects on the Heap.
                                                             (line   60)
* _PyBytes_Resize (C function):          Bytes Objects.      (line  136)
* _PyImport_FindExtension (C function):  Importing Modules.  (line  188)
* _PyImport_Fini (C function):           Importing Modules.  (line  185)
* _PyImport_FixupExtension (C function): Importing Modules.  (line  191)
* _PyImport_Init (C function):           Importing Modules.  (line  179)
* _PyObject_GC_TRACK (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   53)
* _PyObject_GC_UNTRACK (C function):     Supporting Cyclic Garbage Collection.
                                                             (line   78)
* _PyObject_New (C function):            Allocating Objects on the Heap.
                                                             (line    6)
* _PyObject_NewVar (C function):         Allocating Objects on the Heap.
                                                             (line    9)
* _PyTuple_Resize (C function):          Tuple Objects.      (line   77)
* abort():                               Process Control.    (line    7)
* argv (in module sys):                  Process-wide parameters.
                                                             (line  165)
* buffer interface:                      Buffer Protocol.    (line    6)
* built-in function; __import__:         Importing Modules.  (line   40)
* built-in function; abs:                Number Protocol.    (line   87)
* built-in function; ascii:              Object Protocol.    (line  117)
* built-in function; bytes:              Object Protocol.    (line  134)
* built-in function; classmethod:        Common Object Structures.
                                                             (line  169)
* built-in function; compile:            Importing Modules.  (line  107)
* built-in function; divmod:             Number Protocol.    (line   59)
* built-in function; float:              Number Protocol.    (line  248)
* built-in function; hash <1>:           Type Objects<2>.    (line  363)
* built-in function; hash:               Object Protocol.    (line  249)
* built-in function; int:                Number Protocol.    (line  241)
* built-in function; len <1>:            Set Objects.        (line   81)
* built-in function; len <2>:            Mapping Protocol.   (line   12)
* built-in function; len <3>:            Sequence Protocol.  (line   12)
* built-in function; len <4>:            Object Protocol.    (line  290)
* built-in function; len <5>:            Dictionary Objects. (line  111)
* built-in function; len:                List Objects.       (line   33)
* built-in function; pow:                Number Protocol.    (line   66)
* built-in function; repr <1>:           Object Protocol.    (line  111)
* built-in function; repr:               Type Objects<2>.    (line  321)
* built-in function; staticmethod:       Common Object Structures.
                                                             (line  175)
* built-in function; str:                Object Protocol.    (line  127)
* built-in function; tuple <1>:          Sequence Protocol.  (line  111)
* built-in function; tuple:              List Objects.       (line  112)
* built-in function; type:               Object Protocol.    (line  275)
* calloc():                              Overview.           (line   33)
* cleanup functions:                     Process Control.    (line   19)
* close() (in module os):                Sub-interpreter support.
                                                             (line   49)
* CO_FUTURE_DIVISION (C variable):       The Very High Level Layer.
                                                             (line  324)
* copyright (in module sys):             Process-wide parameters.
                                                             (line  137)
* environment variable; exec_prefix:     Include Files.      (line   32)
* environment variable; PATH:            Embedding Python.   (line   31)
* environment variable; prefix:          Include Files.      (line   32)
* environment variable; PYTHONDUMPREFS:  Type Objects<2>.    (line  121)
* environment variable; PYTHONHOME <1>:  Process-wide parameters.
                                                             (line  209)
* environment variable; PYTHONHOME <2>:  Embedding Python.   (line   38)
* environment variable; PYTHONHOME:      Process-wide parameters.
                                                             (line  219)
* environment variable; PYTHONPATH:      Embedding Python.   (line   39)
* EOFError (built-in exception):         File Objects.       (line   42)
* exc_info() (in module sys):            Exceptions.         (line   46)
* exec_prefix:                           Include Files.      (line   43)
* executable (in module sys):            Process-wide parameters.
                                                             (line   75)
* exit():                                Process Control.    (line   15)
* free():                                Overview.           (line   33)
* freeze utility:                        Importing Modules.  (line  203)
* global interpreter lock:               Thread State and the Global Interpreter Lock.
                                                             (line    6)
* incr_item():                           Exceptions.         (line  125)
* inquiry (C type):                      Supporting Cyclic Garbage Collection.
                                                             (line  125)
* interpreter lock:                      Thread State and the Global Interpreter Lock.
                                                             (line    6)
* KeyboardInterrupt (built-in exception): Exception Handling.
                                                             (line  312)
* lock, interpreter:                     Thread State and the Global Interpreter Lock.
                                                             (line    6)
* LONG_MAX:                              Integer Objects.    (line  104)
* main():                                Process-wide parameters.
                                                             (line  165)
* malloc():                              Overview.           (line   33)
* METH_CLASS (built-in variable):        Common Object Structures.
                                                             (line  168)
* METH_COEXIST (built-in variable):      Common Object Structures.
                                                             (line  183)
* METH_KEYWORDS (built-in variable):     Common Object Structures.
                                                             (line  140)
* METH_NOARGS (built-in variable):       Common Object Structures.
                                                             (line  148)
* METH_O (built-in variable):            Common Object Structures.
                                                             (line  156)
* METH_STATIC (built-in variable):       Common Object Structures.
                                                             (line  174)
* METH_VARARGS (built-in variable):      Common Object Structures.
                                                             (line  130)
* MethodType (in module types) <1>:      Function Objects.   (line   12)
* MethodType (in module types):          Method Objects.     (line   11)
* module; __main__ <1>:                  Initializing and finalizing the interpreter.
                                                             (line    7)
* module; __main__ <2>:                  Embedding Python.   (line   12)
* module; __main__:                      Sub-interpreter support.
                                                             (line   14)
* module; _thread:                       High-level API.     (line   38)
* module; builtins <1>:                  Initializing and finalizing the interpreter.
                                                             (line    7)
* module; builtins <2>:                  Embedding Python.   (line   12)
* module; builtins:                      Sub-interpreter support.
                                                             (line   14)
* module; search; path <1>:              Process-wide parameters.
                                                             (line   83)
* module; search; path <2>:              Embedding Python.   (line   12)
* module; search; path <3>:              Process-wide parameters.
                                                             (line   96)
* module; search; path:                  Initializing and finalizing the interpreter.
                                                             (line    7)
* module; signal:                        Exception Handling. (line  301)
* module; sys <1>:                       Sub-interpreter support.
                                                             (line   14)
* module; sys <2>:                       Initializing and finalizing the interpreter.
                                                             (line    7)
* module; sys:                           Embedding Python.   (line   12)
* modules (in module sys) <1>:           Initializing and finalizing the interpreter.
                                                             (line    7)
* modules (in module sys):               Importing Modules.  (line    9)
* ModuleType (in module types):          Module Objects.     (line    9)
* object; bytearray:                     Byte Array Objects. (line    6)
* object; bytes:                         Bytes Objects.      (line    9)
* object; Capsule:                       Capsules.           (line    6)
* object; code:                          Code Objects.       (line    6)
* object; complex number:                Complex Number Objects.
                                                             (line    6)
* object; dictionary:                    Dictionary Objects. (line    6)
* object; file:                          File Objects.       (line    6)
* object; floating point:                Floating Point Objects.
                                                             (line    6)
* object; frozenset:                     Set Objects.        (line    6)
* object; function:                      Function Objects.   (line    6)
* object; instancemethod:                Instance Method Objects.
                                                             (line    6)
* object; integer:                       Integer Objects.    (line    6)
* object; list:                          List Objects.       (line    6)
* object; long integer:                  Integer Objects.    (line    6)
* object; mapping:                       Mapping Objects.    (line    6)
* object; memoryview:                    Slice Objects.      (line   53)
* object; method:                        Method Objects.     (line    6)
* object; module:                        Module Objects.     (line    6)
* object; None:                          The None Object.    (line    6)
* object; numeric:                       Numeric Objects.    (line    6)
* object; sequence:                      Sequence Objects.   (line    6)
* object; set:                           Set Objects.        (line    6)
* object; tuple:                         Tuple Objects.      (line    6)
* object; type <1>:                      Objects Types and Reference Counts.
                                                             (line    6)
* object; type:                          Type Objects.       (line    6)
* OverflowError (built-in exception):    Integer Objects.    (line  135)
* package variable; __all__:             Importing Modules.  (line    9)
* PATH:                                  Embedding Python.   (line   31)
* path (in module sys) <1>:              Embedding Python.   (line   12)
* path (in module sys) <2>:              Initializing and finalizing the interpreter.
                                                             (line    7)
* path (in module sys):                  Process-wide parameters.
                                                             (line   96)
* platform (in module sys):              Process-wide parameters.
                                                             (line  122)
* prefix:                                Include Files.      (line   32)
* Py_AddPendingCall (C function):        Asynchronous Notifications.
                                                             (line   17)
* Py_AddPendingCall():                   Asynchronous Notifications.
                                                             (line   18)
* Py_AtExit (C function):                Process Control.    (line   18)
* Py_BEGIN_ALLOW_THREADS:                Releasing the GIL from extension code.
                                                             (line   21)
* Py_BEGIN_ALLOW_THREADS (C macro):      High-level API.     (line  125)
* Py_BLOCK_THREADS (C macro):            High-level API.     (line  139)
* Py_buffer (C type):                    The buffer structure.
                                                             (line   21)
* Py_buffer.buf (C member):              The buffer structure.
                                                             (line   22)
* Py_buffer.internal (C member):         The buffer structure.
                                                             (line   89)
* Py_buffer.itemsize (C member):         The buffer structure.
                                                             (line   80)
* Py_buffer.ndim (C member):             The buffer structure.
                                                             (line   36)
* Py_buffer.readonly (C member):         The buffer structure.
                                                             (line   28)
* Py_buffer.shape (C member):            The buffer structure.
                                                             (line   41)
* Py_buffer.strides (C member):          The buffer structure.
                                                             (line   47)
* Py_buffer.suboffsets (C member):       The buffer structure.
                                                             (line   52)
* Py_BuildValue (C function):            Building values.    (line    6)
* Py_CLEAR (C function):                 Reference Counting. (line   43)
* Py_CompileString (C function):         The Very High Level Layer.
                                                             (line  222)
* Py_CompileString():                    The Very High Level Layer.
                                                             (line  297)
* Py_CompileStringExFlags (C function):  The Very High Level Layer.
                                                             (line  236)
* Py_CompileStringFlags (C function):    The Very High Level Layer.
                                                             (line  229)
* Py_complex (C type):                   Complex Numbers as C Structures.
                                                             (line   10)
* Py_DECREF (C function):                Reference Counting. (line   18)
* Py_DECREF():                           Reference Counts.   (line   18)
* Py_END_ALLOW_THREADS:                  Releasing the GIL from extension code.
                                                             (line   21)
* Py_END_ALLOW_THREADS (C macro):        High-level API.     (line  132)
* Py_EndInterpreter (C function):        Sub-interpreter support.
                                                             (line   50)
* Py_EnterRecursiveCall (C function):    Recursion Control.  (line   11)
* Py_eval_input (C variable):            The Very High Level Layer.
                                                             (line  292)
* Py_Exit (C function):                  Process Control.    (line   14)
* Py_False (C variable):                 Boolean Objects.    (line   14)
* Py_FatalError (C function):            Process Control.    (line    6)
* Py_FatalError():                       Process-wide parameters.
                                                             (line  165)
* Py_FdIsInteractive (C function):       Operating System Utilities.
                                                             (line    6)
* Py_file_input (C variable):            The Very High Level Layer.
                                                             (line  296)
* Py_Finalize (C function):              Initializing and finalizing the interpreter.
                                                             (line   30)
* Py_Finalize() <1>:                     Process Control.    (line   19)
* Py_Finalize() <2>:                     Sub-interpreter support.
                                                             (line   37)
* Py_Finalize() <3>:                     Process Control.    (line   15)
* Py_Finalize():                         Initializing and finalizing the interpreter.
                                                             (line    7)
* Py_GetBuildInfo (C function):          Process-wide parameters.
                                                             (line  152)
* Py_GetCompiler (C function):           Process-wide parameters.
                                                             (line  141)
* Py_GetCopyright (C function):          Process-wide parameters.
                                                             (line  131)
* Py_GetExecPrefix (C function):         Process-wide parameters.
                                                             (line   37)
* Py_GetExecPrefix():                    Embedding Python.   (line   41)
* Py_GetPath (C function):               Process-wide parameters.
                                                             (line   82)
* Py_GetPath() <1>:                      Embedding Python.   (line   41)
* Py_GetPath():                          Process-wide parameters.
                                                             (line   96)
* Py_GetPlatform (C function):           Process-wide parameters.
                                                             (line  121)
* Py_GetPrefix (C function):             Process-wide parameters.
                                                             (line   24)
* Py_GetPrefix():                        Embedding Python.   (line   41)
* Py_GetProgramFullPath (C function):    Process-wide parameters.
                                                             (line   74)
* Py_GetProgramFullPath():               Embedding Python.   (line   41)
* Py_GetProgramName (C function):        Process-wide parameters.
                                                             (line   19)
* Py_GetPythonHome (C function):         Process-wide parameters.
                                                             (line  217)
* Py_GetVersion (C function):            Process-wide parameters.
                                                             (line  108)
* Py_INCREF (C function):                Reference Counting. (line    9)
* Py_INCREF():                           Reference Counts.   (line   18)
* Py_Initialize (C function):            Initializing and finalizing the interpreter.
                                                             (line    6)
* Py_Initialize() <1>:                   Sub-interpreter support.
                                                             (line   37)
* Py_Initialize() <2>:                   Process-wide parameters.
                                                             (line    7)
* Py_Initialize():                       Embedding Python.   (line   12)
* Py_InitializeEx (C function):          Initializing and finalizing the interpreter.
                                                             (line   19)
* Py_IsInitialized (C function):         Initializing and finalizing the interpreter.
                                                             (line   24)
* Py_IsInitialized():                    Embedding Python.   (line   50)
* Py_LeaveRecursiveCall (C function):    Recursion Control.  (line   27)
* Py_Main (C function):                  The Very High Level Layer.
                                                             (line   24)
* Py_NewInterpreter (C function):        Sub-interpreter support.
                                                             (line   13)
* Py_None (C variable):                  The None Object.    (line   11)
* Py_PRINT_RAW:                          File Objects.       (line   54)
* Py_ReprEnter (C function):             Recursion Control.  (line   37)
* Py_ReprLeave (C function):             Recursion Control.  (line   53)
* Py_RETURN_FALSE (C macro):             Boolean Objects.    (line   24)
* Py_RETURN_NONE (C macro):              The None Object.    (line   16)
* Py_RETURN_TRUE (C macro):              Boolean Objects.    (line   28)
* Py_SetPath (C function):               Process-wide parameters.
                                                             (line   95)
* Py_SetPath():                          Process-wide parameters.
                                                             (line   83)
* Py_SetProgramName (C function):        Process-wide parameters.
                                                             (line    6)
* Py_SetProgramName() <1>:               Initializing and finalizing the interpreter.
                                                             (line    7)
* Py_SetProgramName() <2>:               Process-wide parameters.
                                                             (line   20)
* Py_SetProgramName() <3>:               Embedding Python.   (line   41)
* Py_SetProgramName():                   Process-wide parameters.
                                                             (line   75)
* Py_SetPythonHome (C function):         Process-wide parameters.
                                                             (line  207)
* Py_single_input (C variable):          The Very High Level Layer.
                                                             (line  302)
* PY_SSIZE_T_MAX:                        Integer Objects.    (line  130)
* Py_TPFLAGS_BASETYPE (built-in variable): Type Objects<2>.  (line  485)
* Py_TPFLAGS_DEFAULT (built-in variable): Type Objects<2>.   (line  507)
* Py_TPFLAGS_HAVE_GC (built-in variable): Type Objects<2>.   (line  498)
* Py_TPFLAGS_HEAPTYPE (built-in variable): Type Objects<2>.  (line  476)
* Py_TPFLAGS_READY (built-in variable):  Type Objects<2>.    (line  490)
* Py_TPFLAGS_READYING (built-in variable): Type Objects<2>.  (line  494)
* Py_tracefunc (C type):                 Profiling and Tracing.
                                                             (line   18)
* Py_True (C variable):                  Boolean Objects.    (line   19)
* Py_UNBLOCK_THREADS (C macro):          High-level API.     (line  145)
* Py_UNICODE (C type):                   Unicode Type.       (line    9)
* Py_UNICODE_ISALNUM (C function):       Unicode Character Properties.
                                                             (line   37)
* Py_UNICODE_ISALPHA (C function):       Unicode Character Properties.
                                                             (line   34)
* Py_UNICODE_ISDECIMAL (C function):     Unicode Character Properties.
                                                             (line   25)
* Py_UNICODE_ISDIGIT (C function):       Unicode Character Properties.
                                                             (line   28)
* Py_UNICODE_ISLINEBREAK (C function):   Unicode Character Properties.
                                                             (line   22)
* Py_UNICODE_ISLOWER (C function):       Unicode Character Properties.
                                                             (line   13)
* Py_UNICODE_ISNUMERIC (C function):     Unicode Character Properties.
                                                             (line   31)
* Py_UNICODE_ISPRINTABLE (C function):   Unicode Character Properties.
                                                             (line   41)
* Py_UNICODE_ISSPACE (C function):       Unicode Character Properties.
                                                             (line   10)
* Py_UNICODE_ISTITLE (C function):       Unicode Character Properties.
                                                             (line   19)
* Py_UNICODE_ISUPPER (C function):       Unicode Character Properties.
                                                             (line   16)
* Py_UNICODE_TODECIMAL (C function):     Unicode Character Properties.
                                                             (line   62)
* Py_UNICODE_TODIGIT (C function):       Unicode Character Properties.
                                                             (line   67)
* Py_UNICODE_TOLOWER (C function):       Unicode Character Properties.
                                                             (line   53)
* Py_UNICODE_TONUMERIC (C function):     Unicode Character Properties.
                                                             (line   72)
* Py_UNICODE_TOTITLE (C function):       Unicode Character Properties.
                                                             (line   59)
* Py_UNICODE_TOUPPER (C function):       Unicode Character Properties.
                                                             (line   56)
* Py_VaBuildValue (C function):          Building values.    (line  173)
* Py_VISIT (C function):                 Supporting Cyclic Garbage Collection.
                                                             (line  107)
* Py_XDECREF (C function):               Reference Counting. (line   37)
* Py_XDECREF():                          Exceptions.         (line  126)
* Py_XINCREF (C function):               Reference Counting. (line   14)
* PyAnySet_Check (C function):           Set Objects.        (line   48)
* PyAnySet_CheckExact (C function):      Set Objects.        (line   52)
* PyArg_Parse (C function):              API Functions.      (line   37)
* PyArg_ParseTuple (C function):         API Functions.      (line    6)
* PyArg_ParseTupleAndKeywords (C function): API Functions.   (line   17)
* PyArg_UnpackTuple (C function):        API Functions.      (line   47)
* PyArg_ValidateKeywordArguments (C function): API Functions.
                                                             (line   29)
* PyArg_VaParse (C function):            API Functions.      (line   12)
* PyArg_VaParseTupleAndKeywords (C function): API Functions. (line   23)
* PyBool_Check (C function):             Boolean Objects.    (line   11)
* PyBool_FromLong (C function):          Boolean Objects.    (line   32)
* PyBUF_ANY_CONTIGUOUS (C macro):        Buffer-related functions.
                                                             (line   69)
* PyBUF_C_CONTIGUOUS (C macro):          Buffer-related functions.
                                                             (line   69)
* PyBUF_CONTIG (C macro):                Buffer-related functions.
                                                             (line  115)
* PyBUF_CONTIG_RO (C macro):             Buffer-related functions.
                                                             (line  118)
* PyBUF_F_CONTIGUOUS (C macro):          Buffer-related functions.
                                                             (line   69)
* PyBUF_FORMAT (C macro):                Buffer-related functions.
                                                             (line   86)
* PyBUF_FULL (C macro):                  Buffer-related functions.
                                                             (line  108)
* PyBUF_FULL_RO (C macro):               Buffer-related functions.
                                                             (line  112)
* PyBUF_INDIRECT (C macro):              Buffer-related functions.
                                                             (line   79)
* PyBUF_ND (C macro):                    Buffer-related functions.
                                                             (line   62)
* PyBUF_RECORDS (C macro):               Buffer-related functions.
                                                             (line  101)
* PyBUF_RECORDS_RO (C macro):            Buffer-related functions.
                                                             (line  105)
* PyBUF_SIMPLE (C macro):                Buffer-related functions.
                                                             (line   40)
* PyBUF_STRIDED (C macro):               Buffer-related functions.
                                                             (line   95)
* PyBUF_STRIDED_RO (C macro):            Buffer-related functions.
                                                             (line   98)
* PyBUF_STRIDES (C macro):               Buffer-related functions.
                                                             (line   53)
* PyBUF_WRITABLE (C macro):              Buffer-related functions.
                                                             (line   48)
* PyBuffer_FillContiguousStrides (C function): Buffer-related functions.
                                                             (line  135)
* PyBuffer_FillInfo (C function):        Buffer-related functions.
                                                             (line  143)
* PyBuffer_IsContiguous (C function):    Buffer-related functions.
                                                             (line  129)
* PyBuffer_Release (C function):         Buffer-related functions.
                                                             (line  121)
* PyBuffer_SizeFromFormat (C function):  Buffer-related functions.
                                                             (line  125)
* PyBufferProcs:                         Buffer Protocol.    (line   20)
* PyBufferProcs (C type):                Buffer Object Structures.
                                                             (line   14)
* PyBufferProcs.bf_getbuffer (C member): Buffer Object Structures.
                                                             (line   18)
* PyBufferProcs.bf_releasebuffer (C member): Buffer Object Structures.
                                                             (line   31)
* PyByteArray_AS_STRING (C function):    Macros.             (line    8)
* PyByteArray_AsString (C function):     Direct API functions.
                                                             (line   23)
* PyByteArray_Check (C function):        Type check macros.  (line    6)
* PyByteArray_CheckExact (C function):   Type check macros.  (line   10)
* PyByteArray_Concat (C function):       Direct API functions.
                                                             (line   16)
* PyByteArray_FromObject (C function):   Direct API functions.
                                                             (line    6)
* PyByteArray_FromStringAndSize (C function): Direct API functions.
                                                             (line   11)
* PyByteArray_GET_SIZE (C function):     Macros.             (line   11)
* PyByteArray_Resize (C function):       Direct API functions.
                                                             (line   27)
* PyByteArray_Size (C function):         Direct API functions.
                                                             (line   20)
* PyByteArray_Type (C variable):         Byte Array Objects. (line   10)
* PyByteArrayObject (C type):            Byte Array Objects. (line    6)
* PyBytes_AS_STRING (C function):        Bytes Objects.      (line  101)
* PyBytes_AsString (C function):         Bytes Objects.      (line   93)
* PyBytes_AsStringAndSize (C function):  Bytes Objects.      (line  105)
* PyBytes_Check (C function):            Bytes Objects.      (line   17)
* PyBytes_CheckExact (C function):       Bytes Objects.      (line   21)
* PyBytes_Concat (C function):           Bytes Objects.      (line  121)
* PyBytes_ConcatAndDel (C function):     Bytes Objects.      (line  130)
* PyBytes_FromFormat (C function):       Bytes Objects.      (line   36)
* PyBytes_FromFormatV (C function):      Bytes Objects.      (line   77)
* PyBytes_FromObject (C function):       Bytes Objects.      (line   82)
* PyBytes_FromString (C function):       Bytes Objects.      (line   25)
* PyBytes_FromStringAndSize (C function): Bytes Objects.     (line   30)
* PyBytes_GET_SIZE (C function):         Bytes Objects.      (line   89)
* PyBytes_Size (C function):             Bytes Objects.      (line   86)
* PyBytes_Type (C variable):             Bytes Objects.      (line   13)
* PyBytesObject (C type):                Bytes Objects.      (line    9)
* PyCallable_Check (C function):         Object Protocol.    (line  175)
* PyCallIter_Check (C function):         Iterator Objects.   (line   32)
* PyCallIter_New (C function):           Iterator Objects.   (line   35)
* PyCallIter_Type (C variable):          Iterator Objects.   (line   27)
* PyCapsule (C type):                    Capsules.           (line    8)
* PyCapsule_CheckExact (C function):     Capsules.           (line   24)
* PyCapsule_Destructor (C type):         Capsules.           (line   16)
* PyCapsule_GetContext (C function):     Capsules.           (line   68)
* PyCapsule_GetDestructor (C function):  Capsules.           (line   58)
* PyCapsule_GetName (C function):        Capsules.           (line   77)
* PyCapsule_GetPointer (C function):     Capsules.           (line   48)
* PyCapsule_Import (C function):         Capsules.           (line   86)
* PyCapsule_IsValid (C function):        Capsules.           (line  101)
* PyCapsule_New (C function):            Capsules.           (line   27)
* PyCapsule_SetContext (C function):     Capsules.           (line  116)
* PyCapsule_SetDestructor (C function):  Capsules.           (line  123)
* PyCapsule_SetName (C function):        Capsules.           (line  130)
* PyCapsule_SetPointer (C function):     Capsules.           (line  139)
* PyCell_Check (C function):             Cell Objects.       (line   22)
* PyCell_GET (C function):               Cell Objects.       (line   36)
* PyCell_Get (C function):               Cell Objects.       (line   31)
* PyCell_New (C function):               Cell Objects.       (line   25)
* PyCell_SET (C function):               Cell Objects.       (line   48)
* PyCell_Set (C function):               Cell Objects.       (line   42)
* PyCell_Type (C variable):              Cell Objects.       (line   19)
* PyCellObject (C type):                 Cell Objects.       (line   16)
* PyCFunction (C type):                  Common Object Structures.
                                                             (line   86)
* PyCFunctionWithKeywords (C type):      Common Object Structures.
                                                             (line   94)
* PyCode_Check (C function):             Code Objects.       (line   18)
* PyCode_GetNumFree (C function):        Code Objects.       (line   21)
* PyCode_New (C function):               Code Objects.       (line   24)
* PyCode_NewEmpty (C function):          Code Objects.       (line   34)
* PyCode_Type (C variable):              Code Objects.       (line   14)
* PyCodec_BackslashReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   45)
* PyCodec_Decode (C function):           Codec registry and support functions.
                                                             (line   26)
* PyCodec_Decoder (C function):          Codec lookup API.   (line   14)
* PyCodec_Encode (C function):           Codec registry and support functions.
                                                             (line   17)
* PyCodec_Encoder (C function):          Codec lookup API.   (line   11)
* PyCodec_IgnoreErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   35)
* PyCodec_IncrementalDecoder (C function): Codec lookup API. (line   21)
* PyCodec_IncrementalEncoder (C function): Codec lookup API. (line   17)
* PyCodec_KnownEncoding (C function):    Codec registry and support functions.
                                                             (line   13)
* PyCodec_LookupError (C function):      Registry API for Unicode encoding error handlers.
                                                             (line   27)
* PyCodec_Register (C function):         Codec registry and support functions.
                                                             (line    6)
* PyCodec_RegisterError (C function):    Registry API for Unicode encoding error handlers.
                                                             (line    6)
* PyCodec_ReplaceErrors (C function):    Registry API for Unicode encoding error handlers.
                                                             (line   38)
* PyCodec_StreamReader (C function):     Codec lookup API.   (line   25)
* PyCodec_StreamWriter (C function):     Codec lookup API.   (line   29)
* PyCodec_StrictErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   32)
* PyCodec_XMLCharRefReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   41)
* PyCodeObject (C type):                 Code Objects.       (line   10)
* PyCompilerFlags (C type):              The Very High Level Layer.
                                                             (line  307)
* PyComplex_AsCComplex (C function):     Complex Numbers as Python Objects.
                                                             (line   42)
* PyComplex_Check (C function):          Complex Numbers as Python Objects.
                                                             (line   15)
* PyComplex_CheckExact (C function):     Complex Numbers as Python Objects.
                                                             (line   19)
* PyComplex_FromCComplex (C function):   Complex Numbers as Python Objects.
                                                             (line   23)
* PyComplex_FromDoubles (C function):    Complex Numbers as Python Objects.
                                                             (line   29)
* PyComplex_ImagAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   39)
* PyComplex_RealAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   36)
* PyComplex_Type (C variable):           Complex Numbers as Python Objects.
                                                             (line   10)
* PyComplexObject (C type):              Complex Numbers as Python Objects.
                                                             (line    6)
* PyDate_Check (C function):             DateTime Objects.   (line   16)
* PyDate_CheckExact (C function):        DateTime Objects.   (line   20)
* PyDate_FromDate (C function):          DateTime Objects.   (line   58)
* PyDate_FromTimestamp (C function):     DateTime Objects.   (line  144)
* PyDateTime_Check (C function):         DateTime Objects.   (line   24)
* PyDateTime_CheckExact (C function):    DateTime Objects.   (line   28)
* PyDateTime_DATE_GET_HOUR (C function): DateTime Objects.   (line  106)
* PyDateTime_DATE_GET_MICROSECOND (C function): DateTime Objects.
                                                             (line  115)
* PyDateTime_DATE_GET_MINUTE (C function): DateTime Objects. (line  109)
* PyDateTime_DATE_GET_SECOND (C function): DateTime Objects. (line  112)
* PyDateTime_FromDateAndTime (C function): DateTime Objects. (line   64)
* PyDateTime_FromTimestamp (C function): DateTime Objects.   (line  137)
* PyDateTime_GET_DAY (C function):       DateTime Objects.   (line   99)
* PyDateTime_GET_MONTH (C function):     DateTime Objects.   (line   96)
* PyDateTime_GET_YEAR (C function):      DateTime Objects.   (line   93)
* PyDateTime_TIME_GET_HOUR (C function): DateTime Objects.   (line  123)
* PyDateTime_TIME_GET_MICROSECOND (C function): DateTime Objects.
                                                             (line  132)
* PyDateTime_TIME_GET_MINUTE (C function): DateTime Objects. (line  126)
* PyDateTime_TIME_GET_SECOND (C function): DateTime Objects. (line  129)
* PyDelta_Check (C function):            DateTime Objects.   (line   40)
* PyDelta_CheckExact (C function):       DateTime Objects.   (line   44)
* PyDelta_FromDSU (C function):          DateTime Objects.   (line   79)
* PyDescr_IsData (C function):           Descriptor Objects. (line   32)
* PyDescr_NewClassMethod (C function):   Descriptor Objects. (line   28)
* PyDescr_NewGetSet (C function):        Descriptor Objects. (line   12)
* PyDescr_NewMember (C function):        Descriptor Objects. (line   16)
* PyDescr_NewMethod (C function):        Descriptor Objects. (line   20)
* PyDescr_NewWrapper (C function):       Descriptor Objects. (line   24)
* PyDict_Check (C function):             Dictionary Objects. (line   15)
* PyDict_CheckExact (C function):        Dictionary Objects. (line   19)
* PyDict_Clear (C function):             Dictionary Objects. (line   35)
* PyDict_Contains (C function):          Dictionary Objects. (line   38)
* PyDict_Copy (C function):              Dictionary Objects. (line   43)
* PyDict_DelItem (C function):           Dictionary Objects. (line   62)
* PyDict_DelItemString (C function):     Dictionary Objects. (line   67)
* PyDict_GetItem (C function):           Dictionary Objects. (line   71)
* PyDict_GetItemString (C function):     Dictionary Objects. (line   85)
* PyDict_GetItemWithError (C function):  Dictionary Objects. (line   78)
* PyDict_Items (C function):             Dictionary Objects. (line   92)
* PyDict_Keys (C function):              Dictionary Objects. (line   98)
* PyDict_Merge (C function):             Dictionary Objects. (line  163)
* PyDict_MergeFromSeq2 (C function):     Dictionary Objects. (line  178)
* PyDict_New (C function):               Dictionary Objects. (line   23)
* PyDict_Next (C function):              Dictionary Objects. (line  114)
* PyDict_SetItem (C function):           Dictionary Objects. (line   49)
* PyDict_SetItemString (C function):     Dictionary Objects. (line   55)
* PyDict_Size (C function):              Dictionary Objects. (line  110)
* PyDict_Type (C variable):              Dictionary Objects. (line   10)
* PyDict_Update (C function):            Dictionary Objects. (line  173)
* PyDict_Values (C function):            Dictionary Objects. (line  104)
* PyDictObject (C type):                 Dictionary Objects. (line    6)
* PyDictProxy_New (C function):          Dictionary Objects. (line   28)
* PyErr_BadArgument (C function):        Exception Handling. (line  142)
* PyErr_BadInternalCall (C function):    Exception Handling. (line  236)
* PyErr_CheckSignals (C function):       Exception Handling. (line  300)
* PyErr_Clear (C function):              Exception Handling. (line   83)
* PyErr_Clear():                         Exceptions.         (line  126)
* PyErr_ExceptionMatches (C function):   Exception Handling. (line   60)
* PyErr_ExceptionMatches():              Exceptions.         (line  126)
* PyErr_Fetch (C function):              Exception Handling. (line   87)
* PyErr_Format (C function):             Exception Handling. (line  129)
* PyErr_GivenExceptionMatches (C function): Exception Handling.
                                                             (line   66)
* PyErr_NewException (C function):       Exception Handling. (line  327)
* PyErr_NewExceptionWithDoc (C function): Exception Handling.
                                                             (line  345)
* PyErr_NoMemory (C function):           Exception Handling. (line  147)
* PyErr_NormalizeException (C function): Exception Handling. (line   74)
* PyErr_Occurred (C function):           Exception Handling. (line   44)
* PyErr_Occurred():                      Exceptions.         (line   12)
* PyErr_Print (C function):              Exception Handling. (line   41)
* PyErr_PrintEx (C function):            Exception Handling. (line   32)
* PyErr_Restore (C function):            Exception Handling. (line   99)
* PyErr_SetExcFromWindowsErr (C function): Exception Handling.
                                                             (line  196)
* PyErr_SetExcFromWindowsErrWithFilename (C function): Exception Handling.
                                                             (line  214)
* PyErr_SetFromErrno (C function):       Exception Handling. (line  154)
* PyErr_SetFromErrnoWithFilename (C function): Exception Handling.
                                                             (line  170)
* PyErr_SetFromWindowsErr (C function):  Exception Handling. (line  182)
* PyErr_SetFromWindowsErrWithFilename (C function): Exception Handling.
                                                             (line  204)
* PyErr_SetInterrupt (C function):       Exception Handling. (line  311)
* PyErr_SetNone (C function):            Exception Handling. (line  139)
* PyErr_SetObject (C function):          Exception Handling. (line  124)
* PyErr_SetString (C function):          Exception Handling. (line  116)
* PyErr_SetString():                     Exceptions.         (line   25)
* PyErr_SyntaxLocation (C function):     Exception Handling. (line  232)
* PyErr_SyntaxLocationEx (C function):   Exception Handling. (line  222)
* PyErr_WarnEx (C function):             Exception Handling. (line  242)
* PyErr_WarnExplicit (C function):       Exception Handling. (line  281)
* PyErr_WarnFormat (C function):         Exception Handling. (line  292)
* PyErr_WriteUnraisable (C function):    Exception Handling. (line  356)
* PyEval_AcquireLock (C function):       Low-level API.      (line   84)
* PyEval_AcquireThread (C function):     Low-level API.      (line   63)
* PyEval_AcquireThread():                High-level API.     (line   26)
* PyEval_EvalCode (C function):          The Very High Level Layer.
                                                             (line  257)
* PyEval_EvalCodeEx (C function):        The Very High Level Layer.
                                                             (line  265)
* PyEval_EvalFrame (C function):         The Very High Level Layer.
                                                             (line  274)
* PyEval_EvalFrameEx (C function):       The Very High Level Layer.
                                                             (line  278)
* PyEval_GetBuiltins (C function):       Reflection.         (line    6)
* PyEval_GetCallStats (C function):      Profiling and Tracing.
                                                             (line   98)
* PyEval_GetFrame (C function):          Reflection.         (line   25)
* PyEval_GetFuncDesc (C function):       Reflection.         (line   38)
* PyEval_GetFuncName (C function):       Reflection.         (line   34)
* PyEval_GetGlobals (C function):        Reflection.         (line   19)
* PyEval_GetLocals (C function):         Reflection.         (line   13)
* PyEval_InitThreads (C function):       High-level API.     (line   25)
* PyEval_InitThreads():                  Initializing and finalizing the interpreter.
                                                             (line    7)
* PyEval_MergeCompilerFlags (C function): The Very High Level Layer.
                                                             (line  288)
* PyEval_ReInitThreads (C function):     High-level API.     (line   73)
* PyEval_ReleaseLock (C function):       Low-level API.      (line   93)
* PyEval_ReleaseThread (C function):     Low-level API.      (line   73)
* PyEval_ReleaseThread():                High-level API.     (line   26)
* PyEval_RestoreThread (C function):     High-level API.     (line   54)
* PyEval_RestoreThread() <1>:            Releasing the GIL from extension code.
                                                             (line   37)
* PyEval_RestoreThread():                High-level API.     (line   26)
* PyEval_SaveThread (C function):        High-level API.     (line   46)
* PyEval_SaveThread() <1>:               High-level API.     (line   26)
* PyEval_SaveThread():                   Releasing the GIL from extension code.
                                                             (line   37)
* PyEval_SetProfile (C function):        Profiling and Tracing.
                                                             (line   83)
* PyEval_SetTrace (C function):          Profiling and Tracing.
                                                             (line   93)
* PyEval_ThreadsInitialized (C function): High-level API.    (line   39)
* PyExc_ArithmeticError:                 Standard Exceptions.
                                                             (line   42)
* PyExc_AssertionError:                  Standard Exceptions.
                                                             (line   42)
* PyExc_AttributeError:                  Standard Exceptions.
                                                             (line   42)
* PyExc_BaseException:                   Standard Exceptions.
                                                             (line   42)
* PyExc_EnvironmentError:                Standard Exceptions.
                                                             (line   42)
* PyExc_EOFError:                        Standard Exceptions.
                                                             (line   42)
* PyExc_Exception:                       Standard Exceptions.
                                                             (line   42)
* PyExc_FloatingPointError:              Standard Exceptions.
                                                             (line   42)
* PyExc_ImportError:                     Standard Exceptions.
                                                             (line   42)
* PyExc_IndexError:                      Standard Exceptions.
                                                             (line   42)
* PyExc_IOError:                         Standard Exceptions.
                                                             (line   42)
* PyExc_KeyboardInterrupt:               Standard Exceptions.
                                                             (line   42)
* PyExc_KeyError:                        Standard Exceptions.
                                                             (line   42)
* PyExc_LookupError:                     Standard Exceptions.
                                                             (line   42)
* PyExc_MemoryError:                     Standard Exceptions.
                                                             (line   42)
* PyExc_NameError:                       Standard Exceptions.
                                                             (line   42)
* PyExc_NotImplementedError:             Standard Exceptions.
                                                             (line   42)
* PyExc_OSError:                         Standard Exceptions.
                                                             (line   42)
* PyExc_OverflowError:                   Standard Exceptions.
                                                             (line   42)
* PyExc_ReferenceError:                  Standard Exceptions.
                                                             (line   42)
* PyExc_RuntimeError:                    Standard Exceptions.
                                                             (line   42)
* PyExc_SyntaxError:                     Standard Exceptions.
                                                             (line   42)
* PyExc_SystemError:                     Standard Exceptions.
                                                             (line   42)
* PyExc_SystemExit:                      Standard Exceptions.
                                                             (line   42)
* PyExc_TypeError:                       Standard Exceptions.
                                                             (line   42)
* PyExc_ValueError:                      Standard Exceptions.
                                                             (line   42)
* PyExc_WindowsError:                    Standard Exceptions.
                                                             (line   42)
* PyExc_ZeroDivisionError:               Standard Exceptions.
                                                             (line   42)
* PyException_GetCause (C function):     Exception Objects.  (line   28)
* PyException_GetContext (C function):   Exception Objects.  (line   16)
* PyException_GetTraceback (C function): Exception Objects.  (line    6)
* PyException_SetCause (C function):     Exception Objects.  (line   34)
* PyException_SetContext (C function):   Exception Objects.  (line   22)
* PyException_SetTraceback (C function): Exception Objects.  (line   11)
* PyFile_FromFd (C function):            File Objects.       (line   15)
* PyFile_GetLine (C function):           File Objects.       (line   39)
* PyFile_WriteObject (C function):       File Objects.       (line   52)
* PyFile_WriteString (C function):       File Objects.       (line   59)
* PyFloat_AS_DOUBLE (C function):        Floating Point Objects.
                                                             (line   41)
* PyFloat_AsDouble (C function):         Floating Point Objects.
                                                             (line   35)
* PyFloat_Check (C function):            Floating Point Objects.
                                                             (line   15)
* PyFloat_CheckExact (C function):       Floating Point Objects.
                                                             (line   19)
* PyFloat_ClearFreeList (C function):    Floating Point Objects.
                                                             (line   58)
* PyFloat_FromDouble (C function):       Floating Point Objects.
                                                             (line   29)
* PyFloat_FromString (C function):       Floating Point Objects.
                                                             (line   23)
* PyFloat_GetInfo (C function):          Floating Point Objects.
                                                             (line   45)
* PyFloat_GetMax (C function):           Floating Point Objects.
                                                             (line   50)
* PyFloat_GetMin (C function):           Floating Point Objects.
                                                             (line   54)
* PyFloat_Type (C variable):             Floating Point Objects.
                                                             (line   10)
* PyFloatObject (C type):                Floating Point Objects.
                                                             (line    6)
* PyFrame_GetLineNumber (C function):    Reflection.         (line   31)
* PyFrozenSet_Check (C function):        Set Objects.        (line   44)
* PyFrozenSet_CheckExact (C function):   Set Objects.        (line   56)
* PyFrozenSet_New (C function):          Set Objects.        (line   69)
* PyFrozenSet_Type (C variable):         Set Objects.        (line   33)
* PyFunction_Check (C function):         Function Objects.   (line   16)
* PyFunction_GetAnnotations (C function): Function Objects.  (line   76)
* PyFunction_GetClosure (C function):    Function Objects.   (line   63)
* PyFunction_GetCode (C function):       Function Objects.   (line   32)
* PyFunction_GetDefaults (C function):   Function Objects.   (line   50)
* PyFunction_GetGlobals (C function):    Function Objects.   (line   37)
* PyFunction_GetModule (C function):     Function Objects.   (line   43)
* PyFunction_New (C function):           Function Objects.   (line   20)
* PyFunction_SetAnnotations (C function): Function Objects.  (line   80)
* PyFunction_SetClosure (C function):    Function Objects.   (line   69)
* PyFunction_SetDefaults (C function):   Function Objects.   (line   56)
* PyFunction_Type (C variable):          Function Objects.   (line   11)
* PyFunctionObject (C type):             Function Objects.   (line    8)
* PyGen_Check (C function):              Generator Objects.  (line   16)
* PyGen_CheckExact (C function):         Generator Objects.  (line   19)
* PyGen_New (C function):                Generator Objects.  (line   23)
* PyGen_Type (C variable):               Generator Objects.  (line   13)
* PyGenObject (C type):                  Generator Objects.  (line   10)
* PyGILState_Ensure (C function):        High-level API.     (line   81)
* PyGILState_GetThisThreadState (C function): High-level API.
                                                             (line  115)
* PyGILState_Release (C function):       High-level API.     (line  105)
* PyImport_AddModule (C function):       Importing Modules.  (line   87)
* PyImport_AppendInittab (C function):   Importing Modules.  (line  223)
* PyImport_Cleanup (C function):         Importing Modules.  (line  182)
* PyImport_ExecCodeModule (C function):  Importing Modules.  (line  103)
* PyImport_ExecCodeModuleEx (C function): Importing Modules. (line  133)
* PyImport_ExecCodeModuleWithPathnames (C function): Importing Modules.
                                                             (line  143)
* PyImport_ExtendInittab (C function):   Importing Modules.  (line  249)
* PyImport_FrozenModules (C variable):   Importing Modules.  (line  216)
* PyImport_GetImporter (C function):     Importing Modules.  (line  169)
* PyImport_GetMagicNumber (C function):  Importing Modules.  (line  152)
* PyImport_GetMagicTag (C function):     Importing Modules.  (line  157)
* PyImport_GetModuleDict (C function):   Importing Modules.  (line  163)
* PyImport_Import (C function):          Importing Modules.  (line   68)
* PyImport_ImportFrozenModule (C function): Importing Modules.
                                                             (line  194)
* PyImport_ImportModule (C function):    Importing Modules.  (line    6)
* PyImport_ImportModuleEx (C function):  Importing Modules.  (line   36)
* PyImport_ImportModuleLevel (C function): Importing Modules.
                                                             (line   53)
* PyImport_ImportModuleNoBlock (C function): Importing Modules.
                                                             (line   25)
* PyImport_ReloadModule (C function):    Importing Modules.  (line   80)
* PyIndex_Check (C function):            Number Protocol.    (line  277)
* PyInstanceMethod_Check (C function):   Instance Method Objects.
                                                             (line   14)
* PyInstanceMethod_Function (C function): Instance Method Objects.
                                                             (line   23)
* PyInstanceMethod_GET_FUNCTION (C function): Instance Method Objects.
                                                             (line   27)
* PyInstanceMethod_New (C function):     Instance Method Objects.
                                                             (line   18)
* PyInstanceMethod_Type (C variable):    Instance Method Objects.
                                                             (line   10)
* PyInterpreterState (C type):           High-level API.     (line    9)
* PyInterpreterState_Clear (C function): Low-level API.      (line   15)
* PyInterpreterState_Delete (C function): Low-level API.     (line   20)
* PyInterpreterState_Head (C function):  Advanced Debugger Support.
                                                             (line    9)
* PyInterpreterState_New (C function):   Low-level API.      (line   10)
* PyInterpreterState_Next (C function):  Advanced Debugger Support.
                                                             (line   13)
* PyInterpreterState_ThreadHead (C function): Advanced Debugger Support.
                                                             (line   18)
* PyIter_Check (C function):             Iterator Protocol.  (line    9)
* PyIter_Next (C function):              Iterator Protocol.  (line   12)
* PyList_Append (C function):            List Objects.       (line   79)
* PyList_AsTuple (C function):           List Objects.       (line  109)
* PyList_Check (C function):             List Objects.       (line   13)
* PyList_CheckExact (C function):        List Objects.       (line   17)
* PyList_GET_ITEM (C function):          List Objects.       (line   48)
* PyList_GET_SIZE (C function):          List Objects.       (line   36)
* PyList_GetItem (C function):           List Objects.       (line   39)
* PyList_GetItem():                      Reference Count Details.
                                                             (line  117)
* PyList_GetSlice (C function):          List Objects.       (line   84)
* PyList_Insert (C function):            List Objects.       (line   73)
* PyList_New (C function):               List Objects.       (line   21)
* PyList_Reverse (C function):           List Objects.       (line  105)
* PyList_SET_ITEM (C function):          List Objects.       (line   62)
* PyList_SetItem (C function):           List Objects.       (line   53)
* PyList_SetItem():                      Reference Count Details.
                                                             (line   26)
* PyList_SetSlice (C function):          List Objects.       (line   93)
* PyList_Size (C function):              List Objects.       (line   32)
* PyList_Sort (C function):              List Objects.       (line  101)
* PyList_Type (C variable):              List Objects.       (line    9)
* PyListObject (C type):                 List Objects.       (line    6)
* PyLong_AsDouble (C function):          Integer Objects.    (line  167)
* PyLong_AsLong (C function):            Integer Objects.    (line  103)
* PyLong_AsLongAndOverflow (C function): Integer Objects.    (line  109)
* PyLong_AsLongLong (C function):        Integer Objects.    (line  144)
* PyLong_AsLongLongAndOverflow (C function): Integer Objects.
                                                             (line  118)
* PyLong_AsSize_t (C function):          Integer Objects.    (line  139)
* PyLong_AsSsize_t (C function):         Integer Objects.    (line  129)
* PyLong_AsUnsignedLong (C function):    Integer Objects.    (line  134)
* PyLong_AsUnsignedLongLong (C function): Integer Objects.   (line  149)
* PyLong_AsUnsignedLongLongMask (C function): Integer Objects.
                                                             (line  162)
* PyLong_AsUnsignedLongMask (C function): Integer Objects.   (line  158)
* PyLong_AsVoidPtr (C function):         Integer Objects.    (line  172)
* PyLong_Check (C function):             Integer Objects.    (line   18)
* PyLong_CheckExact (C function):        Integer Objects.    (line   22)
* PyLong_FromDouble (C function):        Integer Objects.    (line   65)
* PyLong_FromLong (C function):          Integer Objects.    (line   26)
* PyLong_FromLongLong (C function):      Integer Objects.    (line   52)
* PyLong_FromSize_t (C function):        Integer Objects.    (line   48)
* PyLong_FromSsize_t (C function):       Integer Objects.    (line   44)
* PyLong_FromString (C function):        Integer Objects.    (line   71)
* PyLong_FromUnicode (C function):       Integer Objects.    (line   87)
* PyLong_FromUnsignedLong (C function):  Integer Objects.    (line   38)
* PyLong_FromUnsignedLongLong (C function): Integer Objects. (line   58)
* PyLong_FromVoidPtr (C function):       Integer Objects.    (line   96)
* PyLong_Type (C variable):              Integer Objects.    (line   13)
* PyLongObject (C type):                 Integer Objects.    (line    9)
* PyMapping_Check (C function):          Mapping Protocol.   (line    6)
* PyMapping_DelItem (C function):        Mapping Protocol.   (line   21)
* PyMapping_DelItemString (C function):  Mapping Protocol.   (line   16)
* PyMapping_GetItemString (C function):  Mapping Protocol.   (line   58)
* PyMapping_HasKey (C function):         Mapping Protocol.   (line   31)
* PyMapping_HasKeyString (C function):   Mapping Protocol.   (line   26)
* PyMapping_Items (C function):          Mapping Protocol.   (line   50)
* PyMapping_Keys (C function):           Mapping Protocol.   (line   36)
* PyMapping_Length (C function):         Mapping Protocol.   (line   10)
* PyMapping_SetItemString (C function):  Mapping Protocol.   (line   66)
* PyMapping_Size (C function):           Mapping Protocol.   (line   10)
* PyMapping_Values (C function):         Mapping Protocol.   (line   43)
* PyMappingMethods (C type):             Mapping Object Structures.
                                                             (line    6)
* PyMappingMethods.mp_ass_subscript (C member): Mapping Object Structures.
                                                             (line   21)
* PyMappingMethods.mp_length (C member): Mapping Object Structures.
                                                             (line   10)
* PyMappingMethods.mp_subscript (C member): Mapping Object Structures.
                                                             (line   15)
* PyMarshal_ReadLastObjectFromFile (C function): Data marshalling support.
                                                             (line   63)
* PyMarshal_ReadLongFromFile (C function): Data marshalling support.
                                                             (line   46)
* PyMarshal_ReadObjectFromFile (C function): Data marshalling support.
                                                             (line   56)
* PyMarshal_ReadObjectFromString (C function): Data marshalling support.
                                                             (line   76)
* PyMarshal_ReadShortFromFile (C function): Data marshalling support.
                                                             (line   51)
* PyMarshal_WriteLongToFile (C function): Data marshalling support.
                                                             (line   20)
* PyMarshal_WriteObjectToFile (C function): Data marshalling support.
                                                             (line   26)
* PyMarshal_WriteObjectToString (C function): Data marshalling support.
                                                             (line   31)
* PyMem_Del (C function):                Memory Interface.   (line   52)
* PyMem_Free (C function):               Memory Interface.   (line   29)
* PyMem_Malloc (C function):             Memory Interface.   (line   10)
* PyMem_New (C function):                Memory Interface.   (line   39)
* PyMem_Realloc (C function):            Memory Interface.   (line   17)
* PyMem_Resize (C function):             Memory Interface.   (line   44)
* PyMemberDef (C type):                  Common Object Structures.
                                                             (line  195)
* PyMemoryView_Check (C function):       MemoryView objects. (line   31)
* PyMemoryView_FromBuffer (C function):  MemoryView objects. (line   16)
* PyMemoryView_FromObject (C function):  MemoryView objects. (line   10)
* PyMemoryView_GET_BUFFER (C function):  MemoryView objects. (line   35)
* PyMemoryView_GetContiguous (C function): MemoryView objects.
                                                             (line   23)
* PyMethod_Check (C function):           Method Objects.     (line   15)
* PyMethod_ClearFreeList (C function):   Method Objects.     (line   49)
* PyMethod_Function (C function):        Method Objects.     (line   27)
* PyMethod_GET_FUNCTION (C function):    Method Objects.     (line   32)
* PyMethod_GET_SELF (C function):        Method Objects.     (line   43)
* PyMethod_New (C function):             Method Objects.     (line   19)
* PyMethod_Self (C function):            Method Objects.     (line   38)
* PyMethod_Type (C variable):            Method Objects.     (line   10)
* PyMethodDef (C type):                  Common Object Structures.
                                                             (line  100)
* PyModule_AddIntConstant (C function):  Initializing C modules.
                                                             (line   81)
* PyModule_AddIntMacro (C function):     Initializing C modules.
                                                             (line   94)
* PyModule_AddObject (C function):       Initializing C modules.
                                                             (line   74)
* PyModule_AddStringConstant (C function): Initializing C modules.
                                                             (line   87)
* PyModule_AddStringMacro (C function):  Initializing C modules.
                                                             (line  100)
* PyModule_Check (C function):           Module Objects.     (line   13)
* PyModule_CheckExact (C function):      Module Objects.     (line   17)
* PyModule_Create (C function):          Initializing C modules.
                                                             (line    8)
* PyModule_Create2 (C function):         Initializing C modules.
                                                             (line   13)
* PyModule_GetDef (C function):          Module Objects.     (line   64)
* PyModule_GetDict (C function):         Module Objects.     (line   29)
* PyModule_GetFilename (C function):     Module Objects.     (line   43)
* PyModule_GetFilenameObject (C function): Module Objects.   (line   51)
* PyModule_GetName (C function):         Module Objects.     (line   38)
* PyModule_GetState (C function):        Module Objects.     (line   59)
* PyModule_New (C function):             Module Objects.     (line   21)
* PyModule_Type (C variable):            Module Objects.     (line    8)
* PyModuleDef (C type):                  Initializing C modules.
                                                             (line   24)
* PyModuleDef.m_base (C member):         Initializing C modules.
                                                             (line   31)
* PyModuleDef.m_clear (C member):        Initializing C modules.
                                                             (line   66)
* PyModuleDef.m_doc (C member):          Initializing C modules.
                                                             (line   37)
* PyModuleDef.m_free (C member):         Initializing C modules.
                                                             (line   70)
* PyModuleDef.m_methods (C member):      Initializing C modules.
                                                             (line   54)
* PyModuleDef.m_name (C member):         Initializing C modules.
                                                             (line   34)
* PyModuleDef.m_reload (C member):       Initializing C modules.
                                                             (line   59)
* PyModuleDef.m_size (C member):         Initializing C modules.
                                                             (line   41)
* PyModuleDef.m_traverse (C member):     Initializing C modules.
                                                             (line   62)
* PyNumber_Absolute (C function):        Number Protocol.    (line   84)
* PyNumber_Add (C function):             Number Protocol.    (line   10)
* PyNumber_And (C function):             Number Protocol.    (line  110)
* PyNumber_AsSsize_t (C function):       Number Protocol.    (line  263)
* PyNumber_Check (C function):           Number Protocol.    (line    6)
* PyNumber_Divmod (C function):          Number Protocol.    (line   56)
* PyNumber_Float (C function):           Number Protocol.    (line  245)
* PyNumber_FloorDivide (C function):     Number Protocol.    (line   30)
* PyNumber_Index (C function):           Number Protocol.    (line  252)
* PyNumber_InPlaceAdd (C function):      Number Protocol.    (line  131)
* PyNumber_InPlaceAnd (C function):      Number Protocol.    (line  213)
* PyNumber_InPlaceFloorDivide (C function): Number Protocol. (line  155)
* PyNumber_InPlaceLshift (C function):   Number Protocol.    (line  195)
* PyNumber_InPlaceMultiply (C function): Number Protocol.    (line  147)
* PyNumber_InPlaceOr (C function):       Number Protocol.    (line  230)
* PyNumber_InPlacePower (C function):    Number Protocol.    (line  183)
* PyNumber_InPlaceRemainder (C function): Number Protocol.   (line  175)
* PyNumber_InPlaceRshift (C function):   Number Protocol.    (line  204)
* PyNumber_InPlaceSubtract (C function): Number Protocol.    (line  139)
* PyNumber_InPlaceTrueDivide (C function): Number Protocol.  (line  163)
* PyNumber_InPlaceXor (C function):      Number Protocol.    (line  221)
* PyNumber_Invert (C function):          Number Protocol.    (line   90)
* PyNumber_Long (C function):            Number Protocol.    (line  238)
* PyNumber_Lshift (C function):          Number Protocol.    (line   96)
* PyNumber_Multiply (C function):        Number Protocol.    (line   23)
* PyNumber_Negative (C function):        Number Protocol.    (line   72)
* PyNumber_Or (C function):              Number Protocol.    (line  124)
* PyNumber_Positive (C function):        Number Protocol.    (line   78)
* PyNumber_Power (C function):           Number Protocol.    (line   62)
* PyNumber_Remainder (C function):       Number Protocol.    (line   48)
* PyNumber_Rshift (C function):          Number Protocol.    (line  103)
* PyNumber_Subtract (C function):        Number Protocol.    (line   16)
* PyNumber_ToBase (C function):          Number Protocol.    (line  256)
* PyNumber_TrueDivide (C function):      Number Protocol.    (line   37)
* PyNumber_Xor (C function):             Number Protocol.    (line  117)
* PyNumberMethods (C type):              Number Object Structures.
                                                             (line    6)
* PyObject (C type):                     Common Object Structures.
                                                             (line   17)
* PyObject._ob_next (C member):          Type Objects<2>.    (line  111)
* PyObject._ob_prev (C member):          Type Objects<2>.    (line  111)
* PyObject.ob_refcnt (C member):         Type Objects<2>.    (line  125)
* PyObject.ob_type (C member):           Type Objects<2>.    (line  135)
* PyObject_AsCharBuffer (C function):    Old Buffer Protocol.
                                                             (line   21)
* PyObject_ASCII (C function):           Object Protocol.    (line  116)
* PyObject_AsFileDescriptor (C function): File Objects.      (line   32)
* PyObject_AsReadBuffer (C function):    Old Buffer Protocol.
                                                             (line   29)
* PyObject_AsWriteBuffer (C function):   Old Buffer Protocol.
                                                             (line   41)
* PyObject_Bytes (C function):           Object Protocol.    (line  133)
* PyObject_Call (C function):            Object Protocol.    (line  179)
* PyObject_CallFunction (C function):    Object Protocol.    (line  201)
* PyObject_CallFunctionObjArgs (C function): Object Protocol.
                                                             (line  228)
* PyObject_CallMethod (C function):      Object Protocol.    (line  214)
* PyObject_CallMethodObjArgs (C function): Object Protocol.  (line  237)
* PyObject_CallObject (C function):      Object Protocol.    (line  191)
* PyObject_CheckBuffer (C function):     Buffer-related functions.
                                                             (line    6)
* PyObject_CheckReadBuffer (C function): Old Buffer Protocol.
                                                             (line   37)
* PyObject_Del (C function):             Allocating Objects on the Heap.
                                                             (line   53)
* PyObject_DelAttr (C function):         Object Protocol.    (line   71)
* PyObject_DelAttrString (C function):   Object Protocol.    (line   76)
* PyObject_DelItem (C function):         Object Protocol.    (line  307)
* PyObject_Dir (C function):             Object Protocol.    (line  311)
* PyObject_GC_Del (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   66)
* PyObject_GC_New (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   32)
* PyObject_GC_NewVar (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   36)
* PyObject_GC_Resize (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   41)
* PyObject_GC_Track (C function):        Supporting Cyclic Garbage Collection.
                                                             (line   46)
* PyObject_GC_UnTrack (C function):      Supporting Cyclic Garbage Collection.
                                                             (line   70)
* PyObject_GenericGetAttr (C function):  Object Protocol.    (line   39)
* PyObject_GenericSetAttr (C function):  Object Protocol.    (line   61)
* PyObject_GetAttr (C function):         Object Protocol.    (line   23)
* PyObject_GetAttrString (C function):   Object Protocol.    (line   31)
* PyObject_GetBuffer (C function):       Buffer-related functions.
                                                             (line   11)
* PyObject_GetItem (C function):         Object Protocol.    (line  295)
* PyObject_GetIter (C function):         Object Protocol.    (line  322)
* PyObject_HasAttr (C function):         Object Protocol.    (line   12)
* PyObject_HasAttrString (C function):   Object Protocol.    (line   17)
* PyObject_Hash (C function):            Object Protocol.    (line  248)
* PyObject_HashNotImplemented (C function): Object Protocol. (line  256)
* PyObject_HEAD (C macro):               Common Object Structures.
                                                             (line   35)
* PyObject_HEAD_INIT (C macro):          Common Object Structures.
                                                             (line   67)
* PyObject_Init (C function):            Allocating Objects on the Heap.
                                                             (line   13)
* PyObject_InitVar (C function):         Allocating Objects on the Heap.
                                                             (line   23)
* PyObject_IsInstance (C function):      Object Protocol.    (line  140)
* PyObject_IsSubclass (C function):      Object Protocol.    (line  165)
* PyObject_IsTrue (C function):          Object Protocol.    (line  262)
* PyObject_Length (C function):          Object Protocol.    (line  288)
* PyObject_New (C function):             Allocating Objects on the Heap.
                                                             (line   30)
* PyObject_NewVar (C function):          Allocating Objects on the Heap.
                                                             (line   39)
* PyObject_Not (C function):             Object Protocol.    (line  267)
* PyObject_Print (C function):           Object Protocol.    (line    6)
* PyObject_Repr (C function):            Object Protocol.    (line  108)
* PyObject_RichCompare (C function):     Object Protocol.    (line   82)
* PyObject_RichCompareBool (C function): Object Protocol.    (line   94)
* PyObject_SetAttr (C function):         Object Protocol.    (line   49)
* PyObject_SetAttrString (C function):   Object Protocol.    (line   55)
* PyObject_SetItem (C function):         Object Protocol.    (line  302)
* PyObject_Size (C function):            Object Protocol.    (line  288)
* PyObject_Str (C function):             Object Protocol.    (line  124)
* PyObject_Type (C function):            Object Protocol.    (line  272)
* PyObject_TypeCheck (C function):       Object Protocol.    (line  284)
* PyObject_VAR_HEAD (C macro):           Common Object Structures.
                                                             (line   54)
* PyOS_AfterFork (C function):           Operating System Utilities.
                                                             (line   14)
* PyOS_CheckStack (C function):          Operating System Utilities.
                                                             (line   20)
* PyOS_double_to_string (C function):    String conversion and formatting.
                                                             (line   85)
* PyOS_getsig (C function):              Operating System Utilities.
                                                             (line   27)
* PyOS_setsig (C function):              Operating System Utilities.
                                                             (line   33)
* PyOS_snprintf (C function):            String conversion and formatting.
                                                             (line    8)
* PyOS_stricmp (C function):             String conversion and formatting.
                                                             (line  120)
* PyOS_string_to_double (C function):    String conversion and formatting.
                                                             (line   52)
* PyOS_strnicmp (C function):            String conversion and formatting.
                                                             (line  124)
* PyOS_vsnprintf (C function):           String conversion and formatting.
                                                             (line   14)
* PyParser_SimpleParseFile (C function): The Very High Level Layer.
                                                             (line  157)
* PyParser_SimpleParseFileFlags (C function): The Very High Level Layer.
                                                             (line  163)
* PyParser_SimpleParseString (C function): The Very High Level Layer.
                                                             (line  136)
* PyParser_SimpleParseStringFlags (C function): The Very High Level Layer.
                                                             (line  142)
* PyParser_SimpleParseStringFlagsFilename (C function): The Very High Level Layer.
                                                             (line  148)
* PyProperty_Type (C variable):          Descriptor Objects. (line    9)
* PyRun_AnyFile (C function):            The Very High Level Layer.
                                                             (line   40)
* PyRun_AnyFileEx (C function):          The Very High Level Layer.
                                                             (line   49)
* PyRun_AnyFileExFlags (C function):     The Very High Level Layer.
                                                             (line   54)
* PyRun_AnyFileFlags (C function):       The Very High Level Layer.
                                                             (line   44)
* PyRun_File (C function):               The Very High Level Layer.
                                                             (line  189)
* PyRun_FileEx (C function):             The Very High Level Layer.
                                                             (line  196)
* PyRun_FileExFlags (C function):        The Very High Level Layer.
                                                             (line  211)
* PyRun_FileFlags (C function):          The Very High Level Layer.
                                                             (line  203)
* PyRun_InteractiveLoop (C function):    The Very High Level Layer.
                                                             (line  122)
* PyRun_InteractiveLoopFlags (C function): The Very High Level Layer.
                                                             (line  128)
* PyRun_InteractiveOne (C function):     The Very High Level Layer.
                                                             (line  102)
* PyRun_InteractiveOneFlags (C function): The Very High Level Layer.
                                                             (line  108)
* PyRun_SimpleFile (C function):         The Very High Level Layer.
                                                             (line   80)
* PyRun_SimpleFileEx (C function):       The Very High Level Layer.
                                                             (line   89)
* PyRun_SimpleFileExFlags (C function):  The Very High Level Layer.
                                                             (line   94)
* PyRun_SimpleFileFlags (C function):    The Very High Level Layer.
                                                             (line   84)
* PyRun_SimpleString (C function):       The Very High Level Layer.
                                                             (line   63)
* PyRun_SimpleStringFlags (C function):  The Very High Level Layer.
                                                             (line   67)
* PyRun_String (C function):             The Very High Level Layer.
                                                             (line  169)
* PyRun_StringFlags (C function):        The Very High Level Layer.
                                                             (line  176)
* PySeqIter_Check (C function):          Iterator Objects.   (line   17)
* PySeqIter_New (C function):            Iterator Objects.   (line   20)
* PySeqIter_Type (C variable):           Iterator Objects.   (line   12)
* PySequence_Check (C function):         Sequence Protocol.  (line    6)
* PySequence_Concat (C function):        Sequence Protocol.  (line   16)
* PySequence_Contains (C function):      Sequence Protocol.  (line   91)
* PySequence_Count (C function):         Sequence Protocol.  (line   84)
* PySequence_DelItem (C function):       Sequence Protocol.  (line   68)
* PySequence_DelSlice (C function):      Sequence Protocol.  (line   78)
* PySequence_Fast (C function):          Sequence Protocol.  (line  117)
* PySequence_Fast_GET_ITEM (C function): Sequence Protocol.  (line  126)
* PySequence_Fast_GET_SIZE (C function): Sequence Protocol.  (line  151)
* PySequence_Fast_ITEMS (C function):    Sequence Protocol.  (line  134)
* PySequence_GetItem (C function):       Sequence Protocol.  (line   48)
* PySequence_GetItem():                  Reference Count Details.
                                                             (line  117)
* PySequence_GetSlice (C function):      Sequence Protocol.  (line   54)
* PySequence_Index (C function):         Sequence Protocol.  (line   96)
* PySequence_InPlaceConcat (C function): Sequence Protocol.  (line   31)
* PySequence_InPlaceRepeat (C function): Sequence Protocol.  (line   39)
* PySequence_ITEM (C function):          Sequence Protocol.  (line  143)
* PySequence_Length (C function):        Sequence Protocol.  (line   10)
* PySequence_List (C function):          Sequence Protocol.  (line  102)
* PySequence_Repeat (C function):        Sequence Protocol.  (line   23)
* PySequence_SetItem (C function):       Sequence Protocol.  (line   62)
* PySequence_SetSlice (C function):      Sequence Protocol.  (line   72)
* PySequence_Size (C function):          Sequence Protocol.  (line   10)
* PySequence_Tuple (C function):         Sequence Protocol.  (line  108)
* PySequenceMethods (C type):            Sequence Object Structures.
                                                             (line    6)
* PySequenceMethods.sq_ass_item (C member): Sequence Object Structures.
                                                             (line   35)
* PySequenceMethods.sq_concat (C member): Sequence Object Structures.
                                                             (line   14)
* PySequenceMethods.sq_contains (C member): Sequence Object Structures.
                                                             (line   40)
* PySequenceMethods.sq_inplace_concat (C member): Sequence Object Structures.
                                                             (line   46)
* PySequenceMethods.sq_inplace_repeat (C member): Sequence Object Structures.
                                                             (line   51)
* PySequenceMethods.sq_item (C member):  Sequence Object Structures.
                                                             (line   24)
* PySequenceMethods.sq_length (C member): Sequence Object Structures.
                                                             (line   10)
* PySequenceMethods.sq_repeat (C member): Sequence Object Structures.
                                                             (line   19)
* PySet_Add (C function):                Set Objects.        (line   96)
* PySet_Check (C function):              Set Objects.        (line   41)
* PySet_Clear (C function):              Set Objects.        (line  125)
* PySet_Contains (C function):           Set Objects.        (line   88)
* PySet_Discard (C function):            Set Objects.        (line  108)
* PySet_GET_SIZE (C function):           Set Objects.        (line   85)
* PySet_New (C function):                Set Objects.        (line   60)
* PySet_Pop (C function):                Set Objects.        (line  117)
* PySet_Size (C function):               Set Objects.        (line   80)
* PySet_Type (C variable):               Set Objects.        (line   29)
* PySetObject (C type):                  Set Objects.        (line   18)
* PySignal_SetWakeupFd (C function):     Exception Handling. (line  318)
* PySlice_Check (C function):            Slice Objects.      (line   10)
* PySlice_GetIndices (C function):       Slice Objects.      (line   24)
* PySlice_GetIndicesEx (C function):     Slice Objects.      (line   40)
* PySlice_New (C function):              Slice Objects.      (line   13)
* PySlice_Type (C variable):             Slice Objects.      (line    6)
* PySys_AddWarnOption (C function):      System Functions.   (line   30)
* PySys_AddWarnOptionUnicode (C function): System Functions. (line   33)
* PySys_AddXOption (C function):         System Functions.   (line   74)
* PySys_FormatStderr (C function):       System Functions.   (line   68)
* PySys_FormatStdout (C function):       System Functions.   (line   61)
* PySys_GetFile (C function):            System Functions.   (line   17)
* PySys_GetObject (C function):          System Functions.   (line   11)
* PySys_GetXOptions (C function):        System Functions.   (line   80)
* PySys_ResetWarnOptions (C function):   System Functions.   (line   27)
* PySys_SetArgv (C function):            Process-wide parameters.
                                                             (line  203)
* PySys_SetArgv():                       Initializing and finalizing the interpreter.
                                                             (line    7)
* PySys_SetArgvEx (C function):          Process-wide parameters.
                                                             (line  163)
* PySys_SetArgvEx() <1>:                 Initializing and finalizing the interpreter.
                                                             (line    7)
* PySys_SetArgvEx():                     Embedding Python.   (line   17)
* PySys_SetObject (C function):          System Functions.   (line   22)
* PySys_SetPath (C function):            System Functions.   (line   36)
* PySys_WriteStderr (C function):        System Functions.   (line   57)
* PySys_WriteStdout (C function):        System Functions.   (line   41)
* Python Enhancement Proposals; PEP 238: The Very High Level Layer.
                                                             (line  326)
* Python Enhancement Proposals; PEP 3147: Importing Modules. (line  158)
* Python Enhancement Proposals; PEP 383: File System Encoding.
                                                             (line    8)
* PYTHONDUMPREFS:                        Type Objects<2>.    (line  121)
* PYTHONHOME <1>:                        Embedding Python.   (line   38)
* PYTHONHOME:                            Process-wide parameters.
                                                             (line  219)
* PYTHONPATH:                            Embedding Python.   (line   43)
* PyThreadState:                         Thread State and the Global Interpreter Lock.
                                                             (line   22)
* PyThreadState (C type):                High-level API.     (line   20)
* PyThreadState_Clear (C function):      Low-level API.      (line   33)
* PyThreadState_Delete (C function):     Low-level API.      (line   37)
* PyThreadState_Get (C function):        High-level API.     (line   62)
* PyThreadState_GetDict (C function):    Low-level API.      (line   42)
* PyThreadState_New (C function):        Low-level API.      (line   26)
* PyThreadState_Next (C function):       Advanced Debugger Support.
                                                             (line   23)
* PyThreadState_SetAsyncExc (C function): Low-level API.     (line   52)
* PyThreadState_Swap (C function):       High-level API.     (line   67)
* PyTime_Check (C function):             DateTime Objects.   (line   32)
* PyTime_CheckExact (C function):        DateTime Objects.   (line   36)
* PyTime_FromTime (C function):          DateTime Objects.   (line   72)
* PyTrace_C_CALL (C variable):           Profiling and Tracing.
                                                             (line   71)
* PyTrace_C_EXCEPTION (C variable):      Profiling and Tracing.
                                                             (line   75)
* PyTrace_C_RETURN (C variable):         Profiling and Tracing.
                                                             (line   79)
* PyTrace_CALL (C variable):             Profiling and Tracing.
                                                             (line   42)
* PyTrace_EXCEPTION (C variable):        Profiling and Tracing.
                                                             (line   50)
* PyTrace_LINE (C variable):             Profiling and Tracing.
                                                             (line   61)
* PyTrace_RETURN (C variable):           Profiling and Tracing.
                                                             (line   66)
* PyTuple_Check (C function):            Tuple Objects.      (line   14)
* PyTuple_CheckExact (C function):       Tuple Objects.      (line   18)
* PyTuple_ClearFreeList (C function):    Tuple Objects.      (line   91)
* PyTuple_GET_ITEM (C function):         Tuple Objects.      (line   50)
* PyTuple_GET_SIZE (C function):         Tuple Objects.      (line   39)
* PyTuple_GetItem (C function):          Tuple Objects.      (line   43)
* PyTuple_GetSlice (C function):         Tuple Objects.      (line   56)
* PyTuple_New (C function):              Tuple Objects.      (line   22)
* PyTuple_Pack (C function):             Tuple Objects.      (line   27)
* PyTuple_SET_ITEM (C function):         Tuple Objects.      (line   70)
* PyTuple_SetItem (C function):          Tuple Objects.      (line   63)
* PyTuple_SetItem():                     Reference Count Details.
                                                             (line   26)
* PyTuple_Size (C function):             Tuple Objects.      (line   35)
* PyTuple_Type (C variable):             Tuple Objects.      (line   10)
* PyTupleObject (C type):                Tuple Objects.      (line    6)
* PyType_Check (C function):             Type Objects.       (line   13)
* PyType_CheckExact (C function):        Type Objects.       (line   18)
* PyType_ClearCache (C function):        Type Objects.       (line   22)
* PyType_GenericAlloc (C function):      Type Objects.       (line   49)
* PyType_GenericNew (C function):        Type Objects.       (line   55)
* PyType_GetFlags (C function):          Type Objects.       (line   25)
* PyType_HasFeature (C function):        Type Objects.       (line   38)
* PyType_IS_GC (C function):             Type Objects.       (line   42)
* PyType_IsSubtype (C function):         Type Objects.       (line   46)
* PyType_Modified (C function):          Type Objects.       (line   33)
* PyType_Ready (C function):             Type Objects.       (line   61)
* PyType_Type (C variable):              Type Objects.       (line    9)
* PyTypeObject (C type):                 Type Objects.       (line    6)
* PyTypeObject.tp_alloc (C member):      Type Objects<2>.    (line  890)
* PyTypeObject.tp_allocs (C member):     Type Objects<2>.    (line 1014)
* PyTypeObject.tp_as_buffer (C member):  Type Objects<2>.    (line  440)
* PyTypeObject.tp_base (C member):       Type Objects<2>.    (line  763)
* PyTypeObject.tp_bases (C member):      Type Objects<2>.    (line  983)
* PyTypeObject.tp_basicsize (C member):  Type Objects<2>.    (line  190)
* PyTypeObject.tp_cache (C member):      Type Objects<2>.    (line  998)
* PyTypeObject.tp_call (C member):       Type Objects<2>.    (line  389)
* PyTypeObject.tp_clear (C member):      Type Objects<2>.    (line  562)
* PyTypeObject.tp_dealloc (C member):    Type Objects<2>.    (line  234)
* PyTypeObject.tp_descr_get (C member):  Type Objects<2>.    (line  789)
* PyTypeObject.tp_descr_set (C member):  Type Objects<2>.    (line  799)
* PyTypeObject.tp_dict (C member):       Type Objects<2>.    (line  773)
* PyTypeObject.tp_dictoffset (C member): Type Objects<2>.    (line  809)
* PyTypeObject.tp_doc (C member):        Type Objects<2>.    (line  514)
* PyTypeObject.tp_flags (C member):      Type Objects<2>.    (line  448)
* PyTypeObject.tp_free (C member):       Type Objects<2>.    (line  947)
* PyTypeObject.tp_frees (C member):      Type Objects<2>.    (line 1017)
* PyTypeObject.tp_getattr (C member):    Type Objects<2>.    (line  289)
* PyTypeObject.tp_getattro (C member):   Type Objects<2>.    (line  414)
* PyTypeObject.tp_getset (C member):     Type Objects<2>.    (line  737)
* PyTypeObject.tp_hash (C member):       Type Objects<2>.    (line  362)
* PyTypeObject.tp_init (C member):       Type Objects<2>.    (line  864)
* PyTypeObject.tp_is_gc (C member):      Type Objects<2>.    (line  962)
* PyTypeObject.tp_itemsize (C member):   Type Objects<2>.    (line  190)
* PyTypeObject.tp_iter (C member):       Type Objects<2>.    (line  689)
* PyTypeObject.tp_iternext (C member):   Type Objects<2>.    (line  700)
* PyTypeObject.tp_maxalloc (C member):   Type Objects<2>.    (line 1020)
* PyTypeObject.tp_members (C member):    Type Objects<2>.    (line  726)
* PyTypeObject.tp_methods (C member):    Type Objects<2>.    (line  715)
* PyTypeObject.tp_mro (C member):        Type Objects<2>.    (line  991)
* PyTypeObject.tp_name (C member):       Type Objects<2>.    (line  163)
* PyTypeObject.tp_new (C member):        Type Objects<2>.    (line  918)
* PyTypeObject.tp_next (C member):       Type Objects<2>.    (line 1023)
* PyTypeObject.tp_print (C member):      Type Objects<2>.    (line  260)
* PyTypeObject.tp_repr (C member):       Type Objects<2>.    (line  320)
* PyTypeObject.tp_reserved (C member):   Type Objects<2>.    (line  317)
* PyTypeObject.tp_richcompare (C member): Type Objects<2>.   (line  623)
* PyTypeObject.tp_setattr (C member):    Type Objects<2>.    (line  303)
* PyTypeObject.tp_setattro (C member):   Type Objects<2>.    (line  427)
* PyTypeObject.tp_str (C member):        Type Objects<2>.    (line  396)
* PyTypeObject.tp_subclasses (C member): Type Objects<2>.    (line 1001)
* PyTypeObject.tp_traverse (C member):   Type Objects<2>.    (line  521)
* PyTypeObject.tp_weaklist (C member):   Type Objects<2>.    (line 1005)
* PyTypeObject.tp_weaklistoffset (C member): Type Objects<2>.
                                                             (line  656)
* PyTZInfo_Check (C function):           DateTime Objects.   (line   48)
* PyTZInfo_CheckExact (C function):      DateTime Objects.   (line   52)
* PyUnicode_AS_DATA (C function):        Unicode Type.       (line   59)
* PyUnicode_AS_UNICODE (C function):     Unicode Type.       (line   54)
* PyUnicode_AsASCIIString (C function):  ASCII Codecs.       (line   25)
* PyUnicode_AsCharmapString (C function): Character Map Codecs.
                                                             (line   49)
* PyUnicode_AsEncodedString (C function): Generic Codecs.    (line   29)
* PyUnicode_AsLatin1String (C function): Latin-1 Codecs.     (line   26)
* PyUnicode_AsMBCSString (C function):   MBCS codecs for Windows.
                                                             (line   36)
* PyUnicode_AsRawUnicodeEscapeString (C function): Raw-Unicode-Escape Codecs.
                                                             (line   24)
* PyUnicode_AsUnicode (C function):      Plain Py_UNICODE.   (line  108)
* PyUnicode_AsUnicodeCopy (C function):  Plain Py_UNICODE.   (line  113)
* PyUnicode_AsUnicodeEscapeString (C function): Unicode-Escape Codecs.
                                                             (line   24)
* PyUnicode_AsUTF16String (C function):  UTF-16 Codecs.      (line   73)
* PyUnicode_AsUTF32String (C function):  UTF-32 Codecs.      (line   67)
* PyUnicode_AsUTF8String (C function):   UTF-8 Codecs.       (line   34)
* PyUnicode_AsWideChar (C function):     wchar_t Support.    (line   16)
* PyUnicode_AsWideCharString (C function): wchar_t Support.  (line   27)
* PyUnicode_Check (C function):          Unicode Type.       (line   38)
* PyUnicode_CheckExact (C function):     Unicode Type.       (line   42)
* PyUnicode_ClearFreeList (C function):  Unicode Type.       (line   63)
* PyUnicode_Compare (C function):        Methods and Slot Functions.
                                                             (line   92)
* PyUnicode_CompareWithASCIIString (C function): Methods and Slot Functions.
                                                             (line   96)
* PyUnicode_Concat (C function):         Methods and Slot Functions.
                                                             (line   12)
* PyUnicode_Contains (C function):       Methods and Slot Functions.
                                                             (line  128)
* PyUnicode_Count (C function):          Methods and Slot Functions.
                                                             (line   79)
* PyUnicode_Decode (C function):         Generic Codecs.     (line    8)
* PyUnicode_DecodeASCII (C function):    ASCII Codecs.       (line    9)
* PyUnicode_DecodeCharmap (C function):  Character Map Codecs.
                                                             (line   29)
* PyUnicode_DecodeFSDefault (C function): File System Encoding.
                                                             (line   43)
* PyUnicode_DecodeFSDefaultAndSize (C function): File System Encoding.
                                                             (line   33)
* PyUnicode_DecodeLatin1 (C function):   Latin-1 Codecs.     (line   10)
* PyUnicode_DecodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   12)
* PyUnicode_DecodeMBCSStateful (C function): MBCS codecs for Windows.
                                                             (line   20)
* PyUnicode_DecodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUTF16 (C function):    UTF-16 Codecs.      (line    8)
* PyUnicode_DecodeUTF16Stateful (C function): UTF-16 Codecs. (line   37)
* PyUnicode_DecodeUTF32 (C function):    UTF-32 Codecs.      (line    8)
* PyUnicode_DecodeUTF32Stateful (C function): UTF-32 Codecs. (line   37)
* PyUnicode_DecodeUTF7 (C function):     UTF-7 Codecs.       (line    8)
* PyUnicode_DecodeUTF7Stateful (C function): UTF-7 Codecs.   (line   14)
* PyUnicode_DecodeUTF8 (C function):     UTF-8 Codecs.       (line    8)
* PyUnicode_DecodeUTF8Stateful (C function): UTF-8 Codecs.   (line   16)
* PyUnicode_Encode (C function):         Generic Codecs.     (line   18)
* PyUnicode_EncodeASCII (C function):    ASCII Codecs.       (line   17)
* PyUnicode_EncodeCharmap (C function):  Character Map Codecs.
                                                             (line   41)
* PyUnicode_EncodeFSDefault (C function): File System Encoding.
                                                             (line   56)
* PyUnicode_EncodeLatin1 (C function):   Latin-1 Codecs.     (line   18)
* PyUnicode_EncodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   28)
* PyUnicode_EncodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line   16)
* PyUnicode_EncodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line   16)
* PyUnicode_EncodeUTF16 (C function):    UTF-16 Codecs.      (line   50)
* PyUnicode_EncodeUTF32 (C function):    UTF-32 Codecs.      (line   48)
* PyUnicode_EncodeUTF7 (C function):     UTF-7 Codecs.       (line   22)
* PyUnicode_EncodeUTF8 (C function):     UTF-8 Codecs.       (line   26)
* PyUnicode_Find (C function):           Methods and Slot Functions.
                                                             (line   69)
* PyUnicode_Format (C function):         Methods and Slot Functions.
                                                             (line  121)
* PyUnicode_FromEncodedObject (C function): Plain Py_UNICODE.
                                                             (line  124)
* PyUnicode_FromFormat (C function):     Plain Py_UNICODE.   (line   35)
* PyUnicode_FromFormatV (C function):    Plain Py_UNICODE.   (line   96)
* PyUnicode_FromObject (C function):     Plain Py_UNICODE.   (line  143)
* PyUnicode_FromString (C function):     Plain Py_UNICODE.   (line   31)
* PyUnicode_FromString():                Dictionary Objects. (line   57)
* PyUnicode_FromStringAndSize (C function): Plain Py_UNICODE.
                                                             (line   21)
* PyUnicode_FromUnicode (C function):    Plain Py_UNICODE.   (line    9)
* PyUnicode_FromWideChar (C function):   wchar_t Support.    (line    8)
* PyUnicode_FSConverter (C function):    File System Encoding.
                                                             (line   13)
* PyUnicode_FSDecoder (C function):      File System Encoding.
                                                             (line   25)
* PyUnicode_GET_DATA_SIZE (C function):  Unicode Type.       (line   50)
* PyUnicode_GET_SIZE (C function):       Unicode Type.       (line   46)
* PyUnicode_GetSize (C function):        Plain Py_UNICODE.   (line  121)
* PyUnicode_InternFromString (C function): Methods and Slot Functions.
                                                             (line  149)
* PyUnicode_InternInPlace (C function):  Methods and Slot Functions.
                                                             (line  136)
* PyUnicode_Join (C function):           Methods and Slot Functions.
                                                             (line   55)
* PyUnicode_Replace (C function):        Methods and Slot Functions.
                                                             (line   84)
* PyUnicode_RichCompare (C function):    Methods and Slot Functions.
                                                             (line  104)
* PyUnicode_Split (C function):          Methods and Slot Functions.
                                                             (line   18)
* PyUnicode_Splitlines (C function):     Methods and Slot Functions.
                                                             (line   28)
* PyUnicode_Tailmatch (C function):      Methods and Slot Functions.
                                                             (line   62)
* PyUnicode_TransformDecimalToASCII (C function): Plain Py_UNICODE.
                                                             (line  101)
* PyUnicode_Translate (C function):      Methods and Slot Functions.
                                                             (line   37)
* PyUnicode_TranslateCharmap (C function): Character Map Codecs.
                                                             (line   59)
* PyUnicode_Type (C variable):           Unicode Type.       (line   31)
* PyUnicodeDecodeError_Create (C function): Unicode Exception Objects.
                                                             (line    9)
* PyUnicodeDecodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   30)
* PyUnicodeDecodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   61)
* PyUnicodeDecodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   36)
* PyUnicodeDecodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line   80)
* PyUnicodeDecodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   42)
* PyUnicodeDecodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   71)
* PyUnicodeDecodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line   86)
* PyUnicodeDecodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   52)
* PyUnicodeEncodeError_Create (C function): Unicode Exception Objects.
                                                             (line   16)
* PyUnicodeEncodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   30)
* PyUnicodeEncodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   61)
* PyUnicodeEncodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   36)
* PyUnicodeEncodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line   80)
* PyUnicodeEncodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   42)
* PyUnicodeEncodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   71)
* PyUnicodeEncodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line   86)
* PyUnicodeEncodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   52)
* PyUnicodeObject (C type):              Unicode Type.       (line   27)
* PyUnicodeTranslateError_Create (C function): Unicode Exception Objects.
                                                             (line   23)
* PyUnicodeTranslateError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   61)
* PyUnicodeTranslateError_GetObject (C function): Unicode Exception Objects.
                                                             (line   36)
* PyUnicodeTranslateError_GetReason (C function): Unicode Exception Objects.
                                                             (line   80)
* PyUnicodeTranslateError_GetStart (C function): Unicode Exception Objects.
                                                             (line   42)
* PyUnicodeTranslateError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   71)
* PyUnicodeTranslateError_SetReason (C function): Unicode Exception Objects.
                                                             (line   86)
* PyUnicodeTranslateError_SetStart (C function): Unicode Exception Objects.
                                                             (line   52)
* PyVarObject (C type):                  Common Object Structures.
                                                             (line   25)
* PyVarObject.ob_size (C member):        Type Objects<2>.    (line  156)
* PyVarObject_HEAD_INIT (C macro):       Common Object Structures.
                                                             (line   76)
* PyWeakref_Check (C function):          Weak Reference Objects.
                                                             (line   11)
* PyWeakref_CheckProxy (C function):     Weak Reference Objects.
                                                             (line   17)
* PyWeakref_CheckRef (C function):       Weak Reference Objects.
                                                             (line   14)
* PyWeakref_GET_OBJECT (C function):     Weak Reference Objects.
                                                             (line   59)
* PyWeakref_GetObject (C function):      Weak Reference Objects.
                                                             (line   48)
* PyWeakref_NewProxy (C function):       Weak Reference Objects.
                                                             (line   34)
* PyWeakref_NewRef (C function):         Weak Reference Objects.
                                                             (line   20)
* PyWrapper_New (C function):            Descriptor Objects. (line   37)
* realloc():                             Overview.           (line   33)
* set_all():                             Reference Count Details.
                                                             (line   96)
* setcheckinterval() (in module sys):    Asynchronous Notifications.
                                                             (line   10)
* setswitchinterval() (in module sys):   Thread State and the Global Interpreter Lock.
                                                             (line   15)
* SIGINT:                                Exception Handling. (line  312)
* stderr (in module sys):                Sub-interpreter support.
                                                             (line   14)
* stdin (in module sys):                 Sub-interpreter support.
                                                             (line   14)
* stdout (in module sys):                Sub-interpreter support.
                                                             (line   14)
* strerror():                            Exception Handling. (line  157)
* sum_list():                            Reference Count Details.
                                                             (line  139)
* sum_sequence() <1>:                    Reference Count Details.
                                                             (line  160)
* sum_sequence():                        Exceptions.         (line   66)
* SystemError (built-in exception):      Module Objects.     (line   39)
* tp_as_mapping (C member):              Type Objects<2>.    (line  354)
* tp_as_number (C member):               Type Objects<2>.    (line  338)
* tp_as_sequence (C member):             Type Objects<2>.    (line  346)
* traverseproc (C type):                 Supporting Cyclic Garbage Collection.
                                                             (line   94)
* ULONG_MAX:                             Integer Objects.    (line  135)
* version (in module sys):               Process-wide parameters.
                                                             (line  158)
* visitproc (C type):                    Supporting Cyclic Garbage Collection.
                                                             (line   84)



Tag Table:
Node: Top419
Ref: c-api/index doc705
Ref: 0705
Node: Introduction4960
Ref: c-api/intro c-api-index5070
Ref: 15070
Ref: c-api/intro python-c-api-reference-manual5070
Ref: 25070
Ref: c-api/intro doc5070
Ref: 35070
Ref: c-api/intro api-intro5070
Ref: 45070
Ref: c-api/intro introduction5070
Ref: 55070
Node: Include Files6563
Ref: c-api/intro api-includes6680
Ref: 66680
Ref: c-api/intro include-files6680
Ref: 76680
Node: Objects Types and Reference Counts8843
Ref: c-api/intro objects-types-and-reference-counts8979
Ref: 88979
Ref: c-api/intro api-objects8979
Ref: 98979
Node: Reference Counts10339
Ref: c-api/intro api-refcounts10452
Ref: c10452
Ref: c-api/intro reference-counts10452
Ref: d10452
Node: Reference Count Details14108
Ref: c-api/intro reference-count-details14196
Ref: 1014196
Ref: c-api/intro api-refcountdetails14196
Ref: 1114196
Node: Types20755
Ref: c-api/intro api-types20868
Ref: 1d20868
Ref: c-api/intro types20868
Ref: 1e20868
Node: Exceptions21331
Ref: c-api/intro exceptions21470
Ref: 1f21470
Ref: c-api/intro api-exceptions21470
Ref: 2021470
Node: Embedding Python27479
Ref: c-api/intro api-embedding27600
Ref: 2527600
Ref: c-api/intro embedding-python27600
Ref: 2627600
Node: Debugging Builds30665
Ref: c-api/intro api-debugging30767
Ref: 2e30767
Ref: c-api/intro debugging-builds30767
Ref: 2f30767
Node: The Very High Level Layer33191
Ref: c-api/veryhigh veryhigh33316
Ref: 3033316
Ref: c-api/veryhigh the-very-high-level-layer33316
Ref: 3133316
Ref: c-api/veryhigh doc33316
Ref: 3233316
Ref: c-api/veryhigh Py_Main34313
Ref: 3334313
Ref: c-api/veryhigh PyRun_AnyFile35232
Ref: 3435232
Ref: c-api/veryhigh PyRun_AnyFileFlags35441
Ref: 3635441
Ref: c-api/veryhigh PyRun_AnyFileEx35676
Ref: 3735676
Ref: c-api/veryhigh PyRun_AnyFileExFlags35898
Ref: 3535898
Ref: c-api/veryhigh PyRun_SimpleString36437
Ref: 3a36437
Ref: c-api/veryhigh PyRun_SimpleStringFlags36640
Ref: 3b36640
Ref: c-api/veryhigh PyRun_SimpleFile37278
Ref: 3937278
Ref: c-api/veryhigh PyRun_SimpleFileFlags37493
Ref: 3d37493
Ref: c-api/veryhigh PyRun_SimpleFileEx37721
Ref: 3e37721
Ref: c-api/veryhigh PyRun_SimpleFileExFlags37936
Ref: 3c37936
Ref: c-api/veryhigh PyRun_InteractiveOne38412
Ref: 3f38412
Ref: c-api/veryhigh PyRun_InteractiveOneFlags38623
Ref: 4038623
Ref: c-api/veryhigh PyRun_InteractiveLoop39347
Ref: 3839347
Ref: c-api/veryhigh PyRun_InteractiveLoopFlags39560
Ref: 4139560
Ref: c-api/veryhigh PyParser_SimpleParseString39963
Ref: 4239963
Ref: c-api/veryhigh PyParser_SimpleParseStringFlags40226
Ref: 4440226
Ref: c-api/veryhigh PyParser_SimpleParseStringFlagsFilename40482
Ref: 4340482
Ref: c-api/veryhigh PyParser_SimpleParseFile40988
Ref: 4540988
Ref: c-api/veryhigh PyParser_SimpleParseFileFlags41224
Ref: 4641224
Ref: c-api/veryhigh PyRun_String41506
Ref: 4741506
Ref: c-api/veryhigh PyRun_StringFlags41770
Ref: 4841770
Ref: c-api/veryhigh PyRun_File42337
Ref: 4942337
Ref: c-api/veryhigh PyRun_FileEx42639
Ref: 4b42639
Ref: c-api/veryhigh PyRun_FileFlags42931
Ref: 4c42931
Ref: c-api/veryhigh PyRun_FileExFlags43246
Ref: 4a43246
Ref: c-api/veryhigh Py_CompileString43817
Ref: 4d43817
Ref: c-api/veryhigh Py_CompileStringFlags44074
Ref: 4e44074
Ref: c-api/veryhigh Py_CompileStringExFlags44360
Ref: 4f44360
Ref: c-api/veryhigh PyEval_EvalCode45469
Ref: 5045469
Ref: c-api/veryhigh PyEval_EvalCodeEx45808
Ref: 5145808
Ref: c-api/veryhigh PyEval_EvalFrame46300
Ref: 5246300
Ref: c-api/veryhigh PyEval_EvalFrameEx46485
Ref: 5346485
Ref: c-api/veryhigh PyEval_MergeCompilerFlags47017
Ref: 5447017
Ref: c-api/veryhigh Py_eval_input47208
Ref: 5547208
Ref: c-api/veryhigh Py_file_input47363
Ref: 5647363
Ref: c-api/veryhigh Py_single_input47646
Ref: 5747646
Ref: c-api/veryhigh PyCompilerFlags47868
Ref: 5847868
Ref: c-api/veryhigh CO_FUTURE_DIVISION48441
Ref: 5948441
Ref: The Very High Level Layer-Footnote-148650
Node: Reference Counting48697
Ref: c-api/refcounting countingrefs48828
Ref: 5a48828
Ref: c-api/refcounting doc48828
Ref: 5b48828
Ref: c-api/refcounting reference-counting48828
Ref: 5c48828
Ref: c-api/refcounting Py_INCREF48957
Ref: e48957
Ref: c-api/refcounting Py_XINCREF49165
Ref: 5d49165
Ref: c-api/refcounting Py_DECREF49334
Ref: f49334
Ref: c-api/refcounting Py_XDECREF50412
Ref: 1250412
Ref: c-api/refcounting Py_CLEAR50683
Ref: 5e50683
Node: Exception Handling51779
Ref: c-api/exceptions exceptionhandling51894
Ref: 5f51894
Ref: c-api/exceptions doc51894
Ref: 6051894
Ref: c-api/exceptions exception-handling51894
Ref: 6151894
Ref: c-api/exceptions PyErr_PrintEx53462
Ref: 6253462
Ref: c-api/exceptions PyErr_Print53920
Ref: 6353920
Ref: c-api/exceptions PyErr_Occurred53992
Ref: 2153992
Ref: c-api/exceptions PyErr_ExceptionMatches54783
Ref: 2454783
Ref: c-api/exceptions PyErr_GivenExceptionMatches55064
Ref: 6555064
Ref: c-api/exceptions PyErr_NormalizeException55452
Ref: 6655452
Ref: c-api/exceptions PyErr_Clear55964
Ref: 2355964
Ref: c-api/exceptions PyErr_Fetch56094
Ref: 6756094
Ref: c-api/exceptions PyErr_Restore56725
Ref: 6456725
Ref: c-api/exceptions PyErr_SetString57699
Ref: 2257699
Ref: c-api/exceptions PyErr_SetObject58107
Ref: 6858107
Ref: c-api/exceptions PyErr_Format58333
Ref: 6958333
Ref: c-api/exceptions PyErr_SetNone58781
Ref: 6b58781
Ref: c-api/exceptions PyErr_BadArgument58897
Ref: 6c58897
Ref: c-api/exceptions PyErr_NoMemory59145
Ref: 6d59145
Ref: c-api/exceptions PyErr_SetFromErrno59414
Ref: 6e59414
Ref: c-api/exceptions PyErr_SetFromErrnoWithFilename60263
Ref: 7060263
Ref: c-api/exceptions PyErr_SetFromWindowsErr60828
Ref: 7160828
Ref: c-api/exceptions PyErr_SetExcFromWindowsErr61547
Ref: 7261547
Ref: c-api/exceptions PyErr_SetFromWindowsErrWithFilename61830
Ref: 7361830
Ref: c-api/exceptions PyErr_SetExcFromWindowsErrWithFilename62285
Ref: 7462285
Ref: c-api/exceptions PyErr_SyntaxLocationEx62608
Ref: 7562608
Ref: c-api/exceptions PyErr_SyntaxLocation63075
Ref: 7663075
Ref: c-api/exceptions PyErr_BadInternalCall63232
Ref: 7763232
Ref: c-api/exceptions PyErr_WarnEx63524
Ref: 7863524
Ref: c-api/exceptions PyErr_WarnExplicit65786
Ref: 7965786
Ref: c-api/exceptions PyErr_WarnFormat66431
Ref: 7a66431
Ref: c-api/exceptions PyErr_CheckSignals66746
Ref: 6f66746
Ref: c-api/exceptions PyErr_SetInterrupt67379
Ref: 7b67379
Ref: c-api/exceptions PySignal_SetWakeupFd67661
Ref: 7c67661
Ref: c-api/exceptions PyErr_NewException68169
Ref: 7d68169
Ref: c-api/exceptions PyErr_NewExceptionWithDoc69071
Ref: 7e69071
Ref: c-api/exceptions PyErr_WriteUnraisable69462
Ref: 7f69462
Node: Exception Objects70093
Ref: c-api/exceptions exception-objects70211
Ref: 8070211
Ref: c-api/exceptions PyException_GetTraceback70256
Ref: 8170256
Ref: c-api/exceptions PyException_SetTraceback70519
Ref: 8270519
Ref: c-api/exceptions PyException_GetContext70699
Ref: 8370699
Ref: c-api/exceptions PyException_SetContext71026
Ref: 8471026
Ref: c-api/exceptions PyException_GetCause71316
Ref: 8571316
Ref: c-api/exceptions PyException_SetCause71625
Ref: 8671625
Node: Unicode Exception Objects71901
Ref: c-api/exceptions unicode-exception-objects72045
Ref: 8772045
Ref: c-api/exceptions unicodeexceptions72045
Ref: 8872045
Ref: c-api/exceptions PyUnicodeDecodeError_Create72188
Ref: 8972188
Ref: c-api/exceptions PyUnicodeEncodeError_Create72563
Ref: 8a72563
Ref: c-api/exceptions PyUnicodeTranslateError_Create72944
Ref: 8b72944
Ref: c-api/exceptions PyUnicodeDecodeError_GetEncoding73283
Ref: 8c73283
Ref: c-api/exceptions PyUnicodeEncodeError_GetEncoding73368
Ref: 8d73368
Ref: c-api/exceptions PyUnicodeDecodeError_GetObject73522
Ref: 8e73522
Ref: c-api/exceptions PyUnicodeEncodeError_GetObject73595
Ref: 8f73595
Ref: c-api/exceptions PyUnicodeTranslateError_GetObject73668
Ref: 9073668
Ref: c-api/exceptions PyUnicodeDecodeError_GetStart73821
Ref: 9173821
Ref: c-api/exceptions PyUnicodeEncodeError_GetStart73916
Ref: 9273916
Ref: c-api/exceptions PyUnicodeTranslateError_GetStart74011
Ref: 9374011
Ref: c-api/exceptions PyUnicodeDecodeError_SetStart74279
Ref: 9474279
Ref: c-api/exceptions PyUnicodeEncodeError_SetStart74373
Ref: 9574373
Ref: c-api/exceptions PyUnicodeTranslateError_SetStart74467
Ref: 9674467
Ref: c-api/exceptions PyUnicodeDecodeError_GetEnd74684
Ref: 9774684
Ref: c-api/exceptions PyUnicodeEncodeError_GetEnd74775
Ref: 9874775
Ref: c-api/exceptions PyUnicodeTranslateError_GetEnd74866
Ref: 9974866
Ref: c-api/exceptions PyUnicodeDecodeError_SetEnd75124
Ref: 9a75124
Ref: c-api/exceptions PyUnicodeEncodeError_SetEnd75214
Ref: 9b75214
Ref: c-api/exceptions PyUnicodeTranslateError_SetEnd75304
Ref: 9c75304
Ref: c-api/exceptions PyUnicodeDecodeError_GetReason75512
Ref: 9d75512
Ref: c-api/exceptions PyUnicodeEncodeError_GetReason75585
Ref: 9e75585
Ref: c-api/exceptions PyUnicodeTranslateError_GetReason75658
Ref: 9f75658
Ref: c-api/exceptions PyUnicodeDecodeError_SetReason75811
Ref: a075811
Ref: c-api/exceptions PyUnicodeEncodeError_SetReason75908
Ref: a175908
Ref: c-api/exceptions PyUnicodeTranslateError_SetReason76005
Ref: a276005
Node: Recursion Control76227
Ref: c-api/exceptions recursion-control76373
Ref: a376373
Ref: c-api/exceptions Py_EnterRecursiveCall76673
Ref: a476673
Ref: c-api/exceptions Py_LeaveRecursiveCall77366
Ref: a677366
Ref: c-api/exceptions Py_ReprEnter77876
Ref: a777876
Ref: c-api/exceptions Py_ReprLeave78563
Ref: a878563
Node: Standard Exceptions78749
Ref: c-api/exceptions standard-exceptions78861
Ref: a978861
Ref: c-api/exceptions standardexceptions78861
Ref: aa78861
Node: Utilities81728
Ref: c-api/utilities doc81847
Ref: ab81847
Ref: c-api/utilities utilities81847
Ref: ac81847
Ref: c-api/utilities id181847
Ref: ad81847
Node: Operating System Utilities82371
Ref: c-api/sys os82480
Ref: ae82480
Ref: c-api/sys doc82480
Ref: af82480
Ref: c-api/sys operating-system-utilities82480
Ref: b082480
Ref: c-api/sys Py_FdIsInteractive82543
Ref: b182543
Ref: c-api/sys PyOS_AfterFork82998
Ref: b282998
Ref: c-api/sys PyOS_CheckStack83307
Ref: a583307
Ref: c-api/sys PyOS_getsig83682
Ref: b383682
Ref: c-api/sys PyOS_setsig83973
Ref: b483973
Node: System Functions84331
Ref: c-api/sys systemfunctions84464
Ref: b584464
Ref: c-api/sys system-functions84464
Ref: b684464
Ref: c-api/sys PySys_GetObject84737
Ref: b784737
Ref: c-api/sys PySys_GetFile84952
Ref: b884952
Ref: c-api/sys PySys_SetObject85179
Ref: b985179
Ref: c-api/sys PySys_ResetWarnOptions85409
Ref: ba85409
Ref: c-api/sys PySys_AddWarnOption85504
Ref: bb85504
Ref: c-api/sys PySys_AddWarnOptionUnicode85597
Ref: bc85597
Ref: c-api/sys PySys_SetPath85710
Ref: bd85710
Ref: c-api/sys PySys_WriteStdout85949
Ref: be85949
Ref: c-api/sys PySys_WriteStderr86786
Ref: bf86786
Ref: c-api/sys PySys_FormatStdout86943
Ref: c086943
Ref: c-api/sys PySys_FormatStderr87210
Ref: c287210
Ref: c-api/sys PySys_AddXOption87395
Ref: c387395
Ref: c-api/sys PySys_GetXOptions87614
Ref: c487614
Node: Process Control87875
Ref: c-api/sys process-control87999
Ref: c587999
Ref: c-api/sys processcontrol87999
Ref: c687999
Ref: c-api/sys Py_FatalError88040
Ref: c788040
Ref: c-api/sys Py_Exit88511
Ref: c888511
Ref: c-api/sys Py_AtExit88690
Ref: c988690
Node: Importing Modules89324
Ref: c-api/import importing89456
Ref: ca89456
Ref: c-api/import importing-modules89456
Ref: cb89456
Ref: c-api/import doc89456
Ref: cc89456
Ref: c-api/import PyImport_ImportModule89501
Ref: cd89501
Ref: c-api/import PyImport_ImportModuleNoBlock90500
Ref: cf90500
Ref: c-api/import PyImport_ImportModuleEx91100
Ref: ce91100
Ref: c-api/import PyImport_ImportModuleLevel91872
Ref: d091872
Ref: c-api/import PyImport_Import92562
Ref: d192562
Ref: c-api/import PyImport_ReloadModule93068
Ref: d293068
Ref: c-api/import PyImport_AddModule93329
Ref: d393329
Ref: c-api/import PyImport_ExecCodeModule94119
Ref: d494119
Ref: c-api/import PyImport_ExecCodeModuleEx95472
Ref: d595472
Ref: c-api/import PyImport_ExecCodeModuleWithPathnames95827
Ref: d695827
Ref: c-api/import PyImport_GetMagicNumber96205
Ref: d796205
Ref: c-api/import PyImport_GetMagicTag96464
Ref: d896464
Ref: c-api/import PyImport_GetModuleDict96633
Ref: d996633
Ref: c-api/import PyImport_GetImporter96864
Ref: da96864
Ref: c-api/import _PyImport_Init97415
Ref: db97415
Ref: c-api/import PyImport_Cleanup97517
Ref: dc97517
Ref: c-api/import _PyImport_Fini97612
Ref: dd97612
Ref: c-api/import _PyImport_FindExtension97712
Ref: de97712
Ref: c-api/import _PyImport_FixupExtension97808
Ref: df97808
Ref: c-api/import PyImport_ImportFrozenModule97905
Ref: e097905
Ref: c-api/import _frozen98332
Ref: e198332
Ref: c-api/import PyImport_FrozenModules98716
Ref: e298716
Ref: c-api/import PyImport_AppendInittab99105
Ref: e399105
Ref: c-api/import _inittab99640
Ref: e599640
Ref: c-api/import PyImport_ExtendInittab100205
Ref: e4100205
Ref: Importing Modules-Footnote-1100806
Node: Data marshalling support100853
Ref: c-api/marshal marshalling-utils101007
Ref: e6101007
Ref: c-api/marshal doc101007
Ref: e7101007
Ref: c-api/marshal data-marshalling-support101007
Ref: e8101007
Ref: c-api/marshal PyMarshal_WriteLongToFile101741
Ref: e9101741
Ref: c-api/marshal PyMarshal_WriteObjectToFile102050
Ref: ea102050
Ref: c-api/marshal PyMarshal_WriteObjectToString102246
Ref: eb102246
Ref: c-api/marshal PyMarshal_ReadLongFromFile102916
Ref: ec102916
Ref: c-api/marshal PyMarshal_ReadShortFromFile103163
Ref: ed103163
Ref: c-api/marshal PyMarshal_ReadObjectFromFile103412
Ref: ee103412
Ref: c-api/marshal PyMarshal_ReadLastObjectFromFile103698
Ref: ef103698
Ref: c-api/marshal PyMarshal_ReadObjectFromString104408
Ref: f0104408
Node: Parsing arguments and building values104765
Ref: c-api/arg arg-parsing104934
Ref: f1104934
Ref: c-api/arg doc104934
Ref: f2104934
Ref: c-api/arg parsing-arguments-and-building-values104934
Ref: f3104934
Node: Parsing arguments105630
Ref: c-api/arg parsing-arguments105757
Ref: f7105757
Node: Strings and buffers106469
Ref: c-api/arg strings-and-buffers106570
Ref: f8106570
Node: Numbers115979
Ref: c-api/arg numbers116102
Ref: ff116102
Node: Other objects118011
Ref: c-api/arg other-objects118128
Ref: 101118128
Node: API Functions122521
Ref: c-api/arg api-functions122622
Ref: 102122622
Ref: c-api/arg PyArg_ParseTuple122667
Ref: f4122667
Ref: c-api/arg PyArg_VaParse122960
Ref: 103122960
Ref: c-api/arg PyArg_ParseTupleAndKeywords123187
Ref: f5123187
Ref: c-api/arg PyArg_VaParseTupleAndKeywords123535
Ref: 104123535
Ref: c-api/arg PyArg_ValidateKeywordArguments123831
Ref: 105123831
Ref: c-api/arg PyArg_Parse124132
Ref: f6124132
Ref: c-api/arg PyArg_UnpackTuple124685
Ref: 106124685
Node: Building values126597
Ref: c-api/arg building-values126724
Ref: 108126724
Ref: c-api/arg Py_BuildValue126769
Ref: 19126769
Ref: c-api/arg Py_VaBuildValue133594
Ref: 109133594
Node: String conversion and formatting133810
Ref: c-api/conversion string-conversion-and-formatting133965
Ref: 10a133965
Ref: c-api/conversion doc133965
Ref: 10b133965
Ref: c-api/conversion string-conversion133965
Ref: 10c133965
Ref: c-api/conversion PyOS_snprintf134102
Ref: 10d134102
Ref: c-api/conversion PyOS_vsnprintf134357
Ref: 10e134357
Ref: c-api/conversion PyOS_string_to_double135985
Ref: 10f135985
Ref: c-api/conversion PyOS_double_to_string137607
Ref: 110137607
Ref: c-api/conversion PyOS_stricmp139097
Ref: 111139097
Ref: c-api/conversion PyOS_strnicmp139289
Ref: 112139289
Node: Reflection139511
Ref: c-api/reflection doc139665
Ref: 113139665
Ref: c-api/reflection reflection139665
Ref: 114139665
Ref: c-api/reflection id1139665
Ref: 115139665
Ref: c-api/reflection PyEval_GetBuiltins139696
Ref: 116139696
Ref: c-api/reflection PyEval_GetLocals139943
Ref: 117139943
Ref: c-api/reflection PyEval_GetGlobals140161
Ref: 118140161
Ref: c-api/reflection PyEval_GetFrame140381
Ref: 119140381
Ref: c-api/reflection PyFrame_GetLineNumber140575
Ref: 11a140575
Ref: c-api/reflection PyEval_GetFuncName140706
Ref: 11b140706
Ref: c-api/reflection PyEval_GetFuncDesc140885
Ref: 11c140885
Node: Codec registry and support functions141245
Ref: c-api/codec codec-registry-and-support-functions141358
Ref: 11d141358
Ref: c-api/codec codec-registry141358
Ref: 11e141358
Ref: c-api/codec doc141358
Ref: 11f141358
Ref: c-api/codec PyCodec_Register141441
Ref: 120141441
Ref: c-api/codec PyCodec_KnownEncoding141713
Ref: 121141713
Ref: c-api/codec PyCodec_Encode141882
Ref: 122141882
Ref: c-api/codec PyCodec_Decode142311
Ref: 123142311
Node: Codec lookup API142824
Ref: c-api/codec codec-lookup-api142982
Ref: 124142982
Ref: c-api/codec PyCodec_Encoder143282
Ref: 125143282
Ref: c-api/codec PyCodec_Decoder143403
Ref: 126143403
Ref: c-api/codec PyCodec_IncrementalEncoder143523
Ref: 127143523
Ref: c-api/codec PyCodec_IncrementalDecoder143696
Ref: 128143696
Ref: c-api/codec PyCodec_StreamReader143869
Ref: 129143869
Ref: c-api/codec PyCodec_StreamWriter144057
Ref: 12a144057
Node: Registry API for Unicode encoding error handlers144245
Ref: c-api/codec registry-api-for-unicode-encoding-error-handlers144403
Ref: 12b144403
Ref: c-api/codec PyCodec_RegisterError144514
Ref: 12c144514
Ref: c-api/codec PyCodec_LookupError145565
Ref: 12d145565
Ref: c-api/codec PyCodec_StrictErrors145829
Ref: 12e145829
Ref: c-api/codec PyCodec_IgnoreErrors145927
Ref: 12f145927
Ref: c-api/codec PyCodec_ReplaceErrors146049
Ref: 130146049
Ref: c-api/codec PyCodec_XMLCharRefReplaceErrors146174
Ref: 131146174
Ref: c-api/codec PyCodec_BackslashReplaceErrors146328
Ref: 132146328
Node: Abstract Objects Layer146491
Ref: c-api/abstract abstract146614
Ref: 133146614
Ref: c-api/abstract doc146614
Ref: 134146614
Ref: c-api/abstract abstract-objects-layer146614
Ref: 135146614
Node: Object Protocol147316
Ref: c-api/object object147426
Ref: 136147426
Ref: c-api/object doc147426
Ref: 137147426
Ref: c-api/object object-protocol147426
Ref: 138147426
Ref: c-api/object PyObject_Print147467
Ref: 139147467
Ref: c-api/object PyObject_HasAttr147809
Ref: 13a147809
Ref: c-api/object PyObject_HasAttrString148068
Ref: 13b148068
Ref: c-api/object PyObject_GetAttr148345
Ref: 13c148345
Ref: c-api/object PyObject_GetAttrString148667
Ref: 13d148667
Ref: c-api/object PyObject_GenericGetAttr148996
Ref: 13e148996
Ref: c-api/object PyObject_SetAttr149529
Ref: 13f149529
Ref: c-api/object PyObject_SetAttrString149816
Ref: 140149816
Ref: c-api/object PyObject_GenericSetAttr150111
Ref: 141150111
Ref: c-api/object PyObject_DelAttr150654
Ref: 142150654
Ref: c-api/object PyObject_DelAttrString150886
Ref: 143150886
Ref: c-api/object PyObject_RichCompare151136
Ref: 144151136
Ref: c-api/object PyObject_RichCompareBool151707
Ref: 145151707
Ref: c-api/object PyObject_Repr152393
Ref: 146152393
Ref: c-api/object PyObject_ASCII152719
Ref: 147152719
Ref: c-api/object PyObject_Str153144
Ref: 148153144
Ref: c-api/object PyObject_Bytes153514
Ref: 149153514
Ref: c-api/object PyObject_IsInstance153896
Ref: 14a153896
Ref: c-api/object PyObject_IsSubclass155448
Ref: 14b155448
Ref: c-api/object PyCallable_Check156009
Ref: 14c156009
Ref: c-api/object PyObject_Call156201
Ref: 14d156201
Ref: c-api/object PyObject_CallObject156795
Ref: 14e156795
Ref: c-api/object PyObject_CallFunction157244
Ref: 14f157244
Ref: c-api/object PyObject_CallMethod157912
Ref: 151157912
Ref: c-api/object PyObject_CallFunctionObjArgs158609
Ref: 150158609
Ref: c-api/object PyObject_CallMethodObjArgs159009
Ref: 152159009
Ref: c-api/object PyObject_Hash159507
Ref: 153159507
Ref: c-api/object PyObject_HashNotImplemented159839
Ref: 154159839
Ref: c-api/object PyObject_IsTrue160163
Ref: 155160163
Ref: c-api/object PyObject_Not160388
Ref: 156160388
Ref: c-api/object PyObject_Type160605
Ref: 157160605
Ref: c-api/object PyObject_TypeCheck161208
Ref: 158161208
Ref: c-api/object PyObject_Length161401
Ref: 159161401
Ref: c-api/object PyObject_Size161458
Ref: 15a161458
Ref: c-api/object PyObject_GetItem161759
Ref: 1a161759
Ref: c-api/object PyObject_SetItem162019
Ref: 17162019
Ref: c-api/object PyObject_DelItem162245
Ref: 15b162245
Ref: c-api/object PyObject_Dir162448
Ref: 15c162448
Ref: c-api/object PyObject_GetIter162966
Ref: 15d162966
Node: Number Protocol163318
Ref: c-api/number doc163454
Ref: 15e163454
Ref: c-api/number number163454
Ref: 15f163454
Ref: c-api/number number-protocol163454
Ref: 160163454
Ref: c-api/number PyNumber_Check163495
Ref: 161163495
Ref: c-api/number PyNumber_Add163666
Ref: 162163666
Ref: c-api/number PyNumber_Subtract163905
Ref: 163163905
Ref: c-api/number PyNumber_Multiply164161
Ref: 164164161
Ref: c-api/number PyNumber_FloorDivide164416
Ref: 165164416
Ref: c-api/number PyNumber_TrueDivide164670
Ref: 166164670
Ref: c-api/number PyNumber_Remainder165156
Ref: 167165156
Ref: c-api/number PyNumber_Divmod165421
Ref: 168165421
Ref: c-api/number PyNumber_Power165669
Ref: 169165669
Ref: c-api/number PyNumber_Negative166106
Ref: 16b166106
Ref: c-api/number PyNumber_Positive166326
Ref: 16c166326
Ref: c-api/number PyNumber_Absolute166531
Ref: 16d166531
Ref: c-api/number PyNumber_Invert166751
Ref: 16e166751
Ref: c-api/number PyNumber_Lshift166978
Ref: 16f166978
Ref: c-api/number PyNumber_Rshift167244
Ref: 170167244
Ref: c-api/number PyNumber_And167511
Ref: 171167511
Ref: c-api/number PyNumber_Xor167767
Ref: 172167767
Ref: c-api/number PyNumber_Or168031
Ref: 173168031
Ref: c-api/number PyNumber_InPlaceAdd168285
Ref: 174168285
Ref: c-api/number PyNumber_InPlaceSubtract168603
Ref: 175168603
Ref: c-api/number PyNumber_InPlaceMultiply168932
Ref: 176168932
Ref: c-api/number PyNumber_InPlaceFloorDivide169260
Ref: 177169260
Ref: c-api/number PyNumber_InPlaceTrueDivide169601
Ref: 178169601
Ref: c-api/number PyNumber_InPlaceRemainder170156
Ref: 179170156
Ref: c-api/number PyNumber_InPlacePower170484
Ref: 17a170484
Ref: c-api/number PyNumber_InPlaceLshift171050
Ref: 17b171050
Ref: c-api/number PyNumber_InPlaceRshift171395
Ref: 17c171395
Ref: c-api/number PyNumber_InPlaceAnd171741
Ref: 17d171741
Ref: c-api/number PyNumber_InPlaceXor172070
Ref: 17e172070
Ref: c-api/number PyNumber_InPlaceOr172413
Ref: 17f172413
Ref: c-api/number PyNumber_Long172740
Ref: 180172740
Ref: c-api/number PyNumber_Float172985
Ref: 181172985
Ref: c-api/number PyNumber_Index173230
Ref: 182173230
Ref: c-api/number PyNumber_ToBase173407
Ref: 183173407
Ref: c-api/number PyNumber_AsSsize_t173786
Ref: 184173786
Ref: c-api/number PyIndex_Check174467
Ref: 185174467
Node: Sequence Protocol174631
Ref: c-api/sequence doc174768
Ref: 186174768
Ref: c-api/sequence sequence-protocol174768
Ref: 187174768
Ref: c-api/sequence sequence174768
Ref: 188174768
Ref: c-api/sequence PySequence_Check174813
Ref: 189174813
Ref: c-api/sequence PySequence_Size174979
Ref: 18a174979
Ref: c-api/sequence PySequence_Length175036
Ref: 18b175036
Ref: c-api/sequence PySequence_Concat175296
Ref: 18c175296
Ref: c-api/sequence PySequence_Repeat175557
Ref: 18d175557
Ref: c-api/sequence PySequence_InPlaceConcat175844
Ref: 18e175844
Ref: c-api/sequence PySequence_InPlaceRepeat176180
Ref: 18f176180
Ref: c-api/sequence PySequence_GetItem176536
Ref: 1b176536
Ref: c-api/sequence PySequence_GetSlice176766
Ref: 190176766
Ref: c-api/sequence PySequence_SetItem177062
Ref: 16177062
Ref: c-api/sequence PySequence_DelItem177353
Ref: 191177353
Ref: c-api/sequence PySequence_SetSlice177556
Ref: 192177556
Ref: c-api/sequence PySequence_DelSlice177829
Ref: 193177829
Ref: c-api/sequence PySequence_Count178087
Ref: 194178087
Ref: c-api/sequence PySequence_Contains178398
Ref: 195178398
Ref: c-api/sequence PySequence_Index178675
Ref: 196178675
Ref: c-api/sequence PySequence_List178919
Ref: 197178919
Ref: c-api/sequence PySequence_Tuple179140
Ref: 198179140
Ref: c-api/sequence PySequence_Fast179535
Ref: 199179535
Ref: c-api/sequence PySequence_Fast_GET_ITEM179965
Ref: 19a179965
Ref: c-api/sequence PySequence_Fast_ITEMS180257
Ref: 19b180257
Ref: c-api/sequence PySequence_ITEM180655
Ref: 19c180655
Ref: c-api/sequence PySequence_Fast_GET_SIZE180998
Ref: 19d180998
Node: Mapping Protocol181386
Ref: c-api/mapping mapping-protocol181525
Ref: 19e181525
Ref: c-api/mapping doc181525
Ref: 19f181525
Ref: c-api/mapping mapping181525
Ref: 1a0181525
Ref: c-api/mapping PyMapping_Check181568
Ref: 1a1181568
Ref: c-api/mapping PyMapping_Size181732
Ref: 1a2181732
Ref: c-api/mapping PyMapping_Length181788
Ref: 1a3181788
Ref: c-api/mapping PyMapping_DelItemString182041
Ref: 1a4182041
Ref: c-api/mapping PyMapping_DelItem182265
Ref: 1a5182265
Ref: c-api/mapping PyMapping_HasKeyString182487
Ref: 1a6182487
Ref: c-api/mapping PyMapping_HasKey182742
Ref: 1a7182742
Ref: c-api/mapping PyMapping_Keys182983
Ref: 1a8182983
Ref: c-api/mapping PyMapping_Values183233
Ref: 1a9183233
Ref: c-api/mapping PyMapping_Items183488
Ref: 1aa183488
Ref: c-api/mapping PyMapping_GetItemString183801
Ref: 1ab183801
Ref: c-api/mapping PyMapping_SetItemString184074
Ref: 1ac184074
Node: Iterator Protocol184322
Ref: c-api/iter doc184459
Ref: 1ad184459
Ref: c-api/iter iterator-protocol184459
Ref: 1ae184459
Ref: c-api/iter iterator184459
Ref: 1af184459
Ref: c-api/iter PyIter_Check184583
Ref: 1b0184583
Ref: c-api/iter PyIter_Next184698
Ref: 1b1184698
Node: Buffer Protocol185716
Ref: c-api/buffer buffer-protocol185856
Ref: 1b2185856
Ref: c-api/buffer doc185856
Ref: 1b3185856
Ref: c-api/buffer bufferobjects185856
Ref: 1b4185856
Node: The buffer structure188232
Ref: c-api/buffer the-buffer-structure188349
Ref: 1b7188349
Ref: c-api/buffer Py_buffer189261
Ref: f9189261
Ref: c-api/buffer Py_buffer buf189283
Ref: 1b9189283
Ref: c-api/buffer Py_buffer readonly189462
Ref: 1ba189462
Ref: c-api/buffer Py_buffer ndim189803
Ref: 1bb189803
Ref: c-api/buffer Py_buffer shape189995
Ref: 1bc189995
Ref: c-api/buffer Py_buffer strides190269
Ref: 1bd190269
Ref: c-api/buffer Py_buffer suboffsets190464
Ref: 1be190464
Ref: c-api/buffer Py_buffer itemsize191703
Ref: 1bf191703
Ref: c-api/buffer Py_buffer internal192207
Ref: 1c1192207
Node: Buffer-related functions192583
Ref: c-api/buffer buffer-related-functions192700
Ref: 1c2192700
Ref: c-api/buffer PyObject_CheckBuffer192763
Ref: 1c3192763
Ref: c-api/buffer PyObject_GetBuffer192991
Ref: 1b6192991
Ref: c-api/buffer PyBUF_SIMPLE194590
Ref: 1c4194590
Ref: c-api/buffer PyBUF_WRITABLE195025
Ref: 1c5195025
Ref: c-api/buffer PyBUF_STRIDES195227
Ref: 1c6195227
Ref: c-api/buffer PyBUF_ND195715
Ref: 1c7195715
Ref: c-api/buffer PyBUF_C_CONTIGUOUS196064
Ref: 1c8196064
Ref: c-api/buffer PyBUF_F_CONTIGUOUS196101
Ref: 1c9196101
Ref: c-api/buffer PyBUF_ANY_CONTIGUOUS196138
Ref: 1ca196138
Ref: c-api/buffer PyBUF_INDIRECT196572
Ref: 1cb196572
Ref: c-api/buffer PyBUF_FORMAT196919
Ref: 1cc196919
Ref: c-api/buffer PyBUF_STRIDED197406
Ref: 1cd197406
Ref: c-api/buffer PyBUF_STRIDED_RO197507
Ref: 1ce197507
Ref: c-api/buffer PyBUF_RECORDS197594
Ref: 1cf197594
Ref: c-api/buffer PyBUF_RECORDS_RO197720
Ref: 1d0197720
Ref: c-api/buffer PyBUF_FULL197822
Ref: 1d1197822
Ref: c-api/buffer PyBUF_FULL_RO197946
Ref: 1d2197946
Ref: c-api/buffer PyBUF_CONTIG198046
Ref: 1d3198046
Ref: c-api/buffer PyBUF_CONTIG_RO198141
Ref: 1d4198141
Ref: c-api/buffer PyBuffer_Release198222
Ref: fb198222
Ref: c-api/buffer PyBuffer_SizeFromFormat198410
Ref: 1c0198410
Ref: c-api/buffer PyBuffer_IsContiguous198559
Ref: 1d5198559
Ref: c-api/buffer PyBuffer_FillContiguousStrides198842
Ref: 1d6198842
Ref: c-api/buffer PyBuffer_FillInfo199220
Ref: 1d7199220
Node: Old Buffer Protocol199597
Ref: c-api/objbuffer old-buffer-protocol199711
Ref: 1d8199711
Ref: c-api/objbuffer doc199711
Ref: 1d9199711
Ref: c-api/objbuffer PyObject_AsCharBuffer200455
Ref: 1da200455
Ref: c-api/objbuffer PyObject_AsReadBuffer200905
Ref: 1db200905
Ref: c-api/objbuffer PyObject_CheckReadBuffer201348
Ref: 1dc201348
Ref: c-api/objbuffer PyObject_AsWriteBuffer201516
Ref: 1dd201516
Node: Concrete Objects Layer201929
Ref: c-api/concrete concrete-objects-layer202082
Ref: 1de202082
Ref: c-api/concrete concrete202082
Ref: 1df202082
Ref: c-api/concrete doc202082
Ref: 1e0202082
Node: Fundamental Objects204412
Ref: c-api/concrete fundamental-objects204526
Ref: 1e2204526
Ref: c-api/concrete fundamental204526
Ref: 1e3204526
Node: Type Objects204699
Ref: c-api/type type-objects204803
Ref: 1e4204803
Ref: c-api/type doc204803
Ref: 1e5204803
Ref: c-api/type typeobjects204803
Ref: 1e6204803
Ref: c-api/type PyTypeObject204842
Ref: b204842
Ref: c-api/type PyType_Type204937
Ref: 1e7204937
Ref: c-api/type PyType_Check205081
Ref: 1e8205081
Ref: c-api/type PyType_CheckExact205294
Ref: 1e9205294
Ref: c-api/type PyType_ClearCache205486
Ref: 1ea205486
Ref: c-api/type PyType_GetFlags205607
Ref: 1eb205607
Ref: c-api/type PyType_Modified205957
Ref: 1ec205957
Ref: c-api/type PyType_HasFeature206213
Ref: 1ed206213
Ref: c-api/type PyType_IS_GC206399
Ref: 1ee206399
Ref: c-api/type PyType_IsSubtype206585
Ref: 1f0206585
Ref: c-api/type PyType_GenericAlloc206703
Ref: 1f1206703
Ref: c-api/type PyType_GenericNew206855
Ref: 1f2206855
Ref: c-api/type PyType_Ready207018
Ref: 1f3207018
Node: The None Object207346
Ref: c-api/none noneobject207450
Ref: 1f4207450
Ref: c-api/none the-none-object207450
Ref: 1f5207450
Ref: c-api/none doc207450
Ref: 1f6207450
Ref: c-api/none Py_None207739
Ref: 16a207739
Ref: c-api/none Py_RETURN_NONE207953
Ref: 1f7207953
Node: Numeric Objects208132
Ref: c-api/concrete numericobjects208271
Ref: 1f8208271
Ref: c-api/concrete numeric-objects208271
Ref: 1f9208271
Node: Integer Objects208416
Ref: c-api/long doc208519
Ref: 1fa208519
Ref: c-api/long longobjects208519
Ref: 1fb208519
Ref: c-api/long integer-objects208519
Ref: 1fc208519
Ref: c-api/long PyLongObject208639
Ref: 1fd208639
Ref: c-api/long PyLong_Type208746
Ref: 1fe208746
Ref: c-api/long PyLong_Check208934
Ref: 1ff208934
Ref: c-api/long PyLong_CheckExact209091
Ref: 200209091
Ref: c-api/long PyLong_FromLong209258
Ref: 15209258
Ref: c-api/long PyLong_FromUnsignedLong209779
Ref: 201209779
Ref: c-api/long PyLong_FromSsize_t209986
Ref: 202209986
Ref: c-api/long PyLong_FromSize_t210147
Ref: 203210147
Ref: c-api/long PyLong_FromLongLong210299
Ref: 204210299
Ref: c-api/long PyLong_FromUnsignedLongLong210497
Ref: 205210497
Ref: c-api/long PyLong_FromDouble210731
Ref: 206210731
Ref: c-api/long PyLong_FromString210929
Ref: 207210929
Ref: c-api/long PyLong_FromUnicode211820
Ref: 208211820
Ref: c-api/long PyLong_FromVoidPtr212184
Ref: 209212184
Ref: c-api/long PyLong_AsLong212433
Ref: 20b212433
Ref: c-api/long PyLong_AsLongAndOverflow212747
Ref: 20c212747
Ref: c-api/long PyLong_AsLongLongAndOverflow213222
Ref: 20d213222
Ref: c-api/long PyLong_AsSsize_t213747
Ref: 20e213747
Ref: c-api/long PyLong_AsUnsignedLong213996
Ref: 20f213996
Ref: c-api/long PyLong_AsSize_t214226
Ref: 210214226
Ref: c-api/long PyLong_AsLongLong214455
Ref: 211214455
Ref: c-api/long PyLong_AsUnsignedLongLong214687
Ref: 212214687
Ref: c-api/long PyLong_AsUnsignedLongMask215084
Ref: 213215084
Ref: c-api/long PyLong_AsUnsignedLongLongMask215247
Ref: 214215247
Ref: c-api/long PyLong_AsDouble215437
Ref: 215215437
Ref: c-api/long PyLong_AsVoidPtr215707
Ref: 20a215707
Node: Boolean Objects216025
Ref: c-api/bool boolean-objects216159
Ref: 216216159
Ref: c-api/bool doc216159
Ref: 217216159
Ref: c-api/bool boolobjects216159
Ref: 218216159
Ref: c-api/bool PyBool_Check216447
Ref: 219216447
Ref: c-api/bool Py_False216545
Ref: 21a216545
Ref: c-api/bool Py_True216737
Ref: 21b216737
Ref: c-api/bool Py_RETURN_FALSE216927
Ref: 21c216927
Ref: c-api/bool Py_RETURN_TRUE217045
Ref: 21d217045
Ref: c-api/bool PyBool_FromLong217161
Ref: 21e217161
Node: Floating Point Objects217345
Ref: c-api/float floating-point-objects217486
Ref: 21f217486
Ref: c-api/float doc217486
Ref: 220217486
Ref: c-api/float floatobjects217486
Ref: 221217486
Ref: c-api/float PyFloatObject217545
Ref: 222217545
Ref: c-api/float PyFloat_Type217660
Ref: 223217660
Ref: c-api/float PyFloat_Check217858
Ref: 224217858
Ref: c-api/float PyFloat_CheckExact218018
Ref: 225218018
Ref: c-api/float PyFloat_FromString218188
Ref: 226218188
Ref: c-api/float PyFloat_FromDouble218395
Ref: 227218395
Ref: c-api/float PyFloat_AsDouble218571
Ref: 228218571
Ref: c-api/float PyFloat_AS_DOUBLE218868
Ref: 229218868
Ref: c-api/float PyFloat_GetInfo219033
Ref: 22a219033
Ref: c-api/float PyFloat_GetMax219267
Ref: 22b219267
Ref: c-api/float PyFloat_GetMin219390
Ref: 22c219390
Ref: c-api/float PyFloat_ClearFreeList219512
Ref: 22d219512
Node: Complex Number Objects219647
Ref: c-api/complex doc219764
Ref: 22e219764
Ref: c-api/complex complexobjects219764
Ref: 22f219764
Ref: c-api/complex complex-number-objects219764
Ref: 230219764
Node: Complex Numbers as C Structures220192
Ref: c-api/complex complex-numbers-as-c-structures220336
Ref: 231220336
Ref: c-api/complex Py_complex220619
Ref: 100220619
Ref: c-api/complex _Py_c_sum221008
Ref: 232221008
Ref: c-api/complex _Py_c_diff221183
Ref: 233221183
Ref: c-api/complex _Py_c_neg221380
Ref: 234221380
Ref: c-api/complex _Py_c_prod221553
Ref: 235221553
Ref: c-api/complex _Py_c_quot221743
Ref: 236221743
Ref: c-api/complex _Py_c_pow221940
Ref: 237221940
Node: Complex Numbers as Python Objects222118
Ref: c-api/complex complex-numbers-as-python-objects222262
Ref: 238222262
Ref: c-api/complex PyComplexObject222347
Ref: 239222347
Ref: c-api/complex PyComplex_Type222464
Ref: 23a222464
Ref: c-api/complex PyComplex_Check222663
Ref: 23b222663
Ref: c-api/complex PyComplex_CheckExact222829
Ref: 23c222829
Ref: c-api/complex PyComplex_FromCComplex223005
Ref: 23d223005
Ref: c-api/complex PyComplex_FromDoubles223196
Ref: 23e223196
Ref: c-api/complex PyComplex_RealAsDouble223399
Ref: 23f223399
Ref: c-api/complex PyComplex_ImagAsDouble223512
Ref: 240223512
Ref: c-api/complex PyComplex_AsCComplex223630
Ref: 241223630
Node: Sequence Objects223947
Ref: c-api/concrete sequence-objects224082
Ref: 242224082
Ref: c-api/concrete sequenceobjects224082
Ref: 243224082
Node: Bytes Objects224428
Ref: c-api/bytes bytes-objects224533
Ref: 244224533
Ref: c-api/bytes doc224533
Ref: 245224533
Ref: c-api/bytes bytesobjects224533
Ref: 246224533
Ref: c-api/bytes PyBytesObject224685
Ref: 247224685
Ref: c-api/bytes PyBytes_Type224791
Ref: 248224791
Ref: c-api/bytes PyBytes_Check224972
Ref: 249224972
Ref: c-api/bytes PyBytes_CheckExact225126
Ref: 24a225126
Ref: c-api/bytes PyBytes_FromString225291
Ref: 24b225291
Ref: c-api/bytes PyBytes_FromStringAndSize225531
Ref: 24c225531
Ref: c-api/bytes PyBytes_FromFormat225829
Ref: 24d225829
Ref: c-api/bytes PyBytes_FromFormatV228476
Ref: 24e228476
Ref: c-api/bytes PyBytes_FromObject228669
Ref: 24f228669
Ref: c-api/bytes PyBytes_Size228822
Ref: 250228822
Ref: c-api/bytes PyBytes_GET_SIZE228934
Ref: 251228934
Ref: c-api/bytes PyBytes_AsString229072
Ref: 252229072
Ref: c-api/bytes PyBytes_AS_STRING229543
Ref: 253229543
Ref: c-api/bytes PyBytes_AsStringAndSize229686
Ref: 254229686
Ref: c-api/bytes PyBytes_Concat230460
Ref: 255230460
Ref: c-api/bytes PyBytes_ConcatAndDel230948
Ref: 256230948
Ref: c-api/bytes _PyBytes_Resize231210
Ref: 257231210
Node: Byte Array Objects232032
Ref: c-api/bytearray bytearrayobjects232172
Ref: 258232172
Ref: c-api/bytearray doc232172
Ref: 259232172
Ref: c-api/bytearray byte-array-objects232172
Ref: 25a232172
Ref: c-api/bytearray PyByteArrayObject232223
Ref: 25b232223
Ref: c-api/bytearray PyByteArray_Type232337
Ref: 25c232337
Node: Type check macros232603
Ref: c-api/bytearray type-check-macros232716
Ref: 25d232716
Ref: c-api/bytearray PyByteArray_Check232769
Ref: 25e232769
Ref: c-api/bytearray PyByteArray_CheckExact232935
Ref: 25f232935
Node: Direct API functions233112
Ref: c-api/bytearray direct-api-functions233240
Ref: 260233240
Ref: c-api/bytearray PyByteArray_FromObject233299
Ref: 261233299
Ref: c-api/bytearray PyByteArray_FromStringAndSize233463
Ref: 262233463
Ref: c-api/bytearray PyByteArray_Concat233676
Ref: 263233676
Ref: c-api/bytearray PyByteArray_Size233833
Ref: 264233833
Ref: c-api/bytearray PyByteArray_AsString233973
Ref: 265233973
Ref: c-api/bytearray PyByteArray_Resize234137
Ref: 266234137
Node: Macros234282
Ref: c-api/bytearray macros234384
Ref: 267234384
Ref: c-api/bytearray PyByteArray_AS_STRING234483
Ref: 268234483
Ref: c-api/bytearray PyByteArray_GET_SIZE234607
Ref: 269234607
Node: Unicode Objects and Codecs234731
Ref: c-api/unicode unicode-objects-and-codecs234871
Ref: 26a234871
Ref: c-api/unicode doc234871
Ref: 26b234871
Ref: c-api/unicode unicodeobjects234871
Ref: 26c234871
Node: Unicode Objects235425
Ref: c-api/unicode unicode-objects235539
Ref: 26d235539
Node: Unicode Type235714
Ref: c-api/unicode unicode-type235827
Ref: 26e235827
Ref: c-api/unicode Py_UNICODE235959
Ref: fd235959
Ref: c-api/unicode PyUnicodeObject236959
Ref: 26f236959
Ref: c-api/unicode PyUnicode_Type237069
Ref: 270237069
Ref: c-api/unicode PyUnicode_Check237374
Ref: 271237374
Ref: c-api/unicode PyUnicode_CheckExact237522
Ref: 272237522
Ref: c-api/unicode PyUnicode_GET_SIZE237673
Ref: 273237673
Ref: c-api/unicode PyUnicode_GET_DATA_SIZE237835
Ref: 274237835
Ref: c-api/unicode PyUnicode_AS_UNICODE238029
Ref: 275238029
Ref: c-api/unicode PyUnicode_AS_DATA238245
Ref: 276238245
Ref: c-api/unicode PyUnicode_ClearFreeList238430
Ref: 277238430
Node: Unicode Character Properties238544
Ref: c-api/unicode unicode-character-properties238682
Ref: 278238682
Ref: c-api/unicode Py_UNICODE_ISSPACE238945
Ref: 279238945
Ref: c-api/unicode Py_UNICODE_ISLOWER239073
Ref: 27a239073
Ref: c-api/unicode Py_UNICODE_ISUPPER239200
Ref: 27b239200
Ref: c-api/unicode Py_UNICODE_ISTITLE239328
Ref: 27c239328
Ref: c-api/unicode Py_UNICODE_ISLINEBREAK239455
Ref: 27d239455
Ref: c-api/unicode Py_UNICODE_ISDECIMAL239586
Ref: 27e239586
Ref: c-api/unicode Py_UNICODE_ISDIGIT239713
Ref: 27f239713
Ref: c-api/unicode Py_UNICODE_ISNUMERIC239836
Ref: 280239836
Ref: c-api/unicode Py_UNICODE_ISALPHA239963
Ref: 281239963
Ref: c-api/unicode Py_UNICODE_ISALNUM240092
Ref: 282240092
Ref: c-api/unicode Py_UNICODE_ISPRINTABLE240228
Ref: 283240228
Ref: c-api/unicode Py_UNICODE_TOLOWER240850
Ref: 284240850
Ref: c-api/unicode Py_UNICODE_TOUPPER240969
Ref: 285240969
Ref: c-api/unicode Py_UNICODE_TOTITLE241088
Ref: 286241088
Ref: c-api/unicode Py_UNICODE_TODECIMAL241207
Ref: 287241207
Ref: c-api/unicode Py_UNICODE_TODIGIT241423
Ref: 288241423
Ref: c-api/unicode Py_UNICODE_TONUMERIC241633
Ref: 289241633
Node: Plain Py_UNICODE241831
Ref: c-api/unicode plain-py-unicode241977
Ref: 28a241977
Ref: c-api/unicode PyUnicode_FromUnicode242115
Ref: 28b242115
Ref: c-api/unicode PyUnicode_FromStringAndSize242686
Ref: 28c242686
Ref: c-api/unicode PyUnicode_FromString243258
Ref: 28d243258
Ref: c-api/unicode PyUnicode_FromFormat243411
Ref: 6a243411
Ref: c-api/unicode PyUnicode_FromFormatV247644
Ref: c1247644
Ref: c-api/unicode PyUnicode_TransformDecimalToASCII247840
Ref: 28e247840
Ref: c-api/unicode PyUnicode_AsUnicode248165
Ref: 28f248165
Ref: c-api/unicode PyUnicode_AsUnicodeCopy248385
Ref: 290248385
Ref: c-api/unicode PyUnicode_GetSize248737
Ref: 291248737
Ref: c-api/unicode PyUnicode_FromEncodedObject248849
Ref: 292248849
Ref: c-api/unicode PyUnicode_FromObject249612
Ref: 293249612
Node: File System Encoding250124
Ref: c-api/unicode file-system-encoding250257
Ref: 294250257
Ref: c-api/unicode PyUnicode_FSConverter250665
Ref: fc250665
Ref: c-api/unicode PyUnicode_FSDecoder251172
Ref: 296251172
Ref: c-api/unicode PyUnicode_DecodeFSDefaultAndSize251527
Ref: 297251527
Ref: c-api/unicode PyUnicode_DecodeFSDefault251924
Ref: 298251924
Ref: c-api/unicode PyUnicode_EncodeFSDefault252401
Ref: 295252401
Ref: File System Encoding-Footnote-1252789
Node: wchar_t Support252836
Ref: c-api/unicode wchar-t-support252944
Ref: 299252944
Ref: c-api/unicode PyUnicode_FromWideChar253044
Ref: 29a253044
Ref: c-api/unicode PyUnicode_AsWideChar253392
Ref: 29b253392
Ref: c-api/unicode PyUnicode_AsWideCharString254006
Ref: 29c254006
Node: Built-in Codecs254575
Ref: c-api/unicode builtincodecs254724
Ref: 29d254724
Ref: c-api/unicode built-in-codecs254724
Ref: 29e254724
Node: Generic Codecs256119
Ref: c-api/unicode generic-codecs256218
Ref: 29f256218
Ref: c-api/unicode PyUnicode_Decode256300
Ref: 2a0256300
Ref: c-api/unicode PyUnicode_Encode256807
Ref: 2a1256807
Ref: c-api/unicode PyUnicode_AsEncodedString257345
Ref: 2a2257345
Node: UTF-8 Codecs257838
Ref: c-api/unicode utf-8-codecs257959
Ref: 2a3257959
Ref: c-api/unicode PyUnicode_DecodeUTF8258035
Ref: 2a4258035
Ref: c-api/unicode PyUnicode_DecodeUTF8Stateful258333
Ref: 2a5258333
Ref: c-api/unicode PyUnicode_EncodeUTF8258818
Ref: 2a6258818
Ref: c-api/unicode PyUnicode_AsUTF8String259151
Ref: 2a7259151
Node: UTF-32 Codecs259438
Ref: c-api/unicode utf-32-codecs259558
Ref: 2a8259558
Ref: c-api/unicode PyUnicode_DecodeUTF32259639
Ref: 2a9259639
Ref: c-api/unicode PyUnicode_DecodeUTF32Stateful260806
Ref: 2aa260806
Ref: c-api/unicode PyUnicode_EncodeUTF32261384
Ref: 2ab261384
Ref: c-api/unicode PyUnicode_AsUTF32String262144
Ref: 2ac262144
Node: UTF-16 Codecs262438
Ref: c-api/unicode utf-16-codecs262558
Ref: 2ad262558
Ref: c-api/unicode PyUnicode_DecodeUTF16262639
Ref: 2ae262639
Ref: c-api/unicode PyUnicode_DecodeUTF16Stateful263820
Ref: 2af263820
Ref: c-api/unicode PyUnicode_EncodeUTF16264442
Ref: 2b0264442
Ref: c-api/unicode PyUnicode_AsUTF16String265362
Ref: 2b1265362
Node: UTF-7 Codecs265691
Ref: c-api/unicode utf-7-codecs265819
Ref: 2b2265819
Ref: c-api/unicode PyUnicode_DecodeUTF7265897
Ref: 2b3265897
Ref: c-api/unicode PyUnicode_DecodeUTF7Stateful266161
Ref: 2b4266161
Ref: c-api/unicode PyUnicode_EncodeUTF7266615
Ref: 2b5266615
Node: Unicode-Escape Codecs267218
Ref: c-api/unicode unicode-escape-codecs267358
Ref: 2b6267358
Ref: c-api/unicode PyUnicode_DecodeUnicodeEscape267465
Ref: 2b7267465
Ref: c-api/unicode PyUnicode_EncodeUnicodeEscape267782
Ref: 2b8267782
Ref: c-api/unicode PyUnicode_AsUnicodeEscapeString268110
Ref: 2b9268110
Node: Raw-Unicode-Escape Codecs268425
Ref: c-api/unicode raw-unicode-escape-codecs268567
Ref: 2ba268567
Ref: c-api/unicode PyUnicode_DecodeRawUnicodeEscape268686
Ref: 2bb268686
Ref: c-api/unicode PyUnicode_EncodeRawUnicodeEscape269010
Ref: 2bc269010
Ref: c-api/unicode PyUnicode_AsRawUnicodeEscapeString269365
Ref: 2bd269365
Node: Latin-1 Codecs269686
Ref: c-api/unicode latin-1-codecs269819
Ref: 2be269819
Ref: c-api/unicode PyUnicode_DecodeLatin1270016
Ref: 2bf270016
Ref: c-api/unicode PyUnicode_EncodeLatin1270319
Ref: 2c0270319
Ref: c-api/unicode PyUnicode_AsLatin1String270652
Ref: 2c1270652
Node: ASCII Codecs270943
Ref: c-api/unicode ascii-codecs271071
Ref: 2c2271071
Ref: c-api/unicode PyUnicode_DecodeASCII271218
Ref: 2c3271218
Ref: c-api/unicode PyUnicode_EncodeASCII271518
Ref: 2c4271518
Ref: c-api/unicode PyUnicode_AsASCIIString271848
Ref: 2c5271848
Node: Character Map Codecs272136
Ref: c-api/unicode character-map-codecs272273
Ref: 2c6272273
Ref: c-api/unicode PyUnicode_DecodeCharmap273387
Ref: 2c7273387
Ref: c-api/unicode PyUnicode_EncodeCharmap274018
Ref: 2c8274018
Ref: c-api/unicode PyUnicode_AsCharmapString274390
Ref: 2c9274390
Ref: c-api/unicode PyUnicode_TranslateCharmap274802
Ref: 2ca274802
Node: MBCS codecs for Windows275579
Ref: c-api/unicode mbcs-codecs-for-windows275719
Ref: 2cb275719
Ref: c-api/unicode PyUnicode_DecodeMBCS276078
Ref: 2cc276078
Ref: c-api/unicode PyUnicode_DecodeMBCSStateful276376
Ref: 2cd276376
Ref: c-api/unicode PyUnicode_EncodeMBCS276784
Ref: 2ce276784
Ref: c-api/unicode PyUnicode_AsMBCSString277112
Ref: 2cf277112
Node: Methods & Slots277398
Ref: c-api/unicode methods-slots277509
Ref: 2d0277509
Node: Methods and Slot Functions277560
Ref: c-api/unicode unicodemethodsandslots277685
Ref: 2d1277685
Ref: c-api/unicode methods-and-slot-functions277685
Ref: 2d2277685
Ref: c-api/unicode PyUnicode_Concat278002
Ref: 2d3278002
Ref: c-api/unicode PyUnicode_Split278178
Ref: 2d4278178
Ref: c-api/unicode PyUnicode_Splitlines278635
Ref: 2d5278635
Ref: c-api/unicode PyUnicode_Translate278982
Ref: 2d6278982
Ref: c-api/unicode PyUnicode_Join279727
Ref: 2d7279727
Ref: c-api/unicode PyUnicode_Tailmatch279957
Ref: 2d8279957
Ref: c-api/unicode PyUnicode_Find280312
Ref: 2d9280312
Ref: c-api/unicode PyUnicode_Count280835
Ref: 2da280835
Ref: c-api/unicode PyUnicode_Replace281084
Ref: 2db281084
Ref: c-api/unicode PyUnicode_Compare281427
Ref: 2dc281427
Ref: c-api/unicode PyUnicode_CompareWithASCIIString281604
Ref: 2dd281604
Ref: c-api/unicode PyUnicode_RichCompare281988
Ref: 2de281988
Ref: c-api/unicode PyUnicode_Format282608
Ref: 2df282608
Ref: c-api/unicode PyUnicode_Contains282871
Ref: 2e0282871
Ref: c-api/unicode PyUnicode_InternInPlace283170
Ref: 2e1283170
Ref: c-api/unicode PyUnicode_InternFromString283948
Ref: 2e2283948
Node: Tuple Objects284288
Ref: c-api/tuple tuple-objects284422
Ref: 2e3284422
Ref: c-api/tuple tupleobjects284422
Ref: 2e4284422
Ref: c-api/tuple doc284422
Ref: 2e5284422
Ref: c-api/tuple PyTupleObject284463
Ref: 2e6284463
Ref: c-api/tuple PyTuple_Type284569
Ref: 2e7284569
Ref: c-api/tuple PyTuple_Check284750
Ref: 2e8284750
Ref: c-api/tuple PyTuple_CheckExact284893
Ref: 2e9284893
Ref: c-api/tuple PyTuple_New285047
Ref: 2ea285047
Ref: c-api/tuple PyTuple_Pack285206
Ref: 2eb285206
Ref: c-api/tuple PyTuple_Size285550
Ref: 2ec285550
Ref: c-api/tuple PyTuple_GET_SIZE285684
Ref: 2ed285684
Ref: c-api/tuple PyTuple_GetItem285866
Ref: 2ee285866
Ref: c-api/tuple PyTuple_GET_ITEM286140
Ref: 2ef286140
Ref: c-api/tuple PyTuple_GetSlice286338
Ref: 2f0286338
Ref: c-api/tuple PyTuple_SetItem286579
Ref: 14286579
Ref: c-api/tuple PyTuple_SET_ITEM286845
Ref: 2f1286845
Ref: c-api/tuple _PyTuple_Resize287124
Ref: 2f2287124
Ref: c-api/tuple PyTuple_ClearFreeList287990
Ref: 2f3287990
Node: List Objects288102
Ref: c-api/list list-objects288201
Ref: 2f4288201
Ref: c-api/list doc288201
Ref: 2f5288201
Ref: c-api/list listobjects288201
Ref: 2f6288201
Ref: c-api/list PyListObject288240
Ref: 2f7288240
Ref: c-api/list PyList_Type288339
Ref: 2f8288339
Ref: c-api/list PyList_Check288520
Ref: 2f9288520
Ref: c-api/list PyList_CheckExact288660
Ref: 2fa288660
Ref: c-api/list PyList_New288811
Ref: 18288811
Ref: c-api/list PyList_Size289310
Ref: 2fb289310
Ref: c-api/list PyList_GET_SIZE289477
Ref: 2fc289477
Ref: c-api/list PyList_GetItem289607
Ref: 1c289607
Ref: c-api/list PyList_GET_ITEM289989
Ref: 2fd289989
Ref: c-api/list PyList_SetItem290174
Ref: 13290174
Ref: c-api/list PyList_SET_ITEM290537
Ref: 2fe290537
Ref: c-api/list PyList_Insert291047
Ref: 2ff291047
Ref: c-api/list PyList_Append291343
Ref: 300291343
Ref: c-api/list PyList_GetSlice291588
Ref: 301291588
Ref: c-api/list PyList_SetSlice291988
Ref: 302291988
Ref: c-api/list PyList_Sort292451
Ref: 303292451
Ref: c-api/list PyList_Reverse292625
Ref: 304292625
Ref: c-api/list PyList_AsTuple292812
Ref: 305292812
Node: Mapping Objects293006
Ref: c-api/concrete mapping-objects293139
Ref: 306293139
Ref: c-api/concrete mapobjects293139
Ref: 307293139
Node: Dictionary Objects293213
Ref: c-api/dict dictionary-objects293295
Ref: 308293295
Ref: c-api/dict doc293295
Ref: 309293295
Ref: c-api/dict dictobjects293295
Ref: 30a293295
Ref: c-api/dict PyDictObject293346
Ref: 30b293346
Ref: c-api/dict PyDict_Type293456
Ref: 30c293456
Ref: c-api/dict PyDict_Check293648
Ref: 1e1293648
Ref: c-api/dict PyDict_CheckExact293788
Ref: 30d293788
Ref: c-api/dict PyDict_New293939
Ref: 30e293939
Ref: c-api/dict PyDictProxy_New294073
Ref: 30f294073
Ref: c-api/dict PyDict_Clear294366
Ref: 310294366
Ref: c-api/dict PyDict_Contains294473
Ref: 311294473
Ref: c-api/dict PyDict_Copy294750
Ref: 312294750
Ref: c-api/dict PyDict_SetItem294919
Ref: 313294919
Ref: c-api/dict PyDict_SetItemString295194
Ref: 314295194
Ref: c-api/dict PyDict_DelItem295505
Ref: 315295505
Ref: c-api/dict PyDict_DelItemString295739
Ref: 316295739
Ref: c-api/dict PyDict_GetItem295941
Ref: 317295941
Ref: c-api/dict PyDict_GetItemWithError296211
Ref: 318296211
Ref: c-api/dict PyDict_GetItemString296529
Ref: 319296529
Ref: c-api/dict PyDict_Items296788
Ref: 31a296788
Ref: c-api/dict PyDict_Keys296967
Ref: 31b296967
Ref: c-api/dict PyDict_Values297144
Ref: 31c297144
Ref: c-api/dict PyDict_Size297329
Ref: 31d297329
Ref: c-api/dict PyDict_Next297488
Ref: 31e297488
Ref: c-api/dict PyDict_Merge299357
Ref: 31f299357
Ref: c-api/dict PyDict_Update299895
Ref: 320299895
Ref: c-api/dict PyDict_MergeFromSeq2300109
Ref: 321300109
Node: Other Objects300779
Ref: c-api/concrete other-objects300887
Ref: 322300887
Ref: c-api/concrete otherobjects300887
Ref: 323300887
Node: Set Objects301256
Ref: c-api/set set-objects301354
Ref: 324301354
Ref: c-api/set doc301354
Ref: 325301354
Ref: c-api/set setobjects301354
Ref: 326301354
Ref: c-api/set PySetObject302097
Ref: 327302097
Ref: c-api/set PySet_Type302706
Ref: 328302706
Ref: c-api/set PyFrozenSet_Type302839
Ref: 329302839
Ref: c-api/set PySet_Check303132
Ref: 32a303132
Ref: c-api/set PyFrozenSet_Check303250
Ref: 32b303250
Ref: c-api/set PyAnySet_Check303385
Ref: 32c303385
Ref: c-api/set PyAnySet_CheckExact303534
Ref: 32d303534
Ref: c-api/set PyFrozenSet_CheckExact303694
Ref: 32e303694
Ref: c-api/set PySet_New303839
Ref: 32f303839
Ref: c-api/set PyFrozenSet_New304255
Ref: 330304255
Ref: c-api/set PySet_Size304742
Ref: 331304742
Ref: c-api/set PySet_GET_SIZE304996
Ref: 332304996
Ref: c-api/set PySet_Contains305126
Ref: 333305126
Ref: c-api/set PySet_Add305573
Ref: 334305573
Ref: c-api/set PySet_Discard306227
Ref: 335306227
Ref: c-api/set PySet_Pop306730
Ref: 336306730
Ref: c-api/set PySet_Clear307080
Ref: 337307080
Node: Function Objects307173
Ref: c-api/function id1307303
Ref: 338307303
Ref: c-api/function doc307303
Ref: 339307303
Ref: c-api/function function-objects307303
Ref: 33a307303
Ref: c-api/function PyFunctionObject307407
Ref: 33b307407
Ref: c-api/function PyFunction_Type307478
Ref: 33c307478
Ref: c-api/function PyFunction_Check307688
Ref: 33d307688
Ref: c-api/function PyFunction_New307865
Ref: 33e307865
Ref: c-api/function PyFunction_GetCode308310
Ref: 33f308310
Ref: c-api/function PyFunction_GetGlobals308481
Ref: 340308481
Ref: c-api/function PyFunction_GetModule308667
Ref: 341308667
Ref: c-api/function PyFunction_GetDefaults308953
Ref: 342308953
Ref: c-api/function PyFunction_SetDefaults309176
Ref: 343309176
Ref: c-api/function PyFunction_GetClosure309434
Ref: 344309434
Ref: c-api/function PyFunction_SetClosure309656
Ref: 345309656
Ref: c-api/function PyFunction_GetAnnotations309923
Ref: 346309923
Ref: c-api/function PyFunction_SetAnnotations310097
Ref: 347310097
Node: Instance Method Objects310357
Ref: c-api/method instance-method-objects310490
Ref: 348310490
Ref: c-api/method doc310490
Ref: 349310490
Ref: c-api/method instancemethod-objects310490
Ref: 34a310490
Ref: c-api/method PyInstanceMethod_Type310746
Ref: 34c310746
Ref: c-api/method PyInstanceMethod_Check310930
Ref: 34d310930
Ref: c-api/method PyInstanceMethod_New311127
Ref: 34e311127
Ref: c-api/method PyInstanceMethod_Function311364
Ref: 34f311364
Ref: c-api/method PyInstanceMethod_GET_FUNCTION311511
Ref: 350311511
Node: Method Objects311679
Ref: c-api/method method-objects311808
Ref: 351311808
Ref: c-api/method id1311808
Ref: 352311808
Ref: c-api/method PyMethod_Type312029
Ref: 353312029
Ref: c-api/method PyMethod_Check312222
Ref: 354312222
Ref: c-api/method PyMethod_New312393
Ref: 355312393
Ref: c-api/method PyMethod_Function312739
Ref: 356312739
Ref: c-api/method PyMethod_GET_FUNCTION312908
Ref: 357312908
Ref: c-api/method PyMethod_Self313102
Ref: 358313102
Ref: c-api/method PyMethod_GET_SELF313260
Ref: 359313260
Ref: c-api/method PyMethod_ClearFreeList313446
Ref: 35a313446
Node: File Objects313559
Ref: c-api/file file-objects313679
Ref: 35b313679
Ref: c-api/file doc313679
Ref: 35c313679
Ref: c-api/file fileobjects313679
Ref: 35d313679
Ref: c-api/file PyFile_FromFd314240
Ref: 35e314240
Ref: c-api/file PyObject_AsFileDescriptor315103
Ref: 35f315103
Ref: c-api/file PyFile_GetLine315497
Ref: 360315497
Ref: c-api/file PyFile_WriteObject316220
Ref: 361316220
Ref: c-api/file PyFile_WriteString316579
Ref: 362316579
Node: Module Objects316777
Ref: c-api/module moduleobjects316899
Ref: 363316899
Ref: c-api/module doc316899
Ref: 364316899
Ref: c-api/module module-objects316899
Ref: 365316899
Ref: c-api/module PyModule_Type317001
Ref: 366317001
Ref: c-api/module PyModule_Check317194
Ref: 367317194
Ref: c-api/module PyModule_CheckExact317326
Ref: 368317326
Ref: c-api/module PyModule_New317477
Ref: 369317477
Ref: c-api/module PyModule_GetDict317797
Ref: 36a317797
Ref: c-api/module PyModule_GetName318233
Ref: 36b318233
Ref: c-api/module PyModule_GetFilename318454
Ref: 36c318454
Ref: c-api/module PyModule_GetFilenameObject318812
Ref: 36d318812
Ref: c-api/module PyModule_GetState319189
Ref: 36e319189
Ref: c-api/module PyModule_GetDef319422
Ref: 370319422
Node: Initializing C modules319703
Ref: c-api/module initializing-c-modules319788
Ref: 373319788
Ref: c-api/module PyModule_Create319924
Ref: 372319924
Ref: c-api/module PyModule_Create2320170
Ref: 374320170
Ref: c-api/module PyModuleDef320665
Ref: 371320665
Ref: c-api/module PyModuleDef m_base320984
Ref: 375320984
Ref: c-api/module PyModuleDef m_name321096
Ref: 376321096
Ref: c-api/module PyModuleDef m_doc321164
Ref: 377321164
Ref: c-api/module PyModuleDef m_size321310
Ref: 36f321310
Ref: c-api/module PyModuleDef m_methods321931
Ref: 378321931
Ref: c-api/module PyModuleDef m_reload322141
Ref: 37a322141
Ref: c-api/module PyModuleDef m_traverse322224
Ref: 37b322224
Ref: c-api/module PyModuleDef m_clear322384
Ref: 37c322384
Ref: c-api/module PyModuleDef m_free322531
Ref: 37d322531
Ref: c-api/module PyModule_AddObject322673
Ref: 37e322673
Ref: c-api/module PyModule_AddIntConstant323003
Ref: 37f323003
Ref: c-api/module PyModule_AddStringConstant323289
Ref: 380323289
Ref: c-api/module PyModule_AddIntMacro323633
Ref: 381323633
Ref: c-api/module PyModule_AddStringMacro323965
Ref: 382323965
Node: Iterator Objects324076
Ref: c-api/iterator iterator-objects324204
Ref: 383324204
Ref: c-api/iterator doc324204
Ref: 384324204
Ref: c-api/iterator id1324204
Ref: 385324204
Ref: c-api/iterator PySeqIter_Type324588
Ref: 386324588
Ref: c-api/iterator PySeqIter_Check324810
Ref: 388324810
Ref: c-api/iterator PySeqIter_New324919
Ref: 387324919
Ref: c-api/iterator PyCallIter_Type325185
Ref: 389325185
Ref: c-api/iterator PyCallIter_Check325381
Ref: 38b325381
Ref: c-api/iterator PyCallIter_New325492
Ref: 38a325492
Node: Descriptor Objects325924
Ref: c-api/descriptor descriptor-objects326051
Ref: 38c326051
Ref: c-api/descriptor doc326051
Ref: 38d326051
Ref: c-api/descriptor id1326051
Ref: 38e326051
Ref: c-api/descriptor PyProperty_Type326222
Ref: 38f326222
Ref: c-api/descriptor PyDescr_NewGetSet326324
Ref: 390326324
Ref: c-api/descriptor PyDescr_NewMember326462
Ref: 391326462
Ref: c-api/descriptor PyDescr_NewMethod326598
Ref: 392326598
Ref: c-api/descriptor PyDescr_NewWrapper326734
Ref: 393326734
Ref: c-api/descriptor PyDescr_NewClassMethod326889
Ref: 394326889
Ref: c-api/descriptor PyDescr_IsData327025
Ref: 395327025
Ref: c-api/descriptor PyWrapper_New327269
Ref: 396327269
Node: Slice Objects327369
Ref: c-api/slice slice-objects327498
Ref: 397327498
Ref: c-api/slice doc327498
Ref: 398327498
Ref: c-api/slice id1327498
Ref: 399327498
Ref: c-api/slice PySlice_Type327539
Ref: 39a327539
Ref: c-api/slice PySlice_Check327677
Ref: 39b327677
Ref: c-api/slice PySlice_New327796
Ref: 39c327796
Ref: c-api/slice PySlice_GetIndices328288
Ref: 39d328288
Ref: c-api/slice PySlice_GetIndicesEx328990
Ref: 39e328990
Ref: c-api/memoryview memoryview-objects329683
Ref: 1b8329683
Node: MemoryView objects329684
Ref: c-api/memoryview doc329817
Ref: 39f329817
Ref: c-api/memoryview id1329817
Ref: 3a0329817
Ref: c-api/memoryview PyMemoryView_FromObject330016
Ref: 3a1330016
Ref: c-api/memoryview PyMemoryView_FromBuffer330306
Ref: 3a2330306
Ref: c-api/memoryview PyMemoryView_GetContiguous330674
Ref: 3a3330674
Ref: c-api/memoryview PyMemoryView_Check331103
Ref: 3a4331103
Ref: c-api/memoryview PyMemoryView_GET_BUFFER331292
Ref: 3a5331292
Node: Weak Reference Objects331591
Ref: c-api/weakref doc331719
Ref: 3a6331719
Ref: c-api/weakref weak-reference-objects331719
Ref: 3a7331719
Ref: c-api/weakref weakrefobjects331719
Ref: 3a8331719
Ref: c-api/weakref PyWeakref_Check332033
Ref: 3a9332033
Ref: c-api/weakref PyWeakref_CheckRef332139
Ref: 3aa332139
Ref: c-api/weakref PyWeakref_CheckProxy332232
Ref: 3ab332232
Ref: c-api/weakref PyWeakref_NewRef332323
Ref: 3ac332323
Ref: c-api/weakref PyWeakref_NewProxy333069
Ref: 3ad333069
Ref: c-api/weakref PyWeakref_GetObject333818
Ref: 3ae333818
Ref: c-api/weakref PyWeakref_GET_OBJECT334316
Ref: 3af334316
Node: Capsules334531
Ref: c-api/capsule capsules334653
Ref: 3b0334653
Ref: c-api/capsule doc334653
Ref: 3b1334653
Ref: c-api/capsule id1334653
Ref: 3b2334653
Ref: c-api/capsule PyCapsule334758
Ref: 3b3334758
Ref: c-api/capsule PyCapsule_Destructor335195
Ref: 3b4335195
Ref: c-api/capsule PyCapsule_CheckExact335452
Ref: 3b6335452
Ref: c-api/capsule PyCapsule_New335568
Ref: 3b5335568
Ref: c-api/capsule PyCapsule_GetPointer336454
Ref: 3b8336454
Ref: c-api/capsule PyCapsule_GetDestructor336902
Ref: 3b9336902
Ref: c-api/capsule PyCapsule_GetContext337319
Ref: 3bb337319
Ref: c-api/capsule PyCapsule_GetName337702
Ref: 3bc337702
Ref: c-api/capsule PyCapsule_Import338082
Ref: 3b7338082
Ref: c-api/capsule PyCapsule_IsValid338878
Ref: 3ba338878
Ref: c-api/capsule PyCapsule_SetContext339637
Ref: 3bd339637
Ref: c-api/capsule PyCapsule_SetDestructor339865
Ref: 3be339865
Ref: c-api/capsule PyCapsule_SetName340112
Ref: 3bf340112
Ref: c-api/capsule PyCapsule_SetPointer340480
Ref: 3c0340480
Node: Cell Objects340742
Ref: c-api/cell id1340859
Ref: 3c1340859
Ref: c-api/cell doc340859
Ref: 3c2340859
Ref: c-api/cell cell-objects340859
Ref: 3c3340859
Ref: c-api/cell PyCellObject341497
Ref: 3c4341497
Ref: c-api/cell PyCell_Type341567
Ref: 3c5341567
Ref: c-api/cell PyCell_Check341661
Ref: 3c6341661
Ref: c-api/cell PyCell_New341768
Ref: 3c7341768
Ref: c-api/cell PyCell_Get341958
Ref: 3c8341958
Ref: c-api/cell PyCell_GET342093
Ref: 3c9342093
Ref: c-api/cell PyCell_Set342304
Ref: 3ca342304
Ref: c-api/cell PyCell_SET342647
Ref: 3cb342647
Node: Generator Objects342905
Ref: c-api/gen gen-objects343030
Ref: 3cc343030
Ref: c-api/gen doc343030
Ref: 3cd343030
Ref: c-api/gen generator-objects343030
Ref: 3ce343030
Ref: c-api/gen PyGenObject343285
Ref: 3d0343285
Ref: c-api/gen PyGen_Type343359
Ref: 3d1343359
Ref: c-api/gen PyGen_Check343456
Ref: 3d2343456
Ref: c-api/gen PyGen_CheckExact343567
Ref: 3d3343567
Ref: c-api/gen PyGen_New343711
Ref: 3cf343711
Node: DateTime Objects343976
Ref: c-api/datetime datetime-objects344101
Ref: 3d4344101
Ref: c-api/datetime doc344101
Ref: 3d5344101
Ref: c-api/datetime datetimeobjects344101
Ref: 3d6344101
Ref: c-api/datetime PyDate_Check344616
Ref: 3d7344616
Ref: c-api/datetime PyDate_CheckExact344793
Ref: 3d8344793
Ref: c-api/datetime PyDateTime_Check344936
Ref: 3d9344936
Ref: c-api/datetime PyDateTime_CheckExact345125
Ref: 3da345125
Ref: c-api/datetime PyTime_Check345276
Ref: 3db345276
Ref: c-api/datetime PyTime_CheckExact345453
Ref: 3dc345453
Ref: c-api/datetime PyDelta_Check345596
Ref: 3dd345596
Ref: c-api/datetime PyDelta_CheckExact345776
Ref: 3de345776
Ref: c-api/datetime PyTZInfo_Check345921
Ref: 3df345921
Ref: c-api/datetime PyTZInfo_CheckExact346104
Ref: 3e0346104
Ref: c-api/datetime PyDate_FromDate346280
Ref: 3e1346280
Ref: c-api/datetime PyDateTime_FromDateAndTime346471
Ref: 3e2346471
Ref: c-api/datetime PyTime_FromTime346779
Ref: 3e3346779
Ref: c-api/datetime PyDelta_FromDSU347014
Ref: 3e4347014
Ref: c-api/datetime PyDateTime_GET_YEAR347630
Ref: 3e5347630
Ref: c-api/datetime PyDateTime_GET_MONTH347733
Ref: 3e6347733
Ref: c-api/datetime PyDateTime_GET_DAY347848
Ref: 3e7347848
Ref: c-api/datetime PyDateTime_DATE_GET_HOUR348154
Ref: 3e8348154
Ref: c-api/datetime PyDateTime_DATE_GET_MINUTE348276
Ref: 3e9348276
Ref: c-api/datetime PyDateTime_DATE_GET_SECOND348402
Ref: 3ea348402
Ref: c-api/datetime PyDateTime_DATE_GET_MICROSECOND348528
Ref: 3eb348528
Ref: c-api/datetime PyDateTime_TIME_GET_HOUR348865
Ref: 3ec348865
Ref: c-api/datetime PyDateTime_TIME_GET_MINUTE348983
Ref: 3ed348983
Ref: c-api/datetime PyDateTime_TIME_GET_SECOND349105
Ref: 3ee349105
Ref: c-api/datetime PyDateTime_TIME_GET_MICROSECOND349227
Ref: 3ef349227
Ref: c-api/datetime PyDateTime_FromTimestamp349429
Ref: 3f0349429
Ref: c-api/datetime PyDate_FromTimestamp349684
Ref: 3f1349684
Node: Code Objects349922
Ref: c-api/code code-objects350021
Ref: 3f2350021
Ref: c-api/code codeobjects350021
Ref: 3f3350021
Ref: c-api/code doc350021
Ref: 3f4350021
Ref: c-api/code PyCodeObject350221
Ref: 3f5350221
Ref: c-api/code PyCode_Type350379
Ref: 3f6350379
Ref: c-api/code PyCode_Check350514
Ref: 3f7350514
Ref: c-api/code PyCode_GetNumFree350607
Ref: 3f8350607
Ref: c-api/code PyCode_New350711
Ref: 3f9350711
Ref: c-api/code PyCode_NewEmpty351306
Ref: 3fa351306
Node: Initialization Finalization and Threads351594
Ref: c-api/init initialization351742
Ref: 3fb351742
Ref: c-api/init doc351742
Ref: 3fc351742
Ref: c-api/init initialization-finalization-and-threads351742
Ref: 3fd351742
Node: Initializing and finalizing the interpreter352081
Ref: c-api/init initializing-and-finalizing-the-interpreter352244
Ref: 3fe352244
Ref: c-api/init Py_Initialize352341
Ref: 27352341
Ref: c-api/init Py_InitializeEx353094
Ref: 402353094
Ref: c-api/init Py_IsInitialized353358
Ref: 2d353358
Ref: c-api/init Py_Finalize353624
Ref: 2c353624
Node: Process-wide parameters355542
Ref: c-api/init process-wide-parameters355758
Ref: 404355758
Ref: c-api/init Py_SetProgramName355815
Ref: 3ff355815
Ref: c-api/init Py_GetProgramName356603
Ref: 405356603
Ref: c-api/init Py_GetPrefix356833
Ref: 29356833
Ref: c-api/init Py_GetExecPrefix357575
Ref: 2a357575
Ref: c-api/init Py_GetProgramFullPath359691
Ref: 2b359691
Ref: c-api/init Py_GetPath360123
Ref: 28360123
Ref: c-api/init Py_SetPath360815
Ref: 400360815
Ref: c-api/init Py_GetVersion361554
Ref: 406361554
Ref: c-api/init Py_GetPlatform362111
Ref: 407362111
Ref: c-api/init Py_GetCopyright362683
Ref: 408362683
Ref: c-api/init Py_GetCompiler363057
Ref: 409363057
Ref: c-api/init Py_GetBuildInfo363440
Ref: 40a363440
Ref: c-api/init PySys_SetArgvEx363851
Ref: 401363851
Ref: c-api/init PySys_SetArgv365625
Ref: 40b365625
Ref: c-api/init Py_SetPythonHome365781
Ref: 40c365781
Ref: c-api/init Py_GetPythonHome366255
Ref: 40d366255
Ref: Process-wide parameters-Footnote-1366521
Node: Thread State and the Global Interpreter Lock366588
Ref: c-api/init threads366784
Ref: 40e366784
Ref: c-api/init thread-state-and-the-global-interpreter-lock366784
Ref: 40f366784
Node: Releasing the GIL from extension code368234
Ref: c-api/init releasing-the-gil-from-extension-code368399
Ref: 412368399
Node: Non-Python created threads370381
Ref: c-api/init non-python-created-threads370569
Ref: 414370569
Node: High-level API373364
Ref: c-api/init high-level-api373528
Ref: 417373528
Ref: c-api/init PyInterpreterState373698
Ref: 418373698
Ref: c-api/init PyThreadState374264
Ref: 410374264
Ref: c-api/init PyEval_InitThreads374490
Ref: 419374490
Ref: c-api/init PyEval_ThreadsInitialized375036
Ref: 41c375036
Ref: c-api/init PyEval_SaveThread375414
Ref: 41a375414
Ref: c-api/init PyEval_RestoreThread375841
Ref: 41b375841
Ref: c-api/init PyThreadState_Get376281
Ref: 411376281
Ref: c-api/init PyThreadState_Swap376540
Ref: 41d376540
Ref: c-api/init PyEval_ReInitThreads376808
Ref: 41e376808
Ref: c-api/init PyGILState_Ensure377152
Ref: 415377152
Ref: c-api/init PyGILState_Release378471
Ref: 416378471
Ref: c-api/init PyGILState_GetThisThreadState378955
Ref: 41f378955
Ref: c-api/init Py_BEGIN_ALLOW_THREADS379468
Ref: fa379468
Ref: c-api/init Py_END_ALLOW_THREADS379838
Ref: 413379838
Ref: c-api/init Py_BLOCK_THREADS380182
Ref: 420380182
Ref: c-api/init Py_UNBLOCK_THREADS380431
Ref: 421380431
Node: Low-level API380708
Ref: c-api/init low-level-api380837
Ref: 422380837
Ref: c-api/init PyInterpreterState_New381052
Ref: 423381052
Ref: c-api/init PyInterpreterState_Clear381288
Ref: 424381288
Ref: c-api/init PyInterpreterState_Delete381481
Ref: 425381481
Ref: c-api/init PyThreadState_New381774
Ref: 426381774
Ref: c-api/init PyThreadState_Clear382078
Ref: 427382078
Ref: c-api/init PyThreadState_Delete382245
Ref: 428382245
Ref: c-api/init PyThreadState_GetDict382502
Ref: 429382502
Ref: c-api/init PyThreadState_SetAsyncExc382996
Ref: 42a382996
Ref: c-api/init PyEval_AcquireThread383646
Ref: 42b383646
Ref: c-api/init PyEval_ReleaseThread384128
Ref: 42c384128
Ref: c-api/init PyEval_AcquireLock384727
Ref: 42d384727
Ref: c-api/init PyEval_ReleaseLock385119
Ref: 42e385119
Node: Sub-interpreter support385446
Ref: c-api/init sub-interpreter-support385645
Ref: 42f385645
Ref: c-api/init Py_NewInterpreter386099
Ref: 403386099
Ref: c-api/init Py_EndInterpreter388245
Ref: 430388245
Node: Bugs and caveats388903
Ref: c-api/init bugs-and-caveats388991
Ref: 431388991
Node: Asynchronous Notifications390521
Ref: c-api/init asynchronous-notifications390697
Ref: 432390697
Ref: c-api/init Py_AddPendingCall391352
Ref: 433391352
Node: Profiling and Tracing392539
Ref: c-api/init profiling392717
Ref: 434392717
Ref: c-api/init profiling-and-tracing392717
Ref: 435392717
Ref: c-api/init Py_tracefunc393394
Ref: 436393394
Ref: c-api/init PyTrace_CALL394751
Ref: 439394751
Ref: c-api/init PyTrace_EXCEPTION395144
Ref: 43a395144
Ref: c-api/init PyTrace_LINE395751
Ref: 43b395751
Ref: c-api/init PyTrace_RETURN395936
Ref: 43c395936
Ref: c-api/init PyTrace_C_CALL396119
Ref: 43d396119
Ref: c-api/init PyTrace_C_EXCEPTION396279
Ref: 43e396279
Ref: c-api/init PyTrace_C_RETURN396446
Ref: 43f396446
Ref: c-api/init PyEval_SetProfile396599
Ref: 437396599
Ref: c-api/init PyEval_SetTrace397113
Ref: 438397113
Ref: c-api/init PyEval_GetCallStats397350
Ref: 440397350
Node: Advanced Debugger Support398520
Ref: c-api/init advanced-debugging398663
Ref: 441398663
Ref: c-api/init advanced-debugger-support398663
Ref: 442398663
Ref: c-api/init PyInterpreterState_Head398799
Ref: 443398799
Ref: c-api/init PyInterpreterState_Next398954
Ref: 444398954
Ref: c-api/init PyInterpreterState_ThreadHead399155
Ref: 445399155
Ref: c-api/init PyThreadState_Next399399
Ref: 446399399
Node: Memory Management399645
Ref: c-api/memory memory-management399800
Ref: 447399800
Ref: c-api/memory doc399800
Ref: 448399800
Ref: c-api/memory memory399800
Ref: 449399800
Node: Overview399898
Ref: c-api/memory overview399997
Ref: 44a399997
Ref: c-api/memory memoryoverview399997
Ref: 44b399997
Node: Memory Interface403549
Ref: c-api/memory memoryinterface403665
Ref: 44c403665
Ref: c-api/memory memory-interface403665
Ref: 44d403665
Ref: c-api/memory PyMem_Malloc403897
Ref: 44e403897
Ref: c-api/memory PyMem_Realloc404262
Ref: 44f404262
Ref: c-api/memory PyMem_Free404939
Ref: fe404939
Ref: c-api/memory PyMem_New405399
Ref: 450405399
Ref: c-api/memory PyMem_Resize405642
Ref: 451405642
Ref: c-api/memory PyMem_Del406093
Ref: 452406093
Node: Examples406576
Ref: c-api/memory examples406675
Ref: 453406675
Ref: c-api/memory memoryexamples406675
Ref: 454406675
Node: Object Implementation Support408560
Ref: c-api/objimpl doc408681
Ref: 458408681
Ref: c-api/objimpl newtypes408681
Ref: 459408681
Ref: c-api/objimpl object-implementation-support408681
Ref: 45a408681
Node: Allocating Objects on the Heap409109
Ref: c-api/allocation allocating-objects-on-the-heap409250
Ref: 45b409250
Ref: c-api/allocation doc409250
Ref: 45c409250
Ref: c-api/allocation allocating-objects409250
Ref: 45d409250
Ref: c-api/allocation _PyObject_New409323
Ref: 45e409323
Ref: c-api/allocation _PyObject_NewVar409419
Ref: 45f409419
Ref: c-api/allocation PyObject_Init409548
Ref: 460409548
Ref: c-api/allocation PyObject_InitVar409992
Ref: 461409992
Ref: c-api/allocation PyObject_New410281
Ref: 455410281
Ref: c-api/allocation PyObject_NewVar410712
Ref: 456410712
Ref: c-api/allocation PyObject_Del411433
Ref: 457411433
Ref: c-api/allocation _Py_NoneStruct411815
Ref: 462411815
Node: Common Object Structures412125
Ref: c-api/structures common-structs412290
Ref: 463412290
Ref: c-api/structures common-object-structures412290
Ref: 464412290
Ref: c-api/structures doc412290
Ref: 465412290
Ref: c-api/structures PyObject412874
Ref: a412874
Ref: c-api/structures PyVarObject413287
Ref: 466413287
Ref: c-api/structures PyObject_HEAD413713
Ref: 467413713
Ref: c-api/structures PyObject_VAR_HEAD414338
Ref: 468414338
Ref: c-api/structures PyObject_HEAD_INIT414848
Ref: 469414848
Ref: c-api/structures PyVarObject_HEAD_INIT415063
Ref: 46a415063
Ref: c-api/structures PyCFunction415334
Ref: 34b415334
Ref: c-api/structures PyCFunctionWithKeywords415762
Ref: 46b415762
Ref: c-api/structures PyMethodDef416056
Ref: 379416056
Ref: c-api/structures METH_VARARGS417604
Ref: 107417604
Ref: c-api/structures METH_KEYWORDS418112
Ref: 46c418112
Ref: c-api/structures METH_NOARGS418499
Ref: 46d418499
Ref: c-api/structures METH_O418892
Ref: 46e418892
Ref: c-api/structures METH_CLASS419476
Ref: 46f419476
Ref: c-api/structures METH_STATIC419738
Ref: 470419738
Ref: c-api/structures METH_COEXIST420110
Ref: 471420110
Ref: c-api/structures PyMemberDef420765
Ref: 472420765
Node: Type Objects<2>423174
Ref: c-api/typeobj type-structs423333
Ref: 473423333
Ref: c-api/typeobj type-objects423333
Ref: 474423333
Ref: c-api/typeobj doc423333
Ref: 475423333
Ref: c-api/typeobj PyObject _ob_next427181
Ref: 476427181
Ref: c-api/typeobj PyObject _ob_prev427223
Ref: 477427223
Ref: c-api/typeobj PyObject ob_refcnt427925
Ref: 478427925
Ref: c-api/typeobj PyObject ob_type428379
Ref: 479428379
Ref: c-api/typeobj PyVarObject ob_size429413
Ref: 47a429413
Ref: c-api/typeobj PyTypeObject tp_name429680
Ref: 47b429680
Ref: c-api/typeobj PyTypeObject tp_basicsize431032
Ref: 47c431032
Ref: c-api/typeobj PyTypeObject tp_itemsize431083
Ref: 47d431083
Ref: c-api/typeobj PyTypeObject tp_dealloc433431
Ref: 47e433431
Ref: c-api/typeobj PyTypeObject tp_print434872
Ref: 483434872
Ref: c-api/typeobj PyTypeObject tp_getattr436412
Ref: 484436412
Ref: c-api/typeobj PyTypeObject tp_setattr437061
Ref: 485437061
Ref: c-api/typeobj PyTypeObject tp_reserved437710
Ref: 486437710
Ref: c-api/typeobj PyTypeObject tp_repr437806
Ref: 487437806
Ref: c-api/typeobj tp_as_number438619
Ref: 488438619
Ref: c-api/typeobj tp_as_sequence438973
Ref: 48a438973
Ref: c-api/typeobj tp_as_mapping439337
Ref: 48c439337
Ref: c-api/typeobj PyTypeObject tp_hash439696
Ref: 48e439696
Ref: c-api/typeobj PyTypeObject tp_call440983
Ref: 48f440983
Ref: c-api/typeobj PyTypeObject tp_str441275
Ref: 490441275
Ref: c-api/typeobj PyTypeObject tp_getattro442100
Ref: 491442100
Ref: c-api/typeobj PyTypeObject tp_setattro442670
Ref: 492442670
Ref: c-api/typeobj PyTypeObject tp_as_buffer443236
Ref: 493443236
Ref: c-api/typeobj PyTypeObject tp_flags443602
Ref: 494443602
Ref: c-api/typeobj Py_TPFLAGS_HEAPTYPE445209
Ref: 495445209
Ref: c-api/typeobj Py_TPFLAGS_BASETYPE445713
Ref: 47f445713
Ref: c-api/typeobj Py_TPFLAGS_READY445944
Ref: 496445944
Ref: c-api/typeobj Py_TPFLAGS_READYING446091
Ref: 497446091
Ref: c-api/typeobj Py_TPFLAGS_HAVE_GC446247
Ref: 1ef446247
Ref: c-api/typeobj Py_TPFLAGS_DEFAULT446734
Ref: 499446734
Ref: c-api/typeobj PyTypeObject tp_doc447063
Ref: 49a447063
Ref: c-api/typeobj PyTypeObject tp_traverse447343
Ref: 49b447343
Ref: c-api/typeobj PyTypeObject tp_clear449192
Ref: 49d449192
Ref: c-api/typeobj PyTypeObject tp_richcompare452167
Ref: 49e452167
Ref: c-api/typeobj PyTypeObject tp_weaklistoffset453486
Ref: 49f453486
Ref: c-api/typeobj PyTypeObject tp_iter455125
Ref: 4a0455125
Ref: c-api/typeobj PyTypeObject tp_iternext455529
Ref: 4a1455529
Ref: c-api/typeobj PyTypeObject tp_methods456196
Ref: 4a2456196
Ref: c-api/typeobj PyTypeObject tp_members456649
Ref: 4a3456649
Ref: c-api/typeobj PyTypeObject tp_getset457138
Ref: 4a4457138
Ref: c-api/typeobj PyTypeObject tp_base458140
Ref: 4a5458140
Ref: c-api/typeobj PyTypeObject tp_dict458600
Ref: 4a6458600
Ref: c-api/typeobj PyTypeObject tp_descr_get459392
Ref: 4a7459392
Ref: c-api/typeobj PyTypeObject tp_descr_set459661
Ref: 4a8459661
Ref: c-api/typeobj PyTypeObject tp_dictoffset459924
Ref: 4a9459924
Ref: c-api/typeobj PyTypeObject tp_init462785
Ref: 4aa462785
Ref: c-api/typeobj PyTypeObject tp_alloc463934
Ref: 4ab463934
Ref: c-api/typeobj PyTypeObject tp_new465296
Ref: 4ac465296
Ref: c-api/typeobj PyTypeObject tp_free466686
Ref: 4ad466686
Ref: c-api/typeobj PyTypeObject tp_is_gc467252
Ref: 4ae467252
Ref: c-api/typeobj PyTypeObject tp_bases468198
Ref: 4af468198
Ref: c-api/typeobj PyTypeObject tp_mro468420
Ref: 4b0468420
Ref: c-api/typeobj PyTypeObject tp_cache468701
Ref: 4b1468701
Ref: c-api/typeobj PyTypeObject tp_subclasses468797
Ref: 4b2468797
Ref: c-api/typeobj PyTypeObject tp_weaklist468934
Ref: 4b3468934
Ref: c-api/typeobj PyTypeObject tp_allocs469313
Ref: 4b4469313
Ref: c-api/typeobj PyTypeObject tp_frees469390
Ref: 4b5469390
Ref: c-api/typeobj PyTypeObject tp_maxalloc469460
Ref: 4b6469460
Ref: c-api/typeobj PyTypeObject tp_next469558
Ref: 4b7469558
Node: Number Object Structures470326
Ref: c-api/typeobj number-structs470486
Ref: 489470486
Ref: c-api/typeobj number-object-structures470486
Ref: 4b8470486
Ref: c-api/typeobj PyNumberMethods470547
Ref: 4b9470547
Node: Mapping Object Structures472826
Ref: c-api/typeobj mapping-structs472997
Ref: 48d472997
Ref: c-api/typeobj mapping-object-structures472997
Ref: 4ba472997
Ref: c-api/typeobj PyMappingMethods473060
Ref: 4bb473060
Ref: c-api/typeobj PyMappingMethods mp_length473226
Ref: 4bc473226
Ref: c-api/typeobj PyMappingMethods mp_subscript473476
Ref: 4bd473476
Ref: c-api/typeobj PyMappingMethods mp_ass_subscript473752
Ref: 4be473752
Node: Sequence Object Structures473983
Ref: c-api/typeobj sequence-structs474154
Ref: 48b474154
Ref: c-api/typeobj sequence-object-structures474154
Ref: 4bf474154
Ref: c-api/typeobj PySequenceMethods474219
Ref: 4c0474219
Ref: c-api/typeobj PySequenceMethods sq_length474364
Ref: 4c1474364
Ref: c-api/typeobj PySequenceMethods sq_concat474540
Ref: 4c2474540
Ref: c-api/typeobj PySequenceMethods sq_repeat474802
Ref: 4c3474802
Ref: c-api/typeobj PySequenceMethods sq_item475068
Ref: 4c4475068
Ref: c-api/typeobj PySequenceMethods sq_ass_item475615
Ref: 4c5475615
Ref: c-api/typeobj PySequenceMethods sq_contains475857
Ref: 4c6475857
Ref: c-api/typeobj PySequenceMethods sq_inplace_concat476159
Ref: 4c7476159
Ref: c-api/typeobj PySequenceMethods sq_inplace_repeat476380
Ref: 4c8476380
Node: Buffer Object Structures476603
Ref: c-api/typeobj buffer-structs476785
Ref: 1b5476785
Ref: c-api/typeobj buffer-object-structures476785
Ref: 4c9476785
Ref: c-api/typeobj PyBufferProcs477169
Ref: 4ca477169
Ref: c-api/typeobj PyBufferProcs bf_getbuffer477306
Ref: 4cb477306
Ref: c-api/typeobj PyBufferProcs bf_releasebuffer478047
Ref: 4cc478047
Node: Supporting Cyclic Garbage Collection478876
Ref: c-api/gcsupport supporting-cyclic-garbage-collection479023
Ref: 4cd479023
Ref: c-api/gcsupport doc479023
Ref: 4ce479023
Ref: c-api/gcsupport supporting-cycle-detection479023
Ref: 498479023
Ref: c-api/gcsupport PyObject_GC_New480313
Ref: 481480313
Ref: c-api/gcsupport PyObject_GC_NewVar480505
Ref: 482480505
Ref: c-api/gcsupport PyObject_GC_Resize480730
Ref: 4d0480730
Ref: c-api/gcsupport PyObject_GC_Track480945
Ref: 4cf480945
Ref: c-api/gcsupport _PyObject_GC_TRACK481329
Ref: 4d1481329
Ref: c-api/gcsupport PyObject_GC_Del481789
Ref: 480481789
Ref: c-api/gcsupport PyObject_GC_UnTrack481959
Ref: 4d2481959
Ref: c-api/gcsupport _PyObject_GC_UNTRACK482396
Ref: 4d3482396
Ref: c-api/gcsupport visitproc482635
Ref: 4d4482635
Ref: c-api/gcsupport traverseproc483146
Ref: 4d5483146
Ref: c-api/gcsupport Py_VISIT483858
Ref: 49c483858
Ref: c-api/gcsupport inquiry484384
Ref: 4d6484384
Node: Index484854

End Tag Table


Local Variables:
coding: utf-8
End:
