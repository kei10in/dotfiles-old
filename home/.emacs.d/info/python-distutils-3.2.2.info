This is python-distutils-3.2.2.info, produced by makeinfo version 4.13
from python-distutils-3.2.2.texi.

Generated by Sphinx 1.1.2.
INFO-DIR-SECTION Python v3 2 2
START-INFO-DIR-ENTRY
* Distributing Python Modules: (python-distutils-3.2.2.info). sharing modules with others
END-INFO-DIR-ENTRY

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation


File: python-distutils-3.2.2.info,  Node: Top,  Next: An Introduction to Distutils,  Up: (dir)

Distributing Python Modules
***************************

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation

     Authors: Greg Ward, Anthony Baxter

     Email: <distutils-sig@python.org>

     Release: 3.2

     Date: February 10, 2012

  This document describes the Python Distribution Utilities
("Distutils") from the module developer's point of view, describing how
to use the Distutils to make Python modules and extensions easily
available to a wider audience with very little overhead for
build/release/install mechanics.

* Menu:

* An Introduction to Distutils::
* Writing the Setup Script::
* Writing the Setup Configuration File::
* Creating a Source Distribution::
* Creating Built Distributions::
* Registering with the Package Index::
* Uploading Packages to the Package Index::
* Examples::
* Extending Distutils::
* Command Reference::
* API Reference::
* Python Module Index::
* Index::

 --- The Detailed Node Listing ---

An Introduction to Distutils

* Concepts & Terminology::
* A Simple Example::
* General Python terminology::
* Distutils-specific terminology::

Writing the Setup Script

* Listing whole packages::
* Listing individual modules::
* Describing extension modules::
* Relationships between Distributions and Packages::
* Installing Scripts::
* Installing Package Data::
* Installing Additional Files::
* Additional meta-data::
* Debugging the setup script::

Describing extension modules

* Extension names and packages::
* Extension source files::
* Preprocessor options::
* Library options::
* Other options::

Creating a Source Distribution

* Specifying the files to distribute::
* Manifest-related options::

Creating Built Distributions

* Creating RPM packages::
* Creating Windows Installers::
* Cross-compiling on Windows::
* Vista User Access Control (UAC): Vista User Access Control UAC.

Cross-compiling on Windows

* The Postinstallation script::

Registering with the Package Index

* The .pypirc file: The pypirc file.

Uploading Packages to the Package Index

* PyPI package display::

Examples

* Pure Python distribution (by module): Pure Python distribution by module.
* Pure Python distribution (by package): Pure Python distribution by package.
* Single extension module::
* Checking a package::

Extending Distutils

* Integrating new commands::
* Adding new distribution types::

Command Reference

* Installing modules; the install command family: Installing modules the install command family.
* Creating a source distribution; the sdist command: Creating a source distribution the sdist command.

Installing modules: the install command family

* install_data::
* install_scripts::

API Reference

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.emxccompiler: distutils emxccompiler --- OS/2 EMX Compiler. OS/2 EMX Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command::
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package


File: python-distutils-3.2.2.info,  Node: An Introduction to Distutils,  Next: Writing the Setup Script,  Prev: Top,  Up: Top

1 An Introduction to Distutils
******************************

This document covers using the Distutils to distribute your Python
modules, concentrating on the role of developer/distributor: if you're
looking for information on installing Python modules, you should refer
to the _install-index_ chapter.

* Menu:

* Concepts & Terminology::
* A Simple Example::
* General Python terminology::
* Distutils-specific terminology::


File: python-distutils-3.2.2.info,  Node: Concepts & Terminology,  Next: A Simple Example,  Up: An Introduction to Distutils

1.1 Concepts & Terminology
==========================

Using the Distutils is quite simple, both for module developers and for
users/administrators installing third-party modules.  As a developer,
your responsibilities (apart from writing solid, well-documented and
well-tested code, of course!) are:

   * write a setup script (`setup.py' by convention)

   * (optional) write a setup configuration file

   * create a source distribution

   * (optional) create one or more built (binary) distributions

  Each of these tasks is covered in this document.

  Not all module developers have access to a multitude of platforms, so
it's not always feasible to expect them to create a multitude of built
distributions.  It is hoped that a class of intermediaries, called
_packagers_, will arise to address this need.  Packagers will take
source distributions released by module developers, build them on one
or more platforms, and release the resulting built distributions.
Thus, users on the most popular platforms will be able to install most
popular Python module distributions in the most natural way for their
platform, without having to run a single setup script or compile a line
of code.


File: python-distutils-3.2.2.info,  Node: A Simple Example,  Next: General Python terminology,  Prev: Concepts & Terminology,  Up: An Introduction to Distutils

1.2 A Simple Example
====================

The setup script is usually quite simple, although since it's written
in Python, there are no arbitrary limits to what you can do with it,
though you should be careful about putting arbitrarily expensive
operations in your setup script.  Unlike, say, Autoconf-style configure
scripts, the setup script may be run multiple times in the course of
building and installing your module distribution.

  If all you want to do is distribute a module called `foo', contained
in a file `foo.py', then your setup script can be as simple as this:

    from distutils.core import setup
    setup(name='foo',
          version='1.0',
          py_modules=['foo'],
          )

Some observations:

   * most information that you supply to the Distutils is supplied as
     keyword arguments to the `setup()' function

   * those keyword arguments fall into two categories: package metadata
     (name, version number) and information about what's in the package
     (a list of pure Python modules, in this case)

   * modules are specified by module name, not filename (the same will
     hold true for packages and extensions)

   * it's recommended that you supply a little more metadata, in
     particular your name, email address and a URL for the project (see
     section *note Writing the Setup Script: 38.  for an example)

  To create a source distribution for this module, you would create a
setup script, `setup.py', containing the above code, and run this
command from a terminal:

    python setup.py sdist

For Windows, open a command prompt windows ("DOS box") and change the
command to:

    setup.py sdist

*sdist* will create an archive file (e.g., tarball on Unix, ZIP file on
Windows) containing your setup script `setup.py', and your module
`foo.py'.  The archive file will be named `foo-1.0.tar.gz' (or `.zip'),
and will unpack into a directory `foo-1.0'.

  If an end-user wishes to install your `foo' module, all she has to do
is download `foo-1.0.tar.gz' (or `.zip'), unpack it, and--from the
`foo-1.0' directory--run

    python setup.py install

which will ultimately copy `foo.py' to the appropriate directory for
third-party modules in their Python installation.

  This simple example demonstrates some fundamental concepts of the
Distutils.  First, both developers and installers have the same basic
user interface, i.e.  the setup script.  The difference is which
Distutils _commands_ they use: the *sdist* command is almost
exclusively for module developers, while *install* is more often for
installers (although most developers will want to install their own
code occasionally).

  If you want to make things really easy for your users, you can create
one or more built distributions for them.  For instance, if you are
running on a Windows machine, and want to make things easy for other
Windows users, you can create an executable installer (the most
appropriate type of built distribution for this platform) with the
*bdist_wininst* command.  For example:

    python setup.py bdist_wininst

will create an executable installer, `foo-1.0.win32.exe', in the current
directory.

  Other useful built distribution formats are RPM, implemented by the
*bdist_rpm* command, Solaris *pkgtool* (*bdist_pkgtool*), and HP-UX
*swinstall* (*bdist_sdux*).  For example, the following command will
create an RPM file called `foo-1.0.noarch.rpm':

    python setup.py bdist_rpm

(The *bdist_rpm* command uses the *rpm* executable, therefore this has
to be run on an RPM-based system such as Red Hat Linux, SuSE Linux, or
Mandrake Linux.)

  You can find out what distribution formats are available at any time
by running

    python setup.py bdist --help-formats



File: python-distutils-3.2.2.info,  Node: General Python terminology,  Next: Distutils-specific terminology,  Prev: A Simple Example,  Up: An Introduction to Distutils

1.3 General Python terminology
==============================

If you're reading this document, you probably have a good idea of what
modules, extensions, and so forth are.  Nevertheless, just to be sure
that everyone is operating from a common starting point, we offer the
following glossary of common Python terms:

module
     the basic unit of code reusability in Python: a block of code
     imported by some other code.  Three types of modules concern us
     here: pure Python modules, extension modules, and packages.

pure Python module
     a module written in Python and contained in a single `.py' file
     (and possibly associated `.pyc' and/or `.pyo' files).  Sometimes
     referred to as a "pure module."

extension module
     a module written in the low-level language of the Python
     implementation: C/C++ for Python, Java for Jython. Typically
     contained in a single dynamically loadable pre-compiled file, e.g.
     a shared object (`.so') file for Python extensions on Unix, a DLL
     (given the `.pyd' extension) for Python extensions on Windows, or
     a Java class file for Jython extensions.  (Note that currently,
     the Distutils only handles C/C++ extensions for Python.)

package
     a module that contains other modules; typically contained in a
     directory in the filesystem and distinguished from other
     directories by the presence of a file `__init__.py'.

root package
     the root of the hierarchy of packages.  (This isn't really a
     package, since it doesn't have an `__init__.py' file.  But we have
     to call it something.)  The vast majority of the standard library
     is in the root package, as are many small, standalone third-party
     modules that don't belong to a larger module collection. Unlike
     regular packages, modules in the root package can be found in many
     directories: in fact, every directory listed in `sys.path'
     contributes modules to the root package.


File: python-distutils-3.2.2.info,  Node: Distutils-specific terminology,  Prev: General Python terminology,  Up: An Introduction to Distutils

1.4 Distutils-specific terminology
==================================

The following terms apply more specifically to the domain of
distributing Python modules using the Distutils:

module distribution
     a collection of Python modules distributed together as a single
     downloadable resource and meant to be installed _en masse_.
     Examples of some well-known module distributions are NumPy, SciPy,
     PIL (the Python Imaging Library), or mxBase.  (This would be
     called a _package_, except that term is already taken in the
     Python context: a single module distribution may contain zero,
     one, or many Python packages.)

pure module distribution
     a module distribution that contains only pure Python modules and
     packages.  Sometimes referred to as a "pure distribution."

non-pure module distribution
     a module distribution that contains at least one extension module.
     Sometimes referred to as a "non-pure distribution."

distribution root
     the top-level directory of your source tree (or  source
     distribution); the directory where `setup.py' exists.  Generally
     `setup.py' will be run from this directory.


File: python-distutils-3.2.2.info,  Node: Writing the Setup Script,  Next: Writing the Setup Configuration File,  Prev: An Introduction to Distutils,  Up: Top

2 Writing the Setup Script
**************************

The setup script is the centre of all activity in building,
distributing, and installing modules using the Distutils.  The main
purpose of the setup script is to describe your module distribution to
the Distutils, so that the various commands that operate on your
modules do the right thing.  As we saw in section *note A Simple
Example: 36. above, the setup script consists mainly of a call to
`setup()', and most information supplied to the Distutils by the module
developer is supplied as keyword arguments to `setup()'.

  Here's a slightly more involved example, which we'll follow for the
next couple of sections: the Distutils' own setup script.  (Keep in
mind that although the Distutils are included with Python 1.6 and
later, they also have an independent existence so that Python 1.5.2
users can use them to install other module distributions.  The
Distutils' own setup script, shown here, is used to install the package
into Python 1.5.2.)

    #!/usr/bin/env python

    from distutils.core import setup

    setup(name='Distutils',
          version='1.0',
          description='Python Distribution Utilities',
          author='Greg Ward',
          author_email='gward@python.net',
          url='http://www.python.org/sigs/distutils-sig/',
          packages=['distutils', 'distutils.command'],
         )

There are only two differences between this and the trivial one-file
distribution presented in section *note A Simple Example: 36.: more
metadata, and the specification of pure Python modules by package,
rather than by module.  This is important since the Distutils consist
of a couple of dozen modules split into (so far) two packages; an
explicit list of every module would be tedious to generate and
difficult to maintain.  For more information on the additional
meta-data, see section *note Additional meta-data: 3f.

  Note that any pathnames (files or directories) supplied in the setup
script should be written using the Unix convention, i.e.
slash-separated.  The Distutils will take care of converting this
platform-neutral representation into whatever is appropriate on your
current platform before actually using the pathname.  This makes your
setup script portable across operating systems, which of course is one
of the major goals of the Distutils.  In this spirit, all pathnames in
this document are slash-separated.

  This, of course, only applies to pathnames given to Distutils
functions.  If you, for example, use standard Python functions such as
`glob.glob()' or `os.listdir()' to specify files, you should be careful
to write portable code instead of hardcoding path separators:

    glob.glob(os.path.join('mydir', 'subdir', '*.html'))
    os.listdir(os.path.join('mydir', 'subdir'))


* Menu:

* Listing whole packages::
* Listing individual modules::
* Describing extension modules::
* Relationships between Distributions and Packages::
* Installing Scripts::
* Installing Package Data::
* Installing Additional Files::
* Additional meta-data::
* Debugging the setup script::


File: python-distutils-3.2.2.info,  Node: Listing whole packages,  Next: Listing individual modules,  Up: Writing the Setup Script

2.1 Listing whole packages
==========================

The `packages' option tells the Distutils to process (build, distribute,
install, etc.) all pure Python modules found in each package mentioned
in the `packages' list.  In order to do this, of course, there has to
be a correspondence between package names and directories in the
filesystem.  The default correspondence is the most obvious one, i.e.
package `distutils' is found in the directory `distutils' relative to
the distribution root.  Thus, when you say `packages = ['foo']' in your
setup script, you are promising that the Distutils will find a file
`foo/__init__.py' (which might be spelled differently on your system,
but you get the idea) relative to the directory where your setup script
lives.  If you break this promise, the Distutils will issue a warning
but still process the broken package anyway.

  If you use a different convention to lay out your source directory,
that's no problem: you just have to supply the `package_dir' option to
tell the Distutils about your convention.  For example, say you keep
all Python source under `lib', so that modules in the "root package"
(i.e., not in any package at all) are in `lib', modules in the `foo'
package are in `lib/foo', and so forth.  Then you would put

    package_dir = {'': 'lib'}

in your setup script.  The keys to this dictionary are package names,
and an empty package name stands for the root package.  The values are
directory names relative to your distribution root.  In this case, when
you say `packages = ['foo']', you are promising that the file
`lib/foo/__init__.py' exists.

  Another possible convention is to put the `foo' package right in
`lib', the `foo.bar' package in `lib/bar', etc.  This would be written
in the setup script as

    package_dir = {'foo': 'lib'}

A `package: dir' entry in the `package_dir' dictionary implicitly
applies to all packages below _package_, so the `foo.bar' case is
automatically handled here.  In this example, having `packages = ['foo',
'foo.bar']' tells the Distutils to look for `lib/__init__.py' and
`lib/bar/__init__.py'.  (Keep in mind that although `package_dir'
applies recursively, you must explicitly list all packages in
`packages': the Distutils will _not_ recursively scan your source tree
looking for any directory with an `__init__.py' file.)


File: python-distutils-3.2.2.info,  Node: Listing individual modules,  Next: Describing extension modules,  Prev: Listing whole packages,  Up: Writing the Setup Script

2.2 Listing individual modules
==============================

For a small module distribution, you might prefer to list all modules
rather than listing packages--especially the case of a single module
that goes in the "root package" (i.e., no package at all).  This
simplest case was shown in section *note A Simple Example: 36.; here is
a slightly more involved example:

    py_modules = ['mod1', 'pkg.mod2']

This describes two modules, one of them in the "root" package, the
other in the `pkg' package.  Again, the default package/directory
layout implies that these two modules can be found in `mod1.py' and
`pkg/mod2.py', and that `pkg/__init__.py' exists as well. And again,
you can override the package/directory correspondence using the
`package_dir' option.


File: python-distutils-3.2.2.info,  Node: Describing extension modules,  Next: Relationships between Distributions and Packages,  Prev: Listing individual modules,  Up: Writing the Setup Script

2.3 Describing extension modules
================================

Just as writing Python extension modules is a bit more complicated than
writing pure Python modules, describing them to the Distutils is a bit
more complicated.  Unlike pure modules, it's not enough just to list
modules or packages and expect the Distutils to go out and find the
right files; you have to specify the extension name, source file(s),
and any compile/link requirements (include directories, libraries to
link with, etc.).

  All of this is done through another keyword argument to `setup()', the
`ext_modules' option.  `ext_modules' is just a list of `Extension'
instances, each of which describes a single extension module.  Suppose
your distribution includes a single extension, called `foo' and
implemented by `foo.c'.  If no additional instructions to the
compiler/linker are needed, describing this extension is quite simple:

    Extension('foo', ['foo.c'])

The `Extension' class can be imported from *note distutils.core: 1a.
along with `setup()'.  Thus, the setup script for a module distribution
that contains only this one extension and nothing else might be:

    from distutils.core import setup, Extension
    setup(name='foo',
          version='1.0',
          ext_modules=[Extension('foo', ['foo.c'])],
          )

The `Extension' class (actually, the underlying extension-building
machinery implemented by the *build_ext* command) supports a great deal
of flexibility in describing Python extensions, which is explained in
the following sections.

* Menu:

* Extension names and packages::
* Extension source files::
* Preprocessor options::
* Library options::
* Other options::


File: python-distutils-3.2.2.info,  Node: Extension names and packages,  Next: Extension source files,  Up: Describing extension modules

2.3.1 Extension names and packages
----------------------------------

The first argument to the `Extension' constructor is always the name of
the extension, including any package names.  For example,

    Extension('foo', ['src/foo1.c', 'src/foo2.c'])

describes an extension that lives in the root package, while

    Extension('pkg.foo', ['src/foo1.c', 'src/foo2.c'])

describes the same extension in the `pkg' package.  The source files and
resulting object code are identical in both cases; the only difference
is where in the filesystem (and therefore where in Python's namespace
hierarchy) the resulting extension lives.

  If you have a number of extensions all in the same package (or all
under the same base package), use the `ext_package' keyword argument to
`setup()'.  For example,

    setup(...,
          ext_package='pkg',
          ext_modules=[Extension('foo', ['foo.c']),
                       Extension('subpkg.bar', ['bar.c'])],
         )

will compile `foo.c' to the extension `pkg.foo', and `bar.c' to
`pkg.subpkg.bar'.


File: python-distutils-3.2.2.info,  Node: Extension source files,  Next: Preprocessor options,  Prev: Extension names and packages,  Up: Describing extension modules

2.3.2 Extension source files
----------------------------

The second argument to the `Extension' constructor is a list of source
files.  Since the Distutils currently only support C, C++, and
Objective-C extensions, these are normally C/C++/Objective-C source
files.  (Be sure to use appropriate extensions to distinguish C++source
files: `.cc' and `.cpp' seem to be recognized by both Unix and Windows
compilers.)

  However, you can also include SWIG interface (`.i') files in the
list; the *build_ext* command knows how to deal with SWIG extensions:
it will run SWIG on the interface file and compile the resulting C/C++
file into your extension.

  This warning notwithstanding, options to SWIG can be currently passed
like this:

    setup(...,
          ext_modules=[Extension('_foo', ['foo.i'],
                                 swig_opts=['-modern', '-I../include'])],
          py_modules=['foo'],
         )

Or on the commandline like this:

    > python setup.py build_ext --swig-opts="-modern -I../include"

On some platforms, you can include non-source files that are processed
by the compiler and included in your extension.  Currently, this just
means Windows message text (`.mc') files and resource definition
(`.rc') files for Visual C++. These will be compiled to binary resource
(`.res') files and linked into the executable.


File: python-distutils-3.2.2.info,  Node: Preprocessor options,  Next: Library options,  Prev: Extension source files,  Up: Describing extension modules

2.3.3 Preprocessor options
--------------------------

Three optional arguments to `Extension' will help if you need to specify
include directories to search or preprocessor macros to define/undefine:
`include_dirs', `define_macros', and `undef_macros'.

  For example, if your extension requires header files in the `include'
directory under your distribution root, use the `include_dirs' option:

    Extension('foo', ['foo.c'], include_dirs=['include'])

You can specify absolute directories there; if you know that your
extension will only be built on Unix systems with X11R6 installed to
`/usr', you can get away with

    Extension('foo', ['foo.c'], include_dirs=['/usr/include/X11'])

You should avoid this sort of non-portable usage if you plan to
distribute your code: it's probably better to write C code like

    #include <X11/Xlib.h>

If you need to include header files from some other Python extension,
you can take advantage of the fact that header files are installed in a
consistent way by the Distutils *install_header* command.  For example,
the Numerical Python header files are installed (on a standard Unix
installation) to `/usr/local/include/python1.5/Numerical'. (The exact
location will differ according to your platform and Python
installation.)  Since the Python include
directory--`/usr/local/include/python1.5' in this case--is always
included in the search path when building Python extensions, the best
approach is to write C code like

    #include <Numerical/arrayobject.h>

If you must put the `Numerical' include directory right into your header
search path, though, you can find that directory using the Distutils
*note distutils.sysconfig: 29. module:

    from distutils.sysconfig import get_python_inc
    incdir = os.path.join(get_python_inc(plat_specific=1), 'Numerical')
    setup(...,
          Extension(..., include_dirs=[incdir]),
          )

Even though this is quite portable--it will work on any Python
installation, regardless of platform--it's probably easier to just
write your C code in the sensible way.

  You can define and undefine pre-processor macros with the
`define_macros' and `undef_macros' options. `define_macros' takes a
list of `(name, value)' tuples, where `name' is the name of the macro
to define (a string) and `value' is its value: either a string or
`None'.  (Defining a macro `FOO' to `None' is the equivalent of a bare
`#define FOO' in your C source: with most compilers, this sets `FOO' to
the string `1'.)  `undef_macros' is just a list of macros to undefine.

  For example:

    Extension(...,
              define_macros=[('NDEBUG', '1'),
                             ('HAVE_STRFTIME', None)],
              undef_macros=['HAVE_FOO', 'HAVE_BAR'])

is the equivalent of having this at the top of every C source file:

    #define NDEBUG 1
    #define HAVE_STRFTIME
    #undef HAVE_FOO
    #undef HAVE_BAR



File: python-distutils-3.2.2.info,  Node: Library options,  Next: Other options,  Prev: Preprocessor options,  Up: Describing extension modules

2.3.4 Library options
---------------------

You can also specify the libraries to link against when building your
extension, and the directories to search for those libraries.  The
`libraries' option is a list of libraries to link against,
`library_dirs' is a list of directories to search for libraries at
link-time, and `runtime_library_dirs' is a list of directories to
search for shared (dynamically loaded) libraries at run-time.

  For example, if you need to link against libraries known to be in the
standard library search path on target systems

    Extension(...,
              libraries=['gdbm', 'readline'])

If you need to link with libraries in a non-standard location, you'll
have to include the location in `library_dirs':

    Extension(...,
              library_dirs=['/usr/X11R6/lib'],
              libraries=['X11', 'Xt'])

(Again, this sort of non-portable construct should be avoided if you
intend to distribute your code.)


File: python-distutils-3.2.2.info,  Node: Other options,  Prev: Library options,  Up: Describing extension modules

2.3.5 Other options
-------------------

There are still some other options which can be used to handle special
cases.

  The `optional' option is a boolean; if it is true, a build failure in
the extension will not abort the build process, but instead simply not
install the failing extension.

  The `extra_objects' option is a list of object files to be passed to
the linker. These files must not have extensions, as the default
extension for the compiler is used.

  `extra_compile_args' and `extra_link_args' can be used to specify
additional command line options for the respective compiler and linker
command lines.

  `export_symbols' is only useful on Windows.  It can contain a list of
symbols (functions or variables) to be exported. This option is not
needed when building compiled extensions: Distutils  will automatically
add `initmodule' to the list of exported symbols.

  The `depends' option is a list of files that the extension depends on
(for example header files). The build command will call the compiler on
the sources to rebuild extension if any on this files has been modified
since the previous build.


File: python-distutils-3.2.2.info,  Node: Relationships between Distributions and Packages,  Next: Installing Scripts,  Prev: Describing extension modules,  Up: Writing the Setup Script

2.4 Relationships between Distributions and Packages
====================================================

A distribution may relate to packages in three specific ways:

  1. It can require packages or modules.

  2. It can provide packages or modules.

  3. It can obsolete packages or modules.

  These relationships can be specified using keyword arguments to the
*note distutils.core.setup(): 4c. function.

  Dependencies on other Python modules and packages can be specified by
supplying the _requires_ keyword argument to `setup()'. The value must
be a list of strings.  Each string specifies a package that is
required, and optionally what versions are sufficient.

  To specify that any version of a module or package is required, the
string should consist entirely of the module or package name. Examples
include `'mymodule'' and `'xml.parsers.expat''.

  If specific versions are required, a sequence of qualifiers can be
supplied in parentheses.  Each qualifier may consist of a comparison
operator and a version number.  The accepted comparison operators are:

    <    >    ==
    <=   >=   !=

These can be combined by using multiple qualifiers separated by commas
(and optional whitespace).  In this case, all of the qualifiers must be
matched; a logical AND is used to combine the evaluations.

  Let's look at a bunch of examples:

Requires Expression           Explanation
--------------------------------------------------------------------------------- 
`==1.0'                       Only version `1.0' is compatible
`>1.0, !=1.5.1, <2.0'         Any version after `1.0' and before `2.0' is
                              compatible, except `1.5.1'

  Now that we can specify dependencies, we also need to be able to
specify what we provide that other distributions can require.  This is
done using the _provides_ keyword argument to `setup()'. The value for
this keyword is a list of strings, each of which names a Python module
or package, and optionally identifies the version.  If the version is
not specified, it is assumed to match that of the distribution.

  Some examples:

Provides Expression       Explanation
----------------------------------------------------------------------------- 
`mypkg'                   Provide `mypkg', using the distribution version
`mypkg (1.1)'             Provide `mypkg' version 1.1, regardless of the
                          distribution version

  A package can declare that it obsoletes other packages using the
_obsoletes_ keyword argument.  The value for this is similar to that of
the _requires_ keyword: a list of strings giving module or package
specifiers.  Each specifier consists of a module or package name
optionally followed by one or more version qualifiers.  Version
qualifiers are given in parentheses after the module or package name.

  The versions identified by the qualifiers are those that are
obsoleted by the distribution being described.  If no qualifiers are
given, all versions of the named module or package are understood to be
obsoleted.


File: python-distutils-3.2.2.info,  Node: Installing Scripts,  Next: Installing Package Data,  Prev: Relationships between Distributions and Packages,  Up: Writing the Setup Script

2.5 Installing Scripts
======================

So far we have been dealing with pure and non-pure Python modules,
which are usually not run by themselves but imported by scripts.

  Scripts are files containing Python source code, intended to be
started from the command line.  Scripts don't require Distutils to do
anything very complicated.  The only clever feature is that if the
first line of the script starts with `#!' and contains the word
"python", the Distutils will adjust the first line to refer to the
current interpreter location. By default, it is replaced with the
current interpreter location.  The `--executable' (or `-e') option will
allow the interpreter path to be explicitly overridden.

  The `scripts' option simply is a list of files to be handled in this
way.  From the PyXML setup script:

    setup(...,
          scripts=['scripts/xmlproc_parse', 'scripts/xmlproc_val']
          )

Changed in version 3.1: All the scripts will also be added to the
`MANIFEST' file if no template is provided.  See *note Specifying the
files to distribute: 4f.


File: python-distutils-3.2.2.info,  Node: Installing Package Data,  Next: Installing Additional Files,  Prev: Installing Scripts,  Up: Writing the Setup Script

2.6 Installing Package Data
===========================

Often, additional files need to be installed into a package.  These
files are often data that's closely related to the package's
implementation, or text files containing documentation that might be of
interest to programmers using the package.  These files are called
_package data_.

  Package data can be added to packages using the `package_data' keyword
argument to the `setup()' function.  The value must be a mapping from
package name to a list of relative path names that should be copied
into the package.  The paths are interpreted as relative to the
directory containing the package (information from the `package_dir'
mapping is used if appropriate); that is, the files are expected to be
part of the package in the source directories. They may contain glob
patterns as well.

  The path names may contain directory portions; any necessary
directories will be created in the installation.

  For example, if a package should contain a subdirectory with several
data files, the files can be arranged like this in the source tree:

    setup.py
    src/
        mypkg/
            __init__.py
            module.py
            data/
                tables.dat
                spoons.dat
                forks.dat

The corresponding call to `setup()' might be:

    setup(...,
          packages=['mypkg'],
          package_dir={'mypkg': 'src/mypkg'},
          package_data={'mypkg': ['data/*.dat']},
          )

Changed in version 3.1: All the files that match `package_data' will be
added to the `MANIFEST' file if no template is provided.  See *note
Specifying the files to distribute: 4f.


File: python-distutils-3.2.2.info,  Node: Installing Additional Files,  Next: Additional meta-data,  Prev: Installing Package Data,  Up: Writing the Setup Script

2.7 Installing Additional Files
===============================

The `data_files' option can be used to specify additional files needed
by the module distribution: configuration files, message catalogs, data
files, anything which doesn't fit in the previous categories.

  `data_files' specifies a sequence of (_directory_, _files_) pairs in
the following way:

    setup(...,
          data_files=[('bitmaps', ['bm/b1.gif', 'bm/b2.gif']),
                      ('config', ['cfg/data.cfg']),
                      ('/etc/init.d', ['init-script'])]
         )

Note that you can specify the directory names where the data files will
be installed, but you cannot rename the data files themselves.

  Each (_directory_, _files_) pair in the sequence specifies the
installation directory and the files to install there.  If _directory_
is a relative path, it is interpreted relative to the installation
prefix (Python's `sys.prefix' for pure-Python packages,
`sys.exec_prefix' for packages that contain extension modules).  Each
file name in _files_ is interpreted relative to the `setup.py' script
at the top of the package source distribution.  No directory
information from _files_ is used to determine the final location of the
installed file; only the name of the file is used.

  You can specify the `data_files' options as a simple sequence of files
without specifying a target directory, but this is not recommended, and
the *install* command will print a warning in this case. To install data
files directly in the target directory, an empty string should be given
as the directory.

  Changed in version 3.1: All the files that match `data_files' will be
added to the `MANIFEST' file if no template is provided.  See *note
Specifying the files to distribute: 4f.


File: python-distutils-3.2.2.info,  Node: Additional meta-data,  Next: Debugging the setup script,  Prev: Installing Additional Files,  Up: Writing the Setup Script

2.8 Additional meta-data
========================

The setup script may include additional meta-data beyond the name and
version.  This information includes:

Meta-Data                  Description                     Value                 Notes
---------------------------------------------------------------------------------------------- 
`name'                     name of the package             short string          (1)
`version'                  version of this release         short string          (1)(2)
`author'                   package author's name           short string          (3)
`author_email'             email address of the package    email address         (3)
                           author                                                
`maintainer'               package maintainer's name       short string          (3)
`maintainer_email'         email address of the package    email address         (3)
                           maintainer                                            
`url'                      home page for the package       URL                   (1)
`description'              short, summary description of   short string          
                           the package                                           
`long_description'         longer description of the       long string           (5)
                           package                                               
`download_url'             location where the package may  URL                   (4)
                           be downloaded                                         
`classifiers'              a list of classifiers           list of strings       (4)
`platforms'                a list of platforms             list of strings       
`license'                  license for the package         short string          (6)

  Notes:

  1. These fields are required.

  2. It is recommended that versions take the form
     _major.minor[.patch[.sub]]_.

  3. Either the author or the maintainer must be identified.

  4. These fields should not be used if your package is to be
     compatible with Python versions prior to 2.2.3 or 2.3.  The list
     is available from the PyPI website(1).

  5. The `long_description' field is used by PyPI when you are
     registering a package, to build its home page.

  6. The `license' field is a text indicating the license covering the
     package where the license is not a selection from the "License"
     Trove classifiers. See the `Classifier' field. Notice that there's
     a `licence' distribution option which is deprecated but still acts
     as an alias for `license'.

'short string'
     A single line of text, not more than 200 characters.

'long string'
     Multiple lines of plain text in reStructuredText format (see
     <http://docutils.sf.net/>).

'list of strings'
     See below.

  Encoding the version information is an art in itself. Python packages
generally adhere to the version format _major.minor[.patch][sub]_. The
major number is 0 for initial, experimental releases of software. It is
incremented for releases that represent major milestones in a package.
The minor number is incremented when important new features are added
to the package. The patch number increments when bug-fix releases are
made. Additional trailing version information is sometimes used to
indicate sub-releases.  These are "a1,a2,...,aN" (for alpha releases,
where functionality and API may change), "b1,b2,...,bN" (for beta
releases, which only fix bugs) and "pr1,pr2,...,prN" (for final
pre-release release testing). Some examples:

0.1.0
     the first, experimental release of a package

1.0.1a2
     the second alpha release of the first patch version of 1.0

  `classifiers' are specified in a Python list:

    setup(...,
          classifiers=[
              'Development Status :: 4 - Beta',
              'Environment :: Console',
              'Environment :: Web Environment',
              'Intended Audience :: End Users/Desktop',
              'Intended Audience :: Developers',
              'Intended Audience :: System Administrators',
              'License :: OSI Approved :: Python Software Foundation License',
              'Operating System :: MacOS :: MacOS X',
              'Operating System :: Microsoft :: Windows',
              'Operating System :: POSIX',
              'Programming Language :: Python',
              'Topic :: Communications :: Email',
              'Topic :: Office/Business',
              'Topic :: Software Development :: Bug Tracking',
              ],
          )

If you wish to include classifiers in your `setup.py' file and also wish
to remain backwards-compatible with Python releases prior to 2.2.3,
then you can include the following code fragment in your `setup.py'
before the `setup()' call.

    # patch distutils if it can't cope with the "classifiers" or
    # "download_url" keywords
    from sys import version
    if version < '2.2.3':
        from distutils.dist import DistributionMetadata
        DistributionMetadata.classifiers = None
        DistributionMetadata.download_url = None


  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi


File: python-distutils-3.2.2.info,  Node: Debugging the setup script,  Prev: Additional meta-data,  Up: Writing the Setup Script

2.9 Debugging the setup script
==============================

Sometimes things go wrong, and the setup script doesn't do what the
developer wants.

  Distutils catches any exceptions when running the setup script, and
print a simple error message before the script is terminated.  The
motivation for this behaviour is to not confuse administrators who
don't know much about Python and are trying to install a package.  If
they get a big long traceback from deep inside the guts of Distutils,
they may think the package or the Python installation is broken because
they don't read all the way down to the bottom and see that it's a
permission problem.

  On the other hand, this doesn't help the developer to find the cause
of the failure. For this purpose, the DISTUTILS_DEBUG environment
variable can be set to anything except an empty string, and distutils
will now print detailed information what it is doing, and prints the
full traceback in case an exception occurs.


File: python-distutils-3.2.2.info,  Node: Writing the Setup Configuration File,  Next: Creating a Source Distribution,  Prev: Writing the Setup Script,  Up: Top

3 Writing the Setup Configuration File
**************************************

Often, it's not possible to write down everything needed to build a
distribution _a priori_: you may need to get some information from the
user, or from the user's system, in order to proceed.  As long as that
information is fairly simple--a list of directories to search for C
header files or libraries, for example--then providing a configuration
file, `setup.cfg', for users to edit is a cheap and easy way to solicit
it.  Configuration files also let you provide default values for any
command option, which the installer can then override either on the
command-line or by editing the config file.

  The setup configuration file is a useful middle-ground between the
setup script --which, ideally, would be opaque to installers (1)--and
the command-line to the setup script, which is outside of your control
and entirely up to the installer.  In fact, `setup.cfg' (and any other
Distutils configuration files present on the target system) are
processed after the contents of the setup script, but before the
command-line.  This has  several useful consequences:

   * installers can override some of what you put in `setup.py' by
     editing `setup.cfg'

   * you can provide non-standard defaults for options that are not
     easily set in `setup.py'

   * installers can override anything in `setup.cfg' using the
     command-line options to `setup.py'

  The basic syntax of the configuration file is simple:

    [command]
    option=value
    ...

where _command_ is one of the Distutils commands (e.g. *build_py*,
*install*), and _option_ is one of the options that command supports.
Any number of options can be supplied for each command, and any number
of command sections can be included in the file.  Blank lines are
ignored, as are comments, which run from a `'#'' character until the
end of the line.  Long option values can be split across multiple lines
simply by indenting the continuation lines.

  You can find out the list of options supported by a particular
command with the universal `--help' option, e.g.

    > python setup.py --help build_ext
    [...]
    Options for 'build_ext' command:
      --build-lib (-b)     directory for compiled extension modules
      --build-temp (-t)    directory for temporary files (build by-products)
      --inplace (-i)       ignore build-lib and put compiled extensions into the
                           source directory alongside your pure Python modules
      --include-dirs (-I)  list of directories to search for header files
      --define (-D)        C preprocessor macros to define
      --undef (-U)         C preprocessor macros to undefine
      --swig-opts          list of SWIG command line options
    [...]

Note that an option spelled `--foo-bar' on the command-line  is spelled
`foo_bar' in configuration files.

  For example, say you want your extensions to be built
"in-place"--that is, you have an extension `pkg.ext', and you want the
compiled extension file (`ext.so' on Unix, say) to be put in the same
source directory as your pure Python modules `pkg.mod1' and `pkg.mod2'.
You can always use the `--inplace' option on the command-line to ensure
this:

    python setup.py build_ext --inplace

But this requires that you always specify the *build_ext* command
explicitly, and remember to provide `--inplace'. An easier way is to
"set and forget" this option, by encoding it in `setup.cfg', the
configuration file for this distribution:

    [build_ext]
    inplace=1

This will affect all builds of this module distribution, whether or not
you explicitly specify *build_ext*.  If you include `setup.cfg' in your
source distribution, it will also affect end-user builds--which is
probably a bad idea for this option, since always building extensions
in-place would break installation of the module distribution.  In
certain peculiar cases, though, modules are built right in their
installation directory, so this is conceivably a useful ability.
(Distributing extensions that expect to be built in their installation
directory is almost always a bad idea, though.)

  Another example: certain commands take a lot of options that don't
change from run to run; for example, *bdist_rpm* needs to know
everything required to generate a "spec" file for creating an RPM
distribution.  Some of this information comes from the setup script,
and some is automatically generated by the Distutils (such as the list
of files installed).  But some of it has to be supplied as options to
*bdist_rpm*, which would be very tedious to do on the command-line for
every run.  Hence, here is a snippet from the Distutils' own
`setup.cfg':

    [bdist_rpm]
    release = 1
    packager = Greg Ward <gward@python.net>
    doc_files = CHANGES.txt
                README.txt
                USAGE.txt
                doc/
                examples/

Note that the `doc_files' option is simply a whitespace-separated string
split across multiple lines for readability.

See also
--------

_inst-config-syntax_ in "Installing Python Modules"
     More information on the configuration files is available in the
     manual for system administrators.

  ---------- Footnotes ----------

  (1) This ideal probably won't be achieved until auto-configuration is
fully supported by the Distutils.


File: python-distutils-3.2.2.info,  Node: Creating a Source Distribution,  Next: Creating Built Distributions,  Prev: Writing the Setup Configuration File,  Up: Top

4 Creating a Source Distribution
********************************

As shown in section *note A Simple Example: 36, you use the *sdist*
command to create a source distribution.  In the simplest case,

    python setup.py sdist

(assuming you haven't specified any *sdist* options in the setup script
or config file), *sdist* creates the archive of the default format for
the current platform.  The default format is a gzip'ed tar file
(`.tar.gz') on Unix, and ZIP file on Windows.

  You can specify as many formats as you like using the `--formats'
option, for example:

    python setup.py sdist --formats=gztar,zip

to create a gzipped tarball and a zip file.  The available formats are:

Format          Description                   Notes
------------------------------------------------------------ 
`zip'           zip file (`.zip')             (1),(3)
`gztar'         gzip'ed tar file (`.tar.gz')  (2),(4)
`bztar'         bzip2'ed tar file             (4)
                (`.tar.bz2')                  
`ztar'          compressed tar file           (4)
                (`.tar.Z')                    
`tar'           tar file (`.tar')             (4)

  Notes:

  1. default on Windows

  2. default on Unix

  3. requires either external *zip* utility or `zipfile' module (part
     of the standard Python library since Python 1.6)

  4. requires external utilities: *tar* and possibly one of *gzip*,
     *bzip2*, or *compress*

* Menu:

* Specifying the files to distribute::
* Manifest-related options::


File: python-distutils-3.2.2.info,  Node: Specifying the files to distribute,  Next: Manifest-related options,  Up: Creating a Source Distribution

4.1 Specifying the files to distribute
======================================

If you don't supply an explicit list of files (or instructions on how to
generate one), the *sdist* command puts a minimal default set into the
source distribution:

   * all Python source files implied by the `py_modules' and `packages'
     options

   * all C source files mentioned in the `ext_modules' or `libraries'
     options (

   * scripts identified by the `scripts' option See *note Installing
     Scripts: 4e.

   * anything that looks like a test script: `test/test*.py'
     (currently, the Distutils don't do anything with test scripts
     except include them in source distributions, but in the future
     there will be a standard for testing Python module distributions)

   * `README.txt' (or `README'), `setup.py' (or whatever  you called
     your setup script), and `setup.cfg'

   * all files that matches the `package_data' metadata.  See *note
     Installing Package Data: 51.

   * all files that matches the `data_files' metadata.  See *note
     Installing Additional Files: 53.

  Sometimes this is enough, but usually you will want to specify
additional files to distribute.  The typical way to do this is to write
a _manifest template_, called `MANIFEST.in' by default.  The manifest
template is just a list of instructions for how to generate your
manifest file, `MANIFEST', which is the exact list of files to include
in your source distribution.  The *sdist* command processes this
template and generates a manifest based on its instructions and what it
finds in the filesystem.

  If you prefer to roll your own manifest file, the format is simple:
one filename per line, regular files (or symlinks to them) only.  If
you do supply your own `MANIFEST', you must specify everything: the
default set of files described above does not apply in this case.

  Changed in version 3.1: An existing generated `MANIFEST' will be
regenerated without *sdist* comparing its modification time to the one
of `MANIFEST.in' or `setup.py'.

  Changed in version 3.1.3: `MANIFEST' files start with a comment
indicating they are generated.  Files without this comment are not
overwritten or removed.

  Changed in version 3.2.2: *sdist* will read a `MANIFEST' file if no
`MANIFEST.in' exists, like it used to do.

  The manifest template has one command per line, where each command
specifies a set of files to include or exclude from the source
distribution.  For an example, again we turn to the Distutils' own
manifest template:

    include *.txt
    recursive-include examples *.txt *.py
    prune examples/sample?/build

The meanings should be fairly clear: include all files in the
distribution root matching `*.txt', all files anywhere under the
`examples' directory matching `*.txt' or `*.py', and exclude all
directories matching `examples/sample?/build'.  All of this is done
_after_ the standard include set, so you can exclude files from the
standard set with explicit instructions in the manifest template.  (Or,
you can use the `--no-defaults' option to disable the standard set
entirely.)  There are several other commands available in the manifest
template mini-language; see section *note Creating a source
distribution; the sdist command: 5d.

  The order of commands in the manifest template matters: initially, we
have the list of default files as described above, and each command in
the template adds to or removes from that list of files.  Once we have
fully processed the manifest template, we remove files that should not
be included in the source distribution:

   * all files in the Distutils "build" tree (default `build/')

   * all files in directories named `RCS', `CVS', `.svn', `.hg',
     `.git', `.bzr' or `_darcs'

  Now we have our complete list of files, which is written to the
manifest for future reference, and then used to build the source
distribution archive(s).

  You can disable the default set of included files with the
`--no-defaults' option, and you can disable the standard exclude set
with `--no-prune'.

  Following the Distutils' own manifest template, let's trace how the
*sdist* command builds the list of files to include in the Distutils
source distribution:

  1. include all Python source files in the `distutils' and
     `distutils/command' subdirectories (because packages corresponding
     to those two directories were mentioned in the `packages' option
     in the setup script--see section *note Writing the Setup Script:
     38.)

  2. include `README.txt', `setup.py', and `setup.cfg' (standard files)

  3. include `test/test*.py' (standard files)

  4. include `*.txt' in the distribution root (this will find
     `README.txt' a second time, but such redundancies are weeded out
     later)

  5. include anything matching `*.txt' or `*.py' in the sub-tree under
     `examples',

  6. exclude all files in the sub-trees starting at directories matching
     `examples/sample?/build'--this may exclude files included by the
     previous two steps, so it's important that the `prune' command in
     the manifest template comes after the `recursive-include' command

  7. exclude the entire `build' tree, and any `RCS', `CVS', `.svn',
     `.hg', `.git', `.bzr' and `_darcs' directories

  Just like in the setup script, file and directory names in the
manifest template should always be slash-separated; the Distutils will
take care of converting them to the standard representation on your
platform. That way, the manifest template is portable across operating
systems.


File: python-distutils-3.2.2.info,  Node: Manifest-related options,  Prev: Specifying the files to distribute,  Up: Creating a Source Distribution

4.2 Manifest-related options
============================

The normal course of operations for the *sdist* command is as follows:

   * if the manifest file (`MANIFEST' by default) exists and the first
     line does not have a comment indicating it is generated from
     `MANIFEST.in', then it is used as is, unaltered

   * if the manifest file doesn't exist or has been previously
     automatically generated, read `MANIFEST.in' and create the manifest

   * if neither `MANIFEST' nor `MANIFEST.in' exist, create a manifest
     with just the default file set

   * use the list of files now in `MANIFEST' (either just generated or
     read in) to create the source distribution archive(s)

  There are a couple of options that modify this behaviour.  First, use
the `--no-defaults' and `--no-prune' to disable the standard "include"
and "exclude" sets.

  Second, you might just want to (re)generate the manifest, but not
create a source distribution:

    python setup.py sdist --manifest-only

`-o' is a shortcut for `--manifest-only'.


File: python-distutils-3.2.2.info,  Node: Creating Built Distributions,  Next: Registering with the Package Index,  Prev: Creating a Source Distribution,  Up: Top

5 Creating Built Distributions
******************************

A "built distribution" is what you're probably used to thinking of
either as a "binary package" or an "installer" (depending on your
background).  It's not necessarily binary, though, because it might
contain only Python source code and/or byte-code; and we don't call it
a package, because that word is already spoken for in Python.  (And
"installer" is a term specific to the world of mainstream desktop
systems.)

  A built distribution is how you make life as easy as possible for
installers of your module distribution: for users of RPM-based Linux
systems, it's a binary RPM; for Windows users, it's an executable
installer; for Debian-based Linux users, it's a Debian package; and so
forth.  Obviously, no one person will be able to create built
distributions for every platform under the sun, so the Distutils are
designed to enable module developers to concentrate on their
specialty--writing code and creating source distributions--while an
intermediary species called _packagers_ springs up to turn source
distributions into built distributions for as many platforms as there
are packagers.

  Of course, the module developer could be his own packager; or the
packager could be a volunteer "out there" somewhere who has access to a
platform which the original developer does not; or it could be software
periodically grabbing new source distributions and turning them into
built distributions for as many platforms as the software has access
to.  Regardless of who they are, a packager uses the setup script and
the *bdist* command family to generate built distributions.

  As a simple example, if I run the following command in the Distutils
source tree:

    python setup.py bdist

then the Distutils builds my module distribution (the Distutils itself
in this case), does a "fake" installation (also in the `build'
directory), and creates the default type of built distribution for my
platform.  The default format for built distributions is a "dumb" tar
file on Unix, and a simple executable installer on Windows.  (That tar
file is considered "dumb" because it has to be unpacked in a specific
location to work.)

  Thus, the above command on a Unix system creates
`Distutils-1.0._plat_.tar.gz'; unpacking this tarball from the right
place installs the Distutils just as though you had downloaded the
source distribution and run `python setup.py install'.  (The "right
place" is either the root of the filesystem or  Python's `_prefix_'
directory, depending on the options given to the *bdist_dumb* command;
the default is to make dumb distributions relative to `_prefix_'.)

  Obviously, for pure Python distributions, this isn't any simpler than
just running `python setup.py install'--but for non-pure distributions,
which include extensions that would need to be compiled, it can mean
the difference between someone being able to use your extensions or
not.  And creating "smart" built distributions, such as an RPM package
or an executable installer for Windows, is far more convenient for
users even if your distribution doesn't include any extensions.

  The *bdist* command has a `--formats' option, similar to the *sdist*
command, which you can use to select the types of built distribution to
generate: for example,

    python setup.py bdist --format=zip

would, when run on a Unix system, create
`Distutils-1.0._plat_.zip'--again, this archive would be unpacked from
the root directory to install the Distutils.

  The available formats for built distributions are:

Format            Description                        Notes
------------------------------------------------------------------- 
`gztar'           gzipped tar file (`.tar.gz')       (1),(3)
`ztar'            compressed tar file (`.tar.Z')     (3)
`tar'             tar file (`.tar')                  (3)
`zip'             zip file (`.zip')                  (2),(4)
`rpm'             RPM                                (5)
`pkgtool'         Solaris *pkgtool*                  
`sdux'            HP-UX *swinstall*                  
`wininst'         self-extracting ZIP file for       (4)
                  Windows                            
`msi'             Microsoft Installer.               

  Notes:

  1. default on Unix

  2. default on Windows

  3. requires external utilities: *tar* and possibly one of *gzip*,
     *bzip2*, or *compress*

  4. requires either external *zip* utility or `zipfile' module (part
     of the standard Python library since Python 1.6)

  5. requires external *rpm* utility, version 3.0.4 or better (use `rpm
     --version' to find out which version you have)

  You don't have to use the *bdist* command with the `--formats'
option; you can also use the command that directly implements the
format you're interested in.  Some of these *bdist* "sub-commands"
actually generate several similar formats; for instance, the
*bdist_dumb* command generates all the "dumb" archive formats (`tar',
`ztar', `gztar', and `zip'), and *bdist_rpm* generates both binary and
source RPMs.  The *bdist* sub-commands, and the formats generated by
each, are:

Command                        Formats
----------------------------------------------------------- 
*bdist_dumb*                   tar, ztar, gztar, zip
*bdist_rpm*                    rpm, srpm
*bdist_wininst*                wininst
*bdist_msi*                    msi

  The following sections give details on the individual *bdist_**
commands.

* Menu:

* Creating RPM packages::
* Creating Windows Installers::
* Cross-compiling on Windows::
* Vista User Access Control (UAC): Vista User Access Control UAC.


File: python-distutils-3.2.2.info,  Node: Creating RPM packages,  Next: Creating Windows Installers,  Up: Creating Built Distributions

5.1 Creating RPM packages
=========================

The RPM format is used by many popular Linux distributions, including
Red Hat, SuSE, and Mandrake.  If one of these (or any of the other
RPM-based Linux distributions) is your usual environment, creating RPM
packages for other users of that same distribution is trivial.
Depending on the complexity of your module distribution and differences
between Linux distributions, you may also be able to create RPMs that
work on different RPM-based distributions.

  The usual way to create an RPM of your module distribution is to run
the *bdist_rpm* command:

    python setup.py bdist_rpm

or the *bdist* command with the `--format' option:

    python setup.py bdist --formats=rpm

The former allows you to specify RPM-specific options; the latter
allows  you to easily specify multiple formats in one run.  If you need
to do both, you can explicitly specify multiple *bdist_** commands and
their options:

    python setup.py bdist_rpm --packager="John Doe <jdoe@example.org>" \
                    bdist_wininst --target-version="2.0"

Creating RPM packages is driven by a `.spec' file, much as using the
Distutils is driven by the setup script.  To make your life easier, the
*bdist_rpm* command normally creates a `.spec' file based on the
information you supply in the setup script, on the command line, and in
any Distutils configuration files.  Various options and sections in the
`.spec' file are derived from options in the setup script as follows:

RPM `.spec' file option or section             Distutils setup script option
-------------------------------------------------------------------------------------------------- 
Name                                           `name'
Summary (in preamble)                          `description'
Version                                        `version'
Vendor                                         `author' and `author_email', or  -- &
                                               `maintainer' and `maintainer_email'
Copyright                                      `license'
Url                                            `url'
%description (section)                         `long_description'

  Additionally, there are many options in `.spec' files that don't have
corresponding options in the setup script.  Most of these are handled
through options to the *bdist_rpm* command as follows:

RPM `.spec' file option or section  *bdist_rpm* option                default value
---------------------------------------------------------------------------------------------------- 
Release                             `release'                         "1"
Group                               `group'                           "Development/Libraries"
Vendor                              `vendor'                          (see above)
Packager                            `packager'                        (none)
Provides                            `provides'                        (none)
Requires                            `requires'                        (none)
Conflicts                           `conflicts'                       (none)
Obsoletes                           `obsoletes'                       (none)
Distribution                        `distribution_name'               (none)
BuildRequires                       `build_requires'                  (none)
Icon                                `icon'                            (none)

  Obviously, supplying even a few of these options on the command-line
would be tedious and error-prone, so it's usually best to put them in
the setup configuration file, `setup.cfg'--see section *note Writing
the Setup Configuration File: 58.  If you distribute or package many
Python module distributions, you might want to put options that apply
to all of them in your personal Distutils configuration file
(`~/.pydistutils.cfg').

  There are three steps to building a binary RPM package, all of which
are handled automatically by the Distutils:

  1. create a `.spec' file, which describes the package (analogous  to
     the Distutils setup script; in fact, much of the information in
     the  setup script winds up in the `.spec' file)

  2. create the source RPM

  3. create the "binary" RPM (which may or may not contain binary code,
     depending on whether your module distribution contains Python
     extensions)

  Normally, RPM bundles the last two steps together; when you use the
Distutils, all three steps are typically bundled together.

  If you wish, you can separate these three steps.  You can use the
`--spec-only' option to make *bdist_rpm* just create the `.spec' file
and exit; in this case, the `.spec' file will be written to the
"distribution directory"--normally `dist/', but customizable with the
`--dist-dir' option.  (Normally, the `.spec' file winds up deep in the
"build tree," in a temporary directory created by *bdist_rpm*.)


File: python-distutils-3.2.2.info,  Node: Creating Windows Installers,  Next: Cross-compiling on Windows,  Prev: Creating RPM packages,  Up: Creating Built Distributions

5.2 Creating Windows Installers
===============================

Executable installers are the natural format for binary distributions on
Windows.  They display a nice graphical user interface, display some
information about the module distribution to be installed taken from
the metadata in the setup script, let the user select a few options,
and start or cancel the installation.

  Since the metadata is taken from the setup script, creating Windows
installers is usually as easy as running:

    python setup.py bdist_wininst

or the *bdist* command with the `--formats' option:

    python setup.py bdist --formats=wininst

If you have a pure module distribution (only containing pure Python
modules and packages), the resulting installer will be version
independent and have a name like `foo-1.0.win32.exe'.  These installers
can even be created on Unix platforms or Mac OS X.

  If you have a non-pure distribution, the extensions can only be
created on a Windows platform, and will be Python version dependent.
The installer filename will reflect this and now has the form
`foo-1.0.win32-py2.0.exe'.  You have to create a separate installer for
every Python version you want to support.

  The installer will try to compile pure modules into _bytecode_ after
installation on the target system in normal and optimizing mode.  If
you don't want this to happen for some reason, you can run the
*bdist_wininst* command with the `--no-target-compile' and/or the
`--no-target-optimize' option.

  By default the installer will display the cool "Python Powered" logo
when it is run, but you can also supply your own 152x261 bitmap which
must be a Windows `.bmp' file with the `--bitmap' option.

  The installer will also display a large title on the desktop
background window when it is run, which is constructed from the name of
your distribution and the version number.  This can be changed to
another text by using the `--title' option.

  The installer file will be written to the "distribution directory" --
normally `dist/', but customizable with the `--dist-dir' option.


File: python-distutils-3.2.2.info,  Node: Cross-compiling on Windows,  Next: Vista User Access Control UAC,  Prev: Creating Windows Installers,  Up: Creating Built Distributions

5.3 Cross-compiling on Windows
==============================

Starting with Python 2.6, distutils is capable of cross-compiling
between Windows platforms.  In practice, this means that with the
correct tools installed, you can use a 32bit version of Windows to
create 64bit extensions and vice-versa.

  To build for an alternate platform, specify the `--plat-name' option
to the build command.  Valid values are currently 'win32', 'win-amd64'
and 'win-ia64'.  For example, on a 32bit version of Windows, you could
execute:

    python setup.py build --plat-name=win-amd64

to build a 64bit version of your extension.  The Windows Installers also
support this option, so the command:

    python setup.py build --plat-name=win-amd64 bdist_wininst

would create a 64bit installation executable on your 32bit version of
Windows.

  To cross-compile, you must download the Python source code and
cross-compile Python itself for the platform you are targetting - it is
not possible from a binary installation of Python (as the .lib etc file
for other platforms are not included.)  In practice, this means the
user of a 32 bit operating system will need to use Visual Studio 2008
to open the `PCBuild/PCbuild.sln' solution in the Python source tree
and build the "x64" configuration of the 'pythoncore' project before
cross-compiling extensions is possible.

  Note that by default, Visual Studio 2008 does not install 64bit
compilers or tools.  You may need to reexecute the Visual Studio setup
process and select these tools (using Control Panel->[Add/Remove]
Programs is a convenient way to check or modify your existing install.)

* Menu:

* The Postinstallation script::


File: python-distutils-3.2.2.info,  Node: The Postinstallation script,  Up: Cross-compiling on Windows

5.3.1 The Postinstallation script
---------------------------------

Starting with Python 2.3, a postinstallation script can be specified
with the `--install-script' option.  The basename of the script must be
specified, and the script filename must also be listed in the scripts
argument to the setup function.

  This script will be run at installation time on the target system
after all the files have been copied, with `argv[1]' set to `-install',
and again at uninstallation time before the files are removed with
`argv[1]' set to `-remove'.

  The installation script runs embedded in the windows installer, every
output (`sys.stdout', `sys.stderr') is redirected into a buffer and
will be displayed in the GUI after the script has finished.

  Some functions especially useful in this context are available as
additional built-in functions in the installation script.

 -- Function: directory_created (path)
 -- Function: file_created (path)
     These functions should be called when a directory or file is
     created by the postinstall script at installation time.  It will
     register _path_ with the uninstaller, so that it will be removed
     when the distribution is uninstalled.  To be safe, directories are
     only removed if they are empty.

 -- Function: get_special_folder_path (csidl_string)
     This function can be used to retrieve special folder locations on
     Windows like the Start Menu or the Desktop.  It returns the full
     path to the folder.  _csidl_string_ must be one of the following
     strings:

         "CSIDL_APPDATA"

         "CSIDL_COMMON_STARTMENU"
         "CSIDL_STARTMENU"

         "CSIDL_COMMON_DESKTOPDIRECTORY"
         "CSIDL_DESKTOPDIRECTORY"

         "CSIDL_COMMON_STARTUP"
         "CSIDL_STARTUP"

         "CSIDL_COMMON_PROGRAMS"
         "CSIDL_PROGRAMS"

         "CSIDL_FONTS"

     If the folder cannot be retrieved, `OSError' is raised.

     Which folders are available depends on the exact Windows version,
     and probably also the configuration.  For details refer to
     Microsoft's documentation of the `SHGetSpecialFolderPath()'
     function.

 -- Function: create_shortcut (target, description, filename[,
          arguments[, workdir[, iconpath[, iconindex]]]])
     This function creates a shortcut. _target_ is the path to the
     program to be started by the shortcut. _description_ is the
     description of the shortcut.  _filename_ is the title of the
     shortcut that the user will see. _arguments_ specifies the command
     line arguments, if any. _workdir_ is the working directory for the
     program. _iconpath_ is the file containing the icon for the
     shortcut, and _iconindex_ is the index of the icon in the file
     _iconpath_.  Again, for details consult the Microsoft
     documentation for the `IShellLink' interface.


File: python-distutils-3.2.2.info,  Node: Vista User Access Control UAC,  Prev: Cross-compiling on Windows,  Up: Creating Built Distributions

5.4 Vista User Access Control (UAC)
===================================

Starting with Python 2.6, bdist_wininst supports a
`--user-access-control' option.  The default is 'none' (meaning no UAC
handling is done), and other valid values are 'auto' (meaning prompt
for UAC elevation if Python was installed for all users) and 'force'
(meaning always prompt for elevation).


File: python-distutils-3.2.2.info,  Node: Registering with the Package Index,  Next: Uploading Packages to the Package Index,  Prev: Creating Built Distributions,  Up: Top

6 Registering with the Package Index
************************************

The Python Package Index (PyPI) holds meta-data describing distributions
packaged with distutils. The distutils command *register* is used to
submit your distribution's meta-data to the index. It is invoked as
follows:

    python setup.py register

Distutils will respond with the following prompt:

    running register
    We need to know who you are, so please choose either:
        1. use your existing login,
        2. register as a new user,
        3. have the server generate a new password for you (and email it to you), or
        4. quit
    Your selection [default 1]:

Note: if your username and password are saved locally, you will not see
this menu.

  If you have not registered with PyPI, then you will need to do so
now. You should choose option 2, and enter your details as required.
Soon after submitting your details, you will receive an email which
will be used to confirm your registration.

  Once you are registered, you may choose option 1 from the menu. You
will be prompted for your PyPI username and password, and *register*
will then submit your meta-data to the index.

  You may submit any number of versions of your distribution to the
index. If you alter the meta-data for a particular version, you may
submit it again and the index will be updated.

  PyPI holds a record for each (name, version) combination submitted.
The first user to submit information for a given name is designated the
Owner of that name. They may submit changes through the *register*
command or through the web interface. They may also designate other
users as Owners or Maintainers.  Maintainers may edit the package
information, but not designate other Owners or Maintainers.

  By default PyPI will list all versions of a given package. To hide
certain versions, the Hidden property should be set to yes. This must
be edited through the web interface.

* Menu:

* The .pypirc file: The pypirc file.


File: python-distutils-3.2.2.info,  Node: The pypirc file,  Up: Registering with the Package Index

6.1 The .pypirc file
====================

The format of the `.pypirc' file is as follows:

    [distutils]
    index-servers =
        pypi

    [pypi]
    repository: <repository-url>
    username: <username>
    password: <password>

The _distutils_ section defines a _index-servers_ variable that lists
the name of all sections describing a repository.

  Each section describing a repository defines three variables:

   -
    _repository_, that defines the url of the PyPI server. Defaults to
          `http://www.python.org/pypi'.

   - _username_, which is the registered username on the PyPI server.

   -
    _password_, that will be used to authenticate. If omitted the user
          will be prompt to type it when needed.

  If you want to define another server a new section can be created and
listed in the _index-servers_ variable:

    [distutils]
    index-servers =
        pypi
        other

    [pypi]
    repository: <repository-url>
    username: <username>
    password: <password>

    [other]
    repository: http://example.com/pypi
    username: <username>
    password: <password>

*register* can then be called with the -r option to point the
repository to work with:

    python setup.py register -r http://example.com/pypi

For convenience, the name of the section that describes the repository
may also be used:

    python setup.py register -r other



File: python-distutils-3.2.2.info,  Node: Uploading Packages to the Package Index,  Next: Examples,  Prev: Registering with the Package Index,  Up: Top

7 Uploading Packages to the Package Index
*****************************************

The Python Package Index (PyPI) not only stores the package info, but
also  the package data if the author of the package wishes to. The
distutils command *upload* pushes the distribution files to PyPI.

  The command is invoked immediately after building one or more
distribution files.  For example, the command

    python setup.py sdist bdist_wininst upload

will cause the source distribution and the Windows installer to be
uploaded to PyPI.  Note that these will be uploaded even if they are
built using an earlier invocation of `setup.py', but that only
distributions named on the command line for the invocation including
the *upload* command are uploaded.

  The *upload* command uses the username, password, and repository URL
from the `$HOME/.pypirc' file (see section *note The .pypirc file: 74.
for more on this file). If a *register* command was previously called
in the same command, and if the password was entered in the prompt,
*upload* will reuse the entered password. This is useful if you do not
want to store a clear text password in the `$HOME/.pypirc' file.

  You can specify another PyPI server with the `--repository=*url*'
option:

    python setup.py sdist bdist_wininst upload -r http://example.com/pypi

See section *note The .pypirc file: 74. for more on defining several
servers.

  You can use the `--sign' option to tell *upload* to sign each
uploaded file using GPG (GNU Privacy Guard).  The  *gpg* program must
be available for execution on the system `PATH'.  You can also specify
which key to use for signing using the `--identity=*name*' option.

  Other *upload* options include `--repository=' or `--repository='
where _url_ is the url of the server and _section_ the name of the
section in `$HOME/.pypirc', and `--show-response' (which displays the
full response text from the PyPI server for help in debugging upload
problems).

* Menu:

* PyPI package display::


File: python-distutils-3.2.2.info,  Node: PyPI package display,  Up: Uploading Packages to the Package Index

7.1 PyPI package display
========================

The `long_description' field plays a special role at PyPI. It is used by
the server to display a home page for the registered package.

  If you use the reStructuredText(1) syntax for this field, PyPI will
parse it and display an HTML output for the package home page.

  The `long_description' field can be attached to a text file located
in the package:

    from distutils.core import setup

    with open('README.txt') as file:
        long_description = file.read()

    setup(name='Distutils',
          long_description=long_description)

In that case, `README.txt' is a regular reStructuredText text file
located in the root of the package besides `setup.py'.

  To prevent registering broken reStructuredText content, you can use
the *rst2html* program that is provided by the `docutils' package and
check the `long_description' from the command line:

    $ python setup.py --long-description | rst2html.py > output.html

`docutils' will display a warning if there's something wrong with your
syntax.

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/rst.html


File: python-distutils-3.2.2.info,  Node: Examples,  Next: Extending Distutils,  Prev: Uploading Packages to the Package Index,  Up: Top

8 Examples
**********

This chapter provides a number of basic examples to help get started
with distutils.  Additional information about using distutils can be
found in the Distutils Cookbook.

See also
--------

Distutils Cookbook(1)
     Collection of recipes showing how to achieve more control over
     distutils.

* Menu:

* Pure Python distribution (by module): Pure Python distribution by module.
* Pure Python distribution (by package): Pure Python distribution by package.
* Single extension module::
* Checking a package::

  ---------- Footnotes ----------

  (1) http://wiki.python.org/moin/Distutils/Cookbook


File: python-distutils-3.2.2.info,  Node: Pure Python distribution by module,  Next: Pure Python distribution by package,  Up: Examples

8.1 Pure Python distribution (by module)
========================================

If you're just distributing a couple of modules, especially if they
don't live in a particular package, you can specify them individually
using the `py_modules' option in the setup script.

  In the simplest case, you'll have two files to worry about: a setup
script and the single module you're distributing, `foo.py' in this
example:

    <root>/
            setup.py
            foo.py

(In all diagrams in this section, _<root>_ will refer to the
distribution root directory.)  A minimal setup script to describe this
situation would be:

    from distutils.core import setup
    setup(name='foo',
          version='1.0',
          py_modules=['foo'],
          )

Note that the name of the distribution is specified independently with
the `name' option, and there's no rule that says it has to be the same
as the name of the sole module in the distribution (although that's
probably a good convention to follow).  However, the distribution name
is used to generate filenames, so you should stick to letters, digits,
underscores, and hyphens.

  Since `py_modules' is a list, you can of course specify multiple
modules, eg. if you're distributing modules `foo' and `bar', your setup
might look like this:

    <root>/
            setup.py
            foo.py
            bar.py

and the setup script might be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          py_modules=['foo', 'bar'],
          )

You can put module source files into another directory, but if you have
enough modules to do that, it's probably easier to specify modules by
package rather than listing them individually.


File: python-distutils-3.2.2.info,  Node: Pure Python distribution by package,  Next: Single extension module,  Prev: Pure Python distribution by module,  Up: Examples

8.2 Pure Python distribution (by package)
=========================================

If you have more than a couple of modules to distribute, especially if
they are in multiple packages, it's probably easier to specify whole
packages rather than individual modules.  This works even if your
modules are not in a package; you can just tell the Distutils to
process modules from the root package, and that works the same as any
other package (except that you don't have to have an `__init__.py'
file).

  The setup script from the last example could also be written as

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=[''],
          )

(The empty string stands for the root package.)

  If those two files are moved into a subdirectory, but remain in the
root package, e.g.:

    <root>/
            setup.py
            src/      foo.py
                      bar.py

then you would still specify the root package, but you have to tell the
Distutils where source files in the root package live:

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'': 'src'},
          packages=[''],
          )

More typically, though, you will want to distribute multiple modules in
the same package (or in sub-packages).  For example, if the `foo'  and
`bar' modules belong in package `foobar', one way to layout your source
tree is

    <root>/
            setup.py
            foobar/
                     __init__.py
                     foo.py
                     bar.py

This is in fact the default layout expected by the Distutils, and the
one that requires the least work to describe in your setup script:

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=['foobar'],
          )

If you want to put modules in directories not named for their package,
then you need to use the `package_dir' option again.  For example, if
the `src' directory holds modules in the `foobar' package:

    <root>/
            setup.py
            src/
                     __init__.py
                     foo.py
                     bar.py

an appropriate setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'foobar': 'src'},
          packages=['foobar'],
          )

Or, you might put modules from your main package right in the
distribution root:

    <root>/
            setup.py
            __init__.py
            foo.py
            bar.py

in which case your setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'foobar': ''},
          packages=['foobar'],
          )

(The empty string also stands for the current directory.)

  If you have sub-packages, they must be explicitly listed in
`packages', but any entries in `package_dir' automatically extend to
sub-packages.  (In other words, the Distutils does _not_ scan your
source tree, trying to figure out which directories correspond to
Python packages by looking for `__init__.py' files.)  Thus, if the
default layout grows a sub-package:

    <root>/
            setup.py
            foobar/
                     __init__.py
                     foo.py
                     bar.py
                     subfoo/
                               __init__.py
                               blah.py

then the corresponding setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=['foobar', 'foobar.subfoo'],
          )

(Again, the empty string in `package_dir' stands for the current
directory.)


File: python-distutils-3.2.2.info,  Node: Single extension module,  Next: Checking a package,  Prev: Pure Python distribution by package,  Up: Examples

8.3 Single extension module
===========================

Extension modules are specified using the `ext_modules' option.
`package_dir' has no effect on where extension source files are found;
it only affects the source for pure Python modules.  The simplest
case, a single extension module in a single C source file, is:

    <root>/
            setup.py
            foo.c

If the `foo' extension belongs in the root package, the setup script for
this could be

    from distutils.core import setup
    from distutils.extension import Extension
    setup(name='foobar',
          version='1.0',
          ext_modules=[Extension('foo', ['foo.c'])],
          )

If the extension actually belongs in a package, say `foopkg', then

  With exactly the same source tree layout, this extension can be put
in the `foopkg' package simply by changing the name of the extension:

    from distutils.core import setup
    from distutils.extension import Extension
    setup(name='foobar',
          version='1.0',
          ext_modules=[Extension('foopkg.foo', ['foo.c'])],
          )



File: python-distutils-3.2.2.info,  Node: Checking a package,  Prev: Single extension module,  Up: Examples

8.4 Checking a package
======================

The `check' command allows you to verify if your package meta-data meet
the minimum requirements to build a distribution.

  To run it, just call it using your `setup.py' script. If something is
missing, `check' will display a warning.

  Let's take an example with a simple script:

    from distutils.core import setup

    setup(name='foobar')

Running the `check' command will display some warnings:

    $ python setup.py check
    running check
    warning: check: missing required meta-data: version, url
    warning: check: missing meta-data: either (author and author_email) or
             (maintainer and maintainer_email) must be supplied

If you use the reStructuredText syntax in the `long_description' field
and docutils(1)  is installed you can check if the syntax is fine with
the `check' command, using the `restructuredtext' option.

  For example, if the `setup.py' script is changed like this:

    from distutils.core import setup

    desc = """\
    My description
    =============

    This is the description of the ``foobar`` package.
    """

    setup(name='foobar', version='1', author='tarek',
        author_email='tarek@ziade.org',
        url='http://example.com', long_description=desc)

Where the long description is broken, `check' will be able to detect it
by using the `docutils' parser:

    $ python setup.py check --restructuredtext
    running check
    warning: check: Title underline too short. (line 2)
    warning: check: Could not finish the parsing.


  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net


File: python-distutils-3.2.2.info,  Node: Extending Distutils,  Next: Command Reference,  Prev: Examples,  Up: Top

9 Extending Distutils
*********************

Distutils can be extended in various ways.  Most extensions take the
form of new commands or replacements for existing commands.  New
commands may be written to support new types of platform-specific
packaging, for example, while replacements for existing commands may be
made to modify details of how the command operates on a package.

  Most extensions of the distutils are made within `setup.py' scripts
that want to modify existing commands; many simply add a few file
extensions that should be copied into packages in addition to `.py'
files as a convenience.

  Most distutils command implementations are subclasses of the *note
distutils.cmd.Command: 87. class.  New commands may directly inherit
from `Command', while replacements often derive from `Command'
indirectly, directly subclassing the command they are replacing.
Commands are required to derive from `Command'.

* Menu:

* Integrating new commands::
* Adding new distribution types::


File: python-distutils-3.2.2.info,  Node: Integrating new commands,  Next: Adding new distribution types,  Up: Extending Distutils

9.1 Integrating new commands
============================

There are different ways to integrate new command implementations into
distutils.  The most difficult is to lobby for the inclusion of the new
features in distutils itself, and wait for (and require) a version of
Python that provides that support.  This is really hard for many
reasons.

  The most common, and possibly the most reasonable for most needs, is
to include the new implementations with your `setup.py' script, and
cause the *note distutils.core.setup(): 4c. function use them:

    from distutils.command.build_py import build_py as _build_py
    from distutils.core import setup

    class build_py(_build_py):
        """Specialized Python source builder."""

        # implement whatever needs to be different...

    setup(cmdclass={'build_py': build_py},
          ...)

This approach is most valuable if the new implementations must be used
to use a particular package, as everyone interested in the package will
need to have the new command implementation.

  Beginning with Python 2.4, a third option is available, intended to
allow new commands to be added which can support existing `setup.py'
scripts without requiring modifications to the Python installation.
This is expected to allow third-party extensions to provide support for
additional packaging systems, but the commands can be used for anything
distutils commands can be used for.  A new configuration option,
`command_packages' (command-line option `--command-packages'), can be
used to specify additional packages to be searched for modules
implementing commands.  Like all distutils options, this can be
specified on the command line or in a configuration file.  This option
can only be set in the `[global]' section of a configuration file, or
before any commands on the command line.  If set in a configuration
file, it can be overridden from the command line; setting it to an
empty string on the command line causes the default to be used.  This
should never be set in a configuration file provided with a package.

  This new option can be used to add any number of packages to the list
of packages searched for command implementations; multiple package
names should be separated by commas.  When not specified, the search is
only performed in the *note distutils.command: 4. package.  When
`setup.py' is run with the option `--command-packages'
`distcmds,buildcmds', however, the packages *note distutils.command: 4,
`distcmds', and `buildcmds' will be searched in that order.  New
commands are expected to be implemented in modules of the same name as
the command by classes sharing the same name.  Given the example
command line option above, the command *bdist_openpkg* could be
implemented by the class `distcmds.bdist_openpkg.bdist_openpkg' or
`buildcmds.bdist_openpkg.bdist_openpkg'.


File: python-distutils-3.2.2.info,  Node: Adding new distribution types,  Prev: Integrating new commands,  Up: Extending Distutils

9.2 Adding new distribution types
=================================

Commands that create distributions (files in the `dist/' directory) need
to add `(command, filename)' pairs to `self.distribution.dist_files' so
that *upload* can upload it to PyPI.  The _filename_ in the pair
contains no path information, only the name of the file itself.  In
dry-run mode, pairs should still be added to represent what would have
been created.


File: python-distutils-3.2.2.info,  Node: Command Reference,  Next: API Reference,  Prev: Extending Distutils,  Up: Top

10 Command Reference
********************

* Menu:

* Installing modules; the install command family: Installing modules the install command family.
* Creating a source distribution; the sdist command: Creating a source distribution the sdist command.

Installing modules: the install command family

* install_data::
* install_scripts::


File: python-distutils-3.2.2.info,  Node: Installing modules the install command family,  Next: Creating a source distribution the sdist command,  Up: Command Reference

10.1 Installing modules: the *install* command family
=====================================================

The install command ensures that the build commands have been run and
then runs the subcommands *install_lib*, *install_data* and
*install_scripts*.

* Menu:

* install_data::
* install_scripts::


File: python-distutils-3.2.2.info,  Node: install_data,  Next: install_scripts,  Up: Installing modules the install command family

10.1.1 *install_data*
---------------------

This command installs all data files provided with the distribution.


File: python-distutils-3.2.2.info,  Node: install_scripts,  Prev: install_data,  Up: Installing modules the install command family

10.1.2 *install_scripts*
------------------------

This command installs all (Python) scripts in the distribution.


File: python-distutils-3.2.2.info,  Node: Creating a source distribution the sdist command,  Prev: Installing modules the install command family,  Up: Command Reference

10.2 Creating a source distribution: the *sdist* command
========================================================

The manifest template commands are:

Command                                         Description
---------------------------------------------------------------------------------------------------- 
*include pat1 pat2 ...*                         include all files matching any of the listed
                                                patterns
*exclude pat1 pat2 ...*                         exclude all files matching any of the listed
                                                patterns
*recursive-include dir pat1 pat2 ...*           include all files under _dir_ matching any of the
                                                listed patterns
*recursive-exclude dir pat1 pat2 ...*           exclude all files under _dir_ matching any of the
                                                listed patterns
*global-include pat1 pat2 ...*                  include all files anywhere in the source tree
                                                matching -- & any of the listed patterns
*global-exclude pat1 pat2 ...*                  exclude all files anywhere in the source tree
                                                matching -- & any of the listed patterns
*prune dir*                                     exclude all files under _dir_
*graft dir*                                     include all files under _dir_

  The patterns here are Unix-style "glob" patterns: `*' matches any
sequence of regular filename characters, `?' matches any single regular
filename character, and `[range]' matches any of the characters in
_range_ (e.g., `a-z', `a-zA-Z', `a-f0-9_.').  The definition of
"regular filename character" is platform-specific: on Unix it is
anything except slash; on Windows anything except backslash or colon.


File: python-distutils-3.2.2.info,  Node: API Reference,  Next: Python Module Index,  Prev: Command Reference,  Up: Top

11 API Reference
****************

* Menu:

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.emxccompiler: distutils emxccompiler --- OS/2 EMX Compiler. OS/2 EMX Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command::
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package


File: python-distutils-3.2.2.info,  Node: distutils core --- Core Distutils functionality,  Next: distutils ccompiler --- CCompiler base class,  Up: API Reference

11.1 `distutils.core' -- Core Distutils functionality
=====================================================

The *note distutils.core: 1a. module is the only module that needs to
be installed to use the Distutils. It provides the *note setup(): 4c.
(which is called from the setup script). Indirectly provides the
`distutils.dist.Distribution' and *note distutils.cmd.Command: 87.
class.

 -- Function: distutils.core.setup (arguments)
     The basic do-everything function that does most everything you
     could ever ask for from a Distutils method.

     The setup function takes a large number of arguments. These are
     laid out in the following table.

     argument name            value                                type
     -------------------------------------------------------------------------------------------------------------------------------- 
     _name_                   The name of the package              a string
     _version_                The version number of the package    See *note distutils.version: 2d.
     _description_            A single line describing the package a string
     _long_description_       Longer description of the package    a string
     _author_                 The name of the package author       a string
     _author_email_           The email address of the package     a string
                              author                               
     _maintainer_             The name of the current maintainer,  a string
                              if different from the author         
     _maintainer_email_       The email address of the current     
                              maintainer, if different from the    
                              author                               
     _url_                    A URL for the package (homepage)     a URL
     _download_url_           A URL to download the package        a URL
     _packages_               A list of Python packages that       a list of strings
                              distutils will manipulate            
     _py_modules_             A list of Python modules that        a list of strings
                              distutils will manipulate            
     _scripts_                A list of standalone script files    a list of strings
                              to be built and installed            
     _ext_modules_            A list of Python extensions to be    A list of  instances of *note distutils.core.Extension: 98.
                              built                                
     _classifiers_            A list of categories for the package The list of available categorizations is available on PyPI(1).
     _distclass_              the *note Distribution: 99.  class   A subclass of *note distutils.core.Distribution: 99.
                              to use                               
     _script_name_            The name of the setup.py script -    a string
                              defaults to `sys.argv[0]'            
     _script_args_            Arguments to supply to the setup     a list of strings
                              script                               
     _options_                default options for the setup script a string
     _license_                The license for the package          a string
     _keywords_               Descriptive meta-data, see PEP       
                              314(2)                               
     _platforms_                                                   
     _cmdclass_               A mapping of command names to *note  a dictionary
                              Command: 9a. subclasses              
     _data_files_             A list of data files to install      a list
     _package_dir_            A mapping of package to directory    a dictionary
                              names                                


 -- Function: distutils.core.run_setup (script_name[, script_args=None,
          stop_after='run'])
     Run a setup script in a somewhat controlled environment, and
     return  the `distutils.dist.Distribution' instance that drives
     things.   This is useful if you need to find out the distribution
     meta-data  (passed as keyword args from _script_ to *note setup():
     4c.), or  the contents of the config files or command-line.

     _script_name_ is a file that will be read and run with `exec()'.
     `sys.argv[0]' will be replaced with _script_ for the duration of
     the call.  _script_args_ is a list of strings; if supplied,
     `sys.argv[1:]' will be replaced by _script_args_ for the duration
     of the call.

     _stop_after_ tells *note setup(): 4c. when to stop processing;
     possible  values:

     value               description
     ---------------------------------------------------------------------- 
     _init_              Stop after the *note Distribution: 99.  instance
                         has been created  and populated with the keyword
                         arguments to *note setup(): 4c.
     _config_            Stop after config files have been parsed (and
                         their data stored in the *note Distribution: 99.
                         instance)
     _commandline_       Stop after the command-line (`sys.argv[1:]' or
                         _script_args_) have been parsed (and the data
                         stored in the *note Distribution: 99. instance.)
     _run_               Stop after all commands have been run (the same
                         as  if *note setup(): 4c. had been called in the
                         usual way). This is the default value.


  In addition, the *note distutils.core: 1a. module exposed a number of
classes that live elsewhere.

   * `Extension' from *note distutils.extension: 22.

   * *note Command: 87. from *note distutils.cmd: 3.

   * `Distribution' from *note distutils.dist: 1f.

  A short description of each of these follows, but see the relevant
module for the full reference.

 -- Class: distutils.core.Extension
     The Extension class describes a single C or C++extension module in
     a setup script. It accepts the following keyword arguments in its
     constructor

     argument name                value                                type
     -------------------------------------------------------------------------------------------------- 
     _name_                       the full name of the extension,      string
                                  including any packages -- ie. _not_  
                                  a filename or pathname, but Python   
                                  dotted name                          
     _sources_                    list of source filenames, relative   string
                                  to the distribution root (where the  
                                  setup script lives), in Unix form    
                                  (slash- separated) for portability.  
                                  Source files may be C, C++, SWIG     
                                  (.i), platform-specific resource     
                                  files, or whatever else is           
                                  recognized by the *build_ext*        
                                  command as source for a Python       
                                  extension.                           
     _include_dirs_               list of directories to search for    string
                                  C/C++ header files (in Unix form     
                                  for portability)                     
     _define_macros_              list of macros to define; each       (string, string) tuple or
                                  macro is defined using a 2-tuple     (name, `None')
                                  `(name, value)', where _value_ is    
                                  either the string to define it to    
                                  or `None' to define it without a     
                                  particular value (equivalent of      
                                  `#define FOO' in source or `-DFOO'   
                                  on Unix C compiler command line)     
     _undef_macros_               list of macros to undefine           string
                                  explicitly                           
     _library_dirs_               list of directories to search for    string
                                  C/C++ libraries at link time         
     _libraries_                  list of library names (not           string
                                  filenames or paths) to link against  
     _runtime_library_dirs_       list of directories to search for    string
                                  C/C++ libraries at run time (for     
                                  shared extensions, this is when the  
                                  extension is loaded)                 
     _extra_objects_              list of extra files to link with     string
                                  (eg. object files not implied by     
                                  'sources', static library that must  
                                  be explicitly specified, binary      
                                  resource files, etc.)                
     _extra_compile_args_         any extra platform- and              string
                                  compiler-specific information to     
                                  use when compiling the source files  
                                  in 'sources'. For platforms and      
                                  compilers where a command line       
                                  makes sense, this is typically a     
                                  list of command-line arguments, but  
                                  for other platforms it could be      
                                  anything.                            
     _extra_link_args_            any extra platform- and              string
                                  compiler-specific information to     
                                  use when linking object files        
                                  together to create the extension     
                                  (or to create a new static Python    
                                  interpreter).  Similar               
                                  interpretation as for                
                                  'extra_compile_args'.                
     _export_symbols_             list of symbols to be exported from  string
                                  a shared extension. Not used on all  
                                  platforms, and not generally         
                                  necessary for Python extensions,     
                                  which typically export exactly one   
                                  symbol: `init' + extension_name.     
     _depends_                    list of files that the extension     string
                                  depends on                           
     _language_                   extension language (i.e.  `'c'',     string
                                  `'c++'', `'objc''). Will be detected 
                                  from the source extensions if not    
                                  provided.                            
     _optional_                   specifies that a build failure in    a boolean
                                  the extension should not abort the   
                                  build process, but simply skip the   
                                  extension.                           


 -- Class: distutils.core.Distribution
     A *note Distribution: 99. describes how to build, install and
     package up a Python software package.

     See the *note setup(): 4c. function for a list of keyword
     arguments accepted  by the Distribution constructor. *note
     setup(): 4c. creates a Distribution instance.

 -- Class: distutils.core.Command
     A *note Command: 9a. class (or rather, an instance of one of its
     subclasses) implement a single distutils command.

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi?:action=list_classifiers

  (2) http://www.python.org/dev/peps/pep-0314


File: python-distutils-3.2.2.info,  Node: distutils ccompiler --- CCompiler base class,  Next: distutils unixccompiler --- Unix C Compiler,  Prev: distutils core --- Core Distutils functionality,  Up: API Reference

11.2 `distutils.ccompiler' -- CCompiler base class
==================================================

This module provides the abstract base class for the *note CCompiler:
9d.  classes.  A *note CCompiler: 9d. instance can be used for all the
compile  and link steps needed to build a single project. Methods are
provided to  set options for the compiler -- macro definitions, include
directories,  link path, libraries and the like.

  This module provides the following functions.

 -- Function: distutils.ccompiler.gen_lib_options (compiler,
          library_dirs, runtime_library_dirs, libraries)
     Generate linker options for searching library directories and
     linking with specific libraries.  _libraries_ and _library_dirs_
     are, respectively, lists of library names (not filenames!) and
     search directories.  Returns a list of command-line options
     suitable for use with some compiler (depending on the two format
     strings passed in).

 -- Function: distutils.ccompiler.gen_preprocess_options (macros,
          include_dirs)
     Generate C pre-processor options (`-D', `-U', `-I') as used by at
     least two types of compilers: the typical Unix compiler and Visual
     C++. _macros_ is the usual thing, a list of 1- or 2-tuples, where
     `(name,)' means undefine (`-U') macro _name_, and `(name, value)'
     means define (`-D') macro _name_ to _value_.  _include_dirs_ is
     just a list of directory names to be added to the header file
     search path (`-I').  Returns a list of command-line options
     suitable for either Unix compilers or Visual C++.

 -- Function: distutils.ccompiler.get_default_compiler (osname,
          platform)
     Determine the default compiler to use for the given platform.

     _osname_ should be one of the standard Python OS names (i.e. the
     ones returned by `os.name') and _platform_ the common value
     returned by `sys.platform' for the platform in question.

     The default values are `os.name' and `sys.platform' in case the
     parameters are not given.

 -- Function: distutils.ccompiler.new_compiler (plat=None,
          compiler=None, verbose=0, dry_run=0, force=0)
     Factory function to generate an instance of some CCompiler
     subclass for the supplied platform/compiler combination. _plat_
     defaults to `os.name' (eg.  `'posix'', `'nt''), and _compiler_
     defaults to the default compiler for that platform. Currently only
     `'posix'' and `'nt'' are supported, and the default compilers are
     "traditional Unix interface" (`UnixCCompiler' class) and Visual
     C++ (`MSVCCompiler' class).  Note that it's perfectly possible to
     ask for a Unix compiler object under Windows, and a Microsoft
     compiler object under Unix--if you supply a value for _compiler_,
     _plat_ is ignored.


 -- Function: distutils.ccompiler.show_compilers ()
     Print list of available compilers (used by the `--help-compiler'
     options to *build*, *build_ext*, *build_clib*).

 -- Class: distutils.ccompiler.CCompiler ([verbose=0, dry_run=0,
          force=0])
     The abstract base class *note CCompiler: 9d. defines the interface
     that  must be implemented by real compiler classes.  The class
     also has  some utility methods used by several compiler classes.

     The basic idea behind a compiler abstraction class is that each
     instance can be used for all the compile/link steps in building a
     single project.  Thus, attributes common to all of those compile
     and link steps -- include directories, macros to define, libraries
     to link against, etc. -- are attributes of the compiler instance.
     To allow for variability in how individual files are treated, most
     of those attributes may be varied on a per-compilation or per-link
     basis.

     The constructor for each subclass creates an instance of the
     Compiler object.  Flags are _verbose_ (show verbose output),
     _dry_run_ (don't actually execute the steps) and _force_ (rebuild
     everything, regardless of dependencies). All of these flags
     default to `0' (off). Note that you probably don't want to
     instantiate *note CCompiler: 9d. or one of its subclasses directly
     - use the `distutils.CCompiler.new_compiler()' factory function
     instead.

     The following methods allow you to manually alter compiler options
     for  the instance of the Compiler class.

      -- Method: add_include_dir (dir)
          Add _dir_ to the list of directories that will be searched
          for header files.  The compiler is instructed to search
          directories in the order in which they are supplied by
          successive calls to *note add_include_dir(): a3.

      -- Method: set_include_dirs (dirs)
          Set the list of directories that will be searched to _dirs_
          (a list of strings).  Overrides any preceding calls to *note
          add_include_dir(): a3.; subsequent calls to *note
          add_include_dir(): a3. add to the list passed to *note
          set_include_dirs(): a4.  This does not affect any list of
          standard include directories that the compiler may search by
          default.

      -- Method: add_library (libname)
          Add _libname_ to the list of libraries that will be included
          in all links driven by this compiler object.  Note that
          _libname_ should *not* be the name of a file containing a
          library, but the name of the library itself: the actual
          filename will be inferred by the linker, the compiler, or the
          compiler class (depending on the platform).

          The linker will be instructed to link against libraries in
          the order they were supplied to *note add_library(): a5.
          and/or *note set_libraries(): a6.  It is perfectly valid to
          duplicate library names; the linker will be instructed to
          link against libraries as many times as they are mentioned.

      -- Method: set_libraries (libnames)
          Set the list of libraries to be included in all links driven
          by this compiler object to _libnames_ (a list of strings).
          This does not affect any standard system libraries that the
          linker may include by default.

      -- Method: add_library_dir (dir)
          Add _dir_ to the list of directories that will be searched
          for libraries specified to *note add_library(): a5. and *note
          set_libraries(): a6.  The linker will be instructed to search
          for libraries in the order they are supplied to *note
          add_library_dir(): a7. and/or *note set_library_dirs(): a8.

      -- Method: set_library_dirs (dirs)
          Set the list of library search directories to _dirs_ (a list
          of strings).  This does not affect any standard library
          search path that the linker may search by default.

      -- Method: add_runtime_library_dir (dir)
          Add _dir_ to the list of directories that will be searched
          for shared libraries at runtime.

      -- Method: set_runtime_library_dirs (dirs)
          Set the list of directories to search for shared libraries at
          runtime to _dirs_ (a list of strings).  This does not affect
          any standard search path that the runtime linker may search
          by default.

      -- Method: define_macro (name[, value=None])
          Define a preprocessor macro for all compilations driven by
          this compiler object.  The optional parameter _value_ should
          be a string; if it is not supplied, then the macro will be
          defined without an explicit value and the exact outcome
          depends on the compiler used (XXX true? does ANSI say
          anything about this?)

      -- Method: undefine_macro (name)
          Undefine a preprocessor macro for all compilations driven by
          this compiler object.  If the same macro is defined by *note
          define_macro(): ab. and undefined by *note undefine_macro():
          ac. the last call takes precedence (including multiple
          redefinitions or undefinitions).  If the macro is
          redefined/undefined on a per-compilation basis (ie. in the
          call to `compile()'), then that takes precedence.

      -- Method: add_link_object (object)
          Add _object_ to the list of object files (or analogues, such
          as explicitly named library files or the output of "resource
          compilers") to be included in every link driven by this
          compiler object.

      -- Method: set_link_objects (objects)
          Set the list of object files (or analogues) to be included in
          every link to _objects_.  This does not affect any standard
          object files that the linker may include by default (such as
          system libraries).

     The following methods implement methods for autodetection of
     compiler  options, providing some functionality similar to GNU
     *autoconf*.

      -- Method: detect_language (sources)
          Detect the language of a given file, or list of files. Uses
          the  instance attributes `language_map' (a dictionary), and
          `language_order' (a list) to do the job.

      -- Method: find_library_file (dirs, lib[, debug=0])
          Search the specified list of directories for a static or
          shared library file _lib_ and return the full path to that
          file.  If _debug_ is true, look for a debugging version (if
          that makes sense on the current platform).  Return `None' if
          _lib_ wasn't found in any of the specified directories.

      -- Method: has_function (funcname[, includes=None,
               include_dirs=None, libraries=None, library_dirs=None])
          Return a boolean indicating whether _funcname_ is supported
          on the current platform.  The optional arguments can be used
          to augment the compilation environment by providing
          additional include files and paths and libraries and paths.

      -- Method: library_dir_option (dir)
          Return the compiler option to add _dir_ to the list of
          directories searched for libraries.

      -- Method: library_option (lib)
          Return the compiler option to add _dir_ to the list of
          libraries linked into the shared library or executable.

      -- Method: runtime_library_dir_option (dir)
          Return the compiler option to add _dir_ to the list of
          directories searched for runtime libraries.

      -- Method: set_executables (**args)
          Define the executables (and options for them) that will be
          run to perform the various stages of compilation.  The exact
          set of executables that may be specified here depends on the
          compiler class (via the 'executables' class attribute), but
          most will have:

          attribute          description
          ------------------------------------------------------------------ 
          _compiler_         the C/C++ compiler
          _linker_so_        linker used to create shared objects and
                             libraries
          _linker_exe_       linker used to create binary executables
          _archiver_         static library creator

          On platforms with a command-line (Unix, DOS/Windows), each of
          these is a string that will be split into executable name and
          (optional) list of arguments.  (Splitting the string is done
          similarly to how Unix shells operate: words are delimited by
          spaces, but quotes and backslashes can override this.  See
          *note distutils.util.split_quoted(): b6.)

     The following methods invoke stages in the build process.

      -- Method: compile (sources[, output_dir=None, macros=None,
               include_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, depends=None])
          Compile one or more source files. Generates object files
          (e.g.  transforms a `.c' file to a `.o' file.)

          _sources_ must be a list of filenames, most likely C/C++
          files, but in reality anything that can be handled by a
          particular compiler and compiler class (eg.  `MSVCCompiler'
          can handle resource files in _sources_).  Return a list of
          object filenames, one per source filename in _sources_.
          Depending on the implementation, not all source files will
          necessarily be compiled, but all corresponding object
          filenames will be returned.

          If _output_dir_ is given, object files will be put under it,
          while retaining their original path component.  That is,
          `foo/bar.c' normally compiles to `foo/bar.o' (for a Unix
          implementation); if _output_dir_ is _build_, then it would
          compile to `build/foo/bar.o'.

          _macros_, if given, must be a list of macro definitions.  A
          macro definition is either a `(name, value)' 2-tuple or a
          `(name,)' 1-tuple. The former defines a macro; if the value
          is `None', the macro is defined without an explicit value.
          The 1-tuple case undefines a macro.  Later
          definitions/redefinitions/undefinitions take precedence.

          _include_dirs_, if given, must be a list of strings, the
          directories to add to the default include file search path
          for this compilation only.

          _debug_ is a boolean; if true, the compiler will be
          instructed to output debug symbols in (or alongside) the
          object file(s).

          _extra_preargs_ and _extra_postargs_ are
          implementation-dependent. On platforms that have the notion
          of a command-line (e.g. Unix, DOS/Windows), they are most
          likely lists of strings: extra command-line arguments to
          prepend/append to the compiler command line.  On other
          platforms, consult the implementation class documentation.
          In any event, they are intended as an escape hatch for those
          occasions when the abstract compiler framework doesn't cut
          the mustard.

          _depends_, if given, is a list of filenames that all targets
          depend on.  If a source file is older than any file in
          depends, then the source file will be recompiled.  This
          supports dependency tracking, but only at a coarse
          granularity.

          Raises `CompileError' on failure.

      -- Method: create_static_lib (objects, output_libname[,
               output_dir=None, debug=0, target_lang=None])
          Link a bunch of stuff together to create a static library
          file. The "bunch of stuff" consists of the list of object
          files supplied as _objects_, the extra object files supplied
          to *note add_link_object(): ad. and/or *note
          set_link_objects(): ae, the libraries supplied to *note
          add_library(): a5. and/or *note set_libraries(): a6, and the
          libraries supplied as _libraries_ (if any).

          _output_libname_ should be a library name, not a filename;
          the filename will be inferred from the library name.
          _output_dir_ is the directory where the library file will be
          put. XXX defaults to what?

          _debug_ is a boolean; if true, debugging information will be
          included in the library (note that on most platforms, it is
          the compile step where this matters: the _debug_ flag is
          included here just for consistency).

          _target_lang_ is the target language for which the given
          objects are being compiled. This allows specific linkage time
          treatment of certain languages.

          Raises `LibError' on failure.

      -- Method: link (target_desc, objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a bunch of stuff together to create an executable or
          shared library file.

          The "bunch of stuff" consists of the list of object files
          supplied as _objects_.  _output_filename_ should be a
          filename.  If _output_dir_ is supplied, _output_filename_ is
          relative to it (i.e. _output_filename_ can provide directory
          components if needed).

          _libraries_ is a list of libraries to link against.  These
          are library names, not filenames, since they're translated
          into filenames in a platform-specific way (eg. _foo_ becomes
          `libfoo.a' on Unix and `foo.lib' on DOS/Windows).  However,
          they can include a directory component, which means the
          linker will look in that specific directory rather than
          searching all the normal locations.

          _library_dirs_, if supplied, should be a list of directories
          to search for libraries that were specified as bare library
          names (ie. no directory component).  These are on top of the
          system default and those supplied to *note add_library_dir():
          a7. and/or *note set_library_dirs(): a8.
          _runtime_library_dirs_ is a list of directories that will be
          embedded into the shared library and used to search for other
          shared libraries that *it* depends on at run-time.  (This may
          only be relevant on Unix.)

          _export_symbols_ is a list of symbols that the shared library
          will export.  (This appears to be relevant only on Windows.)

          _debug_ is as for `compile()' and *note create_static_lib():
          b8,  with the slight distinction that it actually matters on
          most platforms (as opposed to *note create_static_lib(): b8,
          which includes a _debug_ flag mostly for form's sake).

          _extra_preargs_ and _extra_postargs_ are as for `compile()'
          (except of course that they supply command-line arguments for
          the particular linker being used).

          _target_lang_ is the target language for which the given
          objects are being compiled. This allows specific linkage time
          treatment of certain languages.

          Raises `LinkError' on failure.

      -- Method: link_executable (objects, output_progname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, target_lang=None])
          Link an executable.  _output_progname_ is the name of the
          file executable, while _objects_ are a list of object
          filenames to link in. Other arguments  are as for the *note
          link(): b9. method.

      -- Method: link_shared_lib (objects, output_libname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a shared library. _output_libname_ is the name of the
          output  library, while _objects_ is a list of object
          filenames to link in.  Other arguments are as for the *note
          link(): b9. method.

      -- Method: link_shared_object (objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a shared object. _output_filename_ is the name of the
          shared object that will be created, while _objects_ is a list
          of object filenames  to link in.  Other arguments are as for
          the *note link(): b9. method.

      -- Method: preprocess (source[, output_file=None, macros=None,
               include_dirs=None, extra_preargs=None,
               extra_postargs=None])
          Preprocess a single C/C++ source file, named in _source_.
          Output will be written to file named _output_file_, or
          _stdout_ if _output_file_ not supplied.  _macros_ is a list
          of macro definitions as for `compile()', which will augment
          the macros set with *note define_macro(): ab. and *note
          undefine_macro(): ac.  _include_dirs_ is a list of directory
          names that will be added to the  default list, in the same
          way as *note add_include_dir(): a3.

          Raises `PreprocessError' on failure.

     The following utility methods are defined by the *note CCompiler:
     9d. class, for use by the various concrete subclasses.

      -- Method: executable_filename (basename[, strip_dir=0,
               output_dir=''])
          Returns the filename of the executable for the given
          _basename_.  Typically for non-Windows platforms this is the
          same as the basename,  while Windows will get a `.exe' added.

      -- Method: library_filename (libname[, lib_type='static',
               strip_dir=0, output_dir=''])
          Returns the filename for the given library name on the
          current platform. On Unix a library with _lib_type_ of
          `'static'' will typically  be of the form `liblibname.a',
          while a _lib_type_ of `'dynamic''  will be of the form
          `liblibname.so'.

      -- Method: object_filenames (source_filenames[, strip_dir=0,
               output_dir=''])
          Returns the name of the object files for the given source
          files.  _source_filenames_ should be a list of filenames.

      -- Method: shared_object_filename (basename[, strip_dir=0,
               output_dir=''])
          Returns the name of a shared object file for the given file
          name _basename_.

      -- Method: execute (func, args[, msg=None, level=1])
          Invokes *note distutils.util.execute(): c3. This method
          invokes a  Python function _func_ with the given arguments
          _args_, after  logging and taking into account the _dry_run_
          flag. XXX see also.

      -- Method: spawn (cmd)
          Invokes `distutils.util.spawn()'. This invokes an external
          process to run the given command. XXX see also.

      -- Method: mkpath (name[, mode=511])
          Invokes *note distutils.dir_util.mkpath(): c6. This creates a
          directory  and any missing ancestor directories. XXX see also.

      -- Method: move_file (src, dst)
          Invokes *note distutils.file_util.move_file(): c8. Renames
          _src_ to  _dst_.  XXX see also.

      -- Method: announce (msg[, level=1])
          Write a message using `distutils.log.debug()'. XXX see also.

      -- Method: warn (msg)
          Write a warning message _msg_ to standard error.

      -- Method: debug_print (msg)
          If the _debug_ flag is set on this *note CCompiler: 9d.
          instance, print  _msg_ to standard output, otherwise do
          nothing.


File: python-distutils-3.2.2.info,  Node: distutils unixccompiler --- Unix C Compiler,  Next: distutils msvccompiler --- Microsoft Compiler,  Prev: distutils ccompiler --- CCompiler base class,  Up: API Reference

11.3 `distutils.unixccompiler' -- Unix C Compiler
=================================================

This module provides the `UnixCCompiler' class, a subclass of
`CCompiler' that handles the typical Unix-style command-line  C
compiler:

   * macros defined with `-Dname[=value]'

   * macros undefined with `-Uname'

   * include search directories specified with `-Idir'

   * libraries specified with `-llib'

   * library search directories specified with `-Ldir'

   * compile handled by *cc* (or similar) executable with `-c' option:
     compiles `.c' to `.o'

   * link static library handled by *ar* command (possibly with
     *ranlib*)

   * link shared library handled by *cc* `-shared'


File: python-distutils-3.2.2.info,  Node: distutils msvccompiler --- Microsoft Compiler,  Next: distutils bcppcompiler --- Borland Compiler,  Prev: distutils unixccompiler --- Unix C Compiler,  Up: API Reference

11.4 `distutils.msvccompiler' -- Microsoft Compiler
===================================================

This module provides `MSVCCompiler', an implementation of the abstract
`CCompiler' class for Microsoft Visual Studio. Typically, extension
modules need to be compiled with the same compiler that was used to
compile Python. For Python 2.3 and earlier, the compiler was Visual
Studio 6. For Python 2.4 and 2.5, the compiler is Visual Studio .NET
2003. The AMD64 and Itanium binaries are created using the Platform SDK.

  `MSVCCompiler' will normally choose the right compiler, linker etc. on
its own. To override this choice, the environment variables
_DISTUTILS_USE_SDK_ and _MSSdk_ must be both set. _MSSdk_ indicates
that the current environment has been setup by the SDK's `SetEnv.Cmd'
script, or that the environment variables had been registered when the
SDK was installed; _DISTUTILS_USE_SDK_ indicates that the distutils
user has made an explicit choice to override the compiler selection by
`MSVCCompiler'.


File: python-distutils-3.2.2.info,  Node: distutils bcppcompiler --- Borland Compiler,  Next: distutils cygwincompiler --- Cygwin Compiler,  Prev: distutils msvccompiler --- Microsoft Compiler,  Up: API Reference

11.5 `distutils.bcppcompiler' -- Borland Compiler
=================================================

This module provides `BorlandCCompiler', an subclass of the abstract
`CCompiler' class for the Borland C++ compiler.


File: python-distutils-3.2.2.info,  Node: distutils cygwincompiler --- Cygwin Compiler,  Next: distutils emxccompiler --- OS/2 EMX Compiler,  Prev: distutils bcppcompiler --- Borland Compiler,  Up: API Reference

11.6 `distutils.cygwincompiler' -- Cygwin Compiler
==================================================

This module provides the `CygwinCCompiler' class, a subclass of
`UnixCCompiler' that handles the Cygwin port of the GNU C compiler to
Windows.  It also contains the Mingw32CCompiler class which handles the
mingw32 port of GCC (same as cygwin in no-cygwin mode).


File: python-distutils-3.2.2.info,  Node: distutils emxccompiler --- OS/2 EMX Compiler,  Next: distutils archive_util --- Archiving utilities,  Prev: distutils cygwincompiler --- Cygwin Compiler,  Up: API Reference

11.7 `distutils.emxccompiler' -- OS/2 EMX Compiler
==================================================

This module provides the EMXCCompiler class, a subclass of
`UnixCCompiler' that handles the EMX port of the GNU C compiler to OS/2.


File: python-distutils-3.2.2.info,  Node: distutils archive_util --- Archiving utilities,  Next: distutils dep_util --- Dependency checking,  Prev: distutils emxccompiler --- OS/2 EMX Compiler,  Up: API Reference

11.8 `distutils.archive_util' --  Archiving utilities
=====================================================

This module provides a few functions for creating archive files, such as
tarballs or zipfiles.

 -- Function: distutils.archive_util.make_archive (base_name, format[,
          root_dir=None, base_dir=None, verbose=0, dry_run=0])
     Create an archive file (eg. `zip' or `tar').  _base_name_  is the
     name of the file to create, minus any format-specific extension;
     _format_ is the archive format: one of `zip', `tar',  `ztar', or
     `gztar'. _root_dir_ is a directory that will be the root directory
     of the archive; ie. we typically `chdir' into _root_dir_ before
     creating the archive.  _base_dir_ is the directory where we start
     archiving from; ie. _base_dir_ will be the common prefix of all
     files and directories in the archive.  _root_dir_ and _base_dir_
     both default to the current directory.  Returns the name of the
     archive file.


 -- Function: distutils.archive_util.make_tarball (base_name,
          base_dir[, compress='gzip', verbose=0, dry_run=0])
     'Create an (optional compressed) archive as a tar file from all
     files in and under _base_dir_. _compress_ must be `'gzip'' (the
     default),  `'compress'', `'bzip2'', or `None'.  Both *tar* and the
     compression utility named by _compress_ must be on the  default
     program search path, so this is probably Unix-specific.  The
     output tar file will be named `base_dir.tar', possibly plus the
     appropriate compression extension (`.gz', `.bz2' or `.Z').  Return
     the output filename.


 -- Function: distutils.archive_util.make_zipfile (base_name,
          base_dir[, verbose=0, dry_run=0])
     Create a zip file from all files in and under _base_dir_.  The
     output zip file will be named _base_name_ + `.zip'.  Uses either
     the  `zipfile' Python module (if available) or the InfoZIP `zip'
     utility (if installed and found on the default search path).  If
     neither  tool is available, raises `DistutilsExecError'.   Returns
     the name of the output zip file.


File: python-distutils-3.2.2.info,  Node: distutils dep_util --- Dependency checking,  Next: distutils dir_util --- Directory tree operations,  Prev: distutils archive_util --- Archiving utilities,  Up: API Reference

11.9 `distutils.dep_util' -- Dependency checking
================================================

This module provides functions for performing simple, timestamp-based
dependency of files and groups of files; also, functions based entirely
on such timestamp dependency analysis.

 -- Function: distutils.dep_util.newer (source, target)
     Return true if _source_ exists and is more recently modified than
     _target_, or if _source_ exists and _target_ doesn't. Return false
     if both exist and _target_ is the same age or newer  than
     _source_. Raise `DistutilsFileError' if _source_ does not exist.

 -- Function: distutils.dep_util.newer_pairwise (sources, targets)
     Walk two filename lists in parallel, testing if each source is
     newer than its corresponding target.  Return a pair of lists
     (_sources_, _targets_) where source is newer than target,
     according to the semantics of *note newer(): d6.


 -- Function: distutils.dep_util.newer_group (sources, target[,
          missing='error'])
     Return true if _target_ is out-of-date with respect to any file
     listed in _sources_  In other words, if _target_ exists and is
     newer than every file in _sources_, return false; otherwise return
     true. _missing_ controls what we do when a source file is missing;
     the default (`'error'') is to blow up with an `OSError' from
     inside `os.stat()'; if it is `'ignore'', we silently drop any
     missing source files; if it is `'newer'', any missing source files
     make us assume that _target_ is out-of-date (this is handy in
     "dry-run" mode: it'll make you pretend to carry out commands that
     wouldn't work because inputs are missing, but that doesn't matter
     because you're not actually going to run the commands).


File: python-distutils-3.2.2.info,  Node: distutils dir_util --- Directory tree operations,  Next: distutils file_util --- Single file operations,  Prev: distutils dep_util --- Dependency checking,  Up: API Reference

11.10 `distutils.dir_util' -- Directory tree operations
=======================================================

This module provides functions for operating on directories and trees of
directories.

 -- Function: distutils.dir_util.mkpath (name[, mode=0o777, verbose=0,
          dry_run=0])
     Create a directory and any missing ancestor directories.  If the
     directory already exists (or if _name_ is the empty string, which
     means the current directory, which of course exists), then do
     nothing.  Raise `DistutilsFileError' if unable to create some
     directory along the way (eg.  some sub-path exists, but is a file
     rather than a directory).  If _verbose_ is true, print a one-line
     summary of each mkdir to stdout.  Return the list of directories
     actually created.

 -- Function: distutils.dir_util.create_tree (base_dir, files[,
          mode=0o777, verbose=0, dry_run=0])
     Create all the empty directories under _base_dir_ needed to put
     _files_ there.  _base_dir_ is just the a name of a directory which
     doesn't necessarily exist yet; _files_ is a list of filenames to
     be interpreted relative to _base_dir_.  _base_dir_ + the directory
     portion of every file in _files_ will be created if it doesn't
     already exist.  _mode_, _verbose_ and _dry_run_ flags  are as for
     *note mkpath(): c6.

 -- Function: distutils.dir_util.copy_tree (src, dst[, preserve_mode=1,
          preserve_times=1, preserve_symlinks=0, update=0, verbose=0,
          dry_run=0])
     Copy an entire directory tree _src_ to a new location _dst_.  Both
     _src_ and _dst_ must be directory names.  If _src_ is not a
     directory, raise `DistutilsFileError'.  If _dst_ does  not exist,
     it is created with *note mkpath(): c6.  The end result of the
     copy is that every file in _src_ is copied to _dst_, and
     directories under _src_ are recursively copied to _dst_.  Return
     the list of files that were copied or might have been copied,
     using their output name. The return value is unaffected by
     _update_ or _dry_run_: it is simply the list of all files under
     _src_, with the names changed to be under _dst_.

     _preserve_mode_ and _preserve_times_ are the same as for
     `copy_file()' in *note distutils.file_util: 24.; note that they
     only apply to regular files, not to directories.  If
     _preserve_symlinks_ is true, symlinks will be copied as symlinks
     (on platforms that support them!); otherwise (the default), the
     destination of the symlink will be copied.  _update_ and _verbose_
     are the same as for `copy_file()'.

 -- Function: distutils.dir_util.remove_tree (directory[, verbose=0,
          dry_run=0])
     Recursively remove _directory_ and all files and directories
     underneath it. Any errors are ignored (apart from being reported
     to `sys.stdout' if _verbose_ is true).


File: python-distutils-3.2.2.info,  Node: distutils file_util --- Single file operations,  Next: distutils util --- Miscellaneous other utility functions,  Prev: distutils dir_util --- Directory tree operations,  Up: API Reference

11.11 `distutils.file_util' -- Single file operations
=====================================================

This module contains some utility functions for operating on individual
files.

 -- Function: distutils.file_util.copy_file (src, dst[,
          preserve_mode=1, preserve_times=1, update=0, link=None,
          verbose=0, dry_run=0])
     Copy file _src_ to _dst_. If _dst_ is a directory, then _src_ is
     copied there with the same name; otherwise, it must be a filename.
     (If the file exists, it will be ruthlessly clobbered.) If
     _preserve_mode_ is true (the default), the file's mode (type and
     permission bits, or whatever is analogous on the current platform)
     is copied. If _preserve_times_ is true (the default), the
     last-modified and last-access times are copied as well. If
     _update_ is true, _src_ will only be copied if _dst_ does not
     exist, or if _dst_ does exist but is older than _src_.

     _link_ allows you to make hard links (using `os.link()') or
     symbolic links (using `os.symlink()') instead of copying: set it
     to `'hard'' or `'sym''; if it is `None' (the default), files are
     copied. Don't set _link_ on systems that don't support it: *note
     copy_file(): de. doesn't check if hard or symbolic linking is
     available.  It uses `_copy_file_contents()' to copy file contents.

     Return a tuple `(dest_name, copied)': _dest_name_ is the actual
     name of the output file, and _copied_ is true if the file was
     copied  (or would have been copied, if _dry_run_ true).


 -- Function: distutils.file_util.move_file (src, dst[, verbose,
          dry_run])
     Move file _src_ to _dst_. If _dst_ is a directory, the file will
     be moved into it with the same name; otherwise, _src_ is just
     renamed to _dst_.  Returns the new full name of the file.

          Warning: Handles cross-device moves on Unix using *note
          copy_file(): de.  What about other systems?

 -- Function: distutils.file_util.write_file (filename, contents)
     Create a file called _filename_ and write _contents_ (a sequence
     of strings without line terminators) to it.


File: python-distutils-3.2.2.info,  Node: distutils util --- Miscellaneous other utility functions,  Next: distutils dist --- The Distribution class,  Prev: distutils file_util --- Single file operations,  Up: API Reference

11.12 `distutils.util' -- Miscellaneous other utility functions
===============================================================

This module contains other assorted bits and pieces that don't fit into
any other utility module.

 -- Function: distutils.util.get_platform ()
     Return a string that identifies the current platform.  This is
     used mainly to distinguish platform-specific build directories and
     platform-specific built distributions.  Typically includes the OS
     name and version and the architecture (as supplied by
     'os.uname()'), although the exact information included depends on
     the OS; eg. for IRIX the architecture isn't particularly important
     (IRIX only runs on SGI hardware), but for Linux the kernel version
     isn't particularly important.

     Examples of returned values:

        * `linux-i586'

        * `linux-alpha'

        * `solaris-2.6-sun4u'

        * `irix-5.3'

        * `irix64-6.2'

     For non-POSIX platforms, currently just returns `sys.platform'.

     For Mac OS X systems the OS version reflects the minimal version
     on which binaries will run (that is, the value of
     `MACOSX_DEPLOYMENT_TARGET' during the build of Python), not the OS
     version of the current system.

     For universal binary builds on Mac OS X the architecture value
     reflects the univeral binary status instead of the architecture of
     the current processor. For 32-bit universal binaries the
     architecture is `fat', for 64-bit universal binaries the
     architecture is `fat64', and for 4-way universal binaries the
     architecture is `universal'. Starting from Python 2.7 and Python
     3.2 the architecture `fat3' is used for a 3-way universal build
     (ppc, i386, x86_64) and `intel' is used for a univeral build with
     the i386 and x86_64 architectures

     Examples of returned values on Mac OS X:

        * `macosx-10.3-ppc'

        * `macosx-10.3-fat'

        * `macosx-10.5-universal'

        * `macosx-10.6-intel'


 -- Function: distutils.util.convert_path (pathname)
     Return 'pathname' as a name that will work on the native
     filesystem, i.e. split it on '/' and put it back together again
     using the current directory separator.  Needed because filenames
     in the setup script are always supplied in Unix style, and have to
     be converted to the local convention before we can actually use
     them in the filesystem.  Raises `ValueError' on non-Unix-ish
     systems if _pathname_ either  starts or ends with a slash.

 -- Function: distutils.util.change_root (new_root, pathname)
     Return _pathname_ with _new_root_ prepended.  If _pathname_ is
     relative, this is equivalent to `os.path.join(new_root,pathname)'
     Otherwise, it requires making _pathname_ relative and then joining
     the two, which is tricky on DOS/Windows.

 -- Function: distutils.util.check_environ ()
     Ensure that 'os.environ' has all the environment variables we
     guarantee that users can use in config files, command-line
     options, etc.  Currently this includes:

        * `HOME' - user's home directory (Unix only)

        * `PLAT' - description of the current platform, including
          hardware and OS (see *note get_platform(): e1.)

 -- Function: distutils.util.subst_vars (s, local_vars)
     Perform shell/Perl-style variable substitution on _s_.  Every
     occurrence of `$' followed by a name is considered a variable, and
     variable is substituted by the value found in the _local_vars_
     dictionary, or in `os.environ' if it's not in _local_vars_.
     _os.environ_ is first checked/augmented to guarantee that it
     contains certain values: see *note check_environ(): e4.  Raise
     `ValueError' for any variables not found in either _local_vars_ or
     `os.environ'.

     Note that this is not a fully-fledged string interpolation
     function. A valid `$variable' can consist only of upper and lower
     case letters, numbers and an underscore. No { } or ( ) style
     quoting is available.

 -- Function: distutils.util.grok_environment_error (exc[,
          prefix='error: '])
     Generate a useful error message from an `EnvironmentError'
     (`IOError' or `OSError') exception object.   Handles Python 1.5.1
     and later styles, and does what it can to deal with  exception
     objects that don't have a filename (which happens when the error
     is due to a two-file operation, such as `rename()' or  `link()').
     Returns the error message as a string prefixed  with _prefix_.

 -- Function: distutils.util.split_quoted (s)
     Split a string up according to Unix shell-like rules for quotes
     and backslashes.  In short: words are delimited by spaces, as long
     as those spaces are not escaped by a backslash, or inside a quoted
     string. Single and double quotes are equivalent, and the quote
     characters can be backslash-escaped.  The backslash is stripped
     from any two-character escape sequence, leaving only the escaped
     character.  The quote characters are stripped from any quoted
     string.  Returns a list of words.


 -- Function: distutils.util.execute (func, args[, msg=None, verbose=0,
          dry_run=0])
     Perform some action that affects the outside world (for instance,
     writing to the filesystem).  Such actions are special because they
     are disabled by the _dry_run_ flag.  This method takes  care of
     all that bureaucracy for you; all you have to do is supply the
     function to call and an argument tuple for it (to embody the
     "external action" being performed), and an optional message to
     print.

 -- Function: distutils.util.strtobool (val)
     Convert a string representation of truth to true (1) or false (0).

     True values are `y', `yes', `t', `true', `on'  and `1'; false
     values are `n', `no', `f', `false',  `off' and `0'.  Raises
     `ValueError' if _val_  is anything else.

 -- Function: distutils.util.byte_compile (py_files[, optimize=0,
          force=0, prefix=None, base_dir=None, verbose=1, dry_run=0,
          direct=None])
     Byte-compile a collection of Python source files to either `.pyc'
     or `.pyo' files in the same directory.  _py_files_ is a list of
     files to compile; any files that don't end in `.py' are silently
     skipped.  _optimize_ must be one of the following:

        * `0' - don't optimize (generate `.pyc')

        * `1' - normal optimization (like `python -O')

        * `2' - extra optimization (like `python -OO')

     If _force_ is true, all files are recompiled regardless of
     timestamps.

     The source filename encoded in each _bytecode_ file defaults to
     the filenames listed in _py_files_; you can modify these with
     _prefix_ and _basedir_.  _prefix_ is a string that will be
     stripped off of each source filename, and _base_dir_ is a
     directory name that will be prepended (after _prefix_ is
     stripped).  You can supply either or both (or neither) of _prefix_
     and _base_dir_, as you wish.

     If _dry_run_ is true, doesn't actually do anything that would
     affect the filesystem.

     Byte-compilation is either done directly in this interpreter
     process with the standard `py_compile' module, or indirectly by
     writing a temporary script and executing it.  Normally, you should
     let *note byte_compile(): e8. figure out to use direct compilation
     or not (see the source for details).  The _direct_ flag is used by
     the script generated in indirect mode; unless you know what you're
     doing, leave it set to `None'.

 -- Function: distutils.util.rfc822_escape (header)
     Return a version of _header_ escaped for inclusion in an RFC
     822(1) header, by ensuring there are 8 spaces space after each
     newline. Note that it does no other modification of the string.


  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc822.html


File: python-distutils-3.2.2.info,  Node: distutils dist --- The Distribution class,  Next: distutils extension --- The Extension class,  Prev: distutils util --- Miscellaneous other utility functions,  Up: API Reference

11.13 `distutils.dist' -- The Distribution class
================================================

This module provides the `Distribution' class, which represents the
module distribution being built/installed/distributed.


File: python-distutils-3.2.2.info,  Node: distutils extension --- The Extension class,  Next: distutils debug --- Distutils debug mode,  Prev: distutils dist --- The Distribution class,  Up: API Reference

11.14 `distutils.extension' -- The Extension class
==================================================

This module provides the `Extension' class, used to describe C/C++
extension modules in setup scripts.


File: python-distutils-3.2.2.info,  Node: distutils debug --- Distutils debug mode,  Next: distutils errors --- Distutils exceptions,  Prev: distutils extension --- The Extension class,  Up: API Reference

11.15 `distutils.debug' -- Distutils debug mode
===============================================

This module provides the DEBUG flag.


File: python-distutils-3.2.2.info,  Node: distutils errors --- Distutils exceptions,  Next: distutils fancy_getopt --- Wrapper around the standard getopt module,  Prev: distutils debug --- Distutils debug mode,  Up: API Reference

11.16 `distutils.errors' -- Distutils exceptions
================================================

Provides exceptions used by the Distutils modules.  Note that Distutils
modules may raise standard exceptions; in particular, SystemExit is
usually raised for errors that are obviously the end-user's fault (eg.
bad command-line arguments).

  This module is safe to use in `from ... import *' mode; it only
exports symbols whose names start with `Distutils' and end with `Error'.


File: python-distutils-3.2.2.info,  Node: distutils fancy_getopt --- Wrapper around the standard getopt module,  Next: distutils filelist --- The FileList class,  Prev: distutils errors --- Distutils exceptions,  Up: API Reference

11.17 `distutils.fancy_getopt' -- Wrapper around the standard getopt module
===========================================================================

This module provides a wrapper around the standard `getopt'  module that
provides the following additional features:

   * short and long options are tied together

   * options have help strings, so *note fancy_getopt(): ef. could
     potentially  create a complete usage summary

   * options set attributes of a passed-in object

   * boolean options can have "negative aliases" -- eg. if `--quiet' is
     the "negative alias" of `--verbose', then `--quiet' on the command
     line sets _verbose_ to false.

 -- Function: distutils.fancy_getopt.fancy_getopt (options,
          negative_opt, object, args)
     Wrapper function. _options_ is a list of `(long_option,
     short_option, help_string)' 3-tuples as described in the
     constructor for *note FancyGetopt: f0. _negative_opt_ should be a
     dictionary mapping option names to option names, both the key and
     value should be in the _options_ list.  _object_ is an object
     which will be used to store values (see the `getopt()' method of
     the *note FancyGetopt: f0. class). _args_ is the argument list.
     Will use `sys.argv[1:]' if you  pass `None' as _args_.

 -- Function: distutils.fancy_getopt.wrap_text (text, width)
     Wraps _text_ to less than _width_ wide.


 -- Class: distutils.fancy_getopt.FancyGetopt ([option_table=None])
     The option_table is a list of 3-tuples: `(long_option,
     short_option, help_string)'

     If an option takes an argument, its _long_option_ should have
     `'='' appended; _short_option_ should just be a single character,
     no `':'' in any case.  _short_option_ should be `None' if a
     _long_option_  doesn't have a corresponding _short_option_. All
     option tuples must have long options.

  The *note FancyGetopt: f0. class provides the following methods:

 -- Method: FancyGetopt.getopt ([args=None, object=None])
     Parse command-line options in args. Store as attributes on
     _object_.

     If _args_ is `None' or not supplied, uses `sys.argv[1:]'.  If
     _object_ is `None' or not supplied, creates a new `OptionDummy'
     instance, stores option values there, and returns a tuple `(args,
     object)'.  If _object_ is supplied, it is modified in place and
     `getopt()' just returns _args_; in both cases, the returned _args_
     is a modified copy of the passed-in _args_ list, which is left
     untouched.


 -- Method: FancyGetopt.get_option_order ()
     Returns the list of `(option, value)' tuples processed by the
     previous run of `getopt()'  Raises `RuntimeError' if `getopt()'
     hasn't been called yet.

 -- Method: FancyGetopt.generate_help ([header=None])
     Generate help text (a list of strings, one per suggested line of
     output) from the option table for this *note FancyGetopt: f0.
     object.

     If supplied, prints the supplied _header_ at the top of the help.


File: python-distutils-3.2.2.info,  Node: distutils filelist --- The FileList class,  Next: distutils log --- Simple PEP 282-style logging,  Prev: distutils fancy_getopt --- Wrapper around the standard getopt module,  Up: API Reference

11.18 `distutils.filelist' -- The FileList class
================================================

This module provides the `FileList' class, used for poking about the
filesystem and building lists of files.


File: python-distutils-3.2.2.info,  Node: distutils log --- Simple PEP 282-style logging,  Next: distutils spawn --- Spawn a sub-process,  Prev: distutils filelist --- The FileList class,  Up: API Reference

11.19 `distutils.log' -- Simple PEP 282-style logging
=====================================================


File: python-distutils-3.2.2.info,  Node: distutils spawn --- Spawn a sub-process,  Next: distutils sysconfig --- System configuration information,  Prev: distutils log --- Simple PEP 282-style logging,  Up: API Reference

11.20 `distutils.spawn' -- Spawn a sub-process
==============================================

This module provides the `spawn()' function, a front-end to  various
platform-specific functions for launching another program in a
sub-process.  Also provides `find_executable()' to search the path for
a given executable name.


File: python-distutils-3.2.2.info,  Node: distutils sysconfig --- System configuration information,  Next: distutils text_file --- The TextFile class,  Prev: distutils spawn --- Spawn a sub-process,  Up: API Reference

11.21 `distutils.sysconfig' -- System configuration information
===============================================================

The *note distutils.sysconfig: 29. module provides access to Python's
low-level configuration information.  The specific configuration
variables available depend heavily on the platform and configuration.
The specific variables depend on the build process for the specific
version of Python being run; the variables are those found in the
`Makefile' and configuration header that are installed with Python on
Unix systems.  The configuration header is called `pyconfig.h' for
Python versions starting with 2.2, and `config.h' for earlier versions
of Python.

  Some additional functions are provided which perform some useful
manipulations for other parts of the `distutils' package.

 -- Data: distutils.sysconfig.PREFIX
     The result of `os.path.normpath(sys.prefix)'.

 -- Data: distutils.sysconfig.EXEC_PREFIX
     The result of `os.path.normpath(sys.exec_prefix)'.

 -- Function: distutils.sysconfig.get_config_var (name)
     Return the value of a single variable.  This is equivalent to
     `get_config_vars().get(name)'.

 -- Function: distutils.sysconfig.get_config_vars (...)
     Return a set of variable definitions.  If there are no arguments,
     this returns a dictionary mapping names of configuration variables
     to values.  If arguments are provided, they should be strings, and
     the return value will be a sequence giving the associated values.
     If a given name does not have a corresponding value, `None' will
     be included for that variable.

 -- Function: distutils.sysconfig.get_config_h_filename ()
     Return the full path name of the configuration header.  For Unix,
     this will be the header generated by the *configure* script; for
     other platforms the header will have been supplied directly by the
     Python source distribution.  The file is a platform-specific text
     file.

 -- Function: distutils.sysconfig.get_makefile_filename ()
     Return the full path name of the `Makefile' used to build Python.
     For Unix, this will be a file generated by the *configure* script;
     the meaning for other platforms will vary.  The file is a
     platform-specific text file, if it exists. This function is only
     useful on POSIX platforms.

 -- Function: distutils.sysconfig.get_python_inc ([plat_specific[,
          prefix]])
     Return the directory for either the general or platform-dependent
     C include files.  If _plat_specific_ is true, the
     platform-dependent include directory is returned; if false or
     omitted, the platform-independent directory is returned.  If
     _prefix_ is given, it is used as either the prefix instead of
     *note PREFIX: f9, or as the exec-prefix instead of *note
     EXEC_PREFIX: fa. if _plat_specific_ is true.

 -- Function: distutils.sysconfig.get_python_lib ([plat_specific[,
          standard_lib[, prefix]]])
     Return the directory for either the general or platform-dependent
     library installation.  If _plat_specific_ is true, the
     platform-dependent include directory is returned; if false or
     omitted, the platform-independent directory is returned.  If
     _prefix_ is given, it is used as either the prefix instead of
     *note PREFIX: f9, or as the exec-prefix instead of *note
     EXEC_PREFIX: fa. if _plat_specific_ is true.  If _standard_lib_ is
     true, the directory for the standard library is returned rather
     than the directory for the installation of third-party extensions.

  The following function is only intended for use within the `distutils'
package.

 -- Function: distutils.sysconfig.customize_compiler (compiler)
     Do any platform-specific customization of a *note
     distutils.ccompiler.CCompiler: 9d. instance.

     This function is only needed on Unix at this time, but should be
     called consistently to support forward-compatibility.  It inserts
     the information that varies across Unix flavors and is stored in
     Python's `Makefile'.  This information includes the selected
     compiler, compiler and linker options, and the extension used by
     the linker for shared objects.

  This function is even more special-purpose, and should only be used
from Python's own build procedures.

 -- Function: distutils.sysconfig.set_python_build ()
     Inform the *note distutils.sysconfig: 29. module that it is being
     used as part of the build process for Python.  This changes a lot
     of relative locations for files, allowing them to be located in
     the build area rather than in an installed Python.


File: python-distutils-3.2.2.info,  Node: distutils text_file --- The TextFile class,  Next: distutils version --- Version number classes,  Prev: distutils sysconfig --- System configuration information,  Up: API Reference

11.22 `distutils.text_file' -- The TextFile class
=================================================

This module provides the *note TextFile: 104. class, which gives an
interface  to text files that (optionally) takes care of stripping
comments, ignoring  blank lines, and joining lines with backslashes.

 -- Class: distutils.text_file.TextFile ([filename=None, file=None,
          **options])
     This class provides a file-like object that takes care of all  the
     things you commonly want to do when processing a text file  that
     has some line-by-line syntax: strip comments (as long as `#'  is
     your comment character), skip blank lines, join adjacent lines by
     escaping the newline (ie. backslash at end of line), strip leading
     and/or trailing whitespace.  All of these are optional and
     independently controllable.

     The class provides a *note warn(): 105. method so you can generate
     warning messages that report physical line number, even if the
     logical line in question spans multiple physical lines.  Also
     provides *note unreadline(): 106. for implementing line-at-a-time
     lookahead.

     *note TextFile: 104. instances are create with either _filename_,
     _file_, or both.  `RuntimeError' is raised if both are `None'.
     _filename_ should be a string, and _file_ a file object (or
     something that provides `readline()' and *note close(): 107.
     methods).  It is recommended that you supply at least _filename_,
     so that *note TextFile: 104. can include it in warning messages.
     If _file_ is not supplied, *note TextFile: 104. creates its own
     using the `open()' built-in function.

     The options are all boolean, and affect the values returned by
     `readline()'

     option name            description                          default
     -------------------------------------------------------------------------- 
     _strip_comments_       strip from `'#'' to end-of- line,    true
                            as well as any whitespace leading    
                            up to the `'#''--unless it is        
                            escaped by a backslash               
     _lstrip_ws_            strip leading whitespace from each   false
                            line before returning it             
     _rstrip_ws_            strip trailing whitespace            true
                            (including line terminator!)  from   
                            each line before returning it.       
     _skip_blanks_          skip lines that are empty *after*    true
                            stripping comments and whitespace.   
                            (If both lstrip_ws and rstrip_ws are 
                            false, then some lines may consist   
                            of solely whitespace: these will     
                            *not* be skipped, even if            
                            _skip_blanks_ is true.)              
     _join_lines_           if a backslash is the last           false
                            non-newline character on a line      
                            after stripping comments and         
                            whitespace, join the following line  
                            to it to form one logical line; if N 
                            consecutive lines end with a         
                            backslash, then N+1 physical lines   
                            will be joined to form one logical   
                            line.                                
     _collapse_join_        strip leading whitespace from lines  false
                            that are joined to their             
                            predecessor; only matters if         
                            `(join_lines and not lstrip_ws)'     

     Note that since _rstrip_ws_ can strip the trailing newline, the
     semantics of `readline()' must differ from those of the built-in
     file object's `readline()' method!  In particular, `readline()'
     returns `None' for end-of-file: an empty string might just be a
     blank line (or an all-whitespace line), if _rstrip_ws_ is true
     but _skip_blanks_ is not.

      -- Method: open (filename)
          Open a new file _filename_.  This overrides any _file_ or
          _filename_ constructor arguments.

      -- Method: close ()
          Close the current file and forget everything we know about it
          (including the filename and the current line number).

      -- Method: warn (msg[, line=None])
          Print (to stderr) a warning message tied to the current
          logical line in the current file.  If the current logical
          line in the file spans multiple physical lines, the warning
          refers to the whole range, such as `"lines 3-5"'.  If _line_
          is supplied,  it overrides the current line number; it may be
          a list or tuple  to indicate a range of physical lines, or an
          integer for a  single physical line.

      -- Method: readline ()
          Read and return a single logical line from the current file
          (or from an internal buffer if lines have previously been
          "unread" with *note unreadline(): 106.).  If the _join_lines_
          option  is true, this may involve reading multiple physical
          lines concatenated into a single string.  Updates the current
          line number,  so calling *note warn(): 105. after
          `readline()' emits a warning  about the physical line(s) just
          read.  Returns `None' on end-of-file,  since the empty string
          can occur if _rstrip_ws_ is true but  _strip_blanks_ is not.

      -- Method: readlines ()
          Read and return the list of all logical lines remaining in
          the current file.  This updates the current line number to
          the last line of the file.

      -- Method: unreadline (line)
          Push _line_ (a string) onto an internal buffer that will be
          checked by future `readline()' calls.  Handy for implementing
          a parser with line-at-a-time lookahead. Note that lines that
          are "unread" with *note unreadline(): 106. are not
          subsequently re-cleansed (whitespace  stripped, or whatever)
          when read with `readline()'. If multiple calls are made to
          *note unreadline(): 106. before a call to `readline()', the
          lines will be returned most in most recent first order.


File: python-distutils-3.2.2.info,  Node: distutils version --- Version number classes,  Next: distutils cmd --- Abstract base class for Distutils commands,  Prev: distutils text_file --- The TextFile class,  Up: API Reference

11.23 `distutils.version' -- Version number classes
===================================================


File: python-distutils-3.2.2.info,  Node: distutils cmd --- Abstract base class for Distutils commands,  Next: Creating a new Distutils command,  Prev: distutils version --- Version number classes,  Up: API Reference

11.24 `distutils.cmd' -- Abstract base class for Distutils commands
===================================================================

This module supplies the abstract base class *note Command: 87.

 -- Class: distutils.cmd.Command (dist)
     Abstract base class for defining command classes, the "worker
     bees" of the Distutils.  A useful analogy for command classes is
     to think of them as subroutines with local variables called
     _options_.  The options are declared in *note
     initialize_options(): 10d. and defined (given their final values)
     in *note finalize_options(): 10e, both of which must be defined by
     every command class.  The distinction between the two is necessary
     because option values might come from the outside world (command
     line, config file, ...), and any options dependent on other
     options must be computed after these outside influences have been
     processed -- hence *note finalize_options(): 10e.  The body of the
     subroutine, where it does all its work based on the values of its
     options, is the *note run(): 10f. method, which must also be
     implemented by every command class.

     The class constructor takes a single argument _dist_, a
     `Distribution' instance.


File: python-distutils-3.2.2.info,  Node: Creating a new Distutils command,  Next: distutils command --- Individual Distutils commands,  Prev: distutils cmd --- Abstract base class for Distutils commands,  Up: API Reference

11.25 Creating a new Distutils command
======================================

This section outlines the steps to create a new Distutils command.

  A new command lives in a module in the *note distutils.command: 4.
package. There is a sample template in that directory called
`command_template'.  Copy this file to a new module with the same name
as the new command you're implementing.  This module should implement a
class with the same name as the module (and the command).  So, for
instance, to create the command `peel_banana' (so that users can run
`setup.py peel_banana'), you'd copy `command_template' to
`distutils/command/peel_banana.py', then edit it so that it's
implementing the class `peel_banana', a subclass of *note
distutils.cmd.Command: 87.

  Subclasses of *note Command: 87. must define the following methods.

 -- Method: Command.initialize_options ()
     Set default values for all the options that this command supports.
     Note that these defaults may be overridden by other commands, by
     the setup script, by config files, or by the command-line.  Thus,
     this is not the place to code dependencies between options;
     generally, *note initialize_options(): 10d.  implementations are
     just a bunch of `self.foo = None' assignments.

 -- Method: Command.finalize_options ()
     Set final values for all the options that this command supports.
     This is always called as late as possible, ie.  after any option
     assignments from the command-line or from other commands have been
     done.  Thus, this is the place to to code option dependencies: if
     _foo_ depends on _bar_, then it is safe to set _foo_ from _bar_ as
     long as _foo_ still has the same value it was assigned in *note
     initialize_options(): 10d.

 -- Method: Command.run ()
     A command's raison d'etre: carry out the action it exists to
     perform, controlled by the options initialized in *note
     initialize_options(): 10d, customized by other commands, the setup
     script, the command-line, and config files, and finalized in *note
     finalize_options(): 10e.  All terminal output and filesystem
     interaction should be done by *note run(): 10f.

 -- Attribute: Command.sub_commands
     _sub_commands_ formalizes the notion of a "family" of commands,
     e.g. `install' as the parent with sub-commands `install_lib',
     `install_headers', etc.  The parent of a family of commands defines
     _sub_commands_ as a class attribute; it's a list of 2-tuples
     `(command_name, predicate)', with _command_name_ a string and
     _predicate_ a function, a string or `None'.  _predicate_ is a
     method of the parent command that determines whether the
     corresponding command is applicable in the current situation.
     (E.g. `install_headers' is only applicable if we have any C header
     files to install.)  If _predicate_ is `None', that command is
     always applicable.

     _sub_commands_ is usually defined at the _end_ of a class, because
     predicates can be methods of the class, so they must already have
     been defined.  The canonical example is the *install* command.


File: python-distutils-3.2.2.info,  Node: distutils command --- Individual Distutils commands,  Next: distutils command bdist --- Build a binary installer,  Prev: Creating a new Distutils command,  Up: API Reference

11.26 `distutils.command' -- Individual Distutils commands
==========================================================


File: python-distutils-3.2.2.info,  Node: distutils command bdist --- Build a binary installer,  Next: distutils command bdist_packager --- Abstract base class for packagers,  Prev: distutils command --- Individual Distutils commands,  Up: API Reference

11.27 `distutils.command.bdist' -- Build a binary installer
===========================================================


File: python-distutils-3.2.2.info,  Node: distutils command bdist_packager --- Abstract base class for packagers,  Next: distutils command bdist_dumb --- Build a "dumb" installer,  Prev: distutils command bdist --- Build a binary installer,  Up: API Reference

11.28 `distutils.command.bdist_packager' -- Abstract base class for packagers
=============================================================================


File: python-distutils-3.2.2.info,  Node: distutils command bdist_dumb --- Build a "dumb" installer,  Next: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Prev: distutils command bdist_packager --- Abstract base class for packagers,  Up: API Reference

11.29 `distutils.command.bdist_dumb' -- Build a "dumb" installer
================================================================


File: python-distutils-3.2.2.info,  Node: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Next: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Prev: distutils command bdist_dumb --- Build a "dumb" installer,  Up: API Reference

11.30 `distutils.command.bdist_msi' -- Build a Microsoft Installer binary package
=================================================================================

 -- Class: distutils.command.bdist_msi.bdist_msi
     Builds a Windows Installer(1) (.msi) binary package.

     In most cases, the `bdist_msi' installer is a better choice than
     the `bdist_wininst' installer, because it provides better support
     for Win64 platforms, allows administrators to perform
     non-interactive installations, and allows installation through
     group policies.

  ---------- Footnotes ----------

  (1) http://msdn.microsoft.com/en-us/library/cc185688(VS.85).aspx


File: python-distutils-3.2.2.info,  Node: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Next: distutils command bdist_wininst --- Build a Windows installer,  Prev: distutils command bdist_msi --- Build a Microsoft Installer binary package,  Up: API Reference

11.31 `distutils.command.bdist_rpm' -- Build a binary distribution as a Redhat RPM and SRPM
===========================================================================================


File: python-distutils-3.2.2.info,  Node: distutils command bdist_wininst --- Build a Windows installer,  Next: distutils command sdist --- Build a source distribution,  Prev: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM,  Up: API Reference

11.32 `distutils.command.bdist_wininst' -- Build a Windows installer
====================================================================


File: python-distutils-3.2.2.info,  Node: distutils command sdist --- Build a source distribution,  Next: distutils command build --- Build all files of a package,  Prev: distutils command bdist_wininst --- Build a Windows installer,  Up: API Reference

11.33 `distutils.command.sdist' -- Build a source distribution
==============================================================


File: python-distutils-3.2.2.info,  Node: distutils command build --- Build all files of a package,  Next: distutils command build_clib --- Build any C libraries in a package,  Prev: distutils command sdist --- Build a source distribution,  Up: API Reference

11.34 `distutils.command.build' -- Build all files of a package
===============================================================


File: python-distutils-3.2.2.info,  Node: distutils command build_clib --- Build any C libraries in a package,  Next: distutils command build_ext --- Build any extensions in a package,  Prev: distutils command build --- Build all files of a package,  Up: API Reference

11.35 `distutils.command.build_clib' -- Build any C libraries in a package
==========================================================================


File: python-distutils-3.2.2.info,  Node: distutils command build_ext --- Build any extensions in a package,  Next: distutils command build_py --- Build the py/ pyc files of a package,  Prev: distutils command build_clib --- Build any C libraries in a package,  Up: API Reference

11.36 `distutils.command.build_ext' -- Build any extensions in a package
========================================================================


File: python-distutils-3.2.2.info,  Node: distutils command build_py --- Build the py/ pyc files of a package,  Next: distutils command build_scripts --- Build the scripts of a package,  Prev: distutils command build_ext --- Build any extensions in a package,  Up: API Reference

11.37 `distutils.command.build_py' -- Build the .py/.pyc files of a package
===========================================================================

 -- Class: distutils.command.build_py.build_py

 -- Class: distutils.command.build_py.build_py_2to3
     Alternative implementation of build_py which also runs the 2to3
     conversion library on each .py file that is going to be installed.
     To use this in a setup.py file for a distribution that is designed
     to run with both Python 2.x and 3.x, add:

         try:
            from distutils.command.build_py import build_py_2to3 as build_py
         except ImportError:
            from distutils.command.build_py import build_py

     to your setup.py, and later:

         cmdclass = {'build_py': build_py}

     to the invocation of setup().


File: python-distutils-3.2.2.info,  Node: distutils command build_scripts --- Build the scripts of a package,  Next: distutils command clean --- Clean a package build area,  Prev: distutils command build_py --- Build the py/ pyc files of a package,  Up: API Reference

11.38 `distutils.command.build_scripts' -- Build the scripts of a package
=========================================================================


File: python-distutils-3.2.2.info,  Node: distutils command clean --- Clean a package build area,  Next: distutils command config --- Perform package configuration,  Prev: distutils command build_scripts --- Build the scripts of a package,  Up: API Reference

11.39 `distutils.command.clean' -- Clean a package build area
=============================================================


File: python-distutils-3.2.2.info,  Node: distutils command config --- Perform package configuration,  Next: distutils command install --- Install a package,  Prev: distutils command clean --- Clean a package build area,  Up: API Reference

11.40 `distutils.command.config' -- Perform package configuration
=================================================================


File: python-distutils-3.2.2.info,  Node: distutils command install --- Install a package,  Next: distutils command install_data --- Install data files from a package,  Prev: distutils command config --- Perform package configuration,  Up: API Reference

11.41 `distutils.command.install' -- Install a package
======================================================


File: python-distutils-3.2.2.info,  Node: distutils command install_data --- Install data files from a package,  Next: distutils command install_headers --- Install C/C++ header files from a package,  Prev: distutils command install --- Install a package,  Up: API Reference

11.42 `distutils.command.install_data' -- Install data files from a package
===========================================================================


File: python-distutils-3.2.2.info,  Node: distutils command install_headers --- Install C/C++ header files from a package,  Next: distutils command install_lib --- Install library files from a package,  Prev: distutils command install_data --- Install data files from a package,  Up: API Reference

11.43 `distutils.command.install_headers' -- Install C/C++ header files from a package
======================================================================================


File: python-distutils-3.2.2.info,  Node: distutils command install_lib --- Install library files from a package,  Next: distutils command install_scripts --- Install script files from a package,  Prev: distutils command install_headers --- Install C/C++ header files from a package,  Up: API Reference

11.44 `distutils.command.install_lib' -- Install library files from a package
=============================================================================


File: python-distutils-3.2.2.info,  Node: distutils command install_scripts --- Install script files from a package,  Next: distutils command register --- Register a module with the Python Package Index,  Prev: distutils command install_lib --- Install library files from a package,  Up: API Reference

11.45 `distutils.command.install_scripts' -- Install script files from a package
================================================================================


File: python-distutils-3.2.2.info,  Node: distutils command register --- Register a module with the Python Package Index,  Next: distutils command check --- Check the meta-data of a package,  Prev: distutils command install_scripts --- Install script files from a package,  Up: API Reference

11.46 `distutils.command.register' -- Register a module with the Python Package Index
=====================================================================================

The `register' command registers the package with the Python Package
Index.  This is described in more detail in PEP 301(1).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0301


File: python-distutils-3.2.2.info,  Node: distutils command check --- Check the meta-data of a package,  Prev: distutils command register --- Register a module with the Python Package Index,  Up: API Reference

11.47 `distutils.command.check' -- Check the meta-data of a package
===================================================================

The `check' command performs some tests on the meta-data of a package.
For example, it verifies that all required meta-data are provided as
the arguments passed to the `setup()' function.


File: python-distutils-3.2.2.info,  Node: Python Module Index,  Next: Index,  Prev: API Reference,  Up: Top

Python Module Index
*******************

* Menu:

* distutils.archive_util: 0. Utility functions for creating archive files
                          (tarballs, zip files, ...)
* distutils.bcppcompiler: 1.
* distutils.ccompiler: 2. Abstract CCompiler class
* distutils.cmd: 3. This module provides the abstract base class Command.
                        This class is subclassed by the modules in the
                        distutils.command subpackage.
* distutils.command: 4. This subpackage contains one module for each standard
                        Distutils command.
* distutils.command.bdist: 5. Build a binary installer for a package
* distutils.command.bdist_dumb: 6. Build a "dumb" installer - a simple archive of
                                files
* distutils.command.bdist_msi: 7. Build a binary distribution as a Windows MSI
                               file
* distutils.command.bdist_packager: 8. Abstract base class for packagers
* distutils.command.bdist_rpm: 9. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: a. Build a Windows installer
* distutils.command.build: b. Build all files of a package
* distutils.command.build_clib: c. Build any C libraries in a package
* distutils.command.build_ext: d. Build any extensions in a package
* distutils.command.build_py: e. Build the .py/.pyc files of a package
* distutils.command.build_scripts: f. Build the scripts of a package
* distutils.command.check: 10. Check the metadata of a package
* distutils.command.clean: 11. Clean a package build area
* distutils.command.config: 12. Perform package configuration
* distutils.command.install: 13. Install a package
* distutils.command.install_data: 14. Install data files from a package
* distutils.command.install_headers: 15. Install C/C++ header files from a package
* distutils.command.install_lib: 16. Install library files from a package
* distutils.command.install_scripts: 17. Install script files from a package
* distutils.command.register: 18. Register a module with the Python Package Index
* distutils.command.sdist: 19. Build a source distribution
* distutils.core: 1a. The core Distutils functionality
* distutils.cygwinccompiler: 1b.
* distutils.debug: 1c. Provides the debug flag for distutils
* distutils.dep_util: 1d. Utility functions for simple dependency checking
* distutils.dir_util: 1e. Utility functions for operating on directories and
                        directory trees
* distutils.dist: 1f. Provides the Distribution class, which
                        represents the module distribution being
                        built/installed/distributed
* distutils.emxccompiler: 20. OS/2 EMX Compiler support
* distutils.errors: 21. Provides standard distutils exceptions
* distutils.extension: 22. Provides the Extension class, used to describe
                        C/C++ extension modules in setup scripts
* distutils.fancy_getopt: 23. Additional getopt functionality
* distutils.file_util: 24. Utility functions for operating on single files
* distutils.filelist: 25. The FileList class, used for poking about the
                        file system and building lists of files.
* distutils.log: 26. A simple logging mechanism, 282-style
* distutils.msvccompiler: 27. Microsoft Compiler
* distutils.spawn: 28. Provides the spawn() function
* distutils.sysconfig: 29. Low-level access to configuration information of the
                        Python interpreter.
* distutils.text_file: 2a. provides the TextFile class, a simple interface
                        to text files
* distutils.unixccompiler: 2b. UNIX C Compiler
* distutils.util: 2c. Miscellaneous other utility functions
* distutils.version: 2d. implements classes that represent module version
                        numbers.


File: python-distutils-3.2.2.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* add_include_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line  90)
* add_library() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 105)
* add_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 125)
* add_link_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 164)
* add_runtime_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 137)
* announce() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 453)
* bdist_msi (class in distutils.command.bdist_msi): distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                              (line   6)
* build_py (class in distutils.command.build_py): distutils command build_py --- Build the py/ pyc files of a package.
                                                              (line   6)
* build_py_2to3 (class in distutils.command.build_py): distutils command build_py --- Build the py/ pyc files of a package.
                                                              (line   8)
* byte_compile() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line 136)
* CCompiler (class in distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  63)
* change_root() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line  68)
* check_environ() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line  74)
* close() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line  81)
* Command (class in distutils.cmd):      distutils cmd --- Abstract base class for Distutils commands.
                                                              (line   8)
* Command (class in distutils.core):     distutils core --- Core Distutils functionality.
                                                              (line 197)
* compile() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 235)
* convert_path() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line  59)
* copy_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                              (line   9)
* copy_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                              (line  30)
* create_shortcut() (built-in function): The Postinstallation script.
                                                              (line  60)
* create_static_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 289)
* create_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                              (line  20)
* customize_compiler() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  76)
* debug_print() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 459)
* define_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 147)
* detect_language() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 180)
* directory_created() (built-in function): The Postinstallation script.
                                                              (line  23)
* Distribution (class in distutils.core): distutils core --- Core Distutils functionality.
                                                              (line 189)
* distutils.archive_util (module):       distutils archive_util --- Archiving utilities.
                                                              (line   6)
* distutils.bcppcompiler (module):       distutils bcppcompiler --- Borland Compiler.
                                                              (line   6)
* distutils.ccompiler (module):          distutils ccompiler --- CCompiler base class.
                                                              (line   6)
* distutils.cmd (module):                distutils cmd --- Abstract base class for Distutils commands.
                                                              (line   6)
* distutils.command (module):            distutils command --- Individual Distutils commands.
                                                              (line   6)
* distutils.command.bdist (module):      distutils command bdist --- Build a binary installer.
                                                              (line   6)
* distutils.command.bdist_dumb (module): distutils command bdist_dumb --- Build a "dumb" installer.
                                                              (line   6)
* distutils.command.bdist_msi (module):  distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                              (line   6)
* distutils.command.bdist_packager (module): distutils command bdist_packager --- Abstract base class for packagers.
                                                              (line   6)
* distutils.command.bdist_rpm (module):  distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM.
                                                              (line   6)
* distutils.command.bdist_wininst (module): distutils command bdist_wininst --- Build a Windows installer.
                                                              (line   6)
* distutils.command.build (module):      distutils command build --- Build all files of a package.
                                                              (line   6)
* distutils.command.build_clib (module): distutils command build_clib --- Build any C libraries in a package.
                                                              (line   6)
* distutils.command.build_ext (module):  distutils command build_ext --- Build any extensions in a package.
                                                              (line   6)
* distutils.command.build_py (module):   distutils command build_py --- Build the py/ pyc files of a package.
                                                              (line   6)
* distutils.command.build_scripts (module): distutils command build_scripts --- Build the scripts of a package.
                                                              (line   6)
* distutils.command.check (module):      distutils command check --- Check the meta-data of a package.
                                                              (line   6)
* distutils.command.clean (module):      distutils command clean --- Clean a package build area.
                                                              (line   6)
* distutils.command.config (module):     distutils command config --- Perform package configuration.
                                                              (line   6)
* distutils.command.install (module):    distutils command install --- Install a package.
                                                              (line   6)
* distutils.command.install_data (module): distutils command install_data --- Install data files from a package.
                                                              (line   6)
* distutils.command.install_headers (module): distutils command install_headers --- Install C/C++ header files from a package.
                                                              (line   6)
* distutils.command.install_lib (module): distutils command install_lib --- Install library files from a package.
                                                              (line   6)
* distutils.command.install_scripts (module): distutils command install_scripts --- Install script files from a package.
                                                              (line   6)
* distutils.command.register (module):   distutils command register --- Register a module with the Python Package Index.
                                                              (line   6)
* distutils.command.sdist (module):      distutils command sdist --- Build a source distribution.
                                                              (line   6)
* distutils.core (module):               distutils core --- Core Distutils functionality.
                                                              (line   6)
* distutils.cygwinccompiler (module):    distutils cygwincompiler --- Cygwin Compiler.
                                                              (line   6)
* distutils.debug (module):              distutils debug --- Distutils debug mode.
                                                              (line   6)
* distutils.dep_util (module):           distutils dep_util --- Dependency checking.
                                                              (line   6)
* distutils.dir_util (module):           distutils dir_util --- Directory tree operations.
                                                              (line   6)
* distutils.dist (module):               distutils dist --- The Distribution class.
                                                              (line   6)
* distutils.emxccompiler (module):       distutils emxccompiler --- OS/2 EMX Compiler.
                                                              (line   6)
* distutils.errors (module):             distutils errors --- Distutils exceptions.
                                                              (line   6)
* distutils.extension (module):          distutils extension --- The Extension class.
                                                              (line   6)
* distutils.fancy_getopt (module):       distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line   6)
* distutils.file_util (module):          distutils file_util --- Single file operations.
                                                              (line   6)
* distutils.filelist (module):           distutils filelist --- The FileList class.
                                                              (line   6)
* distutils.log (module):                distutils log --- Simple PEP 282-style logging.
                                                              (line   6)
* distutils.msvccompiler (module):       distutils msvccompiler --- Microsoft Compiler.
                                                              (line   6)
* distutils.spawn (module):              distutils spawn --- Spawn a sub-process.
                                                              (line   6)
* distutils.sysconfig (module):          distutils sysconfig --- System configuration information.
                                                              (line   6)
* distutils.text_file (module):          distutils text_file --- The TextFile class.
                                                              (line   6)
* distutils.unixccompiler (module):      distutils unixccompiler --- Unix C Compiler.
                                                              (line   6)
* distutils.util (module):               distutils util --- Miscellaneous other utility functions.
                                                              (line   6)
* distutils.version (module):            distutils version --- Version number classes.
                                                              (line   6)
* environment variable; HOME:            distutils util --- Miscellaneous other utility functions.
                                                              (line  79)
* environment variable; PATH:            Uploading Packages to the Package Index.
                                                              (line  38)
* environment variable; PLAT:            distutils util --- Miscellaneous other utility functions.
                                                              (line  81)
* EXEC_PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  22)
* executable_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 411)
* execute() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 435)
* execute() (in module distutils.util):  distutils util --- Miscellaneous other utility functions.
                                                              (line 119)
* Extension (class in distutils.core):   distutils core --- Core Distutils functionality.
                                                              (line 107)
* fancy_getopt() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  20)
* FancyGetopt (class in distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  35)
* file_created() (built-in function):    The Postinstallation script.
                                                              (line  23)
* finalize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                              (line  29)
* find_library_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 185)
* gen_lib_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  14)
* gen_preprocess_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  23)
* generate_help() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  65)
* get_config_h_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  37)
* get_config_var() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  25)
* get_config_vars() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  29)
* get_default_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  34)
* get_makefile_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  44)
* get_option_order() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  60)
* get_platform() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line   9)
* get_python_inc() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  51)
* get_python_lib() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  61)
* get_special_folder_path() (built-in function): The Postinstallation script.
                                                              (line  31)
* getopt() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  47)
* grok_environment_error() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line  99)
* has_function() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 192)
* HOME:                                  distutils util --- Miscellaneous other utility functions.
                                                              (line  79)
* initialize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                              (line  21)
* library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 199)
* library_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 417)
* library_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 203)
* link() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 315)
* link_executable() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 365)
* link_shared_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 374)
* link_shared_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 384)
* make_archive() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                              (line   9)
* make_tarball() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                              (line  23)
* make_zipfile() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                              (line  35)
* mkpath() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 445)
* mkpath() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                              (line   9)
* move_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 449)
* move_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                              (line  34)
* new_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  45)
* newer() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                              (line  10)
* newer_group() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                              (line  23)
* newer_pairwise() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                              (line  16)
* object_filenames() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 425)
* open() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line  77)
* PATH:                                  Uploading Packages to the Package Index.
                                                              (line  38)
* PLAT:                                  distutils util --- Miscellaneous other utility functions.
                                                              (line  81)
* PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  19)
* preprocess() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 394)
* Python Enhancement Proposals; PEP 301: distutils command register --- Register a module with the Python Package Index.
                                                              (line   7)
* Python Enhancement Proposals; PEP 314: distutils core --- Core Distutils functionality.
                                                              (line  52)
* readline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line  94)
* readlines() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line 105)
* remove_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                              (line  52)
* rfc822_escape() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line 172)
* RFC; RFC 822:                          distutils util --- Miscellaneous other utility functions.
                                                              (line 173)
* run() (distutils.cmd.Command method):  Creating a new Distutils command.
                                                              (line  38)
* run_setup() (in module distutils.core): distutils core --- Core Distutils functionality.
                                                              (line  62)
* runtime_library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 207)
* set_executables() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 211)
* set_include_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line  96)
* set_libraries() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 119)
* set_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 132)
* set_link_objects() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 170)
* set_python_build() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                              (line  90)
* set_runtime_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 141)
* setup() (in module distutils.core):    distutils core --- Core Distutils functionality.
                                                              (line  12)
* shared_object_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 430)
* show_compilers() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                              (line  59)
* spawn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 441)
* split_quoted() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line 108)
* strtobool() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line 129)
* sub_commands (distutils.cmd.Command attribute): Creating a new Distutils command.
                                                              (line  46)
* subst_vars() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                              (line  84)
* TextFile (class in distutils.text_file): distutils text_file --- The TextFile class.
                                                              (line  10)
* undefine_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 155)
* unreadline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line 110)
* warn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                              (line 456)
* warn() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                              (line  85)
* wrap_text() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                              (line  31)
* write_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                              (line  43)



Tag Table:
Node: Top442
Ref: distutils/index doc744
Ref: 2e744
Node: An Introduction to Distutils8501
Ref: distutils/introduction distributing-python-modules8630
Ref: 2f8630
Ref: distutils/introduction distutils-intro8630
Ref: 308630
Ref: distutils/introduction an-introduction-to-distutils8630
Ref: 318630
Ref: distutils/introduction distutils-index8630
Ref: 328630
Ref: distutils/introduction doc8630
Ref: 338630
Node: Concepts & Terminology9059
Ref: distutils/introduction concepts-terminology9187
Ref: 349187
Ref: distutils/introduction distutils-concepts9187
Ref: 359187
Node: A Simple Example10381
Ref: distutils/introduction distutils-simple-example10544
Ref: 3610544
Ref: distutils/introduction a-simple-example10544
Ref: 3710544
Node: General Python terminology14263
Ref: distutils/introduction python-terms14434
Ref: 3914434
Ref: distutils/introduction general-python-terminology14434
Ref: 3a14434
Node: Distutils-specific terminology16390
Ref: distutils/introduction distutils-term16536
Ref: 3b16536
Ref: distutils/introduction distutils-specific-terminology16536
Ref: 3c16536
Node: Writing the Setup Script17699
Ref: distutils/setupscript writing-the-setup-script17861
Ref: 3d17861
Ref: distutils/setupscript doc17861
Ref: 3e17861
Ref: distutils/setupscript setup-script17861
Ref: 3817861
Node: Listing whole packages20944
Ref: distutils/setupscript listing-whole-packages21078
Ref: 4021078
Ref: distutils/setupscript listing-packages21078
Ref: 4121078
Node: Listing individual modules23418
Ref: distutils/setupscript listing-individual-modules23589
Ref: 4223589
Ref: distutils/setupscript listing-modules23589
Ref: 4323589
Node: Describing extension modules24359
Ref: distutils/setupscript describing-extension-modules24556
Ref: 4424556
Ref: distutils/setupscript describing-extensions24556
Ref: 4524556
Node: Extension names and packages26237
Ref: distutils/setupscript extension-names-and-packages26377
Ref: 4626377
Node: Extension source files27424
Ref: distutils/setupscript extension-source-files27593
Ref: 4727593
Node: Preprocessor options28940
Ref: distutils/setupscript preprocessor-options29096
Ref: 4829096
Node: Library options31985
Ref: distutils/setupscript library-options32132
Ref: 4932132
Node: Other options33083
Ref: distutils/setupscript other-options33201
Ref: 4a33201
Node: Relationships between Distributions and Packages34330
Ref: distutils/setupscript relationships-between-distributions-and-packages34519
Ref: 4b34519
Node: Installing Scripts37556
Ref: distutils/setupscript installing-scripts37740
Ref: 4d37740
Ref: distutils/setupscript distutils-installing-scripts37740
Ref: 4e37740
Node: Installing Package Data38813
Ref: distutils/setupscript installing-package-data38976
Ref: 5038976
Ref: distutils/setupscript distutils-installing-package-data38976
Ref: 5138976
Node: Installing Additional Files40638
Ref: distutils/setupscript installing-additional-files40803
Ref: 5240803
Ref: distutils/setupscript distutils-additional-files40803
Ref: 5340803
Node: Additional meta-data42573
Ref: distutils/setupscript meta-data42741
Ref: 3f42741
Ref: distutils/setupscript additional-meta-data42741
Ref: 5442741
Ref: Additional meta-data-Footnote-147921
Node: Debugging the setup script47956
Ref: distutils/setupscript debugging-the-setup-script48088
Ref: 5548088
Node: Writing the Setup Configuration File49062
Ref: distutils/configfile doc49226
Ref: 5649226
Ref: distutils/configfile writing-the-setup-configuration-file49226
Ref: 5749226
Ref: distutils/configfile setup-config49226
Ref: 5849226
Ref: Writing the Setup Configuration File-Footnote-154458
Node: Creating a Source Distribution54565
Ref: distutils/sourcedist creating-a-source-distribution54733
Ref: 5954733
Ref: distutils/sourcedist source-dist54733
Ref: 5a54733
Ref: distutils/sourcedist doc54733
Ref: 5b54733
Node: Specifying the files to distribute56248
Ref: distutils/sourcedist specifying-the-files-to-distribute56398
Ref: 5c56398
Ref: distutils/sourcedist manifest56398
Ref: 4f56398
Node: Manifest-related options61947
Ref: distutils/sourcedist manifest-options62097
Ref: 5e62097
Ref: distutils/sourcedist manifest-related-options62097
Ref: 5f62097
Node: Creating Built Distributions63143
Ref: distutils/builtdist creating-built-distributions63309
Ref: 6063309
Ref: distutils/builtdist doc63309
Ref: 6163309
Ref: distutils/builtdist built-dist63309
Ref: 6263309
Node: Creating RPM packages68959
Ref: distutils/builtdist creating-rpm-packages69097
Ref: 6369097
Ref: distutils/builtdist creating-rpms69097
Ref: 6469097
Node: Creating Windows Installers74018
Ref: distutils/builtdist creating-wininst74191
Ref: 6574191
Ref: distutils/builtdist creating-windows-installers74191
Ref: 6674191
Node: Cross-compiling on Windows76273
Ref: distutils/builtdist cross-compiling-on-windows76454
Ref: 6776454
Ref: distutils/builtdist cross-compile-windows76454
Ref: 6876454
Node: The Postinstallation script78127
Ref: distutils/builtdist postinstallation-script78233
Ref: 6978233
Ref: distutils/builtdist the-postinstallation-script78233
Ref: 6a78233
Ref: distutils/builtdist directory_created79110
Ref: 6b79110
Ref: distutils/builtdist file_created79149
Ref: 6c79149
Ref: distutils/builtdist get_special_folder_path79499
Ref: 6d79499
Ref: distutils/builtdist create_shortcut80362
Ref: 6e80362
Node: Vista User Access Control UAC81069
Ref: distutils/builtdist vista-user-access-control-uac81214
Ref: 6f81214
Node: Registering with the Package Index81587
Ref: distutils/packageindex package-index81762
Ref: 7081762
Ref: distutils/packageindex doc81762
Ref: 7181762
Ref: distutils/packageindex registering-with-the-package-index81762
Ref: 7281762
Node: The pypirc file83753
Ref: distutils/packageindex the-pypirc-file83855
Ref: 7383855
Ref: distutils/packageindex pypirc83855
Ref: 7483855
Node: Uploading Packages to the Package Index85242
Ref: distutils/uploading package-upload85397
Ref: 7585397
Ref: distutils/uploading uploading-packages-to-the-package-index85397
Ref: 7685397
Ref: distutils/uploading doc85397
Ref: 7785397
Node: PyPI package display87391
Ref: distutils/uploading pypi-package-display87503
Ref: 7887503
Ref: PyPI package display-Footnote-188601
Node: Examples88649
Ref: distutils/examples doc88789
Ref: 7988789
Ref: distutils/examples examples88789
Ref: 7a88789
Ref: distutils/examples id188789
Ref: 7b88789
Ref: Examples-Footnote-189360
Node: Pure Python distribution by module89414
Ref: distutils/examples pure-mod89553
Ref: 7c89553
Ref: distutils/examples pure-python-distribution-by-module89553
Ref: 7d89553
Node: Pure Python distribution by package91277
Ref: distutils/examples pure-python-distribution-by-package91448
Ref: 7e91448
Ref: distutils/examples pure-pkg91448
Ref: 7f91448
Node: Single extension module95190
Ref: distutils/examples single-ext95345
Ref: 8095345
Ref: distutils/examples single-extension-module95345
Ref: 8195345
Node: Checking a package96422
Ref: distutils/examples checking-a-package96533
Ref: 8296533
Ref: Checking a package-Footnote-198117
Node: Extending Distutils98156
Ref: distutils/extending docutils98274
Ref: 8398274
Ref: distutils/extending extending-distutils98274
Ref: 8498274
Ref: distutils/extending doc98274
Ref: 8598274
Ref: distutils/extending id198274
Ref: 8698274
Node: Integrating new commands99274
Ref: distutils/extending integrating-new-commands99408
Ref: 8899408
Node: Adding new distribution types102251
Ref: distutils/extending adding-new-distribution-types102385
Ref: 89102385
Node: Command Reference102818
Ref: distutils/commandref command-reference102941
Ref: 8a102941
Ref: distutils/commandref doc102941
Ref: 8b102941
Ref: distutils/commandref reference102941
Ref: 8c102941
Node: Installing modules the install command family103280
Ref: distutils/commandref installing-modules-the-install-command-family103452
Ref: 8d103452
Ref: distutils/commandref install-cmd103452
Ref: 8e103452
Node: install_data103758
Ref: distutils/commandref install-data-cmd103892
Ref: 8f103892
Ref: distutils/commandref install-data103892
Ref: 90103892
Node: install_scripts104007
Ref: distutils/commandref install-scripts104141
Ref: 91104141
Ref: distutils/commandref install-scripts-cmd104141
Ref: 92104141
Node: Creating a source distribution the sdist command104257
Ref: distutils/commandref sdist-cmd104429
Ref: 5d104429
Ref: distutils/commandref creating-a-source-distribution-the-sdist-command104429
Ref: 93104429
Node: API Reference106297
Ref: distutils/apiref api-reference106420
Ref: 94106420
Ref: distutils/apiref doc106420
Ref: 95106420
Ref: distutils/apiref id1106420
Ref: 96106420
Node: distutils core --- Core Distutils functionality111668
Ref: distutils/apiref module-distutils core111834
Ref: 1a111834
Ref: distutils/apiref distutils-core-core-distutils-functionality111834
Ref: 97111834
Ref: distutils/apiref distutils core setup112223
Ref: 4c112223
Ref: distutils/apiref distutils core run_setup115742
Ref: 9b115742
Ref: distutils/apiref distutils core Extension117865
Ref: 98117865
Ref: distutils/apiref distutils core Distribution123627
Ref: 99123627
Ref: distutils/apiref distutils core Command123956
Ref: 9a123956
Ref: distutils core --- Core Distutils functionality-Footnote-1124151
Ref: distutils core --- Core Distutils functionality-Footnote-2124211
Node: distutils ccompiler --- CCompiler base class124258
Ref: distutils/apiref module-distutils ccompiler124476
Ref: 2124476
Ref: distutils/apiref distutils-ccompiler-ccompiler-base-class124476
Ref: 9c124476
Ref: distutils/apiref distutils ccompiler gen_lib_options124961
Ref: 9e124961
Ref: distutils/apiref distutils ccompiler gen_preprocess_options125445
Ref: 9f125445
Ref: distutils/apiref distutils ccompiler get_default_compiler126077
Ref: a0126077
Ref: distutils/apiref distutils ccompiler new_compiler126528
Ref: a1126528
Ref: distutils/apiref distutils ccompiler show_compilers127291
Ref: a2127291
Ref: distutils/apiref distutils ccompiler CCompiler127467
Ref: 9d127467
Ref: distutils/apiref distutils ccompiler CCompiler add_include_dir128880
Ref: a3128880
Ref: distutils/apiref distutils ccompiler CCompiler set_include_dirs129179
Ref: a4129179
Ref: distutils/apiref distutils ccompiler CCompiler add_library129645
Ref: a5129645
Ref: distutils/apiref distutils ccompiler CCompiler set_libraries130427
Ref: a6130427
Ref: distutils/apiref distutils ccompiler CCompiler add_library_dir130721
Ref: a7130721
Ref: distutils/apiref distutils ccompiler CCompiler set_library_dirs131108
Ref: a8131108
Ref: distutils/apiref distutils ccompiler CCompiler add_runtime_library_dir131348
Ref: a9131348
Ref: distutils/apiref distutils ccompiler CCompiler set_runtime_library_dirs131508
Ref: aa131508
Ref: distutils/apiref distutils ccompiler CCompiler define_macro131793
Ref: ab131793
Ref: distutils/apiref distutils ccompiler CCompiler undefine_macro132216
Ref: ac132216
Ref: distutils/apiref distutils ccompiler CCompiler add_link_object132723
Ref: ad132723
Ref: distutils/apiref distutils ccompiler CCompiler set_link_objects133001
Ref: ae133001
Ref: distutils/apiref distutils ccompiler CCompiler detect_language133440
Ref: af133440
Ref: distutils/apiref distutils ccompiler CCompiler find_library_file133675
Ref: b0133675
Ref: distutils/apiref distutils ccompiler CCompiler has_function134077
Ref: b1134077
Ref: distutils/apiref distutils ccompiler CCompiler library_dir_option134478
Ref: b2134478
Ref: distutils/apiref distutils ccompiler CCompiler library_option134632
Ref: b3134632
Ref: distutils/apiref distutils ccompiler CCompiler runtime_library_dir_option134802
Ref: b4134802
Ref: distutils/apiref distutils ccompiler CCompiler set_executables134972
Ref: b5134972
Ref: distutils/apiref distutils ccompiler CCompiler compile136193
Ref: b7136193
Ref: distutils/apiref distutils ccompiler CCompiler create_static_lib138937
Ref: b8138937
Ref: distutils/apiref distutils ccompiler CCompiler link140233
Ref: b9140233
Ref: distutils/apiref distutils ccompiler CCompiler link_executable142831
Ref: ba142831
Ref: distutils/apiref distutils ccompiler CCompiler link_shared_lib143318
Ref: bb143318
Ref: distutils/apiref distutils ccompiler CCompiler link_shared_object143857
Ref: bc143857
Ref: distutils/apiref distutils ccompiler CCompiler preprocess144420
Ref: bd144420
Ref: distutils/apiref distutils ccompiler CCompiler executable_filename145286
Ref: be145286
Ref: distutils/apiref distutils ccompiler CCompiler library_filename145586
Ref: bf145586
Ref: distutils/apiref distutils ccompiler CCompiler object_filenames145985
Ref: c0145985
Ref: distutils/apiref distutils ccompiler CCompiler shared_object_filename146220
Ref: c1146220
Ref: distutils/apiref distutils ccompiler CCompiler execute146414
Ref: c2146414
Ref: distutils/apiref distutils ccompiler CCompiler spawn146710
Ref: c4146710
Ref: distutils/apiref distutils ccompiler CCompiler mkpath146867
Ref: c5146867
Ref: distutils/apiref distutils ccompiler CCompiler move_file147056
Ref: c7147056
Ref: distutils/apiref distutils ccompiler CCompiler announce147206
Ref: c9147206
Ref: distutils/apiref distutils ccompiler CCompiler warn147321
Ref: ca147321
Ref: distutils/apiref distutils ccompiler CCompiler debug_print147409
Ref: cb147409
Node: distutils unixccompiler --- Unix C Compiler147596
Ref: distutils/apiref distutils-unixccompiler-unix-c-compiler147812
Ref: cc147812
Ref: distutils/apiref module-distutils unixccompiler147812
Ref: 2b147812
Node: distutils msvccompiler --- Microsoft Compiler148512
Ref: distutils/apiref module-distutils msvccompiler148727
Ref: 27148727
Ref: distutils/apiref distutils-msvccompiler-microsoft-compiler148727
Ref: cd148727
Node: distutils bcppcompiler --- Borland Compiler149748
Ref: distutils/apiref distutils-bcppcompiler-borland-compiler149964
Ref: ce149964
Ref: distutils/apiref module-distutils bcppcompiler149964
Ref: 1149964
Node: distutils cygwincompiler --- Cygwin Compiler150183
Ref: distutils/apiref distutils-cygwincompiler-cygwin-compiler150398
Ref: cf150398
Ref: distutils/apiref module-distutils cygwinccompiler150398
Ref: 1b150398
Node: distutils emxccompiler --- OS/2 EMX Compiler150764
Ref: distutils/apiref distutils-emxccompiler-os-2-emx-compiler150982
Ref: d0150982
Ref: distutils/apiref module-distutils emxccompiler150982
Ref: 20150982
Node: distutils archive_util --- Archiving utilities151218
Ref: distutils/apiref distutils-archive-util-archiving-utilities151434
Ref: d1151434
Ref: distutils/apiref module-distutils archive_util151434
Ref: 0151434
Ref: distutils/apiref distutils archive_util make_archive151639
Ref: d2151639
Ref: distutils/apiref distutils archive_util make_tarball152425
Ref: d3152425
Ref: distutils/apiref distutils archive_util make_zipfile153062
Ref: d4153062
Node: distutils dep_util --- Dependency checking153557
Ref: distutils/apiref module-distutils dep_util153777
Ref: 1d153777
Ref: distutils/apiref distutils-dep-util-dependency-checking153777
Ref: d5153777
Ref: distutils/apiref distutils dep_util newer154058
Ref: d6154058
Ref: distutils/apiref distutils dep_util newer_pairwise154391
Ref: d7154391
Ref: distutils/apiref distutils dep_util newer_group154711
Ref: d8154711
Node: distutils dir_util --- Directory tree operations155560
Ref: distutils/apiref distutils-dir-util-directory-tree-operations155780
Ref: d9155780
Ref: distutils/apiref module-distutils dir_util155780
Ref: 1e155780
Ref: distutils/apiref distutils dir_util mkpath155980
Ref: c6155980
Ref: distutils/apiref distutils dir_util create_tree156584
Ref: da156584
Ref: distutils/apiref distutils dir_util copy_tree157141
Ref: db157141
Ref: distutils/apiref distutils dir_util remove_tree158408
Ref: dc158408
Node: distutils file_util --- Single file operations158680
Ref: distutils/apiref distutils-file-util-single-file-operations158914
Ref: dd158914
Ref: distutils/apiref module-distutils file_util158914
Ref: 24158914
Ref: distutils/apiref distutils file_util copy_file159103
Ref: de159103
Ref: distutils/apiref distutils file_util move_file160474
Ref: c8160474
Ref: distutils/apiref distutils file_util write_file160881
Ref: df160881
Node: distutils util --- Miscellaneous other utility functions161067
Ref: distutils/apiref distutils-util-miscellaneous-other-utility-functions161294
Ref: e0161294
Ref: distutils/apiref module-distutils util161294
Ref: 2c161294
Ref: distutils/apiref distutils util get_platform161522
Ref: e1161522
Ref: distutils/apiref distutils util convert_path163306
Ref: e2163306
Ref: distutils/apiref distutils util change_root163832
Ref: e3163832
Ref: distutils/apiref distutils util check_environ164152
Ref: e4164152
Ref: distutils/apiref distutils util subst_vars164554
Ref: e5164554
Ref: distutils/apiref distutils util grok_environment_error165337
Ref: e6165337
Ref: distutils/apiref distutils util split_quoted165838
Ref: b6165838
Ref: distutils/apiref distutils util execute166412
Ref: c3166412
Ref: distutils/apiref distutils util strtobool166933
Ref: e7166933
Ref: distutils/apiref distutils util byte_compile167230
Ref: e8167230
Ref: distutils/apiref distutils util rfc822_escape168888
Ref: e9168888
Ref: distutils util --- Miscellaneous other utility functions-Footnote-1169180
Node: distutils dist --- The Distribution class169226
Ref: distutils/apiref distutils-dist-the-distribution-class169450
Ref: ea169450
Ref: distutils/apiref module-distutils dist169450
Ref: 1f169450
Node: distutils extension --- The Extension class169673
Ref: distutils/apiref distutils-extension-the-extension-class169881
Ref: eb169881
Ref: distutils/apiref module-distutils extension169881
Ref: 22169881
Node: distutils debug --- Distutils debug mode170088
Ref: distutils/apiref module-distutils debug170296
Ref: 1c170296
Ref: distutils/apiref distutils-debug-distutils-debug-mode170296
Ref: ec170296
Node: distutils errors --- Distutils exceptions170431
Ref: distutils/apiref module-distutils errors170664
Ref: 21170664
Ref: distutils/apiref distutils-errors-distutils-exceptions170664
Ref: ed170664
Node: distutils fancy_getopt --- Wrapper around the standard getopt module171144
Ref: distutils/apiref distutils-fancy-getopt-wrapper-around-the-standard-getopt-module171378
Ref: ee171378
Ref: distutils/apiref module-distutils fancy_getopt171378
Ref: 23171378
Ref: distutils/apiref distutils fancy_getopt fancy_getopt172045
Ref: ef172045
Ref: distutils/apiref distutils fancy_getopt wrap_text172675
Ref: f1172675
Ref: distutils/apiref distutils fancy_getopt FancyGetopt172783
Ref: f0172783
Ref: distutils/apiref distutils fancy_getopt FancyGetopt getopt173329
Ref: f2173329
Ref: distutils/apiref distutils fancy_getopt FancyGetopt get_option_order173901
Ref: f3173901
Ref: distutils/apiref distutils fancy_getopt FancyGetopt generate_help174111
Ref: f4174111
Node: distutils filelist --- The FileList class174388
Ref: distutils/apiref distutils-filelist-the-filelist-class174627
Ref: f5174627
Ref: distutils/apiref module-distutils filelist174627
Ref: 25174627
Node: distutils log --- Simple PEP 282-style logging174836
Ref: distutils/apiref distutils-log-simple-pep-282-style-logging175046
Ref: f6175046
Ref: distutils/apiref module-distutils log175046
Ref: 26175046
Node: distutils spawn --- Spawn a sub-process175155
Ref: distutils/apiref module-distutils spawn175380
Ref: 28175380
Ref: distutils/apiref distutils-spawn-spawn-a-sub-process175380
Ref: f7175380
Node: distutils sysconfig --- System configuration information175704
Ref: distutils/apiref module-distutils sysconfig175925
Ref: 29175925
Ref: distutils/apiref distutils-sysconfig-system-configuration-information175925
Ref: f8175925
Ref: distutils/apiref distutils sysconfig PREFIX176739
Ref: f9176739
Ref: distutils/apiref distutils sysconfig EXEC_PREFIX176828
Ref: fa176828
Ref: distutils/apiref distutils sysconfig get_config_var176927
Ref: fb176927
Ref: distutils/apiref distutils sysconfig get_config_vars177087
Ref: fc177087
Ref: distutils/apiref distutils sysconfig get_config_h_filename177536
Ref: fd177536
Ref: distutils/apiref distutils sysconfig get_makefile_filename177891
Ref: fe177891
Ref: distutils/apiref distutils sysconfig get_python_inc178259
Ref: ff178259
Ref: distutils/apiref distutils sysconfig get_python_lib178785
Ref: 100178785
Ref: distutils/apiref distutils sysconfig customize_compiler179578
Ref: 101179578
Ref: distutils/apiref distutils sysconfig set_python_build180239
Ref: 102180239
Node: distutils text_file --- The TextFile class180561
Ref: distutils/apiref distutils-text-file-the-textfile-class180787
Ref: 103180787
Ref: distutils/apiref module-distutils text_file180787
Ref: 2a180787
Ref: distutils/apiref distutils text_file TextFile181093
Ref: 104181093
Ref: distutils/apiref distutils text_file TextFile open185015
Ref: 108185015
Ref: distutils/apiref distutils text_file TextFile close185161
Ref: 107185161
Ref: distutils/apiref distutils text_file TextFile warn185324
Ref: 105185324
Ref: distutils/apiref distutils text_file TextFile readline185832
Ref: 109185832
Ref: distutils/apiref distutils text_file TextFile readlines186489
Ref: 10a186489
Ref: distutils/apiref distutils text_file TextFile unreadline186695
Ref: 106186695
Node: distutils version --- Version number classes187281
Ref: distutils/apiref distutils-version-version-number-classes187511
Ref: 10b187511
Ref: distutils/apiref module-distutils version187511
Ref: 2d187511
Node: distutils cmd --- Abstract base class for Distutils commands187616
Ref: distutils/apiref distutils-cmd-abstract-base-class-for-distutils-commands187836
Ref: 10c187836
Ref: distutils/apiref module-distutils cmd187836
Ref: 3187836
Ref: distutils/apiref distutils cmd Command188038
Ref: 87188038
Node: Creating a new Distutils command189095
Ref: distutils/apiref creating-a-new-distutils-command189322
Ref: 110189322
Ref: distutils/apiref distutils cmd Command initialize_options190155
Ref: 10d190155
Ref: distutils/apiref distutils cmd Command finalize_options190598
Ref: 10e190598
Ref: distutils/apiref distutils cmd Command run191095
Ref: 10f191095
Ref: distutils/apiref distutils cmd Command sub_commands191513
Ref: 111191513
Node: distutils command --- Individual Distutils commands192463
Ref: distutils/apiref module-distutils command192682
Ref: 4192682
Ref: distutils/apiref distutils-command-individual-distutils-commands192682
Ref: 112192682
Node: distutils command bdist --- Build a binary installer192801
Ref: distutils/apiref distutils-command-bdist-build-a-binary-installer193058
Ref: 113193058
Ref: distutils/apiref module-distutils command bdist193058
Ref: 5193058
Node: distutils command bdist_packager --- Abstract base class for packagers193179
Ref: distutils/apiref distutils-command-bdist-packager-abstract-base-class-for-packagers193442
Ref: 114193442
Ref: distutils/apiref module-distutils command bdist_packager193442
Ref: 8193442
Node: distutils command bdist_dumb --- Build a "dumb" installer193599
Ref: distutils/apiref module-distutils command bdist_dumb193884
Ref: 6193884
Ref: distutils/apiref distutils-command-bdist-dumb-build-a-dumb-installer193884
Ref: 115193884
Node: distutils command bdist_msi --- Build a Microsoft Installer binary package194015
Ref: distutils/apiref distutils-command-bdist-msi-build-a-microsoft-installer-binary-package194314
Ref: 116194314
Ref: distutils/apiref module-distutils command bdist_msi194314
Ref: 7194314
Ref: distutils/apiref distutils command bdist_msi bdist_msi194479
Ref: 117194479
Ref: distutils command bdist_msi --- Build a Microsoft Installer binary package-Footnote-1194912
Node: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM194980
Ref: distutils/apiref module-distutils command bdist_rpm195283
Ref: 9195283
Ref: distutils/apiref distutils-command-bdist-rpm-build-a-binary-distribution-as-a-redhat-rpm-and-srpm195283
Ref: 118195283
Node: distutils command bdist_wininst --- Build a Windows installer195468
Ref: distutils/apiref distutils-command-bdist-wininst-build-a-windows-installer195752
Ref: 119195752
Ref: distutils/apiref module-distutils command bdist_wininst195752
Ref: a195752
Node: distutils command sdist --- Build a source distribution195891
Ref: distutils/apiref module-distutils command sdist196147
Ref: 19196147
Ref: distutils/apiref distutils-command-sdist-build-a-source-distribution196147
Ref: 11a196147
Node: distutils command build --- Build all files of a package196274
Ref: distutils/apiref module-distutils command build196536
Ref: b196536
Ref: distutils/apiref distutils-command-build-build-all-files-of-a-package196536
Ref: 11b196536
Node: distutils command build_clib --- Build any C libraries in a package196665
Ref: distutils/apiref module-distutils command build_clib196937
Ref: c196937
Ref: distutils/apiref distutils-command-build-clib-build-any-c-libraries-in-a-package196937
Ref: 11c196937
Node: distutils command build_ext --- Build any extensions in a package197088
Ref: distutils/apiref distutils-command-build-ext-build-any-extensions-in-a-package197371
Ref: 11d197371
Ref: distutils/apiref module-distutils command build_ext197371
Ref: d197371
Node: distutils command build_py --- Build the py/ pyc files of a package197518
Ref: distutils/apiref module-distutils command build_py197800
Ref: e197800
Ref: distutils/apiref distutils-command-build-py-build-the-py-pyc-files-of-a-package197800
Ref: 11e197800
Ref: distutils/apiref distutils command build_py build_py197953
Ref: 11f197953
Ref: distutils/apiref distutils command build_py build_py_2to3198001
Ref: 120198001
Node: distutils command build_scripts --- Build the scripts of a package198610
Ref: distutils/apiref module-distutils command build_scripts198881
Ref: f198881
Ref: distutils/apiref distutils-command-build-scripts-build-the-scripts-of-a-package198881
Ref: 121198881
Node: distutils command clean --- Clean a package build area199030
Ref: distutils/apiref module-distutils command clean199292
Ref: 11199292
Ref: distutils/apiref distutils-command-clean-clean-a-package-build-area199292
Ref: 122199292
Node: distutils command config --- Perform package configuration199417
Ref: distutils/apiref module-distutils command config199660
Ref: 12199660
Ref: distutils/apiref distutils-command-config-perform-package-configuration199660
Ref: 123199660
Node: distutils command install --- Install a package199793
Ref: distutils/apiref module-distutils command install200050
Ref: 13200050
Ref: distutils/apiref distutils-command-install-install-a-package200050
Ref: 124200050
Node: distutils command install_data --- Install data files from a package200161
Ref: distutils/apiref distutils-command-install-data-install-data-files-from-a-package200439
Ref: 125200439
Ref: distutils/apiref module-distutils command install_data200439
Ref: 14200439
Node: distutils command install_headers --- Install C/C++ header files from a package200592
Ref: distutils/apiref module-distutils command install_headers200893
Ref: 15200893
Ref: distutils/apiref distutils-command-install-headers-install-c-c-header-files-from-a-package200893
Ref: 126200893
Node: distutils command install_lib --- Install library files from a package201068
Ref: distutils/apiref distutils-command-install-lib-install-library-files-from-a-package201374
Ref: 127201374
Ref: distutils/apiref module-distutils command install_lib201374
Ref: 16201374
Node: distutils command install_scripts --- Install script files from a package201531
Ref: distutils/apiref distutils-command-install-scripts-install-script-files-from-a-package201836
Ref: 128201836
Ref: distutils/apiref module-distutils command install_scripts201836
Ref: 17201836
Node: distutils command register --- Register a module with the Python Package Index201999
Ref: distutils/apiref distutils-command-register-register-a-module-with-the-python-package-index202294
Ref: 129202294
Ref: distutils/apiref module-distutils command register202294
Ref: 18202294
Ref: distutils command register --- Register a module with the Python Package Index-Footnote-1202628
Node: distutils command check --- Check the meta-data of a package202675
Ref: distutils/apiref module-distutils command check202888
Ref: 10202888
Ref: distutils/apiref distutils-command-check-check-the-meta-data-of-a-package202888
Ref: 12a202888
Node: Python Module Index203214
Node: Index207143

End Tag Table


Local Variables:
coding: utf-8
End:
