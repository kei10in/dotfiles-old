This is python-using-3.2.2.info, produced by makeinfo version 4.13 from
python-using-3.2.2.texi.

Generated by Sphinx 1.1.2.
INFO-DIR-SECTION Python v3 2 2
START-INFO-DIR-ENTRY
* Python Setup and Usage: (python-using-3.2.2.info). how to use Python on different platforms
END-INFO-DIR-ENTRY

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation


File: python-using-3.2.2.info,  Node: Top,  Next: Command line and environment,  Up: (dir)

Python Setup and Usage
**********************

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation

  This part of the documentation is devoted to general information on
the setup of the Python environment on different platform, the
invocation of the interpreter and things that make working with Python
easier.

* Menu:

* Command line and environment::
* Using Python on Unix platforms::
* Using Python on Windows::
* Using Python on a Macintosh::
* Index::

 --- The Detailed Node Listing ---

Command line and environment

* Command line::
* Environment variables::

Command line

* Interface options::
* Generic options::
* Miscellaneous options::
* Options you shouldn't use::

Environment variables

* Debug-mode variables::

Using Python on Unix platforms

* Getting and installing the latest version of Python::
* Building Python::
* Python-related paths and files::
* Miscellaneous::
* Editors::

Getting and installing the latest version of Python

* On Linux::
* On FreeBSD and OpenBSD::
* On OpenSolaris::

Using Python on Windows

* Installing Python::
* Alternative bundles::
* Configuring Python::
* Additional modules::
* Compiling Python on Windows::
* Other resources::

Configuring Python

* Excursus; Setting environment variables: Excursus Setting environment variables.
* Finding the Python executable::
* Finding modules::
* Executing scripts::

Additional modules

* PyWin32::
* Py2exe::
* WConio::

Using Python on a Macintosh

* Getting and Installing MacPython::
* The IDE::
* Installing Additional Python Packages::
* GUI Programming on the Mac::
* Distributing Python Applications on the Mac::
* Application Scripting::
* Other Resources::

Getting and Installing MacPython

* How to run a Python script::
* Running scripts with a GUI::
* Configuration::


File: python-using-3.2.2.info,  Node: Command line and environment,  Next: Using Python on Unix platforms,  Prev: Top,  Up: Top

1 Command line and environment
******************************

The CPython interpreter scans the command line and the environment for
various settings.

*CPython implementation detail:* Other implementations' command line
schemes may differ.  See _implementations_ for further resources.

* Menu:

* Command line::
* Environment variables::

Command line

* Interface options::
* Generic options::
* Miscellaneous options::
* Options you shouldn't use::

Environment variables

* Debug-mode variables::


File: python-using-3.2.2.info,  Node: Command line,  Next: Environment variables,  Up: Command line and environment

1.1 Command line
================

When invoking Python, you may specify any of these options:

    python [-bBdEhiOsSuvVWx?] [-c command | -m module-name | script | - ] [args]

The most common use case is, of course, a simple invocation of a script:

    python myscript.py


* Menu:

* Interface options::
* Generic options::
* Miscellaneous options::
* Options you shouldn't use::


File: python-using-3.2.2.info,  Node: Interface options,  Next: Generic options,  Up: Command line

1.1.1 Interface options
-----------------------

The interpreter interface resembles that of the UNIX shell, but
provides some additional methods of invocation:

   * When called with standard input connected to a tty device, it
     prompts for commands and executes them until an EOF (an
     end-of-file character, you can produce that with _Ctrl-D_ on UNIX
     or _Ctrl-Z, Enter_ on Windows) is read.

   * When called with a file name argument or with a file as standard
     input, it reads and executes a script from that file.

   * When called with a directory name argument, it reads and executes
     an appropriately named script from that directory.

   * When called with `-c command', it executes the Python statement(s)
     given as _command_.  Here _command_ may contain multiple
     statements separated by newlines. Leading whitespace is
     significant in Python statements!

   * When called with `-m module-name', the given module is located on
     the Python module path and executed as a script.

  In non-interactive mode, the entire input is parsed before it is
executed.

  An interface option terminates the list of options consumed by the
interpreter, all consecutive arguments will end up in `sys.argv' - note
that the first element, subscript zero (`sys.argv[0]'), is a string
reflecting the program's source.

 -- Program Option: -c <command>
     Execute the Python code in _command_.  _command_ can be one or more
     statements separated by newlines, with significant leading
     whitespace as in normal module code.

     If this option is given, the first element of `sys.argv' will be
     `"-c"' and the current directory will be added to the start of
     `sys.path' (allowing modules in that directory to be imported as
     top level modules).

 -- Program Option: -m <module-name>
     Search `sys.path' for the named module and execute its contents as
     the `__main__' module.

     Since the argument is a _module_ name, you must not give a file
     extension (`.py').  The `module-name' should be a valid Python
     module name, but the implementation may not always enforce this
     (e.g. it may allow you to use a name that includes a hyphen).

     Package names are also permitted. When a package name is supplied
     instead of a normal module, the interpreter will execute
     `<pkg>.__main__' as the main module. This behaviour is
     deliberately similar to the handling of directories and zipfiles
     that are passed to the interpreter as the script argument.

          Note: This option cannot be used with built-in modules and
          extension modules written in C, since they do not have Python
          module files. However, it can still be used for precompiled
          modules, even if the original source file is not available.

     If this option is given, the first element of `sys.argv' will be
     the full path to the module file (while the module file is being
     located, the first element will be set to `"-m"'). As with the
     *note -c: a. option, the current directory will be added to the
     start of `sys.path'.

     Many standard library modules contain code that is invoked on
     their execution as a script.  An example is the `timeit' module:

         python -mtimeit -s 'setup here' 'benchmarked code here'
         python -mtimeit -h # for details


See also
........

     `runpy.run_module()'    Equivalent functionality directly
available to Python code

     PEP 338(1) - Executing modules as scripts

     Changed in version 3.1: Supply the package name to run a
`__main__' submodule.

 -- Describe: -
     Read commands from standard input (`sys.stdin').  If standard
     input is a terminal, *note -i: c. is implied.

     If this option is given, the first element of `sys.argv' will be
     `"-"' and the current directory will be added to the start of
     `sys.path'.

 -- Describe: <script>
     Execute the Python code contained in _script_, which must be a
     filesystem path (absolute or relative) referring to either a
     Python file, a directory containing a `__main__.py' file, or a
     zipfile containing a `__main__.py' file.

     If this option is given, the first element of `sys.argv' will be
     the script name as given on the command line.

     If the script name refers directly to a Python file, the directory
     containing that file is added to the start of `sys.path', and the
     file is executed as the `__main__' module.

     If the script name refers to a directory or zipfile, the script
     name is added to the start of `sys.path' and the `__main__.py'
     file in that location is executed as the `__main__' module.

  If no interface option is given, *note -i: c. is implied,
`sys.argv[0]' is an empty string (`""') and the current directory will
be added to the start of `sys.path'.

See also
........

_tut-invoking_

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0338


File: python-using-3.2.2.info,  Node: Generic options,  Next: Miscellaneous options,  Prev: Interface options,  Up: Command line

1.1.2 Generic options
---------------------

 -- Program Option: -?
 -- Program Option: -h
 -- Program Option: -help
     Print a short description of all command line options.

 -- Program Option: -V
 -- Program Option: -version
     Print the Python version number and exit.  Example output could be:

         Python 3.0




File: python-using-3.2.2.info,  Node: Miscellaneous options,  Next: Options you shouldn't use,  Prev: Generic options,  Up: Command line

1.1.3 Miscellaneous options
---------------------------

 -- Program Option: -b
     Issue a warning when comparing str and bytes. Issue an error when
     the option is given twice (`-bb').

 -- Program Option: -B
     If given, Python won't try to write `.pyc' or `.pyo' files on the
     import of source modules.  See also *note PYTHONDONTWRITEBYTECODE:
     15.

 -- Program Option: -d
     Turn on parser debugging output (for wizards only, depending on
     compilation options).  See also *note PYTHONDEBUG: 17.

 -- Program Option: -E
     Ignore all `PYTHON*' environment variables, e.g.  *note
     PYTHONPATH: 19. and *note PYTHONHOME: 1a, that might be set.

 -- Program Option: -i
     When a script is passed as first argument or the *note -c: a.
     option is used, enter interactive mode after executing the script
     or the command, even when `sys.stdin' does not appear to be a
     terminal.  The *note PYTHONSTARTUP: 1b. file is not read.

     This can be useful to inspect global variables or a stack trace
     when a script raises an exception.  See also *note PYTHONINSPECT:
     1c.

 -- Program Option: -O
     Turn on basic optimizations.  This changes the filename extension
     for compiled (_bytecode_) files from `.pyc' to `.pyo'.  See also *note
     PYTHONOPTIMIZE: 1e.

 -- Program Option: -OO
     Discard docstrings in addition to the *note -O: 1d. optimizations.

 -- Program Option: -q
     Don't display the copyright and version messages even in
     interactive mode.

     New in version 3.2.

 -- Program Option: -s
     Don't add the `user site-packages directory' to `sys.path'.

See also
........

     PEP 370(1) - Per user site-packages directory

 -- Program Option: -S
     Disable the import of the module `site' and the site-dependent
     manipulations of `sys.path' that it entails.

 -- Program Option: -u
     Force the binary layer of the stdin, stdout and stderr streams
     (which is available as their `buffer' attribute) to be unbuffered.
     The text I/O layer will still be line-buffered.

     See also *note PYTHONUNBUFFERED: 24.

 -- Program Option: -v
     Print a message each time a module is initialized, showing the
     place (filename or built-in module) from which it is loaded.  When
     given twice (`-vv'), print a message for each file that is checked
     for when searching for a module.  Also provides information on
     module cleanup at exit.  See also *note PYTHONVERBOSE: 26.

 -- Program Option: -W arg
     Warning control.  Python's warning machinery by default prints
     warning messages to `sys.stderr'.  A typical warning message has
     the following form:

         file:line: category: message

     By default, each warning is printed once for each source line
     where it occurs.  This option controls how often warnings are
     printed.

     Multiple *note -W: 27. options may be given; when a warning
     matches more than one option, the action for the last matching
     option is performed.  Invalid *note -W: 27. options are ignored
     (though, a warning message is printed about invalid options when
     the first warning is issued).

     Warnings can also be controlled from within a Python program using
     the `warnings' module.

     The simplest form of argument is one of the following action
     strings (or a unique abbreviation):

    `ignore'
          Ignore all warnings.

    `default'
          Explicitly request the default behavior (printing each
          warning once per source line).

    `all'
          Print a warning each time it occurs (this may generate many
          messages if a warning is triggered repeatedly for the same
          source line, such as inside a loop).

    `module'
          Print each warning only the first time it occurs in each
          module.

    `once'
          Print each warning only the first time it occurs in the
          program.

    `error'
          Raise an exception instead of printing a warning message.

     The full form of argument is:

         action:message:category:module:line

     Here, _action_ is as explained above but only applies to messages
     that match the remaining fields.  Empty fields match all values;
     trailing empty fields may be omitted.  The _message_ field matches
     the start of the warning message printed; this match is
     case-insensitive.  The _category_ field matches the warning
     category.  This must be a class name; the match tests whether the
     actual warning category of the message is a subclass of the
     specified warning category.  The full class name must be given.
     The _module_ field matches the (fully-qualified) module name; this
     match is case-sensitive.  The _line_ field matches the line
     number, where zero matches all line numbers and is thus equivalent
     to an omitted line number.

See also
........

     `warnings' - the warnings module

     PEP 230(2) - Warning framework

     *note PYTHONWARNINGS: 28.

 -- Program Option: -x
     Skip the first line of the source, allowing use of non-Unix forms
     of `#!cmd'.  This is intended for a DOS specific hack only.

          Note: The line numbers in error messages will be off by one.

 -- Program Option: -X
     Reserved for various implementation-specific options.  CPython
     currently defines none of them, but allows to pass arbitrary
     values and retrieve them through the `sys._xoptions' dictionary.

     Changed in version 3.2: It is now allowed to pass *note -X: 2a.
     with CPython.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0370

  (2) http://www.python.org/dev/peps/pep-0230


File: python-using-3.2.2.info,  Node: Options you shouldn't use,  Prev: Miscellaneous options,  Up: Command line

1.1.4 Options you shouldn't use
-------------------------------

 -- Program Option: -J
     Reserved for use by Jython(1).

  ---------- Footnotes ----------

  (1) http://jython.org


File: python-using-3.2.2.info,  Node: Environment variables,  Prev: Command line,  Up: Command line and environment

1.2 Environment variables
=========================

These environment variables influence Python's behavior.

 -- Environment Variable: PYTHONHOME
     Change the location of the standard Python libraries.  By default,
     the libraries are searched in `_prefix_/lib/python_version_' and
     `_exec_prefix_/lib/python_version_', where `_prefix_' and
     `_exec_prefix_' are installation-dependent directories, both
     defaulting to `/usr/local'.

     When *note PYTHONHOME: 1a. is set to a single directory, its value
     replaces both `_prefix_' and `_exec_prefix_'.  To specify
     different values for these, set *note PYTHONHOME: 1a. to
     `_prefix_:_exec_prefix_'.

 -- Environment Variable: PYTHONPATH
     Augment the default search path for module files.  The format is
     the same as the shell's `PATH': one or more directory pathnames
     separated by `os.pathsep' (e.g. colons on Unix or semicolons on
     Windows).  Non-existent directories are silently ignored.

     In addition to normal directories, individual *note PYTHONPATH:
     19. entries may refer to zipfiles containing pure Python modules
     (in either source or compiled form). Extension modules cannot be
     imported from zipfiles.

     The default search path is installation dependent, but generally
     begins with `_prefix_/lib/python_version_' (see *note PYTHONHOME:
     1a. above).  It is _always_ appended to *note PYTHONPATH: 19.

     An additional directory will be inserted in the search path in
     front of *note PYTHONPATH: 19. as described above under *note
     Interface options: 9. The search path can be manipulated from
     within a Python program as the variable `sys.path'.

 -- Environment Variable: PYTHONSTARTUP
     If this is the name of a readable file, the Python commands in
     that file are executed before the first prompt is displayed in
     interactive mode.  The file is executed in the same namespace
     where interactive commands are executed so that objects defined or
     imported in it can be used without qualification in the
     interactive session.  You can also change the prompts `sys.ps1' and
     `sys.ps2' in this file.

 -- Environment Variable: PYTHONY2K
     Set this to a non-empty string to cause the `time' module to
     require dates specified as strings to include 4-digit years,
     otherwise 2-digit years are converted based on rules described in
     the `time' module documentation.

 -- Environment Variable: PYTHONOPTIMIZE
     If this is set to a non-empty string it is equivalent to
     specifying the *note -O: 1d. option.  If set to an integer, it is
     equivalent to specifying *note -O: 1d. multiple times.

 -- Environment Variable: PYTHONDEBUG
     If this is set to a non-empty string it is equivalent to
     specifying the *note -d: 16. option.  If set to an integer, it is
     equivalent to specifying *note -d: 16. multiple times.

 -- Environment Variable: PYTHONINSPECT
     If this is set to a non-empty string it is equivalent to
     specifying the *note -i: c. option.

     This variable can also be modified by Python code using
     `os.environ' to force inspect mode on program termination.

 -- Environment Variable: PYTHONUNBUFFERED
     If this is set to a non-empty string it is equivalent to
     specifying the *note -u: 23. option.

 -- Environment Variable: PYTHONVERBOSE
     If this is set to a non-empty string it is equivalent to
     specifying the *note -v: 25. option.  If set to an integer, it is
     equivalent to specifying *note -v: 25. multiple times.

 -- Environment Variable: PYTHONCASEOK
     If this is set, Python ignores case in `import' statements.  This
     only works on Windows.

 -- Environment Variable: PYTHONDONTWRITEBYTECODE
     If this is set, Python won't try to write `.pyc' or `.pyo' files
     on the import of source modules.

 -- Environment Variable: PYTHONIOENCODING
     If this is set before running the interpreter, it overrides the
     encoding used for stdin/stdout/stderr, in the syntax
     `encodingname:errorhandler'. The `:errorhandler' part is optional
     and has the same meaning as in `str.encode()'.

     For stderr, the `:errorhandler' part is ignored; the handler will
     always be `'backslashreplace''.

 -- Environment Variable: PYTHONNOUSERSITE
     If this is set, Python won't add the `user site-packages
     directory' to `sys.path'.

See also
........

     PEP 370(1) - Per user site-packages directory

 -- Environment Variable: PYTHONUSERBASE
     Defines the `user base directory', which is used to compute the
     path of the `user site-packages directory' and _Distutils
     installation paths_ for `python setup.py install --user'.

See also
........

     PEP 370(2) - Per user site-packages directory

 -- Environment Variable: PYTHONEXECUTABLE
     If this environment variable is set, `sys.argv[0]' will be set to
     its value instead of the value got through the C runtime.  Only
     works on Mac OS X.

 -- Environment Variable: PYTHONWARNINGS
     This is equivalent to the *note -W: 27. option. If set to a comma
     separated string, it is equivalent to specifying *note -W: 27.
     multiple times.

* Menu:

* Debug-mode variables::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0370

  (2) http://www.python.org/dev/peps/pep-0370


File: python-using-3.2.2.info,  Node: Debug-mode variables,  Up: Environment variables

1.2.1 Debug-mode variables
--------------------------

Setting these variables only has an effect in a debug build of Python,
that is, if Python was configured with the `--with-pydebug' build
option.

 -- Environment Variable: PYTHONTHREADDEBUG
     If set, Python will print threading debug info.

 -- Environment Variable: PYTHONDUMPREFS
     If set, Python will dump objects and reference counts still alive
     after shutting down the interpreter.

 -- Environment Variable: PYTHONMALLOCSTATS
     If set, Python will print memory allocation statistics every time
     a new object arena is created, and on shutdown.


File: python-using-3.2.2.info,  Node: Using Python on Unix platforms,  Next: Using Python on Windows,  Prev: Command line and environment,  Up: Top

2 Using Python on Unix platforms
********************************

* Menu:

* Getting and installing the latest version of Python::
* Building Python::
* Python-related paths and files::
* Miscellaneous::
* Editors::

Getting and installing the latest version of Python

* On Linux::
* On FreeBSD and OpenBSD::
* On OpenSolaris::


File: python-using-3.2.2.info,  Node: Getting and installing the latest version of Python,  Next: Building Python,  Up: Using Python on Unix platforms

2.1 Getting and installing the latest version of Python
=======================================================

* Menu:

* On Linux::
* On FreeBSD and OpenBSD::
* On OpenSolaris::


File: python-using-3.2.2.info,  Node: On Linux,  Next: On FreeBSD and OpenBSD,  Up: Getting and installing the latest version of Python

2.1.1 On Linux
--------------

Python comes preinstalled on most Linux distributions, and is available
as a package on all others.  However there are certain features you
might want to use that are not available on your distro's package.  You
can easily compile the latest version of Python from source.

  In the event that Python doesn't come preinstalled and isn't in the
repositories as well, you can easily make packages for your own distro.
Have a look at the following links:

See also
........

<http://www.linux.com/articles/60383>
     for Debian users

<http://linuxmafia.com/pub/linux/suse-linux-internals/chapter35.html>
     for OpenSuse users

<http://docs.fedoraproject.org/drafts/rpm-guide-en/ch-creating-rpms.html>
     for Fedora users

<http://www.slackbook.org/html/package-management-making-packages.html>
     for Slackware users


File: python-using-3.2.2.info,  Node: On FreeBSD and OpenBSD,  Next: On OpenSolaris,  Prev: On Linux,  Up: Getting and installing the latest version of Python

2.1.2 On FreeBSD and OpenBSD
----------------------------

   * FreeBSD users, to add the package use:

         pkg_add -r python


   * OpenBSD users use:

         pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your architecture here>/python-<version>.tgz

     For example i386 users get the 2.5.1 version of Python using:

         pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz




File: python-using-3.2.2.info,  Node: On OpenSolaris,  Prev: On FreeBSD and OpenBSD,  Up: Getting and installing the latest version of Python

2.1.3 On OpenSolaris
--------------------

To install the newest Python versions on OpenSolaris, install blastwave
(<http://www.blastwave.org/howto.html>) and type "pkg_get -i python" at
the prompt.


File: python-using-3.2.2.info,  Node: Building Python,  Next: Python-related paths and files,  Prev: Getting and installing the latest version of Python,  Up: Using Python on Unix platforms

2.2 Building Python
===================

If you want to compile CPython yourself, first thing you should do is
get the source(1). You can download either the latest release's source
or just grab a fresh checkout(2).

  The build process consists the usual

    ./configure
    make
    make install

invocations. Configuration options and caveats for specific Unix
platforms are extensively documented in the `README' file in the root
of the Python source tree.

     Warning: `make install' can overwrite or masquerade the `python'
     binary.  `make altinstall' is therefore recommended instead of
     `make install' since it only installs
     `_exec_prefix_/bin/python_version_'.

  ---------- Footnotes ----------

  (1) http://python.org/download/source/

  (2)
http://www.python.org/dev/faq/#how-do-i-get-a-checkout-of-the-repository-read-only-and-read-write


File: python-using-3.2.2.info,  Node: Python-related paths and files,  Next: Miscellaneous,  Prev: Building Python,  Up: Using Python on Unix platforms

2.3 Python-related paths and files
==================================

These are subject to difference depending on local installation
conventions; `prefix' (`${prefix}') and `exec_prefix' (`${exec_prefix}')
are installation-dependent and should be interpreted as for GNU
software; they may be the same.

  For example, on most Linux systems, the default for both is `/usr'.

File/directory                                      Meaning
--------------------------------------------------------------------------------------------------- 
`_exec_prefix_/bin/python'                          Recommended location of the interpreter.
`_prefix_/lib/python_version_',                     Recommended locations of the directories
`_exec_prefix_/lib/python_version_'                 containing the standard modules.
`_prefix_/include/python_version_',                 Recommended locations of the directories
`_exec_prefix_/include/python_version_'             containing the include files needed for
                                                    developing Python extensions and embedding
                                                    the interpreter.
`~/.pythonrc.py'                                    User-specific initialization file loaded by
                                                    the user module; not used by default or by
                                                    most applications.


File: python-using-3.2.2.info,  Node: Miscellaneous,  Next: Editors,  Prev: Python-related paths and files,  Up: Using Python on Unix platforms

2.4 Miscellaneous
=================

To easily use Python scripts on Unix, you need to make them executable,
e.g. with

    $ chmod +x script

and put an appropriate Shebang line at the top of the script.  A good
choice is usually

    #!/usr/bin/env python

which searches for the Python interpreter in the whole `PATH'.  However,
some Unices may not have the *env* command, so you may need to hardcode
`/usr/bin/python' as the interpreter path.

  To use shell commands in your Python scripts, look at the
`subprocess' module.


File: python-using-3.2.2.info,  Node: Editors,  Prev: Miscellaneous,  Up: Using Python on Unix platforms

2.5 Editors
===========

Vim and Emacs are excellent editors which support Python very well.
For more information on how to code in Python in these editors, look at:

   * <http://www.vim.org/scripts/script.php?script_id=790>

   * <http://sourceforge.net/projects/python-mode>

  Geany is an excellent IDE with support for a lot of languages. For
more information, read: <http://geany.uvena.de/>

  Komodo edit is another extremely good IDE.  It also has support for a
lot of languages. For more information, read:
<http://www.activestate.com/store/productdetail.aspx?prdGuid=20f4ed15-6684-4118-a78b-d37ff4058c5f>


File: python-using-3.2.2.info,  Node: Using Python on Windows,  Next: Using Python on a Macintosh,  Prev: Using Python on Unix platforms,  Up: Top

3 Using Python on Windows
*************************

This document aims to give an overview of Windows-specific behaviour
you should know about when using Python on Microsoft Windows.

* Menu:

* Installing Python::
* Alternative bundles::
* Configuring Python::
* Additional modules::
* Compiling Python on Windows::
* Other resources::


File: python-using-3.2.2.info,  Node: Installing Python,  Next: Alternative bundles,  Up: Using Python on Windows

3.1 Installing Python
=====================

Unlike most Unix systems and services, Windows does not require Python
natively and thus does not pre-install a version of Python.  However,
the CPython team has compiled Windows installers (MSI packages) with
every release(1) for many years.

  With ongoing development of Python, some platforms that used to be
supported earlier are no longer supported (due to the lack of users or
developers).  Check PEP 11(2) for details on all unsupported platforms.

   * Up to 2.5, Python was still compatible with Windows 95, 98 and ME
     (but already raised a deprecation warning on installation).  For
     Python 2.6 (and all following releases), this support was dropped
     and new releases are just expected to work on the Windows NT
     family.

   * Windows CE(3) is still supported.

   * The Cygwin(4) installer offers to install the Python
     interpreter(5) as well; it is located under "Interpreters." (cf.
     Cygwin package source(6), Maintainer releases(7))

  See Python for Windows (and DOS)(8) for detailed information about
platforms with precompiled installers.

See also
........

Python on XP(9)
     "7 Minutes to "Hello World!""  by Richard Dooling, 2006

Installing on Windows(10)
     in "Dive into Python: Python from novice to pro(11)" by Mark
     Pilgrim, 2004, ISBN 1-59059-356-1

For Windows users(12)
     in "Installing Python" in "A Byte of Python(13)" by Swaroop C H,
     2003

  ---------- Footnotes ----------

  (1) http://www.python.org/download/releases/

  (2) http://www.python.org/dev/peps/pep-0011

  (3) http://pythonce.sourceforge.net/

  (4) http://cygwin.com/

  (5) http://cygwin.com/packages/python

  (6)
ftp://ftp.uni-erlangen.de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/release/python

  (7) http://www.tishler.net/jason/software/python/

  (8) http://www.python.org/download/windows/

  (9)
http://www.richarddooling.com/index.php/2006/03/14/python-on-xp-7-minutes-to-hello-world/

  (10) http://diveintopython.org/installing_python/windows.html

  (11) http://diveintopython.org/index.html

  (12)
http://swaroopch.com/text/Byte_of_Python:Installing_Python#For_Windows_users

  (13) http://www.byteofpython.info


File: python-using-3.2.2.info,  Node: Alternative bundles,  Next: Configuring Python,  Prev: Installing Python,  Up: Using Python on Windows

3.2 Alternative bundles
=======================

Besides the standard CPython distribution, there are modified packages
including additional functionality.  The following is a list of popular
versions and their key features:

ActivePython(1)
     Installer with multi-platform compatibility, documentation, PyWin32

Enthought Python Distribution(2)
     Popular modules (such as PyWin32) with their respective
     documentation, tool suite for building extensible Python
     applications

  Notice that these packages are likely to install _older_ versions of
Python.

  ---------- Footnotes ----------

  (1) http://www.activestate.com/Products/activepython/

  (2) http://www.enthought.com/products/epd.php


File: python-using-3.2.2.info,  Node: Configuring Python,  Next: Additional modules,  Prev: Alternative bundles,  Up: Using Python on Windows

3.3 Configuring Python
======================

In order to run Python flawlessly, you might have to change certain
environment settings in Windows.

* Menu:

* Excursus; Setting environment variables: Excursus Setting environment variables.
* Finding the Python executable::
* Finding modules::
* Executing scripts::


File: python-using-3.2.2.info,  Node: Excursus Setting environment variables,  Next: Finding the Python executable,  Up: Configuring Python

3.3.1 Excursus: Setting environment variables
---------------------------------------------

Windows has a built-in dialog for changing environment variables
(following guide applies to XP classical view): Right-click the icon
for your machine (usually located on your Desktop and called "My
Computer") and choose _Properties_ there.  Then, open the _Advanced_ tab
and click the _Environment Variables_ button.

  In short, your path is:

     _My Computer ‣ Properties ‣ Advanced ‣ Environment Variables_

  In this dialog, you can add or modify User and System variables. To
change System variables, you need non-restricted access to your machine
(i.e. Administrator rights).

  Another way of adding variables to your environment is using the *set*
command:

    set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib

To make this setting permanent, you could add the corresponding command
line to your `autoexec.bat'. *msconfig* is a graphical interface to this
file.

  Viewing environment variables can also be done more straight-forward:
The command prompt will expand strings wrapped into percent signs
automatically:

    echo %PATH%

Consult *set /?* for details on this behaviour.

See also
........

<http://support.microsoft.com/kb/100843>
     Environment variables in Windows NT

<http://support.microsoft.com/kb/310519>
     How To Manage Environment Variables in Windows XP

<http://www.chem.gla.ac.uk/~louis/software/faq/q1.html>
     Setting Environment variables, Louis J. Farrugia


File: python-using-3.2.2.info,  Node: Finding the Python executable,  Next: Finding modules,  Prev: Excursus Setting environment variables,  Up: Configuring Python

3.3.2 Finding the Python executable
-----------------------------------

Besides using the automatically created start menu entry for the Python
interpreter, you might want to start Python in the DOS prompt.  To make
this work, you need to set your `%PATH%' environment variable to
include the directory of your Python distribution, delimited by a
semicolon from other entries.  An example variable could look like this
(assuming the first two entries are Windows' default):

    C:\WINDOWS\system32;C:\WINDOWS;C:\Python25

Typing *python* on your command prompt will now fire up the Python
interpreter.  Thus, you can also execute your scripts with command line
options, see *note Command line: 7. documentation.


File: python-using-3.2.2.info,  Node: Finding modules,  Next: Executing scripts,  Prev: Finding the Python executable,  Up: Configuring Python

3.3.3 Finding modules
---------------------

Python usually stores its library (and thereby your site-packages
folder) in the installation directory.  So, if you had installed Python
to `C:\Python\', the default library would reside in `C:\Python\Lib\'
and third-party modules should be stored in
`C:\Python\Lib\site-packages\'.

  This is how `sys.path' is populated on Windows:

   * An empty entry is added at the start, which corresponds to the
     current directory.

   * If the environment variable *note PYTHONPATH: 19. exists, as
     described in *note Environment variables: 2d, its entries are
     added next.  Note that on Windows, paths in this variable must be
     separated by semicolons, to distinguish them from the colon used
     in drive identifiers (`C:\' etc.).

   * Additional "application paths" can be added in the registry as
     subkeys of `\SOFTWARE\Python\PythonCore\_version_\PythonPath'
     under both the `HKEY_CURRENT_USER' and `HKEY_LOCAL_MACHINE' hives.
     Subkeys which have semicolon-delimited path strings as their
     default value will cause each path to be added to `sys.path'.
     (Note that all known installers only use HKLM, so HKCU is
     typically empty.)

   * If the environment variable *note PYTHONHOME: 1a. is set, it is
     assumed as "Python Home".  Otherwise, the path of the main Python
     executable is used to locate a "landmark file" (`Lib\os.py') to
     deduce the "Python Home".  If a Python home is found, the relevant
     sub-directories added to `sys.path' (`Lib', `plat-win', etc) are
     based on that folder.  Otherwise, the core Python path is
     constructed from the PythonPath stored in the registry.

   * If the Python Home cannot be located, no *note PYTHONPATH: 19. is
     specified in the environment, and no registry entries can be
     found, a default path with relative entries is used (e.g.
     `.\Lib;.\plat-win', etc).

  The end result of all this is:

   * When running `python.exe', or any other .exe in the main Python
     directory (either an installed version, or directly from the
     PCbuild directory), the core path is deduced, and the core paths
     in the registry are ignored.  Other "application paths" in the
     registry are always read.

   * When Python is hosted in another .exe (different directory,
     embedded via COM, etc), the "Python Home" will not be deduced, so
     the core path from the registry is used.  Other "application
     paths" in the registry are always read.

   * If Python can't find its home and there is no registry (eg, frozen
     .exe, some very strange installation setup) you get a path with
     some default, but relative, paths.


File: python-using-3.2.2.info,  Node: Executing scripts,  Prev: Finding modules,  Up: Configuring Python

3.3.4 Executing scripts
-----------------------

Python scripts (files with the extension `.py') will be executed by
*python.exe* by default.  This executable opens a terminal, which stays
open even if the program uses a GUI.  If you do not want this to
happen, use the extension `.pyw' which will cause the script to be
executed by *pythonw.exe* by default (both executables are located in
the top-level of your Python installation directory).  This suppresses
the terminal window on startup.

  You can also make all `.py' scripts execute with *pythonw.exe*,
setting this through the usual facilities, for example (might require
administrative rights):

  1. Launch a command prompt.

  2. Associate the correct file group with `.py' scripts:

         assoc .py=Python.File


  3. Redirect all Python files to the new executable:

         ftype Python.File=C:\Path\to\pythonw.exe "%1" %*




File: python-using-3.2.2.info,  Node: Additional modules,  Next: Compiling Python on Windows,  Prev: Configuring Python,  Up: Using Python on Windows

3.4 Additional modules
======================

Even though Python aims to be portable among all platforms, there are
features that are unique to Windows.  A couple of modules, both in the
standard library and external, and snippets exist to use these features.

  The Windows-specific standard modules are documented in
_mswin-specific-services_.

* Menu:

* PyWin32::
* Py2exe::
* WConio::


File: python-using-3.2.2.info,  Node: PyWin32,  Next: Py2exe,  Up: Additional modules

3.4.1 PyWin32
-------------

The PyWin32(1) module by Mark Hammond is a collection of modules for
advanced Windows-specific support.  This includes utilities for:

   * Component Object Model(2) (COM)

   * Win32 API calls

   * Registry

   * Event log

   * Microsoft Foundation Classes(3) (MFC) user interfaces

  PythonWin(4) is a sample MFC application shipped with PyWin32.  It is
an embeddable IDE with a built-in debugger.

See also
........

Win32 How Do I...?(5)
     by Tim Golden

Python and COM(6)
     by David and Paul Boddie

  ---------- Footnotes ----------

  (1) http://python.net/crew/mhammond/win32/

  (2) http://www.microsoft.com/com/

  (3) http://msdn.microsoft.com/en-us/library/fe1cf721%28VS.80%29.aspx

  (4)
http://web.archive.org/web/20060524042422/http://www.python.org/windows/pythonwin/

  (5) http://timgolden.me.uk/python/win32_how_do_i.html

  (6) http://www.boddie.org.uk/python/COM.html


File: python-using-3.2.2.info,  Node: Py2exe,  Next: WConio,  Prev: PyWin32,  Up: Additional modules

3.4.2 Py2exe
------------

Py2exe(1) is a `distutils' extension (see _extending-distutils_) which
wraps Python scripts into executable Windows programs (`_*_.exe'
files).  When you have done this, you can distribute your application
without requiring your users to install Python.

  ---------- Footnotes ----------

  (1) http://www.py2exe.org/


File: python-using-3.2.2.info,  Node: WConio,  Prev: Py2exe,  Up: Additional modules

3.4.3 WConio
------------

Since Python's advanced terminal handling layer, `curses', is
restricted to Unix-like systems, there is a library exclusive to
Windows as well: Windows Console I/O for Python.

  WConio(1) is a wrapper for Turbo-C's `CONIO.H', used to create text
user interfaces.

  ---------- Footnotes ----------

  (1) http://newcenturycomputers.net/projects/wconio.html


File: python-using-3.2.2.info,  Node: Compiling Python on Windows,  Next: Other resources,  Prev: Additional modules,  Up: Using Python on Windows

3.5 Compiling Python on Windows
===============================

If you want to compile CPython yourself, first thing you should do is
get the source(1). You can download either the latest release's source
or just grab a fresh checkout(2).

  For Microsoft Visual C++, which is the compiler with which official
Python releases are built, the source tree contains solutions/project
files.  View the `readme.txt' in their respective directories:

Directory                MSVC version       Visual Studio version
------------------------------------------------------------------------ 
`PC/VC6/'                6.0                97
`PC/VS7.1/'              7.1                2003
`PC/VS8.0/'              8.0                2005
`PCbuild/'               9.0                2008

  Note that not all of these build directories are fully supported.
Read the release notes to see which compiler version the official
releases for your version are built with.

  Check `PC/readme.txt' for general information on the build process.

  For extension modules, consult _building-on-windows_.

See also
........

Python + Windows + distutils + SWIG + gcc MinGW(3)
     or "Creating Python extensions in C/C++ with SWIG and compiling
     them with MinGW gcc under Windows" or "Installing Python extension
     with distutils and without Microsoft Visual C++" by Sébastien
     Sauvage, 2003

MingW - Python extensions(4)
     by Trent Apted et al, 2007

  ---------- Footnotes ----------

  (1) http://python.org/download/source/

  (2)
http://www.python.org/dev/faq/#how-do-i-get-a-checkout-of-the-repository-read-only-and-read-write

  (3) http://sebsauvage.net/python/mingw.html

  (4) http://oldwiki.mingw.org/index.php/Python%20extensions


File: python-using-3.2.2.info,  Node: Other resources,  Prev: Compiling Python on Windows,  Up: Using Python on Windows

3.6 Other resources
===================

See also
........

Python Programming On Win32(1)
     "Help for Windows Programmers" by Mark Hammond and Andy Robinson,
     O'Reilly Media, 2000, ISBN 1-56592-621-8

A Python for Windows Tutorial(2)
     by Amanda Birmingham, 2004

  ---------- Footnotes ----------

  (1) http://www.oreilly.com/catalog/pythonwin32/

  (2) http://www.imladris.com/Scripts/PythonForWindows.html


File: python-using-3.2.2.info,  Node: Using Python on a Macintosh,  Next: Index,  Prev: Using Python on Windows,  Up: Top

4 Using Python on a Macintosh
*****************************

     Author: Bob Savage <<bobsavage@mac.com>>

  Python on a Macintosh running Mac OS X is in principle very similar
to Python on any other Unix platform, but there are a number of
additional features such as the IDE and the Package Manager that are
worth pointing out.

* Menu:

* Getting and Installing MacPython::
* The IDE::
* Installing Additional Python Packages::
* GUI Programming on the Mac::
* Distributing Python Applications on the Mac::
* Application Scripting::
* Other Resources::

Getting and Installing MacPython

* How to run a Python script::
* Running scripts with a GUI::
* Configuration::


File: python-using-3.2.2.info,  Node: Getting and Installing MacPython,  Next: The IDE,  Up: Using Python on a Macintosh

4.1 Getting and Installing MacPython
====================================

Mac OS X 10.5 comes with Python 2.5.1 pre-installed by Apple.  If you
wish, you are invited to install the most recent version of Python from
the Python website (<http://www.python.org>).  A current "universal
binary" build of Python, which runs natively on the Mac's new Intel and
legacy PPC CPU's, is available there.

  What you get after installing is a number of things:

   * A `MacPython 2.5' folder in your `Applications' folder. In here
     you find IDLE, the development environment that is a standard part
     of official Python distributions; PythonLauncher, which handles
     double-clicking Python scripts from the Finder; and the "Build
     Applet" tool, which allows you to package Python scripts as
     standalone applications on your system.

   * A framework `/Library/Frameworks/Python.framework', which includes
     the Python executable and libraries. The installer adds this
     location to your shell path. To uninstall MacPython, you can
     simply remove these three things. A symlink to the Python
     executable is placed in /usr/local/bin/.

  The Apple-provided build of Python is installed in
`/System/Library/Frameworks/Python.framework' and `/usr/bin/python',
respectively. You should never modify or delete these, as they are
Apple-controlled and are used by Apple- or third-party software.
Remember that if you choose to install a newer Python version from
python.org, you will have two different but functional Python
installations on your computer, so it will be important that your paths
and usages are consistent with what you want to do.

  IDLE includes a help menu that allows you to access Python
documentation. If you are completely new to Python you should start
reading the tutorial introduction in that document.

  If you are familiar with Python on other Unix platforms you should
read the section on running Python scripts from the Unix shell.

* Menu:

* How to run a Python script::
* Running scripts with a GUI::
* Configuration::


File: python-using-3.2.2.info,  Node: How to run a Python script,  Next: Running scripts with a GUI,  Up: Getting and Installing MacPython

4.1.1 How to run a Python script
--------------------------------

Your best way to get started with Python on Mac OS X is through the IDLE
integrated development environment, see section *note The IDE: 5a. and
use the Help menu when the IDE is running.

  If you want to run Python scripts from the Terminal window command
line or from the Finder you first need an editor to create your script.
Mac OS X comes with a number of standard Unix command line editors,
*vim* and *emacs* among them. If you want a more Mac-like editor,
*BBEdit* or *TextWrangler* from Bare Bones Software (see
<http://www.barebones.com/products/bbedit/index.shtml>) are good
choices, as is *TextMate* (see <http://macromates.com/>). Other editors
include *Gvim* (<http://macvim.org>) and *Aquamacs*
(<http://aquamacs.org/>).

  To run your script from the Terminal window you must make sure that
`/usr/local/bin' is in your shell search path.

  To run your script from the Finder you have two options:

   * Drag it to *PythonLauncher*

   * Select *PythonLauncher* as the default application to open your
     script (or any .py script) through the finder Info window and
     double-click it.  *PythonLauncher* has various preferences to
     control how your script is launched. Option-dragging allows you to
     change these for one invocation, or use its Preferences menu to
     change things globally.


File: python-using-3.2.2.info,  Node: Running scripts with a GUI,  Next: Configuration,  Prev: How to run a Python script,  Up: Getting and Installing MacPython

4.1.2 Running scripts with a GUI
--------------------------------

With older versions of Python, there is one Mac OS X quirk that you
need to be aware of: programs that talk to the Aqua window manager (in
other words, anything that has a GUI) need to be run in a special way.
Use *pythonw* instead of *python* to start such scripts.

  With Python 2.5, you can use either *python* or *pythonw*.


File: python-using-3.2.2.info,  Node: Configuration,  Prev: Running scripts with a GUI,  Up: Getting and Installing MacPython

4.1.3 Configuration
-------------------

Python on OS X honors all standard Unix environment variables such as *note
PYTHONPATH: 19, but setting these variables for programs started from
the Finder is non-standard as the Finder does not read your `.profile'
or `.cshrc' at startup. You need to create a file `~
/.MacOSX/environment.plist'. See Apple's Technical Document QA1067 for
details.

  For more information on installation Python packages in MacPython,
see section *note Installing Additional Python Packages: 5e.


File: python-using-3.2.2.info,  Node: The IDE,  Next: Installing Additional Python Packages,  Prev: Getting and Installing MacPython,  Up: Using Python on a Macintosh

4.2 The IDE
===========

MacPython ships with the standard IDLE development environment. A good
introduction to using IDLE can be found at
<http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html>.


File: python-using-3.2.2.info,  Node: Installing Additional Python Packages,  Next: GUI Programming on the Mac,  Prev: The IDE,  Up: Using Python on a Macintosh

4.3 Installing Additional Python Packages
=========================================

There are several methods to install additional Python packages:

   * <http://pythonmac.org/packages/> contains selected compiled
     packages for Python 2.5, 2.4, and 2.3.

   * Packages can be installed via the standard Python distutils mode
     (`python setup.py install').

   * Many packages can also be installed via the *setuptools* extension.


File: python-using-3.2.2.info,  Node: GUI Programming on the Mac,  Next: Distributing Python Applications on the Mac,  Prev: Installing Additional Python Packages,  Up: Using Python on a Macintosh

4.4 GUI Programming on the Mac
==============================

There are several options for building GUI applications on the Mac with
Python.

  _PyObjC_ is a Python binding to Apple's Objective-C/Cocoa framework,
which is the foundation of most modern Mac development. Information on
PyObjC is available from <http://pyobjc.sourceforge.net>.

  The standard Python GUI toolkit is `tkinter', based on the
cross-platform Tk toolkit (<http://www.tcl.tk>). An Aqua-native version
of Tk is bundled with OS X by Apple, and the latest version can be
downloaded and installed from <http://www.activestate.com>; it can also
be built from source.

  _wxPython_ is another popular cross-platform GUI toolkit that runs
natively on Mac OS X. Packages and documentation are available from
<http://www.wxpython.org>.

  _PyQt_ is another popular cross-platform GUI toolkit that runs
natively on Mac OS X. More information can be found at
<http://www.riverbankcomputing.co.uk/software/pyqt/intro>.


File: python-using-3.2.2.info,  Node: Distributing Python Applications on the Mac,  Next: Application Scripting,  Prev: GUI Programming on the Mac,  Up: Using Python on a Macintosh

4.5 Distributing Python Applications on the Mac
===============================================

The "Build Applet" tool that is placed in the MacPython 2.5 folder is
fine for packaging small Python scripts on your own machine to run as a
standard Mac application. This tool, however, is not robust enough to
distribute Python applications to other users.

  The standard tool for deploying standalone Python applications on the
Mac is *py2app*. More information on installing and using py2app can be
found at <http://undefined.org/python/#py2app>.


File: python-using-3.2.2.info,  Node: Application Scripting,  Next: Other Resources,  Prev: Distributing Python Applications on the Mac,  Up: Using Python on a Macintosh

4.6 Application Scripting
=========================

Python can also be used to script other Mac applications via Apple's
Open Scripting Architecture (OSA); see
<http://appscript.sourceforge.net>. Appscript is a high-level,
user-friendly Apple event bridge that allows you to control scriptable
Mac OS X applications using ordinary Python scripts. Appscript makes
Python a serious alternative to Apple's own _AppleScript_ language for
automating your Mac. A related package, _PyOSA_, is an OSA language
component for the Python scripting language, allowing Python code to be
executed by any OSA-enabled application (Script Editor, Mail, iTunes,
etc.). PyOSA makes Python a full peer to AppleScript.


File: python-using-3.2.2.info,  Node: Other Resources,  Prev: Application Scripting,  Up: Using Python on a Macintosh

4.7 Other Resources
===================

The MacPython mailing list is an excellent support resource for Python
users and developers on the Mac:

  <http://www.python.org/community/sigs/current/pythonmac-sig/>

  Another useful resource is the MacPython wiki:

  <http://wiki.python.org/moin/MacPython>


File: python-using-3.2.2.info,  Node: Index,  Prev: Using Python on a Macintosh,  Up: Top

Index
*****

 [index ]
* Menu:

* %PATH%:                                Finding the Python executable.
                                                              (line   8)
* command line option; -B:               Miscellaneous options.
                                                              (line  10)
* command line option; -b:               Miscellaneous options.
                                                              (line   6)
* command line option; -c <command>:     Interface options.   (line  36)
* command line option; -d:               Miscellaneous options.
                                                              (line  15)
* command line option; -E:               Miscellaneous options.
                                                              (line  19)
* command line option; -h:               Generic options.     (line   6)
* command line option; -help:            Generic options.     (line   6)
* command line option; -i:               Miscellaneous options.
                                                              (line  23)
* command line option; -J:               Options you shouldn't use.
                                                              (line   6)
* command line option; -m <module-name>: Interface options.   (line  46)
* command line option; -O:               Miscellaneous options.
                                                              (line  33)
* command line option; -OO:              Miscellaneous options.
                                                              (line  38)
* command line option; -q:               Miscellaneous options.
                                                              (line  41)
* command line option; -s:               Miscellaneous options.
                                                              (line  47)
* command line option; -S:               Miscellaneous options.
                                                              (line  55)
* command line option; -u:               Miscellaneous options.
                                                              (line  59)
* command line option; -v:               Miscellaneous options.
                                                              (line  66)
* command line option; -V:               Generic options.     (line  11)
* command line option; -version:         Generic options.     (line  11)
* command line option; -W arg:           Miscellaneous options.
                                                              (line  73)
* command line option; -x:               Miscellaneous options.
                                                              (line 145)
* command line option; -X:               Miscellaneous options.
                                                              (line 151)
* environment variable; %PATH%:          Finding the Python executable.
                                                              (line   8)
* environment variable; exec_prefix:     Python-related paths and files.
                                                              (line   7)
* environment variable; PATH <1>:        Environment variables.
                                                              (line  22)
* environment variable; PATH:            Miscellaneous.       (line  16)
* environment variable; prefix:          Python-related paths and files.
                                                              (line   7)
* environment variable; PYTHON*:         Miscellaneous options.
                                                              (line  20)
* environment variable; PYTHONCASEOK:    Environment variables.
                                                              (line  81)
* environment variable; PYTHONDEBUG <1>: Miscellaneous options.
                                                              (line  17)
* environment variable; PYTHONDEBUG:     Environment variables.
                                                              (line  60)
* environment variable; PYTHONDONTWRITEBYTECODE <1>: Environment variables.
                                                              (line  85)
* environment variable; PYTHONDONTWRITEBYTECODE: Miscellaneous options.
                                                              (line  12)
* environment variable; PYTHONDUMPREFS:  Debug-mode variables.
                                                              (line  13)
* environment variable; PYTHONEXECUTABLE: Environment variables.
                                                              (line 117)
* environment variable; PYTHONHOME <1>:  Environment variables.
                                                              (line  15)
* environment variable; PYTHONHOME <2>:  Finding modules.     (line  31)
* environment variable; PYTHONHOME <3>:  Miscellaneous options.
                                                              (line  21)
* environment variable; PYTHONHOME:      Environment variables.
                                                              (line  17)
* environment variable; PYTHONINSPECT <1>: Miscellaneous options.
                                                              (line  30)
* environment variable; PYTHONINSPECT:   Environment variables.
                                                              (line  65)
* environment variable; PYTHONIOENCODING: Environment variables.
                                                              (line  89)
* environment variable; PYTHONMALLOCSTATS: Debug-mode variables.
                                                              (line  17)
* environment variable; PYTHONNOUSERSITE: Environment variables.
                                                              (line  98)
* environment variable; PYTHONOPTIMIZE <1>: Miscellaneous options.
                                                              (line  35)
* environment variable; PYTHONOPTIMIZE:  Environment variables.
                                                              (line  55)
* environment variable; PYTHONPATH <1>:  Miscellaneous options.
                                                              (line  20)
* environment variable; PYTHONPATH <2>:  Environment variables.
                                                              (line  20)
* environment variable; PYTHONPATH <3>:  Finding modules.     (line  39)
* environment variable; PYTHONPATH <4>:  Environment variables.
                                                              (line  36)
* environment variable; PYTHONPATH <5>:  Finding modules.     (line  17)
* environment variable; PYTHONPATH:      Configuration.       (line   6)
* environment variable; PYTHONSTARTUP <1>: Environment variables.
                                                              (line  40)
* environment variable; PYTHONSTARTUP:   Miscellaneous options.
                                                              (line  27)
* environment variable; PYTHONTHREADDEBUG: Debug-mode variables.
                                                              (line  10)
* environment variable; PYTHONUNBUFFERED <1>: Miscellaneous options.
                                                              (line  64)
* environment variable; PYTHONUNBUFFERED: Environment variables.
                                                              (line  72)
* environment variable; PYTHONUSERBASE:  Environment variables.
                                                              (line 107)
* environment variable; PYTHONVERBOSE <1>: Miscellaneous options.
                                                              (line  71)
* environment variable; PYTHONVERBOSE:   Environment variables.
                                                              (line  76)
* environment variable; PYTHONWARNINGS <1>: Miscellaneous options.
                                                              (line 143)
* environment variable; PYTHONWARNINGS:  Environment variables.
                                                              (line 122)
* environment variable; PYTHONY2K:       Environment variables.
                                                              (line  49)
* exec_prefix:                           Python-related paths and files.
                                                              (line   7)
* PATH <1>:                              Miscellaneous.       (line  16)
* PATH:                                  Environment variables.
                                                              (line  22)
* prefix:                                Python-related paths and files.
                                                              (line   7)
* Python Enhancement Proposals; PEP 11:  Installing Python.   (line  13)
* Python Enhancement Proposals; PEP 230: Miscellaneous options.
                                                              (line 141)
* Python Enhancement Proposals; PEP 338: Interface options.   (line  85)
* Python Enhancement Proposals; PEP 370 <1>: Environment variables.
                                                              (line 115)
* Python Enhancement Proposals; PEP 370 <2>: Miscellaneous options.
                                                              (line  53)
* Python Enhancement Proposals; PEP 370: Environment variables.
                                                              (line 105)
* PYTHON*:                               Miscellaneous options.
                                                              (line  20)
* PYTHONDEBUG:                           Miscellaneous options.
                                                              (line  17)
* PYTHONDONTWRITEBYTECODE:               Miscellaneous options.
                                                              (line  12)
* PYTHONHOME <1>:                        Environment variables.
                                                              (line  17)
* PYTHONHOME <2>:                        Miscellaneous options.
                                                              (line  21)
* PYTHONHOME <3>:                        Finding modules.     (line  31)
* PYTHONHOME:                            Environment variables.
                                                              (line  32)
* PYTHONINSPECT:                         Miscellaneous options.
                                                              (line  30)
* PYTHONOPTIMIZE:                        Miscellaneous options.
                                                              (line  35)
* PYTHONPATH <1>:                        Environment variables.
                                                              (line  26)
* PYTHONPATH <2>:                        Miscellaneous options.
                                                              (line  20)
* PYTHONPATH <3>:                        Finding modules.     (line  39)
* PYTHONPATH:                            Configuration.       (line   6)
* PYTHONSTARTUP:                         Miscellaneous options.
                                                              (line  27)
* PYTHONUNBUFFERED:                      Miscellaneous options.
                                                              (line  64)
* PYTHONVERBOSE:                         Miscellaneous options.
                                                              (line  71)
* PYTHONWARNINGS:                        Miscellaneous options.
                                                              (line 143)



Tag Table:
Node: Top438
Ref: using/index doc726
Ref: 0726
Node: Command line and environment2412
Ref: using/cmdline using-index2543
Ref: 12543
Ref: using/cmdline command-line-and-environment2543
Ref: 22543
Ref: using/cmdline doc2543
Ref: 32543
Ref: using/cmdline using-on-general2543
Ref: 42543
Ref: using/cmdline python-setup-and-usage2543
Ref: 52543
Node: Command line3047
Ref: using/cmdline command-line3166
Ref: 63166
Ref: using/cmdline using-on-cmdline3166
Ref: 73166
Node: Interface options3551
Ref: using/cmdline interface-options3653
Ref: 83653
Ref: using/cmdline using-on-interface-options3653
Ref: 93653
Ref: using/cmdline cmdoption-c5000
Ref: a5000
Ref: using/cmdline cmdoption-m5447
Ref: b5447
Ref: Interface options-Footnote-18579
Node: Generic options8626
Ref: using/cmdline generic-options8758
Ref: d8758
Ref: using/cmdline cmdoption-h8826
Ref: e8826
Ref: using/cmdline cmdoption--help8849
Ref: f8849
Ref: using/cmdline cmdoption-V8936
Ref: 108936
Ref: using/cmdline cmdoption--version8959
Ref: 118959
Node: Miscellaneous options9085
Ref: using/cmdline miscellaneous-options9225
Ref: 129225
Ref: using/cmdline cmdoption-b9282
Ref: 139282
Ref: using/cmdline cmdoption-B9417
Ref: 149417
Ref: using/cmdline cmdoption-d9593
Ref: 169593
Ref: using/cmdline cmdoption-E9746
Ref: 189746
Ref: using/cmdline cmdoption-i9897
Ref: c9897
Ref: using/cmdline cmdoption-O10339
Ref: 1d10339
Ref: using/cmdline cmdoption-OO10535
Ref: 1f10535
Ref: using/cmdline cmdoption-q10632
Ref: 2010632
Ref: using/cmdline cmdoption-s10767
Ref: 2110767
Ref: using/cmdline cmdoption-S10927
Ref: 2210927
Ref: using/cmdline cmdoption-u11069
Ref: 2311069
Ref: using/cmdline cmdoption-v11329
Ref: 2511329
Ref: using/cmdline cmdoption-W11697
Ref: 2711697
Ref: using/cmdline cmdoption-x14228
Ref: 2914228
Ref: using/cmdline cmdoption-X14460
Ref: 2a14460
Ref: Miscellaneous options-Footnote-114812
Ref: Miscellaneous options-Footnote-214859
Node: Options you shouldn't use14906
Ref: using/cmdline options-you-shouldn-t-use15022
Ref: 2b15022
Ref: using/cmdline cmdoption-J15087
Ref: 2c15087
Ref: Options you shouldn't use-Footnote-115182
Node: Environment variables15207
Ref: using/cmdline using-on-envvars15326
Ref: 2d15326
Ref: using/cmdline environment-variables15326
Ref: 2e15326
Ref: using/cmdline envvar-PYTHONHOME15437
Ref: 1a15437
Ref: using/cmdline envvar-PYTHONPATH16008
Ref: 1916008
Ref: using/cmdline envvar-PYTHONSTARTUP17025
Ref: 1b17025
Ref: using/cmdline envvar-PYTHONY2K17504
Ref: 2f17504
Ref: using/cmdline envvar-PYTHONOPTIMIZE17782
Ref: 1e17782
Ref: using/cmdline envvar-PYTHONDEBUG18017
Ref: 1718017
Ref: using/cmdline envvar-PYTHONINSPECT18249
Ref: 1c18249
Ref: using/cmdline envvar-PYTHONUNBUFFERED18519
Ref: 2418519
Ref: using/cmdline envvar-PYTHONVERBOSE18667
Ref: 2618667
Ref: using/cmdline envvar-PYTHONCASEOK18901
Ref: 3018901
Ref: using/cmdline envvar-PYTHONDONTWRITEBYTECODE19040
Ref: 1519040
Ref: using/cmdline envvar-PYTHONIOENCODING19199
Ref: 3119199
Ref: using/cmdline envvar-PYTHONNOUSERSITE19602
Ref: 3219602
Ref: using/cmdline envvar-PYTHONUSERBASE19810
Ref: 3319810
Ref: using/cmdline envvar-PYTHONEXECUTABLE20118
Ref: 3420118
Ref: using/cmdline envvar-PYTHONWARNINGS20326
Ref: 2820326
Ref: Environment variables-Footnote-120598
Ref: Environment variables-Footnote-220645
Node: Debug-mode variables20692
Ref: using/cmdline debug-mode-variables20782
Ref: 3520782
Ref: using/cmdline envvar-PYTHONTHREADDEBUG20983
Ref: 3620983
Ref: using/cmdline envvar-PYTHONDUMPREFS21081
Ref: 3721081
Ref: using/cmdline envvar-PYTHONMALLOCSTATS21236
Ref: 3821236
Node: Using Python on Unix platforms21405
Ref: using/unix using-on-unix21556
Ref: 3921556
Ref: using/unix using-python-on-unix-platforms21556
Ref: 3a21556
Ref: using/unix doc21556
Ref: 3b21556
Node: Getting and installing the latest version of Python21887
Ref: using/unix getting-and-installing-the-latest-version-of-python22041
Ref: 3c22041
Node: On Linux22223
Ref: using/unix on-linux22362
Ref: 3d22362
Node: On FreeBSD and OpenBSD23216
Ref: using/unix on-freebsd-and-openbsd23378
Ref: 3e23378
Node: On OpenSolaris23813
Ref: using/unix on-opensolaris23958
Ref: 3f23958
Node: Building Python24158
Ref: using/unix building-python24351
Ref: 4024351
Ref: Building Python-Footnote-125073
Ref: Building Python-Footnote-225115
Node: Python-related paths and files25220
Ref: using/unix python-related-paths-and-files25375
Ref: 4125375
Node: Miscellaneous26795
Ref: using/unix miscellaneous26942
Ref: 4226942
Node: Editors27472
Ref: using/unix editors27580
Ref: 4327580
Node: Using Python on Windows28196
Ref: using/windows using-python-on-windows28346
Ref: 4428346
Ref: using/windows using-on-windows28346
Ref: 4528346
Ref: using/windows doc28346
Ref: 4628346
Node: Installing Python28685
Ref: using/windows installing-python28802
Ref: 4728802
Ref: Installing Python-Footnote-130296
Ref: Installing Python-Footnote-230344
Ref: Installing Python-Footnote-330391
Ref: Installing Python-Footnote-430431
Ref: Installing Python-Footnote-530457
Ref: Installing Python-Footnote-630498
Ref: Installing Python-Footnote-730584
Ref: Installing Python-Footnote-830637
Ref: Installing Python-Footnote-930684
Ref: Installing Python-Footnote-1030781
Ref: Installing Python-Footnote-1130846
Ref: Installing Python-Footnote-1230891
Ref: Installing Python-Footnote-1330976
Node: Alternative bundles31013
Ref: using/windows alternative-bundles31157
Ref: 4831157
Ref: Alternative bundles-Footnote-131763
Ref: Alternative bundles-Footnote-231820
Node: Configuring Python31869
Ref: using/windows configuring-python32014
Ref: 4932014
Node: Excursus Setting environment variables32332
Ref: using/windows excursus-setting-environment-variables32475
Ref: 4a32475
Node: Finding the Python executable33975
Ref: using/windows finding-the-python-executable34142
Ref: 4b34142
Node: Finding modules34857
Ref: using/windows finding-modules35003
Ref: 4c35003
Node: Executing scripts37696
Ref: using/windows executing-scripts37804
Ref: 4d37804
Node: Additional modules38699
Ref: using/windows additional-modules38852
Ref: 4e38852
Node: PyWin3239244
Ref: using/windows pywin3239333
Ref: 4f39333
Ref: PyWin32-Footnote-139910
Ref: PyWin32-Footnote-239956
Ref: PyWin32-Footnote-339993
Ref: PyWin32-Footnote-440065
Ref: PyWin32-Footnote-540155
Ref: PyWin32-Footnote-640212
Node: Py2exe40260
Ref: using/windows py2exe40364
Ref: 5040364
Ref: Py2exe-Footnote-140681
Node: WConio40711
Ref: using/windows wconio40799
Ref: 5140799
Ref: WConio-Footnote-141126
Node: Compiling Python on Windows41185
Ref: using/windows compiling-python-on-windows41335
Ref: 5241335
Ref: Compiling Python on Windows-Footnote-142816
Ref: Compiling Python on Windows-Footnote-242858
Ref: Compiling Python on Windows-Footnote-342963
Ref: Compiling Python on Windows-Footnote-443010
Node: Other resources43072
Ref: using/windows other-resources43195
Ref: 5343195
Ref: Other resources-Footnote-143505
Ref: Other resources-Footnote-243556
Node: Using Python on a Macintosh43617
Ref: using/mac using-on-mac43742
Ref: 5443742
Ref: using/mac doc43742
Ref: 5543742
Ref: using/mac using-python-on-a-macintosh43742
Ref: 5643742
Node: Getting and Installing MacPython44415
Ref: using/mac getting-osx44539
Ref: 5744539
Ref: using/mac getting-and-installing-macpython44539
Ref: 5844539
Node: How to run a Python script46608
Ref: using/mac how-to-run-a-python-script46750
Ref: 5946750
Node: Running scripts with a GUI48139
Ref: using/mac osx-gui-scripts48303
Ref: 5b48303
Ref: using/mac running-scripts-with-a-gui48303
Ref: 5c48303
Node: Configuration48700
Ref: using/mac configuration48829
Ref: 5d48829
Node: The IDE49352
Ref: using/mac ide49522
Ref: 5a49522
Ref: using/mac the-ide49522
Ref: 5f49522
Node: Installing Additional Python Packages49729
Ref: using/mac installing-additional-python-packages49893
Ref: 6049893
Ref: using/mac mac-package-manager49893
Ref: 5e49893
Node: GUI Programming on the Mac50333
Ref: using/mac gui-programming-on-the-mac50533
Ref: 6150533
Node: Distributing Python Applications on the Mac51518
Ref: using/mac distributing-python-applications-on-the-mac51702
Ref: 6251702
Node: Application Scripting52252
Ref: using/mac application-scripting52425
Ref: 6352425
Node: Other Resources53125
Ref: using/mac other-resources53246
Ref: 6453246
Node: Index53550

End Tag Table


Local Variables:
coding: utf-8
End:
