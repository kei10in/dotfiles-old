This is python-whatsnew-3.2.2.info, produced by makeinfo version 4.13
from python-whatsnew-3.2.2.texi.

Generated by Sphinx 1.1.2.
INFO-DIR-SECTION Python v3 2 2
START-INFO-DIR-ENTRY
* What's New in Python: (python-whatsnew-3.2.2.info). What's new documents since 2.0
END-INFO-DIR-ENTRY

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation


File: python-whatsnew-3.2.2.info,  Node: Top,  Next: What's New In Python 3 2,  Up: (dir)

What's New in Python
********************

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation

  The "What's New in Python" series of essays takes tours through the
most important changes between major Python versions.  They are a "must
read" for anyone wishing to stay up-to-date after a new release.

* Menu:

* What's New In Python 3.2: What's New In Python 3 2.
* What's New In Python 3.1: What's New In Python 3 1.
* What's New In Python 3.0: What's New In Python 3 0.
* What's New in Python 2.7: What's New in Python 2 7.
* What's New in Python 2.6: What's New in Python 2 6.
* What's New in Python 2.5: What's New in Python 2 5.
* What's New in Python 2.4: What's New in Python 2 4.
* What's New in Python 2.3: What's New in Python 2 3.
* What's New in Python 2.2: What's New in Python 2 2.
* What's New in Python 2.1: What's New in Python 2 1.
* What's New in Python 2.0: What's New in Python 2 0.
* Index::

 --- The Detailed Node Listing ---

What's New In Python 3.2

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI.
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module.
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging.
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module.
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories.
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files.
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1.
* Other Language Changes::
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules.
* Multi-threading::
* Optimizations::
* Unicode::
* Codecs::
* Documentation::
* IDLE::
* Code Repository::
* Build and C API Changes::
* Porting to Python 3.2: Porting to Python 3 2.

New, Improved, and Deprecated Modules

* email::
* elementtree::
* functools::
* itertools::
* collections::
* threading::
* datetime and time::
* math::
* abc::
* io::
* reprlib::
* logging::
* csv::
* contextlib::
* decimal and fractions::
* ftp::
* popen::
* select::
* gzip and zipfile::
* tarfile::
* hashlib::
* ast::
* os::
* shutil::
* sqlite3::
* html::
* socket::
* ssl::
* nntp::
* certificates::
* imaplib::
* http.client: http client.
* unittest::
* random::
* poplib::
* asyncore::
* tempfile::
* inspect::
* pydoc::
* dis::
* dbm::
* ctypes::
* site::
* sysconfig::
* pdb::
* configparser::
* urllib.parse: urllib parse.
* mailbox::
* turtledemo::

What's New In Python 3.1

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator.
* Other Language Changes: Other Language Changes<2>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>.
* Optimizations: Optimizations<2>.
* IDLE: IDLE<2>.
* Build and C API Changes: Build and C API Changes<2>.
* Porting to Python 3.1: Porting to Python 3 1.

What's New In Python 3.0

* Common Stumbling Blocks::
* Overview Of Syntax Changes::
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6.
* Library Changes::
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting.
* Changes To Exceptions::
* Miscellaneous Other Changes::
* Build and C API Changes: Build and C API Changes<3>.
* Performance::
* Porting To Python 3.0: Porting To Python 3 0.

Common Stumbling Blocks

* Print Is A Function::
* Views And Iterators Instead Of Lists::
* Ordering Comparisons::
* Integers::
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit.

Overview Of Syntax Changes

* New Syntax::
* Changed Syntax::
* Removed Syntax::

Miscellaneous Other Changes

* Operators And Special Methods::
* Builtins::

What's New in Python 2.7

* The Future for Python 2.x: The Future for Python 2 x.
* Python 3.1 Features: Python 3 1 Features.
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>.
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines.
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging.
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views.
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object.
* Other Language Changes: Other Language Changes<3>.
* New and Improved Modules::
* Build and C API Changes: Build and C API Changes<4>.
* Other Changes and Fixes::
* Porting to Python 2.7: Porting to Python 2 7.
* Acknowledgements::

Other Language Changes

* Interpreter Changes::
* Optimizations: Optimizations<3>.

New and Improved Modules

* New module; importlib: New module importlib.
* New module; sysconfig: New module sysconfig.
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk.
* Updated module; unittest: Updated module unittest.
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3.

Build and C API Changes

* Capsules::
* Port-Specific Changes; Windows: Port-Specific Changes Windows.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X.
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD.

What's New in Python 2.6

* Python 3.0: Python 3 0.
* Changes to the Development Process::
* PEP 343; The 'with' statement: PEP 343 The 'with' statement.
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module.
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory.
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package.
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting.
* PEP 3105; print As a Function: PEP 3105 print As a Function.
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes.
* PEP 3112; Byte Literals: PEP 3112 Byte Literals.
* PEP 3116; New I/O Library: PEP 3116 New I/O Library.
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol.
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes.
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax.
* PEP 3129; Class Decorators: PEP 3129 Class Decorators.
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers.
* Other Language Changes: Other Language Changes<4>.
* New and Improved Modules: New and Improved Modules<2>.
* Deprecations and Removals::
* Build and C API Changes: Build and C API Changes<5>.
* Porting to Python 2.6: Porting to Python 2 6.
* Acknowledgements: Acknowledgements<2>.

Changes to the Development Process

* New Issue Tracker; Roundup: New Issue Tracker Roundup.
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx.

PEP 343: The 'with' statement

* Writing Context Managers::
* The contextlib module::

PEP 3141: A Type Hierarchy for Numbers

* The fractions Module::

Other Language Changes

* Optimizations: Optimizations<4>.
* Interpreter Changes: Interpreter Changes<2>.

New and Improved Modules

* The ast module::
* The future_builtins module::
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation.
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser.
* ctypes Enhancements::
* Improved SSL Support::

Build and C API Changes

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>.
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX.

What's New in Python 2.5

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions.
* PEP 309; Partial Function Application: PEP 309 Partial Function Application.
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1.
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports.
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts.
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally.
* PEP 342; New Generator Features: PEP 342 New Generator Features.
* PEP 343; The 'with' statement: PEP 343 The 'with' statement<2>.
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes.
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type.
* PEP 357; The '__index__' method: PEP 357 The '__index__' method.
* Other Language Changes: Other Language Changes<5>.
* New, Improved, and Removed Modules: New Improved and Removed Modules.
* Build and C API Changes: Build and C API Changes<6>.
* Porting to Python 2.5: Porting to Python 2 5.
* Acknowledgements: Acknowledgements<3>.

PEP 343: The 'with' statement

* Writing Context Managers: Writing Context Managers<2>.
* The contextlib module: The contextlib module<2>.

Other Language Changes

* Interactive Interpreter Changes::
* Optimizations: Optimizations<5>.

New, Improved, and Removed Modules

* The ctypes package::
* The ElementTree package::
* The hashlib package::
* The sqlite3 package::
* The wsgiref package::

Build and C API Changes

* Port-Specific Changes::

What's New in Python 2.4

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers.
* PEP 289; Generator Expressions: PEP 289 Generator Expressions.
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions.
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods.
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration.
* PEP 324; New subprocess Module: PEP 324 New subprocess Module.
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type.
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports.
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions.
* Other Language Changes: Other Language Changes<6>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<3>.
* Build and C API Changes: Build and C API Changes<7>.
* Porting to Python 2.4: Porting to Python 2 4.
* Acknowledgements: Acknowledgements<4>.

PEP 327: Decimal Data Type

* Why is Decimal needed?::
* The Decimal type::
* The Context type::

Other Language Changes

* Optimizations: Optimizations<6>.

New, Improved, and Deprecated Modules

* cookielib::
* doctest::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<2>.

What's New in Python 2.3

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype.
* PEP 255; Simple Generators: PEP 255 Simple Generators.
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings.
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives.
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT.
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support.
* PEP 279; enumerate(): PEP 279 enumerate.
* PEP 282; The logging Package: PEP 282 The logging Package.
* PEP 285; A Boolean Type: PEP 285 A Boolean Type.
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks.
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils.
* PEP 302; New Import Hooks: PEP 302 New Import Hooks.
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files.
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements.
* Extended Slices::
* Other Language Changes: Other Language Changes<7>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<4>.
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator.
* Build and C API Changes: Build and C API Changes<8>.
* Other Changes and Fixes: Other Changes and Fixes<2>.
* Porting to Python 2.3: Porting to Python 2 3.
* Acknowledgements: Acknowledgements<5>.

Other Language Changes

* String Changes::
* Optimizations: Optimizations<7>.

New, Improved, and Deprecated Modules

* Date/Time Type::
* The optparse Module::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<3>.

What's New in Python 2.2

* Introduction::
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes.
* PEP 234; Iterators: PEP 234 Iterators.
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>.
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator.
* Unicode Changes::
* PEP 227; Nested Scopes: PEP 227 Nested Scopes.
* New and Improved Modules: New and Improved Modules<3>.
* Interpreter Changes and Fixes::
* Other Changes and Fixes: Other Changes and Fixes<3>.
* Acknowledgements: Acknowledgements<6>.

PEPs 252 and 253: Type and Class Changes

* Old and New Classes::
* Descriptors::
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule.
* Attribute Access::
* Related Links::

What's New in Python 2.1

* Introduction: Introduction<2>.
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>.
* PEP 236; __future__ Directives: PEP 236 __future__ Directives.
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons.
* PEP 230; Warning Framework: PEP 230 Warning Framework.
* PEP 229; New Build System: PEP 229 New Build System.
* PEP 205; Weak References: PEP 205 Weak References.
* PEP 232; Function Attributes: PEP 232 Function Attributes.
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms.
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook.
* PEP 208; New Coercion Model: PEP 208 New Coercion Model.
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages.
* New and Improved Modules: New and Improved Modules<4>.
* Other Changes and Fixes: Other Changes and Fixes<4>.
* Acknowledgements: Acknowledgements<7>.

What's New in Python 2.0

* Introduction: Introduction<3>.
* What About Python 1.6?: What About Python 1 6?.
* New Development Process::
* Unicode: Unicode<2>.
* List Comprehensions::
* Augmented Assignment::
* String Methods::
* Garbage Collection of Cycles::
* Other Core Changes::
* Porting to 2.0: Porting to 2 0.
* Extending/Embedding Changes::
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install.
* XML Modules::
* Module changes::
* New modules::
* IDLE Improvements::
* Deleted and Deprecated Modules::
* Acknowledgements: Acknowledgements<8>.

Other Core Changes

* Minor Language Changes::
* Changes to Built-in Functions::

XML Modules

* SAX2 Support::
* DOM Support::
* Relationship to PyXML::


File: python-whatsnew-3.2.2.info,  Node: What's New In Python 3 2,  Next: What's New In Python 3 1,  Prev: Top,  Up: Top

1 What's New In Python 3.2
**************************

     Author: Raymond Hettinger

     Release: 3.2.2

     Date: February 10, 2012

  This article explains the new features in Python 3.2 as compared to
3.1.  It focuses on a few highlights and gives a few examples.  For
full details, see the Misc/NEWS(1) file.

See also
--------

PEP 392(2) - Python 3.2 Release Schedule

* Menu:

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI.
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module.
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging.
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module.
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories.
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files.
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1.
* Other Language Changes::
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules.
* Multi-threading::
* Optimizations::
* Unicode::
* Codecs::
* Documentation::
* IDLE::
* Code Repository::
* Build and C API Changes::
* Porting to Python 3.2: Porting to Python 3 2.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/3.2/Misc/NEWS

  (2) http://www.python.org/dev/peps/pep-0392


File: python-whatsnew-3.2.2.info,  Node: PEP 384 Defining a Stable ABI,  Next: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.1 PEP 384: Defining a Stable ABI
==================================

In the past, extension modules built for one Python version were often
not usable with other Python versions. Particularly on Windows, every
feature release of Python required rebuilding all extension modules that
one wanted to use. This requirement was the result of the free access to
Python interpreter internals that extension modules could use.

  With Python 3.2, an alternative approach becomes available: extension
modules which restrict themselves to a limited API (by defining
Py_LIMITED_API) cannot use many of the internals, but are constrained
to a set of API functions that are promised to be stable for several
releases. As a consequence, extension modules built for 3.2 in that
mode will also work with 3.3, 3.4, and so on. Extension modules that
make use of details of memory structures can still be built, but will
need to be recompiled for every feature release.

See also
........

PEP 384(1) - Defining a Stable ABI
     PEP written by Martin von Löwis.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0384


File: python-whatsnew-3.2.2.info,  Node: PEP 389 Argparse Command Line Parsing Module,  Next: PEP 391 Dictionary Based Configuration for Logging,  Prev: PEP 384 Defining a Stable ABI,  Up: What's New In Python 3 2

1.2 PEP 389: Argparse Command Line Parsing Module
=================================================

A new module for command line parsing, `argparse', was introduced to
overcome the limitations of `optparse' which did not provide support for
positional arguments (not just options), subcommands, required options
and other common patterns of specifying and validating options.

  This module has already had widespread success in the community as a
third-party module.  Being more fully featured than its predecessor, the
`argparse' module is now the preferred module for command-line
processing.  The older module is still being kept available because of
the substantial amount of legacy code that depends on it.

  Here's an annotated example parser showing features like limiting
results to a set of choices, specifying a _metavar_ in the help screen,
validating that one or more positional arguments is present, and making
a required option:

    import argparse
    parser = argparse.ArgumentParser(
                description = 'Manage servers',         # main description for help
                epilog = 'Tested on Solaris and Linux') # displayed after help
    parser.add_argument('action',                       # argument name
                choices = ['deploy', 'start', 'stop'],  # three allowed values
                help = 'action on each target')         # help msg
    parser.add_argument('targets',
                metavar = 'HOSTNAME',                   # var name used in help msg
                nargs = '+',                            # require one or more targets
                help = 'url for target machines')       # help msg explanation
    parser.add_argument('-u', '--user',                 # -u or --user option
                required = True,                        # make it a required argument
                help = 'login as user')

Example of calling the parser on a command string:

    >>> cmd  = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'
    >>> result = parser.parse_args(cmd.split())
    >>> result.action
    'deploy'
    >>> result.targets
    ['sneezy.example.com', 'sleepy.example.com']
    >>> result.user
    'skycaptain'

Example of the parser's automatically generated help:

    >>> parser.parse_args('-h'.split())

    usage: manage_cloud.py [-h] -u USER
                           {deploy,start,stop} HOSTNAME [HOSTNAME ...]

    Manage servers

    positional arguments:
      {deploy,start,stop}   action on each target
      HOSTNAME              url for target machines

    optional arguments:
      -h, --help            show this help message and exit
      -u USER, --user USER  login as user

    Tested on Solaris and Linux

An especially nice `argparse' feature is the ability to define
subparsers, each with their own argument patterns and help displays:

    import argparse
    parser = argparse.ArgumentParser(prog='HELM')
    subparsers = parser.add_subparsers()

    parser_l = subparsers.add_parser('launch', help='Launch Control')   # first subgroup
    parser_l.add_argument('-m', '--missiles', action='store_true')
    parser_l.add_argument('-t', '--torpedos', action='store_true')

    parser_m = subparsers.add_parser('move', help='Move Vessel',        # second subgroup
                                     aliases=('steer', 'turn'))         # equivalent names
    parser_m.add_argument('-c', '--course', type=int, required=True)
    parser_m.add_argument('-s', '--speed', type=int, default=0)

    $ ./helm.py --help                         # top level help (launch and move)
    $ ./helm.py launch --help                  # help for launch options
    $ ./helm.py launch --missiles              # set missiles=True and torpedos=False
    $ ./helm.py steer --course 180 --speed 5   # set movement parameters


See also
........

PEP 389(1) - New Command Line Parsing Module
     PEP written by Steven Bethard.

  _upgrading-optparse-code_ for details on the differences from
`optparse'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0389


File: python-whatsnew-3.2.2.info,  Node: PEP 391 Dictionary Based Configuration for Logging,  Next: PEP 3148 The concurrent futures module,  Prev: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.3 PEP 391:  Dictionary Based Configuration for Logging
========================================================

The `logging' module provided two kinds of configuration, one style with
function calls for each option or another style driven by an external
file saved in a `ConfigParser' format.  Those options did not provide
the flexibility to create configurations from JSON or YAML files, nor
did they support incremental configuration, which is needed for
specifying logger options from a command line.

  To support a more flexible style, the module now offers
`logging.config.dictConfig()' for specifying logging configuration with
plain Python dictionaries.  The configuration options include
formatters, handlers, filters, and loggers.  Here's a working example
of a configuration dictionary:

    {"version": 1,
     "formatters": {"brief": {"format": "%(levelname)-8s: %(name)-15s: %(message)s"},
                    "full": {"format": "%(asctime)s %(name)-15s %(levelname)-8s %(message)s"}
                    },
     "handlers": {"console": {
                       "class": "logging.StreamHandler",
                       "formatter": "brief",
                       "level": "INFO",
                       "stream": "ext://sys.stdout"},
                  "console_priority": {
                       "class": "logging.StreamHandler",
                       "formatter": "full",
                       "level": "ERROR",
                       "stream": "ext://sys.stderr"}
                  },
     "root": {"level": "DEBUG", "handlers": ["console", "console_priority"]}}

If that dictionary is stored in a file called `conf.json', it can be
loaded and called with code like this:

    >>> import json, logging.config
    >>> with open('conf.json') as f:
            conf = json.load(f)
    >>> logging.config.dictConfig(conf)
    >>> logging.info("Transaction completed normally")
    INFO    : root           : Transaction completed normally
    >>> logging.critical("Abnormal termination")
    2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination


See also
........

PEP 391(1) - Dictionary Based Configuration for Logging
     PEP written by Vinay Sajip.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0391


File: python-whatsnew-3.2.2.info,  Node: PEP 3148 The concurrent futures module,  Next: PEP 3147 PYC Repository Directories,  Prev: PEP 391 Dictionary Based Configuration for Logging,  Up: What's New In Python 3 2

1.4 PEP 3148:  The `concurrent.futures' module
==============================================

Code for creating and managing concurrency is being collected in a new
top-level namespace, _concurrent_.  Its first member is a _futures_
package which provides a uniform high-level interface for managing
threads and processes.

  The design for `concurrent.futures' was inspired by
_java.util.concurrent.package_.  In that model, a running call and its
result are represented by a `Future' object that abstracts features
common to threads, processes, and remote procedure calls.  That object
supports status checks (running or done), timeouts, cancellations,
adding callbacks, and access to results or exceptions.

  The primary offering of the new module is a pair of executor classes
for launching and managing calls.  The goal of the executors is to make
it easier to use existing tools for making parallel calls. They save
the effort needed to setup a pool of resources, launch the calls,
create a results queue, add time-out handling, and limit the total
number of threads, processes, or remote procedure calls.

  Ideally, each application should share a single executor across
multiple components so that process and thread limits can be centrally
managed.  This solves the design challenge that arises when each
component has its own competing strategy for resource management.

  Both classes share a common interface with three methods: `submit()'
for scheduling a callable and returning a `Future' object; `map()' for
scheduling many asynchronous calls at a time, and `shutdown()' for
freeing resources.  The class is a _context manager_ and can be used in
a `with' statement to assure that resources are automatically released
when currently pending futures are done executing.

  A simple of example of `ThreadPoolExecutor' is a launch of four
parallel threads for copying files:

    import concurrent.futures, shutil
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:
        e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
        e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
        e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
        e.submit(shutil.copy, 'src4.txt', 'dest4.txt')


See also
........

PEP 3148(1) - Futures - Execute Computations Asynchronously
     PEP written by Brian Quinlan.

  _Code for Threaded Parallel URL reads_, an example using threads to
fetch multiple web pages in parallel.

  _Code for computing prime numbers in parallel_, an example
demonstrating `ProcessPoolExecutor'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3148


File: python-whatsnew-3.2.2.info,  Node: PEP 3147 PYC Repository Directories,  Next: PEP 3149 ABI Version Tagged so Files,  Prev: PEP 3148 The concurrent futures module,  Up: What's New In Python 3 2

1.5 PEP 3147:  PYC Repository Directories
=========================================

Python's scheme for caching bytecode in _.pyc_ files did not work well
in environments with multiple Python interpreters.  If one interpreter
encountered a cached file created by another interpreter, it would
recompile the source and overwrite the cached file, thus losing the
benefits of caching.

  The issue of "pyc fights" has become more pronounced as it has become
commonplace for Linux distributions to ship with multiple versions of
Python.  These conflicts also arise with CPython alternatives such as
Unladen Swallow.

  To solve this problem, Python's import machinery has been extended to
use distinct filenames for each interpreter.  Instead of Python 3.2 and
Python 3.3 and Unladen Swallow each competing for a file called
"mymodule.pyc", they will now look for "mymodule.cpython-32.pyc",
"mymodule.cpython-33.pyc", and "mymodule.unladen10.pyc".  And to
prevent all of these new files from cluttering source directories, the
_pyc_ files are now collected in a "__pycache__" directory stored under
the package directory.

  Aside from the filenames and target directories, the new scheme has a
few aspects that are visible to the programmer:

   * Imported modules now have a `__cached__' attribute which stores
     the name of the actual file that was imported:

         >>> import collections
         >>> collections.__cached__
         'c:/py32/lib/__pycache__/collections.cpython-32.pyc'


   * The tag that is unique to each interpreter is accessible from the
     `imp' module:

         >>> import imp
         >>> imp.get_tag()
         'cpython-32'


   * Scripts that try to deduce source filename from the imported file
     now need to be smarter.  It is no longer sufficient to simply
     strip the "c" from a ".pyc" filename.  Instead, use the new
     functions in the `imp' module:

         >>> imp.source_from_cache('c:/py32/lib/__pycache__/collections.cpython-32.pyc')
         'c:/py32/lib/collections.py'
         >>> imp.cache_from_source('c:/py32/lib/collections.py')
         'c:/py32/lib/__pycache__/collections.cpython-32.pyc'


   * The `py_compile' and `compileall' modules have been updated to
     reflect the new naming convention and target directory.  The
     command-line invocation of _compileall_ has new options: `-i' for
     specifying a list of files and directories to compile and `-b'
     which causes bytecode files to be written to their legacy location
     rather than ___pycache___.

   * The `importlib.abc' module has been updated with new _abstract base
     classes_ for loading bytecode files.  The obsolete ABCs,
     `PyLoader' and `PyPycLoader', have been deprecated (instructions
     on how to stay Python 3.1 compatible are included with the
     documentation).

See also
........

PEP 3147(1) - PYC Repository Directories
     PEP written by Barry Warsaw.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3147


File: python-whatsnew-3.2.2.info,  Node: PEP 3149 ABI Version Tagged so Files,  Next: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Prev: PEP 3147 PYC Repository Directories,  Up: What's New In Python 3 2

1.6 PEP 3149: ABI Version Tagged .so Files
==========================================

The PYC repository directory allows multiple bytecode cache files to be
co-located.  This PEP implements a similar mechanism for shared object
files by giving them a common directory and distinct names for each
version.

  The common directory is "pyshared" and the file names are made
distinct by identifying the Python implementation (such as CPython,
PyPy, Jython, etc.), the major and minor version numbers, and optional
build flags (such as "d" for debug, "m" for pymalloc, "u" for
wide-unicode).  For an arbitrary package "foo", you may see these files
when the distribution package is installed:

    /usr/share/pyshared/foo.cpython-32m.so
    /usr/share/pyshared/foo.cpython-33md.so

In Python itself, the tags are accessible from functions in the
`sysconfig' module:

    >>> import sysconfig
    >>> sysconfig.get_config_var('SOABI')    # find the version tag
    'cpython-32mu'
    >>> sysconfig.get_config_var('SO')       # find the full filename extension
    '.cpython-32mu.so'


See also
........

PEP 3149(1) - ABI Version Tagged .so Files
     PEP written by Barry Warsaw.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3149


File: python-whatsnew-3.2.2.info,  Node: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Next: Other Language Changes,  Prev: PEP 3149 ABI Version Tagged so Files,  Up: What's New In Python 3 2

1.7 PEP 3333: Python Web Server Gateway Interface v1.0.1
========================================================

This informational PEP clarifies how bytes/text issues are to be
handled by the WSGI protocol.  The challenge is that string handling in
Python 3 is most conveniently handled with the `str' type even though
the HTTP protocol is itself bytes oriented.

  The PEP differentiates so-called _native strings_ that are used for
request/response headers and metadata versus _byte strings_ which are
used for the bodies of requests and responses.

  The _native strings_ are always of type `str' but are restricted to
code points between _U+0000_ through _U+00FF_ which are translatable to
bytes using _Latin-1_ encoding.  These strings are used for the keys
and values in the environment dictionary and for response headers and
statuses in the `start_response()' function.  They must follow RFC
2616(1) with respect to encoding. That is, they must either be
_ISO-8859-1_ characters or use RFC 2047(2) MIME encoding.

  For developers porting WSGI applications from Python 2, here are the
salient points:

   * If the app already used strings for headers in Python 2, no change
     is needed.

   * If instead, the app encoded output headers or decoded input
     headers, then the headers will need to be re-encoded to Latin-1.
     For example, an output header encoded in utf-8 was using
     `h.encode('utf-8')' now needs to convert from bytes to native
     strings using `h.encode('utf-8').decode('latin-1')'.

   * Values yielded by an application or sent using the `write()' method
     must be byte strings.  The `start_response()' function and environ
     must use native strings.  The two cannot be mixed.

  For server implementers writing CGI-to-WSGI pathways or other
CGI-style protocols, the users must to be able access the environment
using native strings even though the underlying platform may have a
different convention.  To bridge this gap, the `wsgiref' module has a
new function, `wsgiref.handlers.read_environ()' for transcoding CGI
variables from `os.environ' into native strings and returning a new
dictionary.

See also
........

PEP 3333(3) - Python Web Server Gateway Interface v1.0.1
     PEP written by Phillip Eby.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616.html

  (2) http://tools.ietf.org/html/rfc2047.html

  (3) http://www.python.org/dev/peps/pep-3333


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes,  Next: New Improved and Deprecated Modules,  Prev: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Up: What's New In Python 3 2

1.8 Other Language Changes
==========================

Some smaller changes made to the core Python language are:

   * String formatting for `format()' and `str.format()' gained new
     capabilities for the format character *#*.  Previously, for
     integers in binary, octal, or hexadecimal, it caused the output to
     be prefixed with '0b', '0o', or '0x' respectively.  Now it can
     also handle floats, complex, and Decimal, causing the output to
     always have a decimal point even when no digits follow it.

         >>> format(20, '#o')
         '0o24'
         >>> format(12.34, '#5.0f')
         '  12.'

     (Suggested by Mark Dickinson and implemented by Eric Smith in
     issue 7094(1).)

   * There is also a new `str.format_map()' method that extends the
     capabilities of the existing `str.format()' method by accepting
     arbitrary _mapping_ objects.  This new method makes it possible to
     use string formatting with any of Python's many dictionary-like
     objects such as `defaultdict', `Shelf', `ConfigParser', or `dbm'.
     It is also useful with custom `dict' subclasses that normalize
     keys before look-up or that supply a `__missing__()' method for
     unknown keys:

         >>> import shelve
         >>> d = shelve.open('tmp.shl')
         >>> 'The {project_name} status is {status} as of {date}'.format_map(d)
         'The testing project status is green as of February 15, 2011'

         >>> class LowerCasedDict(dict):
                 def __getitem__(self, key):
                     return dict.__getitem__(self, key.lower())
         >>> lcd = LowerCasedDict(part='widgets', quantity=10)
         >>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)
         'There are 10 widgets in stock'

         >>> class PlaceholderDict(dict):
                 def __missing__(self, key):
                     return '<{}>'.format(key)
         >>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())
         'Hello <name>, welcome to <location>'



     (Suggested by Raymond Hettinger and implemented by Eric Smith in
     issue 6081(2).)

   * The interpreter can now be started with a quiet option, `-q', to
     prevent the copyright and version information from being displayed
     in the interactive mode.  The option can be introspected using the
     `sys.flags' attribute:

         $ python -q
         >>> sys.flags
         sys.flags(debug=0, division_warning=0, inspect=0, interactive=0,
         optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0,
         ignore_environment=0, verbose=0, bytes_warning=0, quiet=1)

     (Contributed by Marcin Wojdyr in issue 1772833(3)).

   * The `hasattr()' function works by calling `getattr()' and detecting
     whether an exception is raised.  This technique allows it to
     detect methods created dynamically by `__getattr__()' or
     `__getattribute__()' which would otherwise be absent from the
     class dictionary.  Formerly, _hasattr_ would catch any exception,
     possibly masking genuine errors.  Now, _hasattr_ has been
     tightened to only catch `AttributeError' and let other exceptions
     pass through:

         >>> class A:
                 @property
                 def f(self):
                     return 1 // 0

         >>> a = A()
         >>> hasattr(a, 'f')
         Traceback (most recent call last):
           ...
         ZeroDivisionError: integer division or modulo by zero

     (Discovered by Yury Selivanov and fixed by Benjamin Peterson;
     issue 9666(4).)

   * The `str()' of a float or complex number is now the same as its
     `repr()'. Previously, the `str()' form was shorter but that just
     caused confusion and is no longer needed now that the shortest
     possible `repr()' is displayed by default:

         >>> import math
         >>> repr(math.pi)
         '3.141592653589793'
         >>> str(math.pi)
         '3.141592653589793'

     (Proposed and implemented by Mark Dickinson; issue 9337(5).)

   * `memoryview' objects now have a `release()' method and they also
     now support the context manager protocol.  This allows timely
     release of any resources that were acquired when requesting a
     buffer from the original object.

         >>> with memoryview(b'abcdefgh') as v:
                 print(v.tolist())
         [97, 98, 99, 100, 101, 102, 103, 104]

     (Added by Antoine Pitrou; issue 9757(6).)

   * Previously it was illegal to delete a name from the local
     namespace if it occurs as a free variable in a nested block:

         def outer(x):
             def inner():
                return x
             inner()
             del x

     This is now allowed.  Remember that the target of an `except'
     clause is cleared, so this code which used to work with Python
     2.6, raised a `SyntaxError' with Python 3.1 and now works again:

         def f():
             def print_error():
                print(e)
             try:
                something
             except Exception as e:
                print_error()
                # implicit "del e" here

     (See issue 4617(7).)

   * The internal `structsequence' tool now creates subclasses of tuple.
     This means that C structures like those returned by `os.stat()',
     `time.gmtime()', and `sys.version_info' now work like a _named
     tuple_ and now work with functions and methods that expect a tuple
     as an argument.  This is a big step forward in making the C
     structures as flexible as their pure Python counterparts:

         >>> isinstance(sys.version_info, tuple)
         True
         >>> 'Version %d.%d.%d %s(%d)' % sys.version_info
         'Version 3.2.0 final(0)'

     (Suggested by Arfrever Frehtes Taifersar Arahesis and implemented
     by Benjamin Peterson in issue 8413(8).)

   * Warnings are now easier to control using the `PYTHONWARNINGS'
     environment variable as an alternative to using `-W' at the
     command line:

         $ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'

     (Suggested by Barry Warsaw and implemented by Philip Jenvey in
     issue 7301(9).)

   * A new warning category, `ResourceWarning', has been added.  It is
     emitted when potential issues with resource consumption or cleanup
     are detected.  It is silenced by default in normal release builds
     but can be enabled through the means provided by the `warnings'
     module, or on the command line.

     A `ResourceWarning' is issued at interpreter shutdown if the
     `gc.garbage' list isn't empty, and if `gc.DEBUG_UNCOLLECTABLE' is
     set, all uncollectable objects are printed.  This is meant to make
     the programmer aware that their code contains object finalization
     issues.

     A `ResourceWarning' is also issued when a _file object_ is
     destroyed without having been explicitly closed.  While the
     deallocator for such object ensures it closes the underlying
     operating system resource (usually, a file descriptor), the delay
     in deallocating the object could produce various issues,
     especially under Windows.  Here is an example of enabling the
     warning from the command line:

         $ python -q -Wdefault
         >>> f = open("foo", "wb")
         >>> del f
         __main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>

     (Added by Antoine Pitrou and Georg Brandl in issue 10093(10) and
     issue 477863(11).)

   * `range' objects now support _index_ and _count_ methods. This is
     part of an effort to make more objects fully implement the
     `collections.Sequence' _abstract base class_.  As a result, the
     language will have a more uniform API.  In addition, `range'
     objects now support slicing and negative indices, even with values
     larger than `sys.maxsize'.  This makes _range_ more interoperable
     with lists:

         >>> range(0, 100, 2).count(10)
         1
         >>> range(0, 100, 2).index(10)
         5
         >>> range(0, 100, 2)[5]
         10
         >>> range(0, 100, 2)[0:5]
         range(0, 10, 2)

     (Contributed by Daniel Stutzbach in issue 9213(12), by Alexander
     Belopolsky in issue 2690(13), and by Nick Coghlan in issue
     10889(14).)

   * The `callable()' builtin function from Py2.x was resurrected.  It
     provides a concise, readable alternative to using an _abstract
     base class_ in an expression like `isinstance(x,
     collections.Callable)':

         >>> callable(max)
         True
         >>> callable(20)
         False

     (See issue 10518(15).)

   * Python's import mechanism can now load modules installed in
     directories with non-ASCII characters in the path name.  This
     solved an aggravating problem with home directories for users with
     non-ASCII characters in their usernames.

     (Required extensive work by Victor Stinner in issue 9425(16).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7094

  (2) http://bugs.python.org/issue6081

  (3) http://bugs.python.org/issue1772833

  (4) http://bugs.python.org/issue9666

  (5) http://bugs.python.org/issue9337

  (6) http://bugs.python.org/issue9757

  (7) http://bugs.python.org/issue4617

  (8) http://bugs.python.org/issue8413

  (9) http://bugs.python.org/issue7301

  (10) http://bugs.python.org/issue10093

  (11) http://bugs.python.org/issue477863

  (12) http://bugs.python.org/issue9213

  (13) http://bugs.python.org/issue2690

  (14) http://bugs.python.org/issue10889

  (15) http://bugs.python.org/issue10518

  (16) http://bugs.python.org/issue9425


File: python-whatsnew-3.2.2.info,  Node: New Improved and Deprecated Modules,  Next: Multi-threading,  Prev: Other Language Changes,  Up: What's New In Python 3 2

1.9 New, Improved, and Deprecated Modules
=========================================

Python's standard library has undergone significant maintenance efforts
and quality improvements.

  The biggest news for Python 3.2 is that the `email' package, `mailbox'
module, and `nntplib' modules now work correctly with the bytes/text
model in Python 3.  For the first time, there is correct handling of
messages with mixed encodings.

  Throughout the standard library, there has been more careful
attention to encodings and text versus bytes issues.  In particular,
interactions with the operating system are now better able to exchange
non-ASCII data using the Windows MBCS encoding, locale-aware encodings,
or UTF-8.

  Another significant win is the addition of substantially better
support for _SSL_ connections and security certificates.

  In addition, more classes now implement a _context manager_ to support
convenient and reliable resource clean-up using a `with' statement.

* Menu:

* email::
* elementtree::
* functools::
* itertools::
* collections::
* threading::
* datetime and time::
* math::
* abc::
* io::
* reprlib::
* logging::
* csv::
* contextlib::
* decimal and fractions::
* ftp::
* popen::
* select::
* gzip and zipfile::
* tarfile::
* hashlib::
* ast::
* os::
* shutil::
* sqlite3::
* html::
* socket::
* ssl::
* nntp::
* certificates::
* imaplib::
* http.client: http client.
* unittest::
* random::
* poplib::
* asyncore::
* tempfile::
* inspect::
* pydoc::
* dis::
* dbm::
* ctypes::
* site::
* sysconfig::
* pdb::
* configparser::
* urllib.parse: urllib parse.
* mailbox::
* turtledemo::


File: python-whatsnew-3.2.2.info,  Node: email,  Next: elementtree,  Up: New Improved and Deprecated Modules

1.9.1 email
-----------

The usability of the `email' package in Python 3 has been mostly fixed
by the extensive efforts of R. David Murray.  The problem was that
emails are typically read and stored in the form of `bytes' rather than
`str' text, and they may contain multiple encodings within a single
email.  So, the email package had to be extended to parse and generate
email messages in bytes format.

   * New functions `message_from_bytes()' and
     `message_from_binary_file()', and new classes `BytesFeedParser'
     and `BytesParser' allow binary message data to be parsed into
     model objects.

   * Given bytes input to the model, `get_payload()' will by default
     decode a message body that has a `Content-Transfer-Encoding' of
     _8bit_ using the charset specified in the MIME headers and return
     the resulting string.

   * Given bytes input to the model, `Generator' will convert message
     bodies that have a `Content-Transfer-Encoding' of _8bit_ to
     instead have a _7bit_ `Content-Transfer-Encoding'.

     Headers with unencoded non-ASCII bytes are deemed to be RFC
     2047(1)-encoded using the _unknown-8bit_ character set.

   * A new class `BytesGenerator' produces bytes as output, preserving
     any unchanged non-ASCII data that was present in the input used to
     build the model, including message bodies with a
     `Content-Transfer-Encoding' of _8bit_.

   * The `smtplib' `SMTP' class now accepts a byte string for the _msg_
     argument to the `sendmail()' method, and a new method,
     `send_message()' accepts a `Message' object and can optionally
     obtain the _from_addr_ and _to_addrs_ addresses directly from the
     object.

  (Proposed and implemented by R. David Murray, issue 4661(2) and issue
10321(3).)

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2047.html

  (2) http://bugs.python.org/issue4661

  (3) http://bugs.python.org/issue10321


File: python-whatsnew-3.2.2.info,  Node: elementtree,  Next: functools,  Prev: email,  Up: New Improved and Deprecated Modules

1.9.2 elementtree
-----------------

The `xml.etree.ElementTree' package and its `xml.etree.cElementTree'
counterpart have been updated to version 1.3.

  Several new and useful functions and methods have been added:

   * `xml.etree.ElementTree.fromstringlist()' which builds an XML
     document from a sequence of fragments

   * `xml.etree.ElementTree.register_namespace()' for registering a
     global namespace prefix

   * `xml.etree.ElementTree.tostringlist()' for string representation
     including all sublists

   * `xml.etree.ElementTree.Element.extend()' for appending a sequence
     of zero or more elements

   * `xml.etree.ElementTree.Element.iterfind()' searches an element and
     subelements

   * `xml.etree.ElementTree.Element.itertext()' creates a text iterator
     over an element and its subelements

   * `xml.etree.ElementTree.TreeBuilder.end()' closes the current
     element

   * `xml.etree.ElementTree.TreeBuilder.doctype()' handles a doctype
     declaration

  Two methods have been deprecated:

   * `xml.etree.ElementTree.getchildren()' use `list(elem)' instead.

   * `xml.etree.ElementTree.getiterator()' use `Element.iter' instead.

  For details of the update, see Introducing ElementTree(1) on Fredrik
Lundh's website.

  (Contributed by Florent Xicluna and Fredrik Lundh, issue 6472(2).)

  ---------- Footnotes ----------

  (1) http://effbot.org/zone/elementtree-13-intro.htm

  (2) http://bugs.python.org/issue6472


File: python-whatsnew-3.2.2.info,  Node: functools,  Next: itertools,  Prev: elementtree,  Up: New Improved and Deprecated Modules

1.9.3 functools
---------------

   * The `functools' module includes a new decorator for caching
     function calls.  `functools.lru_cache()' can save repeated queries
     to an external resource whenever the results are expected to be
     the same.

     For example, adding a caching decorator to a database query
     function can save database accesses for popular searches:

         >>> import functools
         >>> @functools.lru_cache(maxsize=300)
         >>> def get_phone_number(name):
                 c = conn.cursor()
                 c.execute('SELECT phonenumber FROM phonelist WHERE name=?', (name,))
                 return c.fetchone()[0]


         >>> for name in user_requests:
                 get_phone_number(name)        # cached lookup

     To help with choosing an effective cache size, the wrapped
     function is instrumented for tracking cache statistics:

         >>> get_phone_number.cache_info()
         CacheInfo(hits=4805, misses=980, maxsize=300, currsize=300)

     If the phonelist table gets updated, the outdated contents of the
     cache can be cleared with:

         >>> get_phone_number.cache_clear()

     (Contributed by Raymond Hettinger and incorporating design ideas
     from Jim Baker, Miki Tebeka, and Nick Coghlan; see recipe
     498245(1), recipe 577479(2), issue 10586(3), and issue 10593(4).)

   * The `functools.wraps()' decorator now adds a `__wrapped__'
     attribute pointing to the original callable function.  This allows
     wrapped functions to be introspected.  It also copies
     `__annotations__' if defined.  And now it also gracefully skips
     over missing attributes such as `__doc__' which might not be
     defined for the wrapped callable.

     In the above example, the cache can be removed by recovering the
     original function:

         >>> get_phone_number = get_phone_number.__wrapped__    # uncached function

     (By Nick Coghlan and Terrence Cole; issue 9567(5), issue 3445(6),
     and issue 8814(7).)

   * To help write classes with rich comparison methods, a new decorator
     `functools.total_ordering()' will use a existing equality and
     inequality methods to fill in the remaining methods.

     For example, supplying ___eq___ and ___lt___ will enable
     `total_ordering()' to fill-in ___le___, ___gt___ and ___ge___:

         @total_ordering
         class Student:
             def __eq__(self, other):
                 return ((self.lastname.lower(), self.firstname.lower()) ==
                         (other.lastname.lower(), other.firstname.lower()))
             def __lt__(self, other):
                 return ((self.lastname.lower(), self.firstname.lower()) <
                         (other.lastname.lower(), other.firstname.lower()))

     With the _total_ordering_ decorator, the remaining comparison
     methods are filled in automatically.

     (Contributed by Raymond Hettinger.)

   * To aid in porting programs from Python 2, the
     `functools.cmp_to_key()' function converts an old-style comparison
     function to modern _key function_:

         >>> # locale-aware sort order
         >>> sorted(iterable, key=cmp_to_key(locale.strcoll))

     For sorting examples and a brief sorting tutorial, see the Sorting
     HowTo(8) tutorial.

     (Contributed by Raymond Hettinger.)

  ---------- Footnotes ----------

  (1) http://code.activestate.com/recipes/498245

  (2) http://code.activestate.com/recipes/577479

  (3) http://bugs.python.org/issue10586

  (4) http://bugs.python.org/issue10593

  (5) http://bugs.python.org/issue9567

  (6) http://bugs.python.org/issue3445

  (7) http://bugs.python.org/issue8814

  (8) http://wiki.python.org/moin/HowTo/Sorting/


File: python-whatsnew-3.2.2.info,  Node: itertools,  Next: collections,  Prev: functools,  Up: New Improved and Deprecated Modules

1.9.4 itertools
---------------

   * The `itertools' module has a new `accumulate()' function modeled
     on APL's _scan_ operator and Numpy's _accumulate_ function:

         >>> from itertools import accumulate
         >>> list(accumulate([8, 2, 50]))
         [8, 10, 60]


         >>> prob_dist = [0.1, 0.4, 0.2, 0.3]
         >>> list(accumulate(prob_dist))      # cumulative probability distribution
         [0.1, 0.5, 0.7, 1.0]

     For an example using `accumulate()', see the _examples for the
     random module_.

     (Contributed by Raymond Hettinger and incorporating design
     suggestions from Mark Dickinson.)


File: python-whatsnew-3.2.2.info,  Node: collections,  Next: threading,  Prev: itertools,  Up: New Improved and Deprecated Modules

1.9.5 collections
-----------------

   * The `collections.Counter' class now has two forms of in-place
     subtraction, the existing _-=_ operator for saturating
     subtraction(1) and the new `subtract()' method for regular
     subtraction.  The former is suitable for multisets(2) which only
     have positive counts, and the latter is more suitable for use cases
     that allow negative counts:

         >>> tally = Counter(dogs=5, cat=3)
         >>> tally -= Counter(dogs=2, cats=8)    # saturating subtraction
         >>> tally
         Counter({'dogs': 3})


         >>> tally = Counter(dogs=5, cats=3)
         >>> tally.subtract(dogs=2, cats=8)      # regular subtraction
         >>> tally
         Counter({'dogs': 3, 'cats': -5})

     (Contributed by Raymond Hettinger.)

   * The `collections.OrderedDict' class has a new method
     `move_to_end()' which takes an existing key and moves it to either
     the first or last position in the ordered sequence.

     The default is to move an item to the last position.  This is
     equivalent of renewing an entry with `od[k] = od.pop(k)'.

     A fast move-to-end operation is useful for resequencing entries.
     For example, an ordered dictionary can be used to track order of
     access by aging entries from the oldest to the most recently
     accessed.

         >>> d = OrderedDict.fromkeys(['a', 'b', 'X', 'd', 'e'])
         >>> list(d)
         ['a', 'b', 'X', 'd', 'e']
         >>> d.move_to_end('X')
         >>> list(d)
         ['a', 'b', 'd', 'e', 'X']

     (Contributed by Raymond Hettinger.)

   * The `collections.deque' class grew two new methods `count()' and
     `reverse()' that make them more substitutable for `list' objects:

         >>> d = deque('simsalabim')
         >>> d.count('s')
         2
         >>> d.reverse()
         >>> d
         deque(['m', 'i', 'b', 'a', 'l', 'a', 's', 'm', 'i', 's'])

     (Contributed by Raymond Hettinger.)

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Saturation_arithmetic

  (2) http://en.wikipedia.org/wiki/Multiset


File: python-whatsnew-3.2.2.info,  Node: threading,  Next: datetime and time,  Prev: collections,  Up: New Improved and Deprecated Modules

1.9.6 threading
---------------

The `threading' module has a new `Barrier' synchronization class for
making multiple threads wait until all of them have reached a common
barrier point.  Barriers are useful for making sure that a task with
multiple preconditions does not run until all of the predecessor tasks
are complete.

  Barriers can work with an arbitrary number of threads.  This is a
generalization of a Rendezvous(1) which is defined for only two threads.

  Implemented as a two-phase cyclic barrier, `Barrier' objects are
suitable for use in loops.  The separate _filling_ and _draining_ phases
assure that all threads get released (drained) before any one of them
can loop back and re-enter the barrier.  The barrier fully resets after
each cycle.

  Example of using barriers:

    from threading import Barrier, Thread

    def get_votes(site):
        ballots = conduct_election(site)
        all_polls_closed.wait()        # do not count until all polls are closed
        totals = summarize(ballots)
        publish(site, totals)

    all_polls_closed = Barrier(len(sites))
    for site in sites:
        Thread(target=get_votes, args=(site,)).start()

In this example, the barrier enforces a rule that votes cannot be
counted at any polling site until all polls are closed.  Notice how a
solution with a barrier is similar to one with
`threading.Thread.join()', but the threads stay alive and continue to
do work (summarizing ballots) after the barrier point is crossed.

  If any of the predecessor tasks can hang or be delayed, a barrier can
be created with an optional _timeout_ parameter.  Then if the timeout
period elapses before all the predecessor tasks reach the barrier
point, all waiting threads are released and a `BrokenBarrierError'
exception is raised:

    def get_votes(site):
        ballots = conduct_election(site)
        try:
            all_polls_closed.wait(timeout = midnight - time.now())
        except BrokenBarrierError:
            lockbox = seal_ballots(ballots)
            queue.put(lockbox)
        else:
            totals = summarize(ballots)
            publish(site, totals)

In this example, the barrier enforces a more robust rule.  If some
election sites do not finish before midnight, the barrier times-out and
the ballots are sealed and deposited in a queue for later handling.

  See Barrier Synchronization Patterns(2) for more examples of how
barriers can be used in parallel computing.  Also, there is a simple
but thorough explanation of barriers in The Little Book of
Semaphores(3), _section 3.6_.

  (Contributed by Kristján Valur Jónsson with an API review by Jeffrey
Yasskin in issue 8777(4).)

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Synchronous_rendezvous

  (2)
http://parlab.eecs.berkeley.edu/wiki/_media/patterns/paraplop_g1_3.pdf

  (3) http://greenteapress.com/semaphores/downey08semaphores.pdf

  (4) http://bugs.python.org/issue8777


File: python-whatsnew-3.2.2.info,  Node: datetime and time,  Next: math,  Prev: threading,  Up: New Improved and Deprecated Modules

1.9.7 datetime and time
-----------------------

   * The `datetime' module has a new type `timezone' that implements
     the `tzinfo' interface by returning a fixed UTC offset and
     timezone name. This makes it easier to create timezone-aware
     datetime objects:

         >>> from datetime import datetime, timezone

         >>> datetime.now(timezone.utc)
         datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)

         >>> datetime.strptime("01/01/2000 12:00 +0000", "%m/%d/%Y %H:%M %z")
         datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)


   * Also, `timedelta' objects can now be multiplied by `float' and
     divided by `float' and `int' objects.  And `timedelta' objects can
     now divide one another.

   * The `datetime.date.strftime()' method is no longer restricted to
     years after 1900.  The new supported year range is from 1000 to
     9999 inclusive.

   * Whenever a two-digit year is used in a time tuple, the
     interpretation has been governed by `time.accept2dyear'.  The
     default is _True_ which means that for a two-digit year, the
     century is guessed according to the POSIX rules governing the `%y'
     strptime format.

     Starting with Py3.2, use of the century guessing heuristic will
     emit a `DeprecationWarning'.  Instead, it is recommended that
     `time.accept2dyear' be set to _False_ so that large date ranges
     can be used without guesswork:

         >>> import time, warnings
         >>> warnings.resetwarnings()      # remove the default warning filters

         >>> time.accept2dyear = True      # guess whether 11 means 11 or 2011
         >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
         Warning (from warnings module):
           ...
         DeprecationWarning: Century info guessed for a 2-digit year.
         'Fri Jan  1 12:34:56 2011'

         >>> time.accept2dyear = False     # use the full range of allowable dates
         >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
         'Fri Jan  1 12:34:56 11'

     Several functions now have significantly expanded date ranges.
     When `time.accept2dyear' is false, the `time.asctime()' function
     will accept any year that fits in a C int, while the
     `time.mktime()' and `time.strftime()' functions will accept the
     full range supported by the corresponding operating system
     functions.

  (Contributed by Alexander Belopolsky and Victor Stinner in issue
1289118(1), issue 5094(2), issue 6641(3), issue 2706(4), issue
1777412(5), issue 8013(6), and issue 10827(7).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1289118

  (2) http://bugs.python.org/issue5094

  (3) http://bugs.python.org/issue6641

  (4) http://bugs.python.org/issue2706

  (5) http://bugs.python.org/issue1777412

  (6) http://bugs.python.org/issue8013

  (7) http://bugs.python.org/issue10827


File: python-whatsnew-3.2.2.info,  Node: math,  Next: abc,  Prev: datetime and time,  Up: New Improved and Deprecated Modules

1.9.8 math
----------

The `math' module has been updated with six new functions inspired by
the C99 standard.

  The `isfinite()' function provides a reliable and fast way to detect
special values.  It returns _True_ for regular numbers and _False_ for
_Nan_ or _Infinity_:

    >>> [isfinite(x) for x in (123, 4.56, float('Nan'), float('Inf'))]
    [True, True, False, False]

The `expm1()' function computes `e**x-1' for small values of _x_
without incurring the loss of precision that usually accompanies the
subtraction of nearly equal quantities:

    >>> expm1(0.013671875)   # more accurate way to compute e**x-1 for a small x
    0.013765762467652909

The `erf()' function computes a probability integral or Gaussian error
function(1).  The complementary error function, `erfc()', is `1 -
erf(x)':

    >>> erf(1.0/sqrt(2.0))   # portion of normal distribution within 1 standard deviation
    0.682689492137086
    >>> erfc(1.0/sqrt(2.0))  # portion of normal distribution outside 1 standard deviation
    0.31731050786291404
    >>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))
    1.0

The `gamma()' function is a continuous extension of the factorial
function.  See <http://en.wikipedia.org/wiki/Gamma_function> for
details.  Because the function is related to factorials, it grows large
even for small values of _x_, so there is also a `lgamma()' function
for computing the natural logarithm of the gamma function:

    >>> gamma(7.0)           # six factorial
    720.0
    >>> lgamma(801.0)        # log(800 factorial)
    4551.950730698041

(Contributed by Mark Dickinson.)

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Error_function


File: python-whatsnew-3.2.2.info,  Node: abc,  Next: io,  Prev: math,  Up: New Improved and Deprecated Modules

1.9.9 abc
---------

The `abc' module now supports `abstractclassmethod()' and
`abstractstaticmethod()'.

  These tools make it possible to define an _abstract base class_ that
requires a particular `classmethod()' or `staticmethod()' to be
implemented:

    class Temperature(metaclass=abc.ABCMeta):
        @abc.abstractclassmethod
        def from_fahrenheit(cls, t):
            ...
        @abc.abstractclassmethod
        def from_celsius(cls, t):
            ...

(Patch submitted by Daniel Urban; issue 5867(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5867


File: python-whatsnew-3.2.2.info,  Node: io,  Next: reprlib,  Prev: abc,  Up: New Improved and Deprecated Modules

1.9.10 io
---------

The `io.BytesIO' has a new method, `getbuffer()', which provides
functionality similar to `memoryview()'.  It creates an editable view
of the data without making a copy.  The buffer's random access and
support for slice notation are well-suited to in-place editing:

    >>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11

    >>> def change_location(buffer, record_number, location):
            start = record_number * REC_LEN + LOC_START
            buffer[start: start+LOC_LEN] = location

    >>> import io

    >>> byte_stream = io.BytesIO(
        b'G3805  storeroom  Main chassis    '
        b'X7899  shipping   Reserve cog     '
        b'L6988  receiving  Primary sprocket'
    )
    >>> buffer = byte_stream.getbuffer()
    >>> change_location(buffer, 1, b'warehouse  ')
    >>> change_location(buffer, 0, b'showroom   ')
    >>> print(byte_stream.getvalue())
    b'G3805  showroom   Main chassis    '
    b'X7899  warehouse  Reserve cog     '
    b'L6988  receiving  Primary sprocket'

(Contributed by Antoine Pitrou in issue 5506(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5506


File: python-whatsnew-3.2.2.info,  Node: reprlib,  Next: logging,  Prev: io,  Up: New Improved and Deprecated Modules

1.9.11 reprlib
--------------

When writing a `__repr__()' method for a custom container, it is easy to
forget to handle the case where a member refers back to the container
itself.  Python's builtin objects such as `list' and `set' handle
self-reference by displaying "..." in the recursive part of the
representation string.

  To help write such `__repr__()' methods, the `reprlib' module has a
new decorator, `recursive_repr()', for detecting recursive calls to
`__repr__()' and substituting a placeholder string instead:

    >>> class MyList(list):
            @recursive_repr()
            def __repr__(self):
                return '<' + '|'.join(map(repr, self)) + '>'

    >>> m = MyList('abc')
    >>> m.append(m)
    >>> m.append('x')
    >>> print(m)
    <'a'|'b'|'c'|...|'x'>

(Contributed by Raymond Hettinger in issue 9826(1) and issue 9840(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9826

  (2) http://bugs.python.org/issue9840


File: python-whatsnew-3.2.2.info,  Node: logging,  Next: csv,  Prev: reprlib,  Up: New Improved and Deprecated Modules

1.9.12 logging
--------------

In addition to dictionary-based configuration described above, the
`logging' package has many other improvements.

  The logging documentation has been augmented by a _basic tutorial_,
an _advanced tutorial_, and a _cookbook_ of logging recipes.  These
documents are the fastest way to learn about logging.

  The `logging.basicConfig()' set-up function gained a _style_ argument
to support three different types of string formatting.  It defaults to
"%" for traditional %-formatting, can be set to "{" for the new
`str.format()' style, or can be set to "$" for the shell-style
formatting provided by `string.Template'.  The following three
configurations are equivalent:

    >>> from logging import basicConfig
    >>> basicConfig(style='%', format="%(name)s -> %(levelname)s: %(message)s")
    >>> basicConfig(style='{', format="{name} -> {levelname} {message}")
    >>> basicConfig(style='$', format="$name -> $levelname: $message")

If no configuration is set-up before a logging event occurs, there is
now a default configuration using a `StreamHandler' directed to
`sys.stderr' for events of `WARNING' level or higher.  Formerly, an
event occurring before a configuration was set-up would either raise an
exception or silently drop the event depending on the value of
`logging.raiseExceptions'.  The new default handler is stored in
`logging.lastResort'.

  The use of filters has been simplified.  Instead of creating a
`Filter' object, the predicate can be any Python callable that returns
_True_ or _False_.

  There were a number of other improvements that add flexibility and
simplify configuration.  See the module documentation for a full
listing of changes in Python 3.2.


File: python-whatsnew-3.2.2.info,  Node: csv,  Next: contextlib,  Prev: logging,  Up: New Improved and Deprecated Modules

1.9.13 csv
----------

The `csv' module now supports a new dialect, `unix_dialect', which
applies quoting for all fields and a traditional Unix style with `'\n''
as the line terminator.  The registered dialect name is `unix'.

  The `csv.DictWriter' has a new method, `writeheader()' for
writing-out an initial row to document the field names:

    >>> import csv, sys
    >>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')
    >>> w.writeheader()
    "name","dept"
    >>> w.writerows([
            {'name': 'tom', 'dept': 'accounting'},
            {'name': 'susan', 'dept': 'Salesl'}])
    "tom","accounting"
    "susan","sales"

(New dialect suggested by Jay Talbot in issue 5975(1), and the new
method suggested by Ed Abraham in issue 1537721(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5975

  (2) http://bugs.python.org/issue1537721


File: python-whatsnew-3.2.2.info,  Node: contextlib,  Next: decimal and fractions,  Prev: csv,  Up: New Improved and Deprecated Modules

1.9.14 contextlib
-----------------

There is a new and slightly mind-blowing tool `ContextDecorator' that
is helpful for creating a _context manager_ that does double duty as a
function decorator.

  As a convenience, this new functionality is used by
`contextmanager()' so that no extra effort is needed to support both
roles.

  The basic idea is that both context managers and function decorators
can be used for pre-action and post-action wrappers.  Context managers
wrap a group of statements using a `with' statement, and function
decorators wrap a group of statements enclosed in a function.  So,
occasionally there is a need to write a pre-action or post-action
wrapper that can be used in either role.

  For example, it is sometimes useful to wrap functions or groups of
statements with a logger that can track the time of entry and time of
exit.  Rather than writing both a function decorator and a context
manager for the task, the `contextmanager()' provides both capabilities
in a single definition:

    from contextlib import contextmanager
    import logging

    logging.basicConfig(level=logging.INFO)

    @contextmanager
    def track_entry_and_exit(name):
        logging.info('Entering: {}'.format(name))
        yield
        logging.info('Exiting: {}'.format(name))

Formerly, this would have only been usable as a context manager:

    with track_entry_and_exit('widget loader'):
        print('Some time consuming activity goes here')
        load_widget()

Now, it can be used as a decorator as well:

    @track_entry_and_exit('widget loader')
    def activity():
        print('Some time consuming activity goes here')
        load_widget()

Trying to fulfill two roles at once places some limitations on the
technique.  Context managers normally have the flexibility to return an
argument usable by a `with' statement, but there is no parallel for
function decorators.

  In the above example, there is not a clean way for the
_track_entry_and_exit_ context manager to return a logging instance for
use in the body of enclosed statements.

  (Contributed by Michael Foord in issue 9110(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9110


File: python-whatsnew-3.2.2.info,  Node: decimal and fractions,  Next: ftp,  Prev: contextlib,  Up: New Improved and Deprecated Modules

1.9.15 decimal and fractions
----------------------------

Mark Dickinson crafted an elegant and efficient scheme for assuring that
different numeric datatypes will have the same hash value whenever
their actual values are equal (issue 8188(1)):

    assert hash(Fraction(3, 2)) == hash(1.5) == \
           hash(Decimal("1.5")) == hash(complex(1.5, 0))

Some of the hashing details are exposed through a new attribute,
`sys.hash_info', which describes the bit width of the hash value, the
prime modulus, the hash values for _infinity_ and _nan_, and the
multiplier used for the imaginary part of a number:

    >>> sys.hash_info
    sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003)

An early decision to limit the inter-operability of various numeric
types has been relaxed.  It is still unsupported (and ill-advised) to
have implicit mixing in arithmetic expressions such as `Decimal('1.1')
+ float('1.1')' because the latter loses information in the process of
constructing the binary float.  However, since existing floating point
value can be converted losslessly to either a decimal or rational
representation, it makes sense to add them to the constructor and to
support mixed-type comparisons.

   * The `decimal.Decimal' constructor now accepts `float' objects
     directly so there in no longer a need to use the `from_float()'
     method (issue 8257(2)).

   * Mixed type comparisons are now fully supported so that `Decimal'
     objects can be directly compared with `float' and
     `fractions.Fraction' (issue 2531(3) and issue 8188(4)).

  Similar changes were made to `fractions.Fraction' so that the
`from_float()' and `from_decimal()' methods are no longer needed (issue
8294(5)):

    >>> Decimal(1.1)
    Decimal('1.100000000000000088817841970012523233890533447265625')
    >>> Fraction(1.1)
    Fraction(2476979795053773, 2251799813685248)

Another useful change for the `decimal' module is that the
`Context.clamp' attribute is now public.  This is useful in creating
contexts that correspond to the decimal interchange formats specified
in IEEE 754 (see issue 8540(6)).

  (Contributed by Mark Dickinson and Raymond Hettinger.)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8188

  (2) http://bugs.python.org/issue8257

  (3) http://bugs.python.org/issue2531

  (4) http://bugs.python.org/issue8188

  (5) http://bugs.python.org/issue8294

  (6) http://bugs.python.org/issue8540


File: python-whatsnew-3.2.2.info,  Node: ftp,  Next: popen,  Prev: decimal and fractions,  Up: New Improved and Deprecated Modules

1.9.16 ftp
----------

The `ftplib.FTP' class now supports the context manager protocol to
unconditionally consume `socket.error' exceptions and to close the FTP
connection when done:

    >>> from ftplib import FTP
    >>> with FTP("ftp1.at.proftpd.org") as ftp:
            ftp.login()
            ftp.dir()

    '230 Anonymous login ok, restrictions apply.'
    dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
    dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
    dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
    dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora

Other file-like objects such as `mmap.mmap' and `fileinput.input()'
also grew auto-closing context managers:

    with fileinput.input(files=('log1.txt', 'log2.txt')) as f:
        for line in f:
            process(line)

(Contributed by Tarek Ziadé and Giampaolo Rodolà in issue 4972(1), and
by Georg Brandl in issue 8046(2) and issue 1286(3).)

  The `FTP_TLS' class now accepts a _context_ parameter, which is a
`ssl.SSLContext' object allowing bundling SSL configuration options,
certificates and private keys into a single (potentially long-lived)
structure.

  (Contributed by Giampaolo Rodolà; issue 8806(4).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4972

  (2) http://bugs.python.org/issue8046

  (3) http://bugs.python.org/issue1286

  (4) http://bugs.python.org/issue8806


File: python-whatsnew-3.2.2.info,  Node: popen,  Next: select,  Prev: ftp,  Up: New Improved and Deprecated Modules

1.9.17 popen
------------

The `os.popen()' and `subprocess.Popen()' functions now support `with'
statements for auto-closing of the file descriptors.

  (Contributed by Antoine Pitrou and Brian Curtin in issue 7461(1) and
issue 10554(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7461

  (2) http://bugs.python.org/issue10554


File: python-whatsnew-3.2.2.info,  Node: select,  Next: gzip and zipfile,  Prev: popen,  Up: New Improved and Deprecated Modules

1.9.18 select
-------------

The `select' module now exposes a new, constant attribute, `PIPE_BUF',
which gives the minimum number of bytes which are guaranteed not to
block when `select.select()' says a pipe is ready for writing.

    >>> import select
    >>> select.PIPE_BUF
    512

(Available on Unix systems. Patch by Sébastien Sablé in issue 9862(1))

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9862


File: python-whatsnew-3.2.2.info,  Node: gzip and zipfile,  Next: tarfile,  Prev: select,  Up: New Improved and Deprecated Modules

1.9.19 gzip and zipfile
-----------------------

`gzip.GzipFile' now implements the `io.BufferedIOBase' _abstract base
class_ (except for `truncate()').  It also has a `peek()' method and
supports unseekable as well as zero-padded file objects.

  The `gzip' module also gains the `compress()' and `decompress()'
functions for easier in-memory compression and decompression.  Keep in
mind that text needs to be encoded as `bytes' before compressing and
decompressing:

    >>> s = 'Three shall be the number thou shalt count, '
    >>> s += 'and the number of the counting shall be three'
    >>> b = s.encode()                        # convert to utf-8
    >>> len(b)
    89
    >>> c = gzip.compress(b)
    >>> len(c)
    77
    >>> gzip.decompress(c).decode()[:42]      # decompress and convert to text
    'Three shall be the number thou shalt count,'

(Contributed by Anand B. Pillai in issue 3488(1); and by Antoine
Pitrou, Nir Aides and Brian Curtin in issue 9962(2), issue 1675951(3),
issue 7471(4) and issue 2846(5).)

  Also, the `zipfile.ZipExtFile' class was reworked internally to
represent files stored inside an archive.  The new implementation is
significantly faster and can be wrapped in a `io.BufferedReader' object
for more speedups.  It also solves an issue where interleaved calls to
_read_ and _readline_ gave the wrong results.

  (Patch submitted by Nir Aides in issue 7610(6).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue3488

  (2) http://bugs.python.org/issue9962

  (3) http://bugs.python.org/issue1675951

  (4) http://bugs.python.org/issue7471

  (5) http://bugs.python.org/issue2846

  (6) http://bugs.python.org/issue7610


File: python-whatsnew-3.2.2.info,  Node: tarfile,  Next: hashlib,  Prev: gzip and zipfile,  Up: New Improved and Deprecated Modules

1.9.20 tarfile
--------------

The `TarFile' class can now be used as a context manager.  In addition,
its `add()' method has a new option, _filter_, that controls which
files are added to the archive and allows the file metadata to be
edited.

  The new _filter_ option replaces the older, less flexible _exclude_
parameter which is now deprecated.  If specified, the optional _filter_
parameter needs to be a _keyword argument_.  The user-supplied filter
function accepts a `TarInfo' object and returns an updated `TarInfo'
object, or if it wants the file to be excluded, the function can return
_None_:

    >>> import tarfile, glob

    >>> def myfilter(tarinfo):
           if tarinfo.isfile():             # only save real files
                tarinfo.uname = 'monty'     # redact the user name
                return tarinfo

    >>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:
            for filename in glob.glob('*.txt'):
                tf.add(filename, filter=myfilter)
            tf.list()
    -rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt
    -rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt
    -rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt
    -rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt
    -rw-r--r-- monty/501       1399 2011-01-26 17:59:11 semaphore_notes.txt

(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in issue
6856(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6856


File: python-whatsnew-3.2.2.info,  Node: hashlib,  Next: ast,  Prev: tarfile,  Up: New Improved and Deprecated Modules

1.9.21 hashlib
--------------

The `hashlib' module has two new constant attributes listing the hashing
algorithms guaranteed to be present in all implementations and those
available on the current implementation:

    >>> import hashlib

    >>> hashlib.algorithms_guaranteed
    {'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}

    >>> hashlib.algorithms_available
    {'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',
    'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',
    'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',
    'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}

(Suggested by Carl Chenet in issue 7418(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7418


File: python-whatsnew-3.2.2.info,  Node: ast,  Next: os,  Prev: hashlib,  Up: New Improved and Deprecated Modules

1.9.22 ast
----------

The `ast' module has a wonderful a general-purpose tool for safely
evaluating expression strings using the Python literal syntax.  The
`ast.literal_eval()' function serves as a secure alternative to the
builtin `eval()' function which is easily abused.  Python 3.2 adds
`bytes' and `set' literals to the list of supported types: strings,
bytes, numbers, tuples, lists, dicts, sets, booleans, and None.

    >>> from ast import literal_eval

    >>> request = "{'req': 3, 'func': 'pow', 'args': (2, 0.5)}"
    >>> literal_eval(request)
    {'args': (2, 0.5), 'req': 3, 'func': 'pow'}

    >>> request = "os.system('do something harmful')"
    >>> literal_eval(request)
    Traceback (most recent call last):
      ...
    ValueError: malformed node or string: <_ast.Call object at 0x101739a10>

(Implemented by Benjamin Peterson and Georg Brandl.)


File: python-whatsnew-3.2.2.info,  Node: os,  Next: shutil,  Prev: ast,  Up: New Improved and Deprecated Modules

1.9.23 os
---------

Different operating systems use various encodings for filenames and
environment variables.  The `os' module provides two new functions,
`fsencode()' and `fsdecode()', for encoding and decoding filenames:

    >>> filename = 'Sehenswürdigkeiten'
    >>> os.fsencode(filename)
    b'Sehensw\xc3\xbcrdigkeiten'

Some operating systems allow direct access to encoded bytes in the
environment.  If so, the `os.supports_bytes_environ' constant will be
true.

  For direct access to encoded environment variables (if available),
use the new `os.getenvb()' function or use `os.environb' which is a
bytes version of `os.environ'.

  (Contributed by Victor Stinner.)


File: python-whatsnew-3.2.2.info,  Node: shutil,  Next: sqlite3,  Prev: os,  Up: New Improved and Deprecated Modules

1.9.24 shutil
-------------

The `shutil.copytree()' function has two new options:

   * _ignore_dangling_symlinks_: when `symlinks=False' so that the
     function copies a file pointed to by a symlink, not the symlink
     itself. This option will silence the error raised if the file
     doesn't exist.

   * _copy_function_: is a callable that will be used to copy files.
     `shutil.copy2()' is used by default.

  (Contributed by Tarek Ziadé.)

  In addition, the `shutil' module now supports _archiving operations_
for zipfiles, uncompressed tarfiles, gzipped tarfiles, and bzipped
tarfiles.  And there are functions for registering additional archiving
file formats (such as xz compressed tarfiles or custom formats).

  The principal functions are `make_archive()' and `unpack_archive()'.
By default, both operate on the current directory (which can be set by
`os.chdir()') and on any sub-directories.  The archive filename needs
to be specified with a full pathname.  The archiving step is
non-destructive (the original files are left unchanged).

    >>> import shutil, pprint

    >>> os.chdir('mydata')                               # change to the source directory
    >>> f = shutil.make_archive('/var/backup/mydata',
                                'zip')                   # archive the current directory
    >>> f                                                # show the name of archive
    '/var/backup/mydata.zip'
    >>> os.chdir('tmp')                                  # change to an unpacking
    >>> shutil.unpack_archive('/var/backup/mydata.zip')  # recover the data

    >>> pprint.pprint(shutil.get_archive_formats())      # display known formats
    [('bztar', "bzip2'ed tar-file"),
     ('gztar', "gzip'ed tar-file"),
     ('tar', 'uncompressed tar file'),
     ('zip', 'ZIP file')]

    >>> shutil.register_archive_format(                  # register a new archive format
            name = 'xz',
            function = xz.compress,                      # callable archiving function
            extra_args = [('level', 8)],                 # arguments to the function
            description = 'xz compression'
    )

(Contributed by Tarek Ziadé.)


File: python-whatsnew-3.2.2.info,  Node: sqlite3,  Next: html,  Prev: shutil,  Up: New Improved and Deprecated Modules

1.9.25 sqlite3
--------------

The `sqlite3' module was updated to pysqlite version 2.6.0.  It has two
new capabilities.

   * The `sqlite3.Connection.in_transit' attribute is true if there is
     an active transaction for uncommitted changes.

   * The `sqlite3.Connection.enable_load_extension()' and
     `sqlite3.Connection.load_extension()' methods allows you to load
     SQLite extensions from ".so" files.  One well-known extension is
     the fulltext-search extension distributed with SQLite.

  (Contributed by R. David Murray and Shashwat Anand; issue 8845(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8845


File: python-whatsnew-3.2.2.info,  Node: html,  Next: socket,  Prev: sqlite3,  Up: New Improved and Deprecated Modules

1.9.26 html
-----------

A new `html' module was introduced with only a single function,
`escape()', which is used for escaping reserved characters from HTML
markup:

    >>> import html
    >>> html.escape('x > 2 && x < 7')
    'x &gt; 2 &amp;&amp; x &lt; 7'



File: python-whatsnew-3.2.2.info,  Node: socket,  Next: ssl,  Prev: html,  Up: New Improved and Deprecated Modules

1.9.27 socket
-------------

The `socket' module has two new improvements.

   * Socket objects now have a `detach()' method which puts the socket
     into closed state without actually closing the underlying file
     descriptor.  The latter can then be reused for other purposes.
     (Added by Antoine Pitrou; issue 8524(1).)

   * `socket.create_connection()' now supports the context manager
     protocol to unconditionally consume `socket.error' exceptions and
     to close the socket when done.  (Contributed by Giampaolo Rodolà;
     issue 9794(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8524

  (2) http://bugs.python.org/issue9794


File: python-whatsnew-3.2.2.info,  Node: ssl,  Next: nntp,  Prev: socket,  Up: New Improved and Deprecated Modules

1.9.28 ssl
----------

The `ssl' module added a number of features to satisfy common
requirements for secure (encrypted, authenticated) internet connections:

   * A new class, `SSLContext', serves as a container for persistent
     SSL data, such as protocol settings, certificates, private keys,
     and various other options. It includes a `wrap_socket()' for
     creating an SSL socket from an SSL context.

   * A new function, `ssl.match_hostname()', supports server identity
     verification for higher-level protocols by implementing the rules
     of HTTPS (from RFC 2818(1)) which are also suitable for other
     protocols.

   * The `ssl.wrap_socket()' constructor function now takes a _ciphers_
     argument.  The _ciphers_ string lists the allowed encryption
     algorithms using the format described in the OpenSSL
     documentation(2).

   * When linked against recent versions of OpenSSL, the `ssl' module
     now supports the Server Name Indication extension to the TLS
     protocol, allowing multiple "virtual hosts" using different
     certificates on a single IP port.  This extension is only
     supported in client mode, and is activated by passing the
     _server_hostname_ argument to `ssl.SSLContext.wrap_socket()'.

   * Various options have been added to the `ssl' module, such as
     `OP_NO_SSLv2' which disables the insecure and obsolete SSLv2
     protocol.

   * The extension now loads all the OpenSSL ciphers and digest
     algorithms.  If some SSL certificates cannot be verified, they are
     reported as an "unknown algorithm" error.

   * The version of OpenSSL being used is now accessible using the
     module attributes `ssl.OPENSSL_VERSION' (a string),
     `ssl.OPENSSL_VERSION_INFO' (a 5-tuple), and
     `ssl.OPENSSL_VERSION_NUMBER' (an integer).

  (Contributed by Antoine Pitrou in issue 8850(3), issue 1589(4), issue
8322(5), issue 5639(6), issue 4870(7), issue 8484(8), and issue
8321(9).)

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2818.html

  (2) http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT

  (3) http://bugs.python.org/issue8850

  (4) http://bugs.python.org/issue1589

  (5) http://bugs.python.org/issue8322

  (6) http://bugs.python.org/issue5639

  (7) http://bugs.python.org/issue4870

  (8) http://bugs.python.org/issue8484

  (9) http://bugs.python.org/issue8321


File: python-whatsnew-3.2.2.info,  Node: nntp,  Next: certificates,  Prev: ssl,  Up: New Improved and Deprecated Modules

1.9.29 nntp
-----------

The `nntplib' module has a revamped implementation with better bytes and
text semantics as well as more practical APIs.  These improvements break
compatibility with the nntplib version in Python 3.1, which was partly
dysfunctional in itself.

  Support for secure connections through both implicit (using
`nntplib.NNTP_SSL') and explicit (using `nntplib.NNTP.starttls()') TLS
has also been added.

  (Contributed by Antoine Pitrou in issue 9360(1) and Andrew Vant in
issue 1926(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9360

  (2) http://bugs.python.org/issue1926


File: python-whatsnew-3.2.2.info,  Node: certificates,  Next: imaplib,  Prev: nntp,  Up: New Improved and Deprecated Modules

1.9.30 certificates
-------------------

`http.client.HTTPSConnection', `urllib.request.HTTPSHandler' and
`urllib.request.urlopen()' now take optional arguments to allow for
server certificate checking against a set of Certificate Authorities,
as recommended in public uses of HTTPS.

  (Added by Antoine Pitrou, issue 9003(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9003


File: python-whatsnew-3.2.2.info,  Node: imaplib,  Next: http client,  Prev: certificates,  Up: New Improved and Deprecated Modules

1.9.31 imaplib
--------------

Support for explicit TLS on standard IMAP4 connections has been added
through the new `imaplib.IMAP4.starttls' method.

  (Contributed by Lorenzo M. Catucci and Antoine Pitrou, issue 4471(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4471


File: python-whatsnew-3.2.2.info,  Node: http client,  Next: unittest,  Prev: imaplib,  Up: New Improved and Deprecated Modules

1.9.32 http.client
------------------

There were a number of small API improvements in the `http.client'
module.  The old-style HTTP 0.9 simple responses are no longer
supported and the _strict_ parameter is deprecated in all classes.

  The `HTTPConnection' and `HTTPSConnection' classes now have a
_source_address_ parameter for a (host, port) tuple indicating where
the HTTP connection is made from.

  Support for certificate checking and HTTPS virtual hosts were added to
`HTTPSConnection'.

  The `request()' method on connection objects allowed an optional
_body_ argument so that a _file object_ could be used to supply the
content of the request.  Conveniently, the _body_ argument now also
accepts an _iterable_ object so long as it includes an explicit
`Content-Length' header.  This extended interface is much more flexible
than before.

  To establish an HTTPS connection through a proxy server, there is a
new `set_tunnel()' method that sets the host and port for HTTP Connect
tunneling.

  To match the behavior of `http.server', the HTTP client library now
also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was
already doing that for incoming headers, so now the behavior is
consistent for both incoming and outgoing traffic. (See work by Armin
Ronacher in issue 10980(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue10980


File: python-whatsnew-3.2.2.info,  Node: unittest,  Next: random,  Prev: http client,  Up: New Improved and Deprecated Modules

1.9.33 unittest
---------------

The unittest module has a number of improvements supporting test
discovery for packages, easier experimentation at the interactive
prompt, new testcase methods, improved diagnostic messages for test
failures, and better method names.

   * The command-line call `python -m unittest' can now accept file
     paths instead of module names for running specific tests (issue
     10620(1)).  The new test discovery can find tests within packages,
     locating any test importable from the top-level directory.  The
     top-level directory can be specified with the `-t' option, a
     pattern for matching files with `-p', and a directory to start
     discovery with `-s':

         $ python -m unittest discover -s my_proj_dir -p _test.py

     (Contributed by Michael Foord.)

   * Experimentation at the interactive prompt is now easier because the
     `unittest.case.TestCase' class can now be instantiated without
     arguments:

         >>> TestCase().assertEqual(pow(2, 3), 8)

     (Contributed by Michael Foord.)

   * The `unittest' module has two new methods, `assertWarns()' and
     `assertWarnsRegex()' to verify that a given warning type is
     triggered by the code under test:

         with self.assertWarns(DeprecationWarning):
             legacy_function('XYZ')

     (Contributed by Antoine Pitrou, issue 9754(2).)

     Another new method, `assertCountEqual()' is used to compare two
     iterables to determine if their element counts are equal (whether
     the same elements are present with the same number of occurrences
     regardless of order):

         def test_anagram(self):
             self.assertCountEqual('algorithm', 'logarithm')

     (Contributed by Raymond Hettinger.)

   * A principal feature of the unittest module is an effort to produce
     meaningful diagnostics when a test fails.  When possible, the
     failure is recorded along with a diff of the output.  This is
     especially helpful for analyzing log files of failed test runs.
     However, since diffs can sometime be voluminous, there is a new
     `maxDiff' attribute that sets maximum length of diffs displayed.

   * In addition, the method names in the module have undergone a
     number of clean-ups.

     For example, `assertRegex()' is the new name for
     `assertRegexpMatches()' which was misnamed because the test uses
     `re.search()', not `re.match()'.  Other methods using regular
     expressions are now named using short form "Regex" in preference to
     "Regexp" - this matches the names used in other unittest
     implementations, matches Python's old name for the `re' module,
     and it has unambiguous camel-casing.

     (Contributed by Raymond Hettinger and implemented by Ezio Melotti.)

   * To improve consistency, some long-standing method aliases are being
     deprecated in favor of the preferred names:

           Old Name                            Preferred Name
          ----------------------------------------------------------------------- 
          `assert_()'                         `assertTrue()'
          `assertEquals()'                    `assertEqual()'
          `assertNotEquals()'                 `assertNotEqual()'
          `assertAlmostEquals()'              `assertAlmostEqual()'
          `assertNotAlmostEquals()'           `assertNotAlmostEqual()'


     Likewise, the `TestCase.fail*' methods deprecated in Python 3.1
     are expected to be removed in Python 3.3.  Also see the
     _deprecated-aliases_ section in the `unittest' documentation.

     (Contributed by Ezio Melotti; issue 9424(3).)

   * The `assertDictContainsSubset()' method was deprecated because it
     was misimplemented with the arguments in the wrong order.  This
     created hard-to-debug optical illusions where tests like
     `TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})'
     would fail.

     (Contributed by Raymond Hettinger.)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue10620

  (2) http://bugs.python.org/issue9754

  (3) http://bugs.python.org/issue9424


File: python-whatsnew-3.2.2.info,  Node: random,  Next: poplib,  Prev: unittest,  Up: New Improved and Deprecated Modules

1.9.34 random
-------------

The integer methods in the `random' module now do a better job of
producing uniform distributions.  Previously, they computed selections
with `int(n*random())' which had a slight bias whenever _n_ was not a
power of two.  Now, multiple selections are made from a range up to the
next power of two and a selection is kept only when it falls within the
range `0 <= x < n'.  The functions and methods affected are
`randrange()', `randint()', `choice()', `shuffle()' and `sample()'.

  (Contributed by Raymond Hettinger; issue 9025(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9025


File: python-whatsnew-3.2.2.info,  Node: poplib,  Next: asyncore,  Prev: random,  Up: New Improved and Deprecated Modules

1.9.35 poplib
-------------

`POP3_SSL' class now accepts a _context_ parameter, which is a
`ssl.SSLContext' object allowing bundling SSL configuration options,
certificates and private keys into a single (potentially long-lived)
structure.

  (Contributed by Giampaolo Rodolà; issue 8807(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8807


File: python-whatsnew-3.2.2.info,  Node: asyncore,  Next: tempfile,  Prev: poplib,  Up: New Improved and Deprecated Modules

1.9.36 asyncore
---------------

`asyncore.dispatcher' now provides a `handle_accepted()' method
returning a `(sock, addr)' pair which is called when a connection has
actually been established with a new remote endpoint. This is supposed
to be used as a replacement for old `handle_accept()' and avoids the
user  to call `accept()' directly.

  (Contributed by Giampaolo Rodolà; issue 6706(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6706


File: python-whatsnew-3.2.2.info,  Node: tempfile,  Next: inspect,  Prev: asyncore,  Up: New Improved and Deprecated Modules

1.9.37 tempfile
---------------

The `tempfile' module has a new context manager, `TemporaryDirectory'
which provides easy deterministic cleanup of temporary directories:

    with tempfile.TemporaryDirectory() as tmpdirname:
        print('created temporary dir:', tmpdirname)

(Contributed by Neil Schemenauer and Nick Coghlan; issue 5178(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5178


File: python-whatsnew-3.2.2.info,  Node: inspect,  Next: pydoc,  Prev: tempfile,  Up: New Improved and Deprecated Modules

1.9.38 inspect
--------------

   * The `inspect' module has a new function `getgeneratorstate()' to
     easily identify the current state of a generator-iterator:

         >>> from inspect import getgeneratorstate
         >>> def gen():
                 yield 'demo'
         >>> g = gen()
         >>> getgeneratorstate(g)
         'GEN_CREATED'
         >>> next(g)
         'demo'
         >>> getgeneratorstate(g)
         'GEN_SUSPENDED'
         >>> next(g, None)
         >>> getgeneratorstate(g)
         'GEN_CLOSED'

     (Contributed by Rodolpho Eckhardt and Nick Coghlan, issue
     10220(1).)

   * To support lookups without the possibility of activating a dynamic
     attribute, the `inspect' module has a new function,
     `getattr_static()'.  Unlike `hasattr()', this is a true read-only
     search, guaranteed not to change state while it is searching:

         >>> class A:
                 @property
                 def f(self):
                     print('Running')
                     return 10

         >>> a = A()
         >>> getattr(a, 'f')
         Running
         10
         >>> inspect.getattr_static(a, 'f')
         <property object at 0x1022bd788>



     (Contributed by Michael Foord.)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue10220


File: python-whatsnew-3.2.2.info,  Node: pydoc,  Next: dis,  Prev: inspect,  Up: New Improved and Deprecated Modules

1.9.39 pydoc
------------

The `pydoc' module now provides a much-improved Web server interface, as
well as a new command-line option `-b' to automatically open a browser
window to display that server:

    $ pydoc3.2 -b

(Contributed by Ron Adam; issue 2001(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2001


File: python-whatsnew-3.2.2.info,  Node: dis,  Next: dbm,  Prev: pydoc,  Up: New Improved and Deprecated Modules

1.9.40 dis
----------

The `dis' module gained two new functions for inspecting code,
`code_info()' and `show_code()'.  Both provide detailed code object
information for the supplied function, method, source code string or
code object.  The former returns a string and the latter prints it:

    >>> import dis, random
    >>> dis.show_code(random.choice)
    Name:              choice
    Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py
    Argument count:    2
    Kw-only arguments: 0
    Number of locals:  3
    Stack size:        11
    Flags:             OPTIMIZED, NEWLOCALS, NOFREE
    Constants:
       0: 'Choose a random element from a non-empty sequence.'
       1: 'Cannot choose from an empty sequence'
    Names:
       0: _randbelow
       1: len
       2: ValueError
       3: IndexError
    Variable names:
       0: self
       1: seq
       2: i

In addition, the `dis()' function now accepts string arguments so that
the common idiom `dis(compile(s, '', 'eval'))' can be shortened to
`dis(s)':

    >>> dis('3*x+1 if x%2==1 else x//2')
      1           0 LOAD_NAME                0 (x)
                  3 LOAD_CONST               0 (2)
                  6 BINARY_MODULO
                  7 LOAD_CONST               1 (1)
                 10 COMPARE_OP               2 (==)
                 13 POP_JUMP_IF_FALSE       28
                 16 LOAD_CONST               2 (3)
                 19 LOAD_NAME                0 (x)
                 22 BINARY_MULTIPLY
                 23 LOAD_CONST               1 (1)
                 26 BINARY_ADD
                 27 RETURN_VALUE
            >>   28 LOAD_NAME                0 (x)
                 31 LOAD_CONST               0 (2)
                 34 BINARY_FLOOR_DIVIDE
                 35 RETURN_VALUE

Taken together, these improvements make it easier to explore how
CPython is implemented and to see for yourself what the language syntax
does under-the-hood.

  (Contributed by Nick Coghlan in issue 9147(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9147


File: python-whatsnew-3.2.2.info,  Node: dbm,  Next: ctypes,  Prev: dis,  Up: New Improved and Deprecated Modules

1.9.41 dbm
----------

All database modules now support the `get()' and `setdefault()' methods.

  (Suggested by Ray Allen in issue 9523(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9523


File: python-whatsnew-3.2.2.info,  Node: ctypes,  Next: site,  Prev: dbm,  Up: New Improved and Deprecated Modules

1.9.42 ctypes
-------------

A new type, `ctypes.c_ssize_t' represents the C `ssize_t' datatype.


File: python-whatsnew-3.2.2.info,  Node: site,  Next: sysconfig,  Prev: ctypes,  Up: New Improved and Deprecated Modules

1.9.43 site
-----------

The `site' module has three new functions useful for reporting on the
details of a given Python installation.

   * `getsitepackages()' lists all global site-packages directories.

   * `getuserbase()' reports on the user's base directory where data can
     be stored.

   * `getusersitepackages()' reveals the user-specific site-packages
     directory path.

    >>> import site
    >>> site.getsitepackages()
    ['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',
     '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',
     '/Library/Python/3.2/site-packages']
    >>> site.getuserbase()
    '/Users/raymondhettinger/Library/Python/3.2'
    >>> site.getusersitepackages()
    '/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'

Conveniently, some of site's functionality is accessible directly from
the command-line:

    $ python -m site --user-base
    /Users/raymondhettinger/.local
    $ python -m site --user-site
    /Users/raymondhettinger/.local/lib/python3.2/site-packages

(Contributed by Tarek Ziadé in issue 6693(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6693


File: python-whatsnew-3.2.2.info,  Node: sysconfig,  Next: pdb,  Prev: site,  Up: New Improved and Deprecated Modules

1.9.44 sysconfig
----------------

The new `sysconfig' module makes it straightforward to discover
installation paths and configuration variables that vary across
platforms and installations.

  The module offers access simple access functions for platform and
version information:

   * `get_platform()' returning values like _linux-i586_ or
     _macosx-10.6-ppc_.

   * `get_python_version()' returns a Python version string such as
     "3.2".

  It also provides access to the paths and variables corresponding to
one of seven named schemes used by `distutils'.  Those include
_posix_prefix_, _posix_home_, _posix_user_, _nt_, _nt_user_, _os2_,
_os2_home_:

   * `get_paths()' makes a dictionary containing installation paths for
     the current installation scheme.

   * `get_config_vars()' returns a dictionary of platform specific
     variables.

  There is also a convenient command-line interface:

    C:\Python32>python -m sysconfig
    Platform: "win32"
    Python version: "3.2"
    Current installation scheme: "nt"

    Paths:
            data = "C:\Python32"
            include = "C:\Python32\Include"
            platinclude = "C:\Python32\Include"
            platlib = "C:\Python32\Lib\site-packages"
            platstdlib = "C:\Python32\Lib"
            purelib = "C:\Python32\Lib\site-packages"
            scripts = "C:\Python32\Scripts"
            stdlib = "C:\Python32\Lib"

    Variables:
            BINDIR = "C:\Python32"
            BINLIBDEST = "C:\Python32\Lib"
            EXE = ".exe"
            INCLUDEPY = "C:\Python32\Include"
            LIBDEST = "C:\Python32\Lib"
            SO = ".pyd"
            VERSION = "32"
            abiflags = ""
            base = "C:\Python32"
            exec_prefix = "C:\Python32"
            platbase = "C:\Python32"
            prefix = "C:\Python32"
            projectbase = "C:\Python32"
            py_version = "3.2"
            py_version_nodot = "32"
            py_version_short = "3.2"
            srcdir = "C:\Python32"
            userbase = "C:\Documents and Settings\Raymond\Application Data\Python"

(Moved out of Distutils by Tarek Ziadé.)


File: python-whatsnew-3.2.2.info,  Node: pdb,  Next: configparser,  Prev: sysconfig,  Up: New Improved and Deprecated Modules

1.9.45 pdb
----------

The `pdb' debugger module gained a number of usability improvements:

   * `pdb.py' now has a `-c' option that executes commands as given in a
     `.pdbrc' script file.

   * A `.pdbrc' script file can contain `continue' and `next' commands
     that continue debugging.

   * The `Pdb' class constructor now accepts a _nosigint_ argument.

   * New commands: `l(list)', `ll(long list)' and `source' for listing
     source code.

   * New commands: `display' and `undisplay' for showing or hiding the
     value of an expression if it has changed.

   * New command: `interact' for starting an interactive interpreter
     containing the global and local  names found in the current scope.

   * Breakpoints can be cleared by breakpoint number.

  (Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)


File: python-whatsnew-3.2.2.info,  Node: configparser,  Next: urllib parse,  Prev: pdb,  Up: New Improved and Deprecated Modules

1.9.46 configparser
-------------------

The `configparser' module was modified to improve usability and
predictability of the default parser and its supported INI syntax.  The
old `ConfigParser' class was removed in favor of `SafeConfigParser'
which has in turn been renamed to `ConfigParser'. Support for inline
comments is now turned off by default and section or option duplicates
are not allowed in a single configuration source.

  Config parsers gained a new API based on the mapping protocol:

    >>> parser = ConfigParser()
    >>> parser.read_string("""
    [DEFAULT]
    location = upper left
    visible = yes
    editable = no
    color = blue

    [main]
    title = Main Menu
    color = green

    [options]
    title = Options
    """)
    >>> parser['main']['color']
    'green'
    >>> parser['main']['editable']
    'no'
    >>> section = parser['options']
    >>> section['title']
    'Options'
    >>> section['title'] = 'Options (editable: %(editable)s)'
    >>> section['title']
    'Options (editable: no)'

The new API is implemented on top of the classical API, so custom parser
subclasses should be able to use it without modifications.

  The INI file structure accepted by config parsers can now be
customized. Users can specify alternative option/value delimiters and
comment prefixes, change the name of the _DEFAULT_ section or switch
the interpolation syntax.

  There is support for pluggable interpolation including an additional
interpolation handler `ExtendedInterpolation':

    >>> parser = ConfigParser(interpolation=ExtendedInterpolation())
    >>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},
                          'custom': {'prefix': '/usr/local'}})
    >>> parser.read_string("""
        [buildout]
        parts =
          zope9
          instance
        find-links =
          ${buildout:directory}/downloads/dist

        [zope9]
        recipe = plone.recipe.zope9install
        location = /opt/zope

        [instance]
        recipe = plone.recipe.zope9instance
        zope9-location = ${zope9:location}
        zope-conf = ${custom:prefix}/etc/zope.conf
        """)
    >>> parser['buildout']['find-links']
    '\n/home/ambv/zope9/downloads/dist'
    >>> parser['instance']['zope-conf']
    '/usr/local/etc/zope.conf'
    >>> instance = parser['instance']
    >>> instance['zope-conf']
    '/usr/local/etc/zope.conf'
    >>> instance['zope9-location']
    '/opt/zope'

A number of smaller features were also introduced, like support for
specifying encoding in read operations, specifying fallback values for
get-functions, or reading directly from dictionaries and strings.

  (All changes contributed by Łukasz Langa.)


File: python-whatsnew-3.2.2.info,  Node: urllib parse,  Next: mailbox,  Prev: configparser,  Up: New Improved and Deprecated Modules

1.9.47 urllib.parse
-------------------

A number of usability improvements were made for the `urllib.parse'
module.

  The `urlparse()' function now supports IPv6(1) addresses as described
in RFC 2732(2):

    >>> import urllib.parse
    >>> urllib.parse.urlparse('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/')
    ParseResult(scheme='http',
                netloc='[dead:beef:cafe:5417:affe:8FA3:deaf:feed]',
                path='/foo/',
                params='',
                query='',
                fragment='')

The `urldefrag()' function now returns a _named tuple_:

    >>> r = urllib.parse.urldefrag('http://python.org/about/#target')
    >>> r
    DefragResult(url='http://python.org/about/', fragment='target')
    >>> r[0]
    'http://python.org/about/'
    >>> r.fragment
    'target'

And, the `urlencode()' function is now much more flexible, accepting
either a string or bytes type for the _query_ argument.  If it is a
string, then the _safe_, _encoding_, and _error_ parameters are sent to
`quote_plus()' for encoding:

    >>> urllib.parse.urlencode([
             ('type', 'telenovela'),
             ('name', '¿Dónde Está Elisa?')],
             encoding='latin-1')
    'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'

As detailed in _parsing-ascii-encoded-bytes_, all the `urllib.parse'
functions now accept ASCII-encoded byte strings as input, so long as
they are not mixed with regular strings.  If ASCII-encoded byte strings
are given as parameters, the return types will also be an ASCII-encoded
byte strings:

    >>> urllib.parse.urlparse(b'http://www.python.org:80/about/')
    ParseResultBytes(scheme=b'http', netloc=b'www.python.org:80',
                     path=b'/about/', params=b'', query=b'', fragment=b'')

(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in issue 2987(3),
issue 5468(4), and issue 9873(5).)

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/IPv6

  (2) http://tools.ietf.org/html/rfc2732.html

  (3) http://bugs.python.org/issue2987

  (4) http://bugs.python.org/issue5468

  (5) http://bugs.python.org/issue9873


File: python-whatsnew-3.2.2.info,  Node: mailbox,  Next: turtledemo,  Prev: urllib parse,  Up: New Improved and Deprecated Modules

1.9.48 mailbox
--------------

Thanks to a concerted effort by R. David Murray, the `mailbox' module
has been fixed for Python 3.2.  The challenge was that mailbox had been
originally designed with a text interface, but email messages are best
represented with `bytes' because various parts of a message may have
different encodings.

  The solution harnessed the `email' package's binary support for
parsing arbitrary email messages.  In addition, the solution required a
number of API changes.

  As expected, the `add()' method for `mailbox.Mailbox' objects now
accepts binary input.

  `StringIO' and text file input are deprecated.  Also, string input
will fail early if non-ASCII characters are used.  Previously it would
fail when the email was processed in a later step.

  There is also support for binary output.  The `get_file()' method now
returns a file in the binary mode (where it used to incorrectly set the
file to text-mode).  There is also a new `get_bytes()' method that
returns a `bytes' representation of a message corresponding to a given
_key_.

  It is still possible to get non-binary output using the old API's
`get_string()' method, but that approach is not very useful.  Instead,
it is best to extract messages from a `Message' object or to load them
from binary input.

  (Contributed by R. David Murray, with efforts from Steffen Daode
Nurpmeso and an initial patch by Victor Stinner in issue 9124(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue9124


File: python-whatsnew-3.2.2.info,  Node: turtledemo,  Prev: mailbox,  Up: New Improved and Deprecated Modules

1.9.49 turtledemo
-----------------

The demonstration code for the `turtle' module was moved from the _Demo_
directory to main library.  It includes over a dozen sample scripts with
lively displays.  Being on `sys.path', it can now be run directly from
the command-line:

    $ python -m turtledemo

(Moved from the Demo directory by Alexander Belopolsky in issue
10199(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue10199


File: python-whatsnew-3.2.2.info,  Node: Multi-threading,  Next: Optimizations,  Prev: New Improved and Deprecated Modules,  Up: What's New In Python 3 2

1.10 Multi-threading
====================

   * The mechanism for serializing execution of concurrently running
     Python threads (generally known as the _GIL_ or _Global
     Interpreter Lock_) has been rewritten.  Among the objectives were
     more predictable switching intervals and reduced overhead due to
     lock contention and the number of ensuing system calls.  The
     notion of a "check interval" to allow thread switches has been
     abandoned and replaced by an absolute duration expressed in
     seconds.  This parameter is tunable through
     `sys.setswitchinterval()'.  It currently defaults to 5
     milliseconds.

     Additional details about the implementation can be read from a
     python-dev mailing-list message(1) (however, "priority requests"
     as exposed in this message have not been kept for inclusion).

     (Contributed by Antoine Pitrou.)

   * Regular and recursive locks now accept an optional _timeout_
     argument to their `acquire()' method.  (Contributed by Antoine
     Pitrou; issue 7316(2).)

   * Similarly, `threading.Semaphore.acquire()' also gained a _timeout_
     argument.  (Contributed by Torsten Landschoff; issue 850728(3).)

   * Regular and recursive lock acquisitions can now be interrupted by
     signals on platforms using Pthreads.  This means that Python
     programs that deadlock while acquiring locks can be successfully
     killed by repeatedly sending SIGINT to the process (by pressing
     `Ctrl+C' in most shells).  (Contributed by Reid Kleckner; issue
     8844(4).)

  ---------- Footnotes ----------

  (1)
http://mail.python.org/pipermail/python-dev/2009-October/093321.html

  (2) http://bugs.python.org/issue7316

  (3) http://bugs.python.org/issue850728

  (4) http://bugs.python.org/issue8844


File: python-whatsnew-3.2.2.info,  Node: Optimizations,  Next: Unicode,  Prev: Multi-threading,  Up: What's New In Python 3 2

1.11 Optimizations
==================

A number of small performance enhancements have been added:

   * Python's peephole optimizer now recognizes patterns such `x in {1,
     2, 3}' as being a test for membership in a set of constants.  The
     optimizer recasts the `set' as a `frozenset' and stores the
     pre-built constant.

     Now that the speed penalty is gone, it is practical to start
     writing membership tests using set-notation.  This style is both
     semantically clear and operationally fast:

         extension = name.rpartition('.')[2]
         if extension in {'xml', 'html', 'xhtml', 'css'}:
             handle(name)

     (Patch and additional tests contributed by Dave Malcolm; issue
     6690(1)).

   * Serializing and unserializing data using the `pickle' module is now
     several times faster.

     (Contributed by Alexandre Vassalotti, Antoine Pitrou and the
     Unladen Swallow team in issue 9410(2) and issue 3873(3).)

   * The Timsort algorithm(4) used in `list.sort()' and `sorted()' now
     runs faster and uses less memory when called with a _key
     function_.  Previously, every element of a list was wrapped with a
     temporary object that remembered the key value associated with
     each element.  Now, two arrays of keys and values are sorted in
     parallel.  This saves the memory consumed by the sort wrappers,
     and it saves time lost to delegating comparisons.

     (Patch by Daniel Stutzbach in issue 9915(5).)

   * JSON decoding performance is improved and memory consumption is
     reduced whenever the same string is repeated for multiple keys.
     Also, JSON encoding now uses the C speedups when the `sort_keys'
     argument is true.

     (Contributed by Antoine Pitrou in issue 7451(6) and by Raymond
     Hettinger and Antoine Pitrou in issue 10314(7).)

   * Recursive locks (created with the `threading.RLock()' API) now
     benefit from a C implementation which makes them as fast as
     regular locks, and between 10x and 15x faster than their previous
     pure Python implementation.

     (Contributed by Antoine Pitrou; issue 3001(8).)

   * The fast-search algorithm in stringlib is now used by the
     `split()', `splitlines()' and `replace()' methods on `bytes',
     `bytearray' and `str' objects. Likewise, the algorithm is also
     used by `rfind()', `rindex()', `rsplit()' and `rpartition()'.

     (Patch by Florent Xicluna in issue 7622(9) and issue 7462(10).)

   * String to integer conversions now work two "digits" at a time,
     reducing the number of division and modulo operations.

     (issue 6713(11) by Gawain Bolton, Mark Dickinson, and Victor
     Stinner.)

  There were several other minor optimizations. Set differencing now
runs faster when one operand is much larger than the other (patch by
Andress Bennetts in issue 8685(12)).  The `array.repeat()' method has a
faster implementation (issue 1569291(13) by Alexander Belopolsky). The
`BaseHTTPRequestHandler' has more efficient buffering (issue 3709(14)
by Andrew Schaaf).  The `operator.attrgetter()' function has been
sped-up (issue 10160(15) by Christos Georgiou).  And `ConfigParser'
loads multi-line arguments a bit faster (issue 7113(16) by Łukasz
Langa).

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6690

  (2) http://bugs.python.org/issue9410

  (3) http://bugs.python.org/issue3873

  (4) http://en.wikipedia.org/wiki/Timsort

  (5) http://bugs.python.org/issue9915

  (6) http://bugs.python.org/issue7451

  (7) http://bugs.python.org/issue10314

  (8) http://bugs.python.org/issue3001

  (9) http://bugs.python.org/issue7622

  (10) http://bugs.python.org/issue7462

  (11) http://bugs.python.org/issue6713

  (12) http://bugs.python.org/issue8685

  (13) http://bugs.python.org/issue1569291

  (14) http://bugs.python.org/issue3709

  (15) http://bugs.python.org/issue10160

  (16) http://bugs.python.org/issue7113


File: python-whatsnew-3.2.2.info,  Node: Unicode,  Next: Codecs,  Prev: Optimizations,  Up: What's New In Python 3 2

1.12 Unicode
============

Python has been updated to Unicode 6.0.0(1).  The update to the
standard adds over 2,000 new characters including emoji(2) symbols
which are important for mobile phones.

  In addition, the updated standard has altered the character
properties for two Kannada characters (U+0CF1, U+0CF2) and one New Tai
Lue numeric character (U+19DA), making the former eligible for use in
identifiers while disqualifying the latter.  For more information, see
Unicode Character Database Changes(3).

  ---------- Footnotes ----------

  (1) http://unicode.org/versions/Unicode6.0.0/

  (2) http://en.wikipedia.org/wiki/Emoji

  (3) http://www.unicode.org/versions/Unicode6.0.0/#Database_Changes


File: python-whatsnew-3.2.2.info,  Node: Codecs,  Next: Documentation,  Prev: Unicode,  Up: What's New In Python 3 2

1.13 Codecs
===========

Support was added for _cp720_ Arabic DOS encoding (issue 1616979(1)).

  MBCS encoding no longer ignores the error handler argument. In the
default strict mode, it raises an `UnicodeDecodeError' when it
encounters an undecodable byte sequence and an `UnicodeEncodeError' for
an unencodable character.

  The MBCS codec supports `'strict'' and `'ignore'' error handlers for
decoding, and `'strict'' and `'replace'' for encoding.

  To emulate Python3.1 MBCS encoding, select the `'ignore'' handler for
decoding and the `'replace'' handler for encoding.

  On Mac OS X, Python decodes command line arguments with `'utf-8''
rather than the locale encoding.

  By default, `tarfile' uses `'utf-8'' encoding on Windows (instead of
`'mbcs'') and the `'surrogateescape'' error handler on all operating
systems.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1616979


File: python-whatsnew-3.2.2.info,  Node: Documentation,  Next: IDLE,  Prev: Codecs,  Up: What's New In Python 3 2

1.14 Documentation
==================

The documentation continues to be improved.

   * A table of quick links has been added to the top of lengthy
     sections such as _built-in-funcs_.  In the case of `itertools',
     the links are accompanied by tables of cheatsheet-style summaries
     to provide an overview and memory jog without having to read all
     of the docs.

   * In some cases, the pure Python source code can be a helpful
     adjunct to the documentation, so now many modules now feature
     quick links to the latest version of the source code.  For
     example, the `functools' module documentation has a quick link at
     the top labeled:

          *Source code* Lib/functools.py(1).

     (Contributed by Raymond Hettinger; see rationale(2).)

   * The docs now contain more examples and recipes.  In particular,
     `re' module has an extensive section, _re-examples_.  Likewise, the
     `itertools' module continues to be updated with new
     _itertools-recipes_.

   * The `datetime' module now has an auxiliary implementation in pure
     Python.  No functionality was changed.  This just provides an
     easier-to-read alternate implementation.

     (Contributed by Alexander Belopolsky in issue 9528(3).)

   * The unmaintained `Demo' directory has been removed.  Some demos
     were integrated into the documentation, some were moved to the
     `Tools/demo' directory, and others were removed altogether.

     (Contributed by Georg Brandl in issue 7962(4).)

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/3.2/Lib/functools.py

  (2) http://rhettinger.wordpress.com/2011/01/28/open-your-source-more/

  (3) http://bugs.python.org/issue9528

  (4) http://bugs.python.org/issue7962


File: python-whatsnew-3.2.2.info,  Node: IDLE,  Next: Code Repository,  Prev: Documentation,  Up: What's New In Python 3 2

1.15 IDLE
=========

   * The format menu now has an option to clean source files by
     stripping trailing whitespace.

     (Contributed by Raymond Hettinger; issue 5150(1).)

   * IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa
     AquaTk.

     (Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren;
     issue 6075(2).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5150

  (2) http://bugs.python.org/issue6075


File: python-whatsnew-3.2.2.info,  Node: Code Repository,  Next: Build and C API Changes,  Prev: IDLE,  Up: What's New In Python 3 2

1.16 Code Repository
====================

In addition to the existing Subversion code repository at
<http://svn.python.org> there is now a Mercurial(1) repository at
<http://hg.python.org/>.

  After the 3.2 release, there are plans to switch to Mercurial as the
primary repository.  This distributed version control system should
make it easier for members of the community to create and share
external changesets.  See PEP 385(2) for details.

  To learn the new version control system, see the tutorial by Joel
Spolsky(3) or the Guide to Mercurial Workflows(4).

  ---------- Footnotes ----------

  (1) http://mercurial.selenic.com/

  (2) http://www.python.org/dev/peps/pep-0385

  (3) http://hginit.com

  (4) http://mercurial.selenic.com/guide/


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes,  Next: Porting to Python 3 2,  Prev: Code Repository,  Up: What's New In Python 3 2

1.17 Build and C API Changes
============================

Changes to Python's build process and to the C API include:

   * The _idle_, _pydoc_ and _2to3_ scripts are now installed with a
     version-specific suffix on `make altinstall' (issue 10679(1)).

   * The C functions that access the Unicode Database now accept and
     return characters from the full Unicode range, even on narrow
     unicode builds (Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and
     others).  A visible difference in Python is that
     `unicodedata.numeric()' now returns the correct value for large
     code points, and `repr()' may consider more characters as
     printable.

     (Reported by Bupjoe Lee and fixed by Amaury Forgeot D'Arc; issue
     5127(2).)

   * Computed gotos are now enabled by default on supported compilers
     (which are detected by the configure script).  They can still be
     disabled selectively by specifying `--without-computed-gotos'.

     (Contributed by Antoine Pitrou; issue 9203(3).)

   * The option `--with-wctype-functions' was removed.  The built-in
     unicode database is now used for all functions.

     (Contributed by Amaury Forgeot D'Arc; issue 9210(4).)

   * Hash values are now values of a new type, `Py_hash_t', which is
     defined to be the same size as a pointer.  Previously they were of
     type long, which on some 64-bit operating systems is still only 32
     bits long.  As a result of this fix, `set' and `dict' can now hold
     more than `2**32' entries on builds with 64-bit pointers
     (previously, they could grow to that size but their performance
     degraded catastrophically).

     (Suggested by Raymond Hettinger and implemented by Benjamin
     Peterson; issue 9778(5).)

   * A new macro `Py_VA_COPY' copies the state of the variable argument
     list.  It is equivalent to C99 _va_copy_ but available on all
     Python platforms (issue 2443(6)).

   * A new C API function `PySys_SetArgvEx()' allows an embedded
     interpreter to set `sys.argv' without also modifying `sys.path'
     (issue 5753(7)).

   * `PyEval_CallObject' is now only available in macro form.  The
     function declaration, which was kept for backwards compatibility
     reasons, is now removed - the macro was introduced in 1997 (issue
     8276(8)).

   * There is a new function `PyLong_AsLongLongAndOverflow()' which is
     analogous to `PyLong_AsLongAndOverflow()'.  They both serve to
     convert Python `int' into a native fixed-width type while providing
     detection of cases where the conversion won't fit (issue 7767(9)).

   * The `PyUnicode_CompareWithASCIIString()' function now returns _not
     equal_ if the Python string is _NUL_ terminated.

   * There is a new function `PyErr_NewExceptionWithDoc()' that is like
     `PyErr_NewException()' but allows a docstring to be specified.
     This lets C exceptions have the same self-documenting capabilities
     as their pure Python counterparts (issue 7033(10)).

   * When compiled with the `--with-valgrind' option, the pymalloc
     allocator will be automatically disabled when running under
     Valgrind.  This gives improved memory leak detection when running
     under Valgrind, while taking advantage of pymalloc at other times
     (issue 2422(11)).

   * Removed the `O?' format from the _PyArg_Parse_ functions.  The
     format is no longer used and it had never been documented (issue
     8837(12)).

  There were a number of other small changes to the C-API.  See the
Misc/NEWS(13) file for a complete list.

  Also, there were a number of updates to the Mac OS X build, see
Mac/BuildScript/README.txt(14) for details.  For users running a
32/64-bit build, there is a known problem with the default Tcl/Tk on
Mac OS X 10.6.  Accordingly, we recommend installing an updated
alternative such as ActiveState Tcl/Tk 8.5.9(15).  See
<http://www.python.org/download/mac/tcltk/> for additional details.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue10679

  (2) http://bugs.python.org/issue5127

  (3) http://bugs.python.org/issue9203

  (4) http://bugs.python.org/issue9210

  (5) http://bugs.python.org/issue9778

  (6) http://bugs.python.org/issue2443

  (7) http://bugs.python.org/issue5753

  (8) http://bugs.python.org/issue8276

  (9) http://bugs.python.org/issue7767

  (10) http://bugs.python.org/issue7033

  (11) http://bugs.python.org/issue2422

  (12) http://bugs.python.org/issue8837

  (13) http://hg.python.org/cpython/file/3.2/Misc/NEWS

  (14) http://hg.python.org/cpython/file/3.2/Mac/BuildScript/README.txt

  (15) http://www.activestate.com/activetcl/downloads


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 3 2,  Prev: Build and C API Changes,  Up: What's New In Python 3 2

1.18 Porting to Python 3.2
==========================

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The `configparser' module has a number of clean-ups.  The major
     change is to replace the old `ConfigParser' class with
     long-standing preferred alternative `SafeConfigParser'.  In
     addition there are a number of smaller incompatibilities:

        * The interpolation syntax is now validated on `get()' and
          `set()' operations. In the default interpolation scheme, only
          two tokens with percent signs are valid: `%(name)s' and `%%',
          the latter being an escaped percent sign.

        * The `set()' and `add_section()' methods now verify that
          values are actual strings.  Formerly, unsupported types could
          be introduced unintentionally.

        * Duplicate sections or options from a single source now raise
          either `DuplicateSectionError' or `DuplicateOptionError'.
          Formerly, duplicates would silently overwrite a previous
          entry.

        * Inline comments are now disabled by default so now the *;*
          character can be safely used in values.

        * Comments now can be indented.  Consequently, for *;* or *#*
          to appear at the start of a line in multiline values, it has
          to be interpolated.  This keeps comment prefix characters in
          values from being mistaken as comments.

        * `""' is now a valid value and is no longer automatically
          converted to an empty string. For empty strings, use `"option
          ="' in a line.

   * The `nntplib' module was reworked extensively, meaning that its
     APIs are often incompatible with the 3.1 APIs.

   * `bytearray' objects can no longer be used as filenames; instead,
     they should be converted to `bytes'.

   * The `array.tostring()' and `array.fromstring()' have been renamed
     to `array.tobytes()' and `array.frombytes()' for clarity.  The old
     names have been deprecated. (See issue 8990(1).)

   * `PyArg_Parse*()' functions:

        * "t#" format has been removed: use "s#" or "s*" instead

        * "w" and "w#" formats has been removed: use "w*" instead

   * The `PyCObject' type, deprecated in 3.1, has been removed.  To wrap
     opaque C pointers in Python objects, the `PyCapsule' API should be
     used instead; the new type has a well-defined interface for
     passing typing safety information and a less complicated signature
     for calling a destructor.

   * The `sys.setfilesystemencoding()' function was removed because it
     had a flawed design.

   * The `random.seed()' function and method now salt string seeds with
     an sha512 hash function.  To access the previous version of _seed_
     in order to reproduce Python 3.1 sequences, set the _version_
     argument to _1_, `random.seed(s, version=1)'.

   * The previously deprecated `string.maketrans()' function has been
     removed in favor of the static methods `bytes.maketrans()' and
     `bytearray.maketrans()'.  This change solves the confusion around
     which types were supported by the `string' module.  Now, `str',
     `bytes', and `bytearray' each have their own *maketrans* and
     *translate* methods with intermediate translation tables of the
     appropriate type.

     (Contributed by Georg Brandl; issue 5675(2).)

   * The previously deprecated `contextlib.nested()' function has been
     removed in favor of a plain `with' statement which can accept
     multiple context managers.  The latter technique is faster
     (because it is built-in), and it does a better job finalizing
     multiple context managers when one of them raises an exception:

         with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
             for line in infile:
                 if '<critical>' in line:
                     outfile.write(line)

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(3).)

   * `struct.pack()' now only allows bytes for the `s' string pack code.
     Formerly, it would accept text arguments and implicitly encode
     them to bytes using UTF-8.  This was problematic because it made
     assumptions about the correct encoding and because a
     variable-length encoding can fail when writing to fixed length
     segment of a structure.

     Code such as `struct.pack('<6sHHBBB', 'GIF87a', x, y)' should be
     rewritten with to use bytes instead of text,
     `struct.pack('<6sHHBBB', b'GIF87a', x, y)'.

     (Discovered by David Beazley and fixed by Victor Stinner; issue
     10783(4).)

   * The `xml.etree.ElementTree' class now raises an
     `xml.etree.ElementTree.ParseError' when a parse fails. Previously
     it raised a `xml.parsers.expat.ExpatError'.

   * The new, longer `str()' value on floats may break doctests which
     rely on the old output format.

   * In `subprocess.Popen', the default value for _close_fds_ is now
     `True' under Unix; under Windows, it is `True' if the three
     standard streams are set to `None', `False' otherwise.
     Previously, _close_fds_ was always `False' by default, which
     produced difficult to solve bugs or race conditions when open file
     descriptors would leak into the child process.

   * Support for legacy HTTP 0.9 has been removed from `urllib.request'
     and `http.client'.  Such support is still present on the server
     side (in `http.server').

     (Contributed by Antoine Pitrou, issue 10711(5).)

   * SSL sockets in timeout mode now raise `socket.timeout' when a
     timeout occurs, rather than a generic `SSLError'.

     (Contributed by Antoine Pitrou, issue 10272(6).)

   * The misleading functions `PyEval_AcquireLock()' and
     `PyEval_ReleaseLock()' have been officially deprecated.  The
     thread-state aware APIs (such as `PyEval_SaveThread()' and
     `PyEval_RestoreThread()') should be used instead.

   * Due to security risks, `asyncore.handle_accept()' has been
     deprecated, and a new function, `asyncore.handle_accepted()', was
     added to replace it.

     (Contributed by Giampaolo Rodola in issue 6706(7).)

   * Due to the new _GIL_ implementation, `PyEval_InitThreads()' cannot
     be called before `Py_Initialize()' anymore.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8990

  (2) http://bugs.python.org/issue5675

  (3) http://codereview.appspot.com/53094

  (4) http://bugs.python.org/issue10783

  (5) http://bugs.python.org/issue10711

  (6) http://bugs.python.org/issue10272

  (7) http://bugs.python.org/issue6706


File: python-whatsnew-3.2.2.info,  Node: What's New In Python 3 1,  Next: What's New In Python 3 0,  Prev: What's New In Python 3 2,  Up: Top

2 What's New In Python 3.1
**************************

     Author: Raymond Hettinger

     Release: 3.2.2

     Date: February 10, 2012

  This article explains the new features in Python 3.1, compared to 3.0.

* Menu:

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator.
* Other Language Changes: Other Language Changes<2>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>.
* Optimizations: Optimizations<2>.
* IDLE: IDLE<2>.
* Build and C API Changes: Build and C API Changes<2>.
* Porting to Python 3.1: Porting to Python 3 1.


File: python-whatsnew-3.2.2.info,  Node: PEP 372 Ordered Dictionaries,  Next: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

2.1 PEP 372: Ordered Dictionaries
=================================

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, a new
`collections.OrderedDict' class has been introduced.

  The OrderedDict API is substantially the same as regular dictionaries
but will iterate over keys and values in a guaranteed order depending on
when a key was first inserted.  If a new entry overwrites an existing
entry, the original insertion position is left unchanged.  Deleting an
entry and reinserting it will move it to the end.

  The standard library now supports use of ordered dictionaries in
several modules.  The `configparser' module uses them by default.  This
lets configuration files be read, modified, and then written back in
their original order.  The __asdict()_ method for
`collections.namedtuple()' now returns an ordered dictionary with the
values appearing in the same order as the underlying tuple indicies.
The `json' module is being built-out with an _object_pairs_hook_ to
allow OrderedDicts to be built by the decoder.  Support was also added
for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Ordered Dictionaries
     PEP written by Armin Ronacher and Raymond Hettinger.
     Implementation written by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://pyyaml.org/

  (2) http://www.python.org/dev/peps/pep-0372


File: python-whatsnew-3.2.2.info,  Node: PEP 378 Format Specifier for Thousands Separator,  Next: Other Language Changes<2>,  Prev: PEP 372 Ordered Dictionaries,  Up: What's New In Python 3 1

2.2 PEP 378: Format Specifier for Thousands Separator
=====================================================

The built-in `format()' function and the `str.format()' method use a
mini-language that now includes a simple, non-locale aware way to format
a number with a thousands separator.  That provides a way to humanize a
program's output, improving its professional appearance and readability:

    >>> format(1234567, ',d')
    '1,234,567'
    >>> format(1234567.89, ',.2f')
    '1,234,567.89'
    >>> format(12345.6 + 8901234.12j, ',f')
    '12,345.600000+8,901,234.120000j'
    >>> format(Decimal('1234567.89'), ',f')
    '1,234,567.89'

The supported types are `int', `float', `complex' and `decimal.Decimal'.

  Discussions are underway about how to specify alternative separators
like dots, spaces, apostrophes, or underscores.  Locale-aware
applications should use the existing _n_ format specifier which already
has some support for thousands separators.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator
     PEP written by Raymond Hettinger and implemented by Eric Smith and
     Mark Dickinson.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0378


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<2>,  Next: New Improved and Deprecated Modules<2>,  Prev: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

2.3 Other Language Changes
==========================

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a `__main__.py' file can
     now be executed directly by passing their name to the interpreter.
     The directory/zipfile is automatically inserted as the first entry
     in sys.path.  (Suggestion and initial patch by Andy Chu; revised
     patch by Phillip J. Eby and Nick Coghlan; issue 1739468(1).)

   * The `int()' type gained a `bit_length' method that returns the
     number of bits necessary to represent its argument in binary:

         >>> n = 37
         >>> bin(37)
         '0b100101'
         >>> n.bit_length()
         6
         >>> n = 2**123-1
         >>> n.bit_length()
         123
         >>> (n+1).bit_length()
         124

     (Contributed by Fredrik Johansson, Victor Stinner, Raymond
     Hettinger, and Mark Dickinson; issue 3439(2).)

   * The fields in `format()' strings can now be automatically numbered:

         >>> 'Sir {} of {}'.format('Gallahad', 'Camelot')
         'Sir Gallahad of Camelot'

     Formerly, the string would have required numbered fields such as:
     `'Sir {0} of {1}''.

     (Contributed by Eric Smith; issue 5237(3).)

   * The `string.maketrans()' function is deprecated and is replaced by
     new static methods, `bytes.maketrans()' and
     `bytearray.maketrans()'.  This change solves the confusion around
     which types were supported by the `string' module. Now, `str',
     `bytes', and `bytearray' each have their own *maketrans* and
     *translate* methods with intermediate translation tables of the
     appropriate type.

     (Contributed by Georg Brandl; issue 5675(4).)

   * The syntax of the `with' statement now allows multiple context
     managers in a single statement:

         >>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
         ...     for line in infile:
         ...         if '<critical>' in line:
         ...             outfile.write(line)

     With the new syntax, the `contextlib.nested()' function is no
     longer needed and is now deprecated.

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(5).)

   * `round(x, n)' now returns an integer if _x_ is an integer.
     Previously it returned a float:

         >>> round(1123, -2)
         1100

     (Contributed by Mark Dickinson; issue 4707(6).)

   * Python now uses David Gay's algorithm for finding the shortest
     floating point representation that doesn't change its value.  This
     should help mitigate some of the confusion surrounding binary
     floating point numbers.

     The significance is easily seen with a number like `1.1' which
     does not have an exact equivalent in binary floating point.  Since
     there is no exact equivalent, an expression like `float('1.1')'
     evaluates to the nearest representable value which is
     `0x1.199999999999ap+0' in hex or
     `1.100000000000000088817841970012523233890533447265625' in
     decimal. That nearest value was and still is used in subsequent
     floating point calculations.

     What is new is how the number gets displayed.  Formerly, Python
     used a simple approach.  The value of `repr(1.1)' was computed as
     `format(1.1, '.17g')' which evaluated to `'1.1000000000000001''.
     The advantage of using 17 digits was that it relied on IEEE-754
     guarantees to assure that `eval(repr(1.1))' would round-trip
     exactly to its original value.  The disadvantage is that many
     people found the output to be confusing (mistaking intrinsic
     limitations of binary floating point representation as being a
     problem with Python itself).

     The new algorithm for `repr(1.1)' is smarter and returns `'1.1''.
     Effectively, it searches all equivalent string representations
     (ones that get stored with the same underlying float value) and
     returns the shortest representation.

     The new algorithm tends to emit cleaner representations when
     possible, but it does not change the underlying values.  So, it is
     still the case that `1.1 + 2.2 != 3.3' even though the
     representations may suggest otherwise.

     The new algorithm depends on certain features in the underlying
     floating point implementation.  If the required features are not
     found, the old algorithm will continue to be used.  Also, the text
     pickle protocols assure cross-platform portability by using the
     old algorithm.

     (Contributed by Eric Smith and Mark Dickinson; issue 1580(7))

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1739468

  (2) http://bugs.python.org/issue3439

  (3) http://bugs.python.org/issue5237

  (4) http://bugs.python.org/issue5675

  (5) http://codereview.appspot.com/53094

  (6) http://bugs.python.org/issue4707

  (7) http://bugs.python.org/issue1580


File: python-whatsnew-3.2.2.info,  Node: New Improved and Deprecated Modules<2>,  Next: Optimizations<2>,  Prev: Other Language Changes<2>,  Up: What's New In Python 3 1

2.4 New, Improved, and Deprecated Modules
=========================================

   * Added a `collections.Counter' class to support convenient counting
     of unique items in a sequence or iterable:

         >>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
         Counter({'blue': 3, 'red': 2, 'green': 1})

     (Contributed by Raymond Hettinger; issue 1696199(1).)

   * Added a new module, `tkinter.ttk' for access to the Tk themed
     widget set.  The basic idea of ttk is to separate, to the extent
     possible, the code implementing a widget's behavior from the code
     implementing its appearance.

     (Contributed by Guilherme Polo; issue 2983(2).)

   * The `gzip.GzipFile' and `bz2.BZ2File' classes now support the
     context manager protocol:

         >>> # Automatically close file after writing
         >>> with gzip.GzipFile(filename, "wb") as f:
         ...     f.write(b"xxx")

     (Contributed by Antoine Pitrou.)

   * The `decimal' module now supports methods for creating a decimal
     object from a binary `float'.  The conversion is exact but can
     sometimes be surprising:

         >>> Decimal.from_float(1.1)
         Decimal('1.100000000000000088817841970012523233890533447265625')

     The long decimal result shows the actual binary fraction being
     stored for _1.1_.  The fraction has many digits because _1.1_
     cannot be exactly represented in binary.

     (Contributed by Raymond Hettinger and Mark Dickinson.)

   * The `itertools' module grew two new functions.  The
     `itertools.combinations_with_replacement()' function is one of
     four for generating combinatorics including permutations and
     Cartesian products.  The `itertools.compress()' function mimics
     its namesake from APL.  Also, the existing `itertools.count()'
     function now has an optional _step_ argument and can accept any
     type of counting sequence including `fractions.Fraction' and
     `decimal.Decimal':

         >>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]
         ['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']

         >>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))
         [2, 3, 5, 7]

         >>> c = count(start=Fraction(1,2), step=Fraction(1,6))
         >>> [next(c), next(c), next(c), next(c)]
         [Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]

     (Contributed by Raymond Hettinger.)

   * `collections.namedtuple()' now supports a keyword argument
     _rename_ which lets invalid fieldnames be automatically converted
     to positional names in the form _0, _1, etc.  This is useful when
     the field names are being created by an external source such as a
     CSV header, SQL field list, or user input:

         >>> query = input()
         SELECT region, dept, count(*) FROM main GROUPBY region, dept

         >>> cursor.execute(query)
         >>> query_fields = [desc[0] for desc in cursor.description]
         >>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)
         >>> pprint.pprint([UserQuery(*row) for row in cursor])
         [UserQuery(region='South', dept='Shipping', _2=185),
          UserQuery(region='North', dept='Accounting', _2=37),
          UserQuery(region='West', dept='Sales', _2=419)]

     (Contributed by Raymond Hettinger; issue 1818(3).)

   * The `re.sub()', `re.subn()' and `re.split()' functions now accept
     a flags parameter.

     (Contributed by Gregory Smith.)

   * The `logging' module now implements a simple `logging.NullHandler'
     class for applications that are not using logging but are calling
     library code that does.  Setting-up a null handler will suppress
     spurious warnings such as "No handlers could be found for logger
     foo":

         >>> h = logging.NullHandler()
         >>> logging.getLogger("foo").addHandler(h)

     (Contributed by Vinay Sajip; issue 4384(4)).

   * The `runpy' module which supports the `-m' command line switch now
     supports the execution of packages by looking for and executing a
     `__main__' submodule when a package name is supplied.

     (Contributed by Andi Vajda; issue 4195(5).)

   * The `pdb' module can now access and display source code loaded via
     `zipimport' (or any other conformant PEP 302(6) loader).

     (Contributed by Alexander Belopolsky; issue 4201(7).)

   * `functools.partial' objects can now be pickled.

     (Suggested by Antoine Pitrou and Jesse Noller.  Implemented by
     Jack Diederich; issue 5228(8).)

   * Add `pydoc' help topics for symbols so that `help('@')' works as
     expected in the interactive environment.

     (Contributed by David Laban; issue 4739(9).)

   * The `unittest' module now supports skipping individual tests or
     classes of tests. And it supports marking a test as a expected
     failure, a test that is known to be broken, but shouldn't be
     counted as a failure on a TestResult:

         class TestGizmo(unittest.TestCase):

             @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
             def test_gizmo_on_windows(self):
                 ...

             @unittest.expectedFailure
             def test_gimzo_without_required_library(self):
                 ...

     Also, tests for exceptions have been builtout to work with context
     managers using the `with' statement:

         def test_division_by_zero(self):
             with self.assertRaises(ZeroDivisionError):
                 x / 0

     In addition, several new assertion methods were added including
     `assertSetEqual()', `assertDictEqual()',
     `assertDictContainsSubset()', `assertListEqual()',
     `assertTupleEqual()', `assertSequenceEqual()',
     `assertRaisesRegexp()', `assertIsNone()', and `assertIsNotNone()'.

     (Contributed by Benjamin Peterson and Antoine Pitrou.)

   * The `io' module has three new constants for the `seek()' method
     `SEEK_SET', `SEEK_CUR', and `SEEK_END'.

   * The `sys.version_info' tuple is now a named tuple:

         >>> sys.version_info
         sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)

     (Contributed by Ross Light; issue 4285(10).)

   * The `nntplib' and `imaplib' modules now support IPv6.

     (Contributed by Derek Morr; issue 1655(11) and issue 1664(12).)

   * The `pickle' module has been adapted for better interoperability
     with Python 2.x when used with protocol 2 or lower.  The
     reorganization of the standard library changed the formal
     reference for many objects.  For example, `__builtin__.set' in
     Python 2 is called `builtins.set' in Python 3. This change
     confounded efforts to share data between different versions of
     Python.  But now when protocol 2 or lower is selected, the pickler
     will automatically use the old Python 2 names for both loading and
     dumping. This remapping is turned-on by default but can be
     disabled with the _fix_imports_ option:

         >>> s = {1, 2, 3}
         >>> pickle.dumps(s, protocol=0)
         b'c__builtin__\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'
         >>> pickle.dumps(s, protocol=0, fix_imports=False)
         b'cbuiltins\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'

     An unfortunate but unavoidable side-effect of this change is that
     protocol 2 pickles produced by Python 3.1 won't be readable with
     Python 3.0. The latest pickle protocol, protocol 3, should be used
     when migrating data between Python 3.x implementations, as it
     doesn't attempt to remain compatible with Python 2.x.

     (Contributed by Alexandre Vassalotti and Antoine Pitrou, issue
     6137(13).)

   * A new module, `importlib' was added.  It provides a complete,
     portable, pure Python reference implementation of the `import'
     statement and its counterpart, the `__import__()' function.  It
     represents a substantial step forward in documenting and defining
     the actions that take place during imports.

     (Contributed by Brett Cannon.)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1696199

  (2) http://bugs.python.org/issue2983

  (3) http://bugs.python.org/issue1818

  (4) http://bugs.python.org/issue4384

  (5) http://bugs.python.org/issue4195

  (6) http://www.python.org/dev/peps/pep-0302

  (7) http://bugs.python.org/issue4201

  (8) http://bugs.python.org/issue5228

  (9) http://bugs.python.org/issue4739

  (10) http://bugs.python.org/issue4285

  (11) http://bugs.python.org/issue1655

  (12) http://bugs.python.org/issue1664

  (13) http://bugs.python.org/issue6137


File: python-whatsnew-3.2.2.info,  Node: Optimizations<2>,  Next: IDLE<2>,  Prev: New Improved and Deprecated Modules<2>,  Up: What's New In Python 3 1

2.5 Optimizations
=================

Major performance enhancements have been added:

   * The new I/O library (as defined in PEP 3116(1)) was mostly written
     in Python and quickly proved to be a problematic bottleneck in
     Python 3.0.  In Python 3.1, the I/O library has been entirely
     rewritten in C and is 2 to 20 times faster depending on the task
     at hand. The pure Python version is still available for
     experimentation purposes through the `_pyio' module.

     (Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)

   * Added a heuristic so that tuples and dicts containing only
     untrackable objects are not tracked by the garbage collector. This
     can reduce the size of collections and therefore the garbage
     collection overhead on long-running programs, depending on their
     particular use of datatypes.

     (Contributed by Antoine Pitrou, issue 4688(2).)

   * Enabling a configure option named `--with-computed-gotos' on
     compilers that support it (notably: gcc, SunPro, icc), the bytecode
     evaluation loop is compiled with a new dispatch mechanism which
     gives speedups of up to 20%, depending on the system, the
     compiler, and the benchmark.

     (Contributed by Antoine Pitrou along with a number of other
     participants, issue 4753(3)).

   * The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times
     faster.

     (Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, issue
     4868(4).)

   * The `json' module now has a C extension to substantially improve
     its performance.  In addition, the API was modified so that json
     works only with `str', not with `bytes'.  That change makes the
     module closely match the JSON specification(5) which is defined in
     terms of Unicode.

     (Contributed by Bob Ippolito and converted to Py3.1 by Antoine
     Pitrou and Benjamin Peterson; issue 4136(6).)

   * Unpickling now interns the attribute names of pickled objects.
     This saves memory and allows pickles to be smaller.

     (Contributed by Jake McGuire and Antoine Pitrou; issue 5084(7).)

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3116

  (2) http://bugs.python.org/issue4688

  (3) http://bugs.python.org/issue4753

  (4) http://bugs.python.org/issue4868

  (5) http://json.org/

  (6) http://bugs.python.org/issue4136

  (7) http://bugs.python.org/issue5084


File: python-whatsnew-3.2.2.info,  Node: IDLE<2>,  Next: Build and C API Changes<2>,  Prev: Optimizations<2>,  Up: What's New In Python 3 1

2.6 IDLE
========

   * IDLE's format menu now provides an option to strip trailing
     whitespace from a source file.

     (Contributed by Roger D. Serwy; issue 5150(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5150


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<2>,  Next: Porting to Python 3 1,  Prev: IDLE<2>,  Up: What's New In Python 3 1

2.7 Build and C API Changes
===========================

Changes to Python's build process and to the C API include:

   * Integers are now stored internally either in base 2**15 or in base
     2**30, the base being determined at build time.  Previously, they
     were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there's a new configure option
     `--enable-big-digits' that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there's a new `sys.int_info' that provides
     information about the internal format, giving the number of bits
     per digit and the size in bytes of the C type used to store each
     digit:

         >>> import sys
         >>> sys.int_info
         sys.int_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(1).)

   * The `PyLong_AsUnsignedLongLong()' function now handles a negative
     _pylong_ by raising `OverflowError' instead of `TypeError'.

     (Contributed by Mark Dickinson and Lisandro Dalcrin; issue
     5175(2).)

   * Deprecated `PyNumber_Int()'.  Use `PyNumber_Long()' instead.

     (Contributed by Mark Dickinson; issue 4910(3).)

   * Added a new `PyOS_string_to_double()' function to replace the
     deprecated functions `PyOS_ascii_strtod()' and `PyOS_ascii_atof()'.

     (Contributed by Mark Dickinson; issue 5914(4).)

   * Added `PyCapsule' as a replacement for the `PyCObject' API.  The
     principal difference is that the new type has a well defined
     interface for passing typing safety information and a less
     complicated signature for calling a destructor.  The old type had
     a problematic API and is now deprecated.

     (Contributed by Larry Hastings; issue 5630(5).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4258

  (2) http://bugs.python.org/issue5175

  (3) http://bugs.python.org/issue4910

  (4) http://bugs.python.org/issue5914

  (5) http://bugs.python.org/issue5630


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 3 1,  Prev: Build and C API Changes<2>,  Up: What's New In Python 3 1

2.8 Porting to Python 3.1
=========================

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The new floating point string representations can break existing
     doctests.  For example:

         def e():
             '''Compute the base of natural logarithms.

             >>> e()
             2.7182818284590451

             '''
             return sum(1/math.factorial(x) for x in reversed(range(30)))

         doctest.testmod()

         **********************************************************************
         Failed example:
             e()
         Expected:
             2.7182818284590451
         Got:
             2.718281828459045
         **********************************************************************


   * The automatic name remapping in the pickle module for protocol 2
     or lower can make Python 3.1 pickles unreadable in Python 3.0.
     One solution is to use protocol 3.  Another solution is to set the
     _fix_imports_ option to *False*.  See the discussion above for
     more details.


File: python-whatsnew-3.2.2.info,  Node: What's New In Python 3 0,  Next: What's New in Python 2 7,  Prev: What's New In Python 3 1,  Up: Top

3 What's New In Python 3.0
**************************

     Author: Guido van Rossum

     Release: 3.2.2

     Date: February 10, 2012

  This article explains the new features in Python 3.0, compared to 2.6.
Python 3.0, also known as "Python 3000" or "Py3K", is the first ever
_intentionally backwards incompatible_ Python release.  There are more
changes than in a typical release, and more that are important for all
Python users.  Nevertheless, after digesting the changes, you'll find
that Python really hasn't changed all that much - by and large, we're
mostly fixing well-known annoyances and warts, and removing a lot of
old cruft.

  This article doesn't attempt to provide a complete specification of
all new features, but instead tries to give a convenient overview.  For
full details, you should refer to the documentation for Python 3.0,
and/or the many PEPs referenced in the text. If you want to understand
the complete implementation and design rationale for a particular
feature, PEPs usually have more details than the regular documentation;
but note that PEPs usually are not kept up-to-date once a feature has
been fully implemented.

  Due to time constraints this document is not as complete as it should
have been.  As always for a new release, the `Misc/NEWS' file in the
source distribution contains a wealth of detailed information about
every small thing that was changed.

* Menu:

* Common Stumbling Blocks::
* Overview Of Syntax Changes::
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6.
* Library Changes::
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting.
* Changes To Exceptions::
* Miscellaneous Other Changes::
* Build and C API Changes: Build and C API Changes<3>.
* Performance::
* Porting To Python 3.0: Porting To Python 3 0.

Common Stumbling Blocks

* Print Is A Function::
* Views And Iterators Instead Of Lists::
* Ordering Comparisons::
* Integers::
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit.

Overview Of Syntax Changes

* New Syntax::
* Changed Syntax::
* Removed Syntax::

Miscellaneous Other Changes

* Operators And Special Methods::
* Builtins::


File: python-whatsnew-3.2.2.info,  Node: Common Stumbling Blocks,  Next: Overview Of Syntax Changes,  Up: What's New In Python 3 0

3.1 Common Stumbling Blocks
===========================

This section lists those few changes that are most likely to trip you
up if you're used to Python 2.5.

* Menu:

* Print Is A Function::
* Views And Iterators Instead Of Lists::
* Ordering Comparisons::
* Integers::
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit.


File: python-whatsnew-3.2.2.info,  Node: Print Is A Function,  Next: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

3.1.1 Print Is A Function
-------------------------

The `print' statement has been replaced with a `print()' function, with
keyword arguments to replace most of the special syntax of the old
`print' statement ( PEP 3105(1)).  Examples:

    Old: print "The answer is", 2*2
    New: print("The answer is", 2*2)

    Old: print x,           # Trailing comma suppresses newline
    New: print(x, end=" ")  # Appends a space instead of a newline

    Old: print              # Prints a newline
    New: print()            # You must call the function!

    Old: print >>sys.stderr, "fatal error"
    New: print("fatal error", file=sys.stderr)

    Old: print (x, y)       # prints repr((x, y))
    New: print((x, y))      # Not the same as print(x, y)!

You can also customize the separator between items, e.g.:

    print("There are <", 2**32, "> possibilities!", sep="")

which produces:

    There are <4294967296> possibilities!

Note:

   * The `print()' function doesn't support the "softspace" feature of
     the old `print' statement.  For example, in Python 2.x, `print
     "A\n", "B"' would write `"A\nB\n"'; but in Python 3.0,
     `print("A\n", "B")' writes `"A\n B\n"'.

   * Initially, you'll be finding yourself typing the old `print x' a
     lot in interactive mode.  Time to retrain your fingers to type
     `print(x)' instead!

   * When using the `2to3' source-to-source conversion tool, all
     `print' statements are automatically converted to `print()'
     function calls, so this is mostly a non-issue for larger projects.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3105


File: python-whatsnew-3.2.2.info,  Node: Views And Iterators Instead Of Lists,  Next: Ordering Comparisons,  Prev: Print Is A Function,  Up: Common Stumbling Blocks

3.1.2 Views And Iterators Instead Of Lists
------------------------------------------

Some well-known APIs no longer return lists:

   * `dict' methods `dict.keys()', `dict.items()' and `dict.values()'
     return "views" instead of lists.  For example, this no longer
     works: `k = d.keys(); k.sort()'.  Use `k = sorted(d)' instead
     (this works in Python 2.5 too and is just as efficient).

   * Also, the `dict.iterkeys()', `dict.iteritems()' and
     `dict.itervalues()' methods are no longer supported.

   * `map()' and `filter()' return iterators.  If you really need a
     list, a quick fix is e.g.  `list(map(...))', but a better fix is
     often to use a list comprehension (especially when the original
     code uses `lambda'), or rewriting the code so it doesn't need a
     list at all.  Particularly tricky is `map()' invoked for the side
     effects of the function; the correct transformation is to use a
     regular `for' loop (since creating a list would just be wasteful).

   * `range()' now behaves like `xrange()' used to behave, except it
     works with values of arbitrary size.  The latter no longer exists.

   * `zip()' now returns an iterator.


File: python-whatsnew-3.2.2.info,  Node: Ordering Comparisons,  Next: Integers,  Prev: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

3.1.3 Ordering Comparisons
--------------------------

Python 3.0 has simplified the rules for ordering comparisons:

   * The ordering comparison operators (`<', `<=', `>=', `>') raise a
     TypeError exception when the operands don't have a meaningful
     natural ordering.  Thus, expressions like `1 < ''', `0 > None' or
     `len <= len' are no longer valid, and e.g. `None < None' raises
     `TypeError' instead of returning `False'.  A corollary is that
     sorting a heterogeneous list no longer makes sense - all the
     elements must be comparable to each other.  Note that this does
     not apply to the `==' and `!=' operators: objects of different
     incomparable types always compare unequal to each other.

   * `builtin.sorted()' and `list.sort()' no longer accept the _cmp_
     argument providing a comparison function.  Use the _key_ argument
     instead. N.B. the _key_ and _reverse_ arguments are now
     "keyword-only".

   * The `cmp()' function should be treated as gone, and the `__cmp__()'
     special method is no longer supported.  Use `__lt__()' for sorting,
     `__eq__()' with `__hash__()', and other rich comparisons as needed.
     (If you really need the `cmp()' functionality, you could use the
     expression `(a > b) - (a < b)' as the equivalent for `cmp(a, b)'.)


File: python-whatsnew-3.2.2.info,  Node: Integers,  Next: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Ordering Comparisons,  Up: Common Stumbling Blocks

3.1.4 Integers
--------------

   * PEP 0237(1): Essentially, `long' renamed to `int'.  That is, there
     is only one built-in integral type, named `int'; but it behaves
     mostly like the old `long' type.

   * PEP 0238(2): An expression like `1/2' returns a float.  Use `1//2'
     to get the truncating behavior.  (The latter syntax has existed
     for years, at least since Python 2.2.)

   * The `sys.maxint' constant was removed, since there is no longer a
     limit to the value of integers.  However, `sys.maxsize' can be
     used as an integer larger than any practical list or string index.
     It conforms to the implementation's "natural" integer size and is
     typically the same as `sys.maxint' in previous releases on the
     same platform (assuming the same build options).

   * The `repr()' of a long integer doesn't include the trailing `L'
     anymore, so code that unconditionally strips that character will
     chop off the last digit instead.  (Use `str()' instead.)

   * Octal literals are no longer of the form `0720'; use `0o720'
     instead.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0237

  (2) http://www.python.org/dev/peps/pep-0238


File: python-whatsnew-3.2.2.info,  Node: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Integers,  Up: Common Stumbling Blocks

3.1.5 Text Vs. Data Instead Of Unicode Vs. 8-bit
------------------------------------------------

Everything you thought you knew about binary data and Unicode has
changed.

   * Python 3.0 uses the concepts of _text_ and (binary) _data_ instead
     of Unicode strings and 8-bit strings.  All text is Unicode; however
     _encoded_ Unicode is represented as binary data.  The type used to
     hold text is `str', the type used to hold data is `bytes'.  The
     biggest difference with the 2.x situation is that any attempt to
     mix text and data in Python 3.0 raises `TypeError', whereas if you
     were to mix Unicode and 8-bit strings in Python 2.x, it would work
     if the 8-bit string happened to contain only 7-bit (ASCII) bytes,
     but you would get `UnicodeDecodeError' if it contained non-ASCII
     values.  This value-specific behavior has caused numerous sad
     faces over the years.

   * As a consequence of this change in philosophy, pretty much all code
     that uses Unicode, encodings or binary data most likely has to
     change.  The change is for the better, as in the 2.x world there
     were numerous bugs having to do with mixing encoded and unencoded
     text.  To be prepared in Python 2.x, start using `unicode' for all
     unencoded text, and `str' for binary or encoded data only.  Then
     the `2to3' tool will do most of the work for you.

   * You can no longer use `u"..."' literals for Unicode text.
     However, you must use `b"..."' literals for binary data.

   * As the `str' and `bytes' types cannot be mixed, you must always
     explicitly convert between them.  Use `str.encode()' to go from
     `str' to `bytes', and `bytes.decode()' to go from `bytes' to
     `str'.  You can also use `bytes(s, encoding=...)' and `str(b,
     encoding=...)', respectively.

   * Like `str', the `bytes' type is immutable.  There is a separate
     _mutable_ type to hold buffered binary data, `bytearray'.  Nearly
     all APIs that accept `bytes' also accept `bytearray'.  The mutable
     API is based on `collections.MutableSequence'.

   * All backslashes in raw string literals are interpreted literally.
     This means that `'\U'' and `'\u'' escapes in raw strings are not
     treated specially.  For example, `r'\u20ac'' is a string of 6
     characters in Python 3.0, whereas in 2.6, `ur'\u20ac'' was the
     single "euro" character.  (Of course, this change only affects raw
     string literals; the euro character is `'\u20ac'' in Python 3.0.)

   * The built-in `basestring' abstract type was removed.  Use `str'
     instead.  The `str' and `bytes' types don't have functionality
     enough in common to warrant a shared base class.  The `2to3' tool
     (see below) replaces every occurrence of `basestring' with `str'.

   * Files opened as text files (still the default mode for `open()')
     always use an encoding to map between strings (in memory) and bytes
     (on disk).  Binary files (opened with a `b' in the mode argument)
     always use bytes in memory.  This means that if a file is opened
     using an incorrect mode or encoding, I/O will likely fail loudly,
     instead of silently producing incorrect data.  It also means that
     even Unix users will have to specify the correct mode (text or
     binary) when opening a file.  There is a platform-dependent default
     encoding, which on Unixy platforms can be set with the `LANG'
     environment variable (and sometimes also with some other
     platform-specific locale-related environment variables).  In many
     cases, but not all, the system default is UTF-8; you should never
     count on this default.  Any application reading or writing more
     than pure ASCII text should probably have a way to override the
     encoding.  There is no longer any need for using the
     encoding-aware streams in the `codecs' module.

   * Filenames are passed to and returned from APIs as (Unicode)
     strings.  This can present platform-specific problems because on
     some platforms filenames are arbitrary byte strings.  (On the
     other hand, on Windows filenames are natively stored as Unicode.)
     As a work-around, most APIs (e.g. `open()' and many functions in
     the `os' module) that take filenames accept `bytes' objects as
     well as strings, and a few APIs have a way to ask for a `bytes'
     return value.  Thus, `os.listdir()' returns a list of `bytes'
     instances if the argument is a `bytes' instance, and
     `os.getcwdb()' returns the current working directory as a `bytes'
     instance.  Note that when `os.listdir()' returns a list of
     strings, filenames that cannot be decoded properly are omitted
     rather than raising `UnicodeError'.

   * Some system APIs like `os.environ' and `sys.argv' can also present
     problems when the bytes made available by the system is not
     interpretable using the default encoding.  Setting the `LANG'
     variable and rerunning the program is probably the best approach.

   * PEP 3138(1): The `repr()' of a string no longer escapes non-ASCII
     characters.  It still escapes control characters and code points
     with non-printable status in the Unicode standard, however.

   * PEP 3120(2): The default source encoding is now UTF-8.

   * PEP 3131(3): Non-ASCII letters are now allowed in identifiers.
     (However, the standard library remains ASCII-only with the
     exception of contributor names in comments.)

   * The `StringIO' and `cStringIO' modules are gone.  Instead, import
     the `io' module and use `io.StringIO' or `io.BytesIO' for text and
     data respectively.

   * See also the _unicode-howto_, which was updated for Python 3.0.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3138

  (2) http://www.python.org/dev/peps/pep-3120

  (3) http://www.python.org/dev/peps/pep-3131


File: python-whatsnew-3.2.2.info,  Node: Overview Of Syntax Changes,  Next: Changes Already Present In Python 2 6,  Prev: Common Stumbling Blocks,  Up: What's New In Python 3 0

3.2 Overview Of Syntax Changes
==============================

This section gives a brief overview of every _syntactic_ change in
Python 3.0.

* Menu:

* New Syntax::
* Changed Syntax::
* Removed Syntax::


File: python-whatsnew-3.2.2.info,  Node: New Syntax,  Next: Changed Syntax,  Up: Overview Of Syntax Changes

3.2.1 New Syntax
----------------

   * PEP 3107(1): Function argument and return value annotations.  This
     provides a standardized way of annotating a function's parameters
     and return value.  There are no semantics attached to such
     annotations except that they can be introspected at runtime using
     the `__annotations__' attribute.  The intent is to encourage
     experimentation through metaclasses, decorators or frameworks.

   * PEP 3102(2): Keyword-only arguments.  Named parameters occurring
     after `*args' in the parameter list _must_ be specified using
     keyword syntax in the call.  You can also use a bare `*' in the
     parameter list to indicate that you don't accept a variable-length
     argument list, but you do have keyword-only arguments.

   * Keyword arguments are allowed after the list of base classes in a
     class definition.  This is used by the new convention for
     specifying a metaclass (see next section), but can be used for
     other purposes as well, as long as the metaclass supports it.

   * PEP 3104(3): `nonlocal' statement.  Using `nonlocal x' you can now
     assign directly to a variable in an outer (but non-global) scope.
     `nonlocal' is a new reserved word.

   * PEP 3132(4): Extended Iterable Unpacking.  You can now write things
     like `a, b, *rest = some_sequence'.  And even `*rest, a = stuff'.
     The `rest' object is always a (possibly empty) list; the
     right-hand side may be any iterable.  Example:

         (a, *rest, b) = range(5)

     This sets _a_ to `0', _b_ to `4', and _rest_ to `[1, 2, 3]'.

   * Dictionary comprehensions: `{k: v for k, v in stuff}' means the
     same thing as `dict(stuff)' but is more flexible.  (This is PEP
     0274(5) vindicated. :-)

   * Set literals, e.g. `{1, 2}'.  Note that `{}' is an empty
     dictionary; use `set()' for an empty set.  Set comprehensions are
     also supported; e.g., `{x for x in stuff}' means the same thing as
     `set(stuff)' but is more flexible.

   * New octal literals, e.g. `0o720' (already in 2.6).  The old octal
     literals (`0720') are gone.

   * New binary literals, e.g. `0b1010' (already in 2.6), and there is
     a new corresponding built-in function, `bin()'.

   * Bytes literals are introduced with a leading `b' or `B', and there
     is a new corresponding built-in function, `bytes()'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3107

  (2) http://www.python.org/dev/peps/pep-3102

  (3) http://www.python.org/dev/peps/pep-3104

  (4) http://www.python.org/dev/peps/pep-3132

  (5) http://www.python.org/dev/peps/pep-0274


File: python-whatsnew-3.2.2.info,  Node: Changed Syntax,  Next: Removed Syntax,  Prev: New Syntax,  Up: Overview Of Syntax Changes

3.2.2 Changed Syntax
--------------------

   * PEP 3109(1) and PEP 3134(2): new `raise' statement syntax: `raise
     [_expr_ [from _expr_]]'.  See below.

   * `as' and `with' are now reserved words.  (Since 2.6, actually.)

   * `True', `False', and `None' are reserved words.  (2.6 partially
     enforced the restrictions on `None' already.)

   * Change from `except' _exc_, _var_ to `except' _exc_ `as' _var_.
     See PEP 3110(3).

   * PEP 3115(4): New Metaclass Syntax.  Instead of:

         class C:
             __metaclass__ = M
             ...

     you must now use:

         class C(metaclass=M):
             ...

     The module-global `__metaclass__' variable is no longer supported.
     (It was a crutch to make it easier to default to new-style classes
     without deriving every class from `object'.)

   * List comprehensions no longer support the syntactic form `[... for
     _var_ in _item1_, _item2_, ...]'.  Use `[... for _var_ in
     (_item1_, _item2_, ...)]' instead.  Also note that list
     comprehensions have different semantics: they are closer to
     syntactic sugar for a generator expression inside a `list()'
     constructor, and in particular the loop control variables are no
     longer leaked into the surrounding scope.

   * The _ellipsis_ (`...') can be used as an atomic expression
     anywhere.  (Previously it was only allowed in slices.)  Also, it
     _must_ now be spelled as `...'.  (Previously it could also be
     spelled as `. . .', by a mere accident of the grammar.)

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3109

  (2) http://www.python.org/dev/peps/pep-3134

  (3) http://www.python.org/dev/peps/pep-3110

  (4) http://www.python.org/dev/peps/pep-3115


File: python-whatsnew-3.2.2.info,  Node: Removed Syntax,  Prev: Changed Syntax,  Up: Overview Of Syntax Changes

3.2.3 Removed Syntax
--------------------

   * PEP 3113(1): Tuple parameter unpacking removed.  You can no longer
     write `def foo(a, (b, c)): ...'.  Use `def foo(a, b_c): b, c =
     b_c' instead.

   * Removed backticks (use `repr()' instead).

   * Removed `<>' (use `!=' instead).

   * Removed keyword: `exec()' is no longer a keyword; it remains as a
     function.  (Fortunately the function syntax was also accepted in
     2.x.)  Also note that `exec()' no longer takes a stream argument;
     instead of `exec(f)' you can use `exec(f.read())'.

   * Integer literals no longer support a trailing `l' or `L'.

   * String literals no longer support a leading `u' or `U'.

   * The `from' _module_ `import' `*' syntax is only allowed at the
     module level, no longer inside functions.

   * The only acceptable syntax for relative imports is `from
     .[_module_] import _name_'.  All `import' forms not starting with
     `.' are interpreted as absolute imports.  ( PEP 0328(2))

   * Classic classes are gone.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3113

  (2) http://www.python.org/dev/peps/pep-0328


File: python-whatsnew-3.2.2.info,  Node: Changes Already Present In Python 2 6,  Next: Library Changes,  Prev: Overview Of Syntax Changes,  Up: What's New In Python 3 0

3.3 Changes Already Present In Python 2.6
=========================================

Since many users presumably make the jump straight from Python 2.5 to
Python 3.0, this section reminds the reader of new features that were
originally designed for Python 3.0 but that were back-ported to Python
2.6.  The corresponding sections in *note What's New in Python 2.6: 5f.
should be consulted for longer descriptions.

   * *note PEP 343; The 'with' statement: 60.  The `with' statement is
     now a standard feature and no longer needs to be imported from the
     `__future__'.  Also check out *note Writing Context Managers: 61.
     and *note The contextlib module: 62.

   * *note PEP 366; Explicit Relative Imports From a Main Module: 63.
     This enhances the usefulness of the `-m' option when the
     referenced module lives in a package.

   * *note PEP 370; Per-user site-packages Directory: 64.

   * *note PEP 371; The multiprocessing Package: 65.

   * *note PEP 3101; Advanced String Formatting: 66.  Note: the 2.6
     description mentions the `format()' method for both 8-bit and
     Unicode strings.  In 3.0, only the `str' type (text strings with
     Unicode support) supports this method; the `bytes' type does not.
     The plan is to eventually make this the only API for string
     formatting, and to start deprecating the `%' operator in Python
     3.1.

   * *note PEP 3105; print As a Function: 67.  This is now a standard
     feature and no longer needs to be imported from `__future__'.
     More details were given above.

   * *note PEP 3110; Exception-Handling Changes: 68.  The `except'
     _exc_ `as' _var_ syntax is now standard and `except' _exc_, _var_
     is no longer supported.  (Of course, the `as' _var_ part is still
     optional.)

   * *note PEP 3112; Byte Literals: 69.  The `b"..."' string literal
     notation (and its variants like `b'...'', `b"""..."""', and
     `br"..."') now produces a literal of type `bytes'.

   * *note PEP 3116; New I/O Library: 6a.  The `io' module is now the
     standard way of doing file I/O, and the initial values of
     `sys.stdin', `sys.stdout' and `sys.stderr' are now instances of
     `io.TextIOBase'.  The built-in `open()' function is now an alias
     for `io.open()' and has additional keyword arguments _encoding_,
     _errors_, _newline_ and _closefd_.  Also note that an invalid
     _mode_ argument now raises `ValueError', not `IOError'.  The
     binary file object underlying a text file object can be accessed
     as `f.buffer' (but beware that the text object maintains a buffer
     of itself in order to speed up the encoding and decoding
     operations).

   * *note PEP 3118; Revised Buffer Protocol: 6b.  The old builtin
     `buffer()' is now really gone; the new builtin `memoryview()'
     provides (mostly) similar functionality.

   * *note PEP 3119; Abstract Base Classes: 6c.  The `abc' module and
     the ABCs defined in the `collections' module plays a somewhat more
     prominent role in the language now, and built-in collection types
     like `dict' and `list' conform to the `collections.MutableMapping'
     and `collections.MutableSequence' ABCs, respectively.

   * *note PEP 3127; Integer Literal Support and Syntax: 6d.  As
     mentioned above, the new octal literal notation is the only one
     supported, and binary literals have been added.

   * *note PEP 3129; Class Decorators: 6e.

   * *note PEP 3141; A Type Hierarchy for Numbers: 6f.  The `numbers'
     module is another new use of ABCs, defining Python's "numeric
     tower".  Also note the new `fractions' module which implements
     `numbers.Rational'.


File: python-whatsnew-3.2.2.info,  Node: Library Changes,  Next: PEP 3101 A New Approach To String Formatting,  Prev: Changes Already Present In Python 2 6,  Up: What's New In Python 3 0

3.4 Library Changes
===================

Due to time constraints, this document does not exhaustively cover the
very extensive changes to the standard library.  PEP 3108(1) is the
reference for the major changes to the library.  Here's a capsule
review:

   * Many old modules were removed.  Some, like `gopherlib' (no longer
     used) and `md5' (replaced by `hashlib'), were already deprecated by PEP
     0004(2).  Others were removed as a result of the removal of
     support for various platforms such as Irix, BeOS and Mac OS 9 (see PEP
     0011(3)).  Some modules were also selected for removal in Python
     3.0 due to lack of use or because a better replacement exists.  See PEP
     3108(4) for an exhaustive list.

   * The `bsddb3' package was removed because its presence in the core
     standard library has proved over time to be a particular burden
     for the core developers due to testing instability and Berkeley
     DB's release schedule.  However, the package is alive and well,
     externally maintained at
     <http://www.jcea.es/programacion/pybsddb.htm>.

   * Some modules were renamed because their old name disobeyed PEP
     0008(5), or for various other reasons.  Here's the list:

     Old Name                    New Name
     -------------------------------------------------------- 
     _winreg                     winreg
     ConfigParser                configparser
     copy_reg                    copyreg
     Queue                       queue
     SocketServer                socketserver
     markupbase                  _markupbase
     repr                        reprlib
     test.test_support           test.support

   * A common pattern in Python 2.x is to have one version of a module
     implemented in pure Python, with an optional accelerated version
     implemented as a C extension; for example, `pickle' and `cPickle'.
     This places the burden of importing the accelerated version and
     falling back on the pure Python version on each user of these
     modules.  In Python 3.0, the accelerated versions are considered
     implementation details of the pure Python versions.  Users should
     always import the standard version, which attempts to import the
     accelerated version and falls back to the pure Python version.
     The `pickle' / `cPickle' pair received this treatment.  The
     `profile' module is on the list for 3.1.  The `StringIO' module
     has been turned into a class in the `io' module.

   * Some related modules have been grouped into packages, and usually
     the submodule names have been simplified.  The resulting new
     packages are:

        * `dbm' (`anydbm', `dbhash', `dbm', `dumbdbm', `gdbm',
          `whichdb').

        * `html' (`HTMLParser', `htmlentitydefs').

        * `http' (`httplib', `BaseHTTPServer', `CGIHTTPServer',
          `SimpleHTTPServer', `Cookie', `cookielib').

        * `tkinter' (all `Tkinter'-related modules except `turtle').
          The target audience of `turtle' doesn't really care about
          `tkinter'.  Also note that as of Python 2.6, the
          functionality of `turtle' has been greatly enhanced.

        * `urllib' (`urllib', `urllib2', `urlparse', `robotparse').

        * `xmlrpc' (`xmlrpclib', `DocXMLRPCServer',
          `SimpleXMLRPCServer').

  Some other changes to standard library modules, not covered by PEP
3108(6):

   * Killed `sets'.  Use the built-in `set()' class.

   * Cleanup of the `sys' module: removed `sys.exitfunc()',
     `sys.exc_clear()', `sys.exc_type', `sys.exc_value',
     `sys.exc_traceback'.  (Note that `sys.last_type' etc. remain.)

   * Cleanup of the `array.array' type: the `read()' and `write()'
     methods are gone; use `fromfile()' and `tofile()' instead.  Also,
     the `'c'' typecode for array is gone - use either `'b'' for bytes
     or `'u'' for Unicode characters.

   * Cleanup of the `operator' module: removed `sequenceIncludes()' and
     `isCallable()'.

   * Cleanup of the `thread' module: `acquire_lock()' and
     `release_lock()' are gone; use `acquire()' and `release()' instead.

   * Cleanup of the `random' module: removed the `jumpahead()' API.

   * The `new' module is gone.

   * The functions `os.tmpnam()', `os.tempnam()' and `os.tmpfile()'
     have been removed in favor of the `tempfile' module.

   * The `tokenize' module has been changed to work with bytes.  The
     main entry point is now `tokenize.tokenize()', instead of
     generate_tokens.

   * `string.letters' and its friends (`string.lowercase' and
     `string.uppercase') are gone.  Use `string.ascii_letters' etc.
     instead.  (The reason for the removal is that `string.letters' and
     friends had locale-specific behavior, which is a bad idea for such
     attractively-named global "constants".)

   * Renamed module `__builtin__' to `builtins' (removing the
     underscores, adding an 's').  The `__builtins__' variable found in
     most global namespaces is unchanged.  To modify a builtin, you
     should use `builtins', not `__builtins__'!

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3108

  (2) http://www.python.org/dev/peps/pep-0004

  (3) http://www.python.org/dev/peps/pep-0011

  (4) http://www.python.org/dev/peps/pep-3108

  (5) http://www.python.org/dev/peps/pep-0008

  (6) http://www.python.org/dev/peps/pep-3108


File: python-whatsnew-3.2.2.info,  Node: PEP 3101 A New Approach To String Formatting,  Next: Changes To Exceptions,  Prev: Library Changes,  Up: What's New In Python 3 0

3.5
===

*PEP 3101*: A New Approach To String Formatting

   * A new system for  built-in string formatting operations replaces
     the `%' string  formatting operator.   (However, the `%'  operator
     is still supported;  it will  be deprecated in  Python 3.1  and
     removed from the language at some later time.)  Read PEP 3101(1)
     for the full scoop.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3101


File: python-whatsnew-3.2.2.info,  Node: Changes To Exceptions,  Next: Miscellaneous Other Changes,  Prev: PEP 3101 A New Approach To String Formatting,  Up: What's New In Python 3 0

3.6 Changes To Exceptions
=========================

The APIs for raising and catching exception have been cleaned up and
new powerful features added:

   * PEP 0352(1): All exceptions must be derived (directly or
     indirectly) from `BaseException'.  This is the root of the
     exception hierarchy.  This is not new as a recommendation, but the
     _requirement_ to inherit from `BaseException' is new.  (Python 2.6
     still allowed classic classes to be raised, and placed no
     restriction on what you can catch.)  As a consequence, string
     exceptions are finally truly and utterly dead.

   * Almost all exceptions should actually derive from `Exception';
     `BaseException' should only be used as a base class for exceptions
     that should only be handled at the top level, such as `SystemExit'
     or `KeyboardInterrupt'.  The recommended idiom for handling all
     exceptions except for this latter category is to use `except'
     `Exception'.

   * `StandardError' was removed.

   * Exceptions no longer behave as sequences.  Use the `args'
     attribute instead.

   * PEP 3109(2): Raising exceptions.  You must now use `raise
     _Exception_(_args_)' instead of `raise _Exception_, _args_'.
     Additionally, you can no longer explicitly specify a traceback;
     instead, if you _have_ to do this, you can assign directly to the
     `__traceback__' attribute (see below).

   * PEP 3110(3): Catching exceptions.  You must now use `except
     _SomeException_ as _variable_' instead of `except _SomeException_,
     _variable_'.  Moreover, the _variable_ is explicitly deleted when
     the `except' block is left.

   * PEP 3134(4): Exception chaining.  There are two cases: implicit
     chaining and explicit chaining.  Implicit chaining happens when an
     exception is raised in an `except' or `finally' handler block.
     This usually happens due to a bug in the handler block; we call
     this a _secondary_ exception.  In this case, the original
     exception (that was being handled) is saved as the `__context__'
     attribute of the secondary exception.  Explicit chaining is
     invoked with this syntax:

         raise SecondaryException() from primary_exception

     (where _primary_exception_ is any expression that produces an
     exception object, probably an exception that was previously
     caught).  In this case, the primary exception is stored on the
     `__cause__' attribute of the secondary exception.  The traceback
     printed when an unhandled exception occurs walks the chain of
     `__cause__' and `__context__' attributes and prints a separate
     traceback for each component of the chain, with the primary
     exception at the top.  (Java users may recognize this behavior.)

   * PEP 3134(5): Exception objects now store their traceback as the
     `__traceback__' attribute.  This means that an exception object
     now contains all the information pertaining to an exception, and
     there are fewer reasons to use `sys.exc_info()' (though the latter
     is not removed).

   * A few exception messages are improved when Windows fails to load an
     extension module.  For example, `error code 193' is now `%1 is not
     a valid Win32 application'.  Strings now deal with non-English
     locales.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0352

  (2) http://www.python.org/dev/peps/pep-3109

  (3) http://www.python.org/dev/peps/pep-3110

  (4) http://www.python.org/dev/peps/pep-3134

  (5) http://www.python.org/dev/peps/pep-3134


File: python-whatsnew-3.2.2.info,  Node: Miscellaneous Other Changes,  Next: Build and C API Changes<3>,  Prev: Changes To Exceptions,  Up: What's New In Python 3 0

3.7 Miscellaneous Other Changes
===============================

* Menu:

* Operators And Special Methods::
* Builtins::


File: python-whatsnew-3.2.2.info,  Node: Operators And Special Methods,  Next: Builtins,  Up: Miscellaneous Other Changes

3.7.1 Operators And Special Methods
-----------------------------------

   * `!=' now returns the opposite of `==', unless `==' returns
     `NotImplemented'.

   * The concept of "unbound methods" has been removed from the
     language.  When referencing a method as a class attribute, you now
     get a plain function object.

   * `__getslice__()', `__setslice__()' and `__delslice__()' were
     killed.  The syntax `a[i:j]' now translates to
     `a.__getitem__(slice(i, j))' (or `__setitem__()' or
     `__delitem__()', when used as an assignment or deletion target,
     respectively).

   * PEP 3114(1): the standard `next()' method has been renamed to
     `__next__()'.

   * The `__oct__()' and `__hex__()' special methods are removed -
     `oct()' and `hex()' use `__index__()' now to convert the argument
     to an integer.

   * Removed support for `__members__' and `__methods__'.

   * The function attributes named `func_X' have been renamed to use
     the `__X__' form, freeing up these names in the function attribute
     namespace for user-defined attributes.  To wit, `func_closure',
     `func_code', `func_defaults', `func_dict', `func_doc',
     `func_globals', `func_name' were renamed to `__closure__',
     `__code__', `__defaults__', `__dict__', `__doc__', `__globals__',
     `__name__', respectively.

   * `__nonzero__()' is now `__bool__()'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3114


File: python-whatsnew-3.2.2.info,  Node: Builtins,  Prev: Operators And Special Methods,  Up: Miscellaneous Other Changes

3.7.2 Builtins
--------------

   * PEP 3135(1): New `super()'.  You can now invoke `super()' without
     arguments and (assuming this is in a regular instance method
     defined inside a `class' statement) the right class and instance
     will automatically be chosen.  With arguments, the behavior of
     `super()' is unchanged.

   * PEP 3111(2): `raw_input()' was renamed to `input()'.  That is, the
     new `input()' function reads a line from `sys.stdin' and returns
     it with the trailing newline stripped.  It raises `EOFError' if
     the input is terminated prematurely.  To get the old behavior of
     `input()', use `eval(input())'.

   * A new built-in function `next()' was added to call the
     `__next__()' method on an object.

   * The `round()' function rounding strategy and return type have
     changed.  Exact halfway cases are now rounded to the nearest even
     result instead of away from zero.  (For example, `round(2.5)' now
     returns `2' rather than `3'.)  `round(x[, n])()' now delegates to
     `x.__round__([n])' instead of always returning a float.  It
     generally returns an integer when called with a single argument
     and a value of the same type as `x' when called with two arguments.

   * Moved `intern()' to `sys.intern()'.

   * Removed: `apply()'.  Instead of `apply(f, args)' use `f(*args)'.

   * Removed `callable()'.  Instead of `callable(f)' you can use
     `isinstance(f, collections.Callable)'.  The `operator.isCallable()'
     function is also gone.

   * Removed `coerce()'.  This function no longer serves a purpose now
     that classic classes are gone.

   * Removed `execfile()'.  Instead of `execfile(fn)' use
     `exec(open(fn).read())'.

   * Removed the `file' type.  Use `open()'.  There are now several
     different kinds of streams that open can return in the `io' module.

   * Removed `reduce()'.  Use `functools.reduce()' if you really need
     it; however, 99 percent of the time an explicit `for' loop is more
     readable.

   * Removed `reload()'.  Use `imp.reload()'.

   * Removed. `dict.has_key()' - use the `in' operator instead.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3135

  (2) http://www.python.org/dev/peps/pep-3111


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<3>,  Next: Performance,  Prev: Miscellaneous Other Changes,  Up: What's New In Python 3 0

3.8 Build and C API Changes
===========================

Due to time constraints, here is a _very_ incomplete list of changes to
the C API.

   * Support for several platforms was dropped, including but not
     limited to Mac OS 9, BeOS, RISCOS, Irix, and Tru64.

   * PEP 3118(1): New Buffer API.

   * PEP 3121(2): Extension Module Initialization & Finalization.

   * PEP 3123(3): Making `PyObject_HEAD' conform to standard C.

   * No more C API support for restricted execution.

   * `PyNumber_Coerce()', `PyNumber_CoerceEx()', `PyMember_Get()', and
     `PyMember_Set()' C APIs are removed.

   * New C API `PyImport_ImportModuleNoBlock()', works like
     `PyImport_ImportModule()' but won't block on the import lock
     (returning an error instead).

   * Renamed the boolean conversion C-level slot and method:
     `nb_nonzero' is now `nb_bool'.

   * Removed `METH_OLDARGS' and `WITH_CYCLE_GC' from the C API.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3118

  (2) http://www.python.org/dev/peps/pep-3121

  (3) http://www.python.org/dev/peps/pep-3123


File: python-whatsnew-3.2.2.info,  Node: Performance,  Next: Porting To Python 3 0,  Prev: Build and C API Changes<3>,  Up: What's New In Python 3 0

3.9 Performance
===============

The net result of the 3.0 generalizations is that Python 3.0 runs the
pystone benchmark around 10% slower than Python 2.5.  Most likely the
biggest cause is the removal of special-casing for small integers.
There's room for improvement, but it will happen after 3.0 is released!


File: python-whatsnew-3.2.2.info,  Node: Porting To Python 3 0,  Prev: Performance,  Up: What's New In Python 3 0

3.10 Porting To Python 3.0
==========================

For porting existing Python 2.5 or 2.6 source code to Python 3.0, the
best strategy is the following:

  0. (Prerequisite:) Start with excellent test coverage.

  1. Port to Python 2.6.  This should be no more work than the average
     port from Python 2.x to Python 2.(x+1).  Make sure all your tests
     pass.

  2. (Still using 2.6:) Turn on the `-3' command line switch.  This
     enables warnings about features that will be removed (or change)
     in 3.0.  Run your test suite again, and fix code that you get
     warnings about until there are no warnings left, and all your
     tests still pass.

  3. Run the `2to3' source-to-source translator over your source code
     tree.  (See _2to3-reference_ for more on this tool.)  Run the
     result of the translation under Python 3.0.  Manually fix up any
     remaining issues, fixing problems until all tests pass again.

  It is not recommended to try to write source code that runs unchanged
under both Python 2.6 and 3.0; you'd have to use a very contorted
coding style, e.g. avoiding `print' statements, metaclasses, and much
more.  If you are maintaining a library that needs to support both
Python 2.6 and Python 3.0, the best approach is to modify step 3 above
by editing the 2.6 version of the source code and running the `2to3'
translator again, rather than editing the 3.0 version of the source
code.

  For porting C extensions to Python 3.0, please see _cporting-howto_.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 7,  Next: What's New in Python 2 6,  Prev: What's New In Python 3 0,  Up: Top

4 What's New in Python 2.7
**************************

     Author: A.M. Kuchling (amk at amk.ca)

     Release: 3.2.2

     Date: February 10, 2012

  This article explains the new features in Python 2.7.  The final
release of 2.7 is currently scheduled for July 2010; the detailed
schedule is described in PEP 373(1).

  Numeric handling has been improved in many ways, for both
floating-point numbers and for the `Decimal' class.  There are some
useful additions to the standard library, such as a greatly enhanced
`unittest' module, the `argparse' module for parsing command-line
options, convenient ordered-dictionary and `Counter' classes in the
`collections' module, and many other improvements.

  Python 2.7 is planned to be the last of the 2.x releases, so we worked
on making it a good release for the long term.  To help with porting to
Python 3, several new features from the Python 3.x series have been
included in 2.7.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.7 at
<http://docs.python.org>. If you want to understand the rationale for
the design and implementation, refer to the PEP for a particular new
feature or the issue on <http://bugs.python.org> in which a change was
discussed.  Whenever possible, "What's New in Python" links to the
bug/patch item for each change.

* Menu:

* The Future for Python 2.x: The Future for Python 2 x.
* Python 3.1 Features: Python 3 1 Features.
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>.
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines.
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging.
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views.
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object.
* Other Language Changes: Other Language Changes<3>.
* New and Improved Modules::
* Build and C API Changes: Build and C API Changes<4>.
* Other Changes and Fixes::
* Porting to Python 2.7: Porting to Python 2 7.
* Acknowledgements::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0373


File: python-whatsnew-3.2.2.info,  Node: The Future for Python 2 x,  Next: Python 3 1 Features,  Up: What's New in Python 2 7

4.1 The Future for Python 2.x
=============================

Python 2.7 is intended to be the last major release in the 2.x series.
The Python maintainers are planning to focus their future efforts on
the Python 3.x series.

  This means that 2.7 will remain in place for a long time, running
production systems that have not been ported to Python 3.x.  Two
consequences of the long-term significance of 2.7 are:

   * It's very likely the 2.7 release will have a longer period of
     maintenance compared to earlier 2.x versions.  Python 2.7 will
     continue to be maintained while the transition to 3.x continues,
     and the developers are planning to support Python 2.7 with bug-fix
     releases beyond the typical two years.

   * A policy decision was made to silence warnings only of interest to
     developers.  `DeprecationWarning' and its descendants are now
     ignored unless otherwise requested, preventing users from seeing
     warnings triggered by an application.  This change was also made
     in the branch that will become Python 3.2. (Discussed on
     stdlib-sig and carried out in issue 7319(1).)

     In previous releases, `DeprecationWarning' messages were enabled
     by default, providing Python developers with a clear indication of
     where their code may break in a future major version of Python.

     However, there are increasingly many users of Python-based
     applications who are not directly involved in the development of
     those applications.  `DeprecationWarning' messages are irrelevant
     to such users, making them worry about an application that's
     actually working correctly and burdening application developers
     with responding to these concerns.

     You can re-enable display of `DeprecationWarning' messages by
     running Python with the `-Wdefault' (short form: `-Wd') switch, or
     by setting the `PYTHONWARNINGS' environment variable to
     `"default"' (or `"d"') before running Python.  Python code can
     also re-enable them by calling `warnings.simplefilter('default')'.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7319


File: python-whatsnew-3.2.2.info,  Node: Python 3 1 Features,  Next: PEP 372 Adding an Ordered Dictionary to collections,  Prev: The Future for Python 2 x,  Up: What's New in Python 2 7

4.2 Python 3.1 Features
=======================

Much as Python 2.6 incorporated features from Python 3.0, version 2.7
incorporates some of the new features in Python 3.1.  The 2.x series
continues to provide tools for migrating to the 3.x series.

  A partial list of 3.1 features that were backported to 2.7:

   * The syntax for set literals (`{1,2,3}' is a mutable set).

   * Dictionary and set comprehensions (`{ i: i*2 for i in range(3)}').

   * Multiple context managers in a single `with' statement.

   * A new version of the `io' library, rewritten in C for performance.

   * The ordered-dictionary type described in *note PEP 372; Adding an
     Ordered Dictionary to collections: 7e.

   * The new `","' format specifier described in *note PEP 378; Format
     Specifier for Thousands Separator: 7f.

   * The `memoryview' object.

   * A small subset of the `importlib' module, *note described below:
     80.

   * The `repr()' of a float `x' is shorter in many cases: it's now
     based on the shortest decimal string that's guaranteed to round
     back to `x'.  As in previous versions of Python, it's guaranteed
     that `float(repr(x))' recovers `x'.

   * Float-to-string and string-to-float conversions are correctly
     rounded.  The `round()' function is also now correctly rounded.

   * The `PyCapsule' type, used to provide a C API for extension
     modules.

   * The `PyLong_AsLongAndOverflow()' C API function.

  Other new Python3-mode warnings include:

   * `operator.isCallable()' and `operator.sequenceIncludes()', which
     are not supported in 3.x, now trigger warnings.

   * The `-3' switch now automatically enables the `-Qwarn' switch that
     causes warnings about using classic division with integers and
     long integers.


File: python-whatsnew-3.2.2.info,  Node: PEP 372 Adding an Ordered Dictionary to collections,  Next: PEP 378 Format Specifier for Thousands Separator<2>,  Prev: Python 3 1 Features,  Up: What's New in Python 2 7

4.3 PEP 372: Adding an Ordered Dictionary to collections
========================================================

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, 2.7
introduces a new `OrderedDict' class in the `collections' module.

  The `OrderedDict' API provides the same interface as regular
dictionaries but iterates over keys and values in a guaranteed order
depending on when a key was first inserted:

    >>> from collections import OrderedDict
    >>> d = OrderedDict([('first', 1),
    ...                  ('second', 2),
    ...                  ('third', 3)])
    >>> d.items()
    [('first', 1), ('second', 2), ('third', 3)]

If a new entry overwrites an existing entry, the original insertion
position is left unchanged:

    >>> d['second'] = 4
    >>> d.items()
    [('first', 1), ('second', 4), ('third', 3)]

Deleting an entry and reinserting it will move it to the end:

    >>> del d['second']
    >>> d['second'] = 5
    >>> d.items()
    [('first', 1), ('third', 3), ('second', 5)]

The `popitem()' method has an optional _last_ argument that defaults to
True.  If _last_ is True, the most recently added key is returned and
removed; if it's False, the oldest key is selected:

    >>> od = OrderedDict([(x,0) for x in range(20)])
    >>> od.popitem()
    (19, 0)
    >>> od.popitem()
    (18, 0)
    >>> od.popitem(last=False)
    (0, 0)
    >>> od.popitem(last=False)
    (1, 0)

Comparing two ordered dictionaries checks both the keys and values, and
requires that the insertion order was the same:

    >>> od1 = OrderedDict([('first', 1),
    ...                    ('second', 2),
    ...                    ('third', 3)])
    >>> od2 = OrderedDict([('third', 3),
    ...                    ('first', 1),
    ...                    ('second', 2)])
    >>> od1 == od2
    False
    >>> # Move 'third' key to the end
    >>> del od2['third']; od2['third'] = 3
    >>> od1 == od2
    True

Comparing an `OrderedDict' with a regular dictionary ignores the
insertion order and just compares the keys and values.

  How does the `OrderedDict' work?  It maintains a doubly-linked list
of keys, appending new keys to the list as they're inserted.  A
secondary dictionary maps keys to their corresponding list node, so
deletion doesn't have to traverse the entire linked list and therefore
remains O(1).

  The standard library now supports use of ordered dictionaries in
several modules.

   * The `ConfigParser' module uses them by default, meaning that
     configuration files can now be read, modified, and then written
     back in their original order.

   * The `_asdict()' method for `collections.namedtuple()' now returns
     an ordered dictionary with the values appearing in the same order
     as the underlying tuple indices.

   * The `json' module's `JSONDecoder' class constructor was extended
     with an _object_pairs_hook_ parameter to allow `OrderedDict'
     instances to be built by the decoder.  Support was also added for
     third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Adding an ordered dictionary to collections
     PEP written by Armin Ronacher and Raymond Hettinger; implemented
     by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://pyyaml.org/

  (2) http://www.python.org/dev/peps/pep-0372


File: python-whatsnew-3.2.2.info,  Node: PEP 378 Format Specifier for Thousands Separator<2>,  Next: PEP 389 The argparse Module for Parsing Command Lines,  Prev: PEP 372 Adding an Ordered Dictionary to collections,  Up: What's New in Python 2 7

4.4 PEP 378: Format Specifier for Thousands Separator
=====================================================

To make program output more readable, it can be useful to add
separators to large numbers, rendering them as
18,446,744,073,709,551,616 instead of 18446744073709551616.

  The fully general solution for doing this is the `locale' module,
which can use different separators ("," in North America, "." in
Europe) and different grouping sizes, but `locale' is complicated to
use and unsuitable for multi-threaded applications where different
threads are producing output for different locales.

  Therefore, a simple comma-grouping mechanism has been added to the
mini-language used by the `str.format()' method.  When formatting a
floating-point number, simply include a comma between the width and the
precision:

    >>> '{:20,.2f}'.format(18446744073709551616.0)
    '18,446,744,073,709,551,616.00'

When formatting an integer, include the comma after the width:

    >>> '{:20,d}'.format(18446744073709551616)
    '18,446,744,073,709,551,616'

This mechanism is not adaptable at all; commas are always used as the
separator and the grouping is always into three-digit groups.  The
comma-formatting mechanism isn't as general as the `locale' module, but
it's easier to use.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator
     PEP written by Raymond Hettinger; implemented by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0378


File: python-whatsnew-3.2.2.info,  Node: PEP 389 The argparse Module for Parsing Command Lines,  Next: PEP 391 Dictionary-Based Configuration For Logging,  Prev: PEP 378 Format Specifier for Thousands Separator<2>,  Up: What's New in Python 2 7

4.5 PEP 389: The argparse Module for Parsing Command Lines
==========================================================

The `argparse' module for parsing command-line arguments was added as a
more powerful replacement for the `optparse' module.

  This means Python now supports three different modules for parsing
command-line arguments: `getopt', `optparse', and `argparse'.  The
`getopt' module closely resembles the C library's `getopt()' function,
so it remains useful if you're writing a Python prototype that will
eventually be rewritten in C.  `optparse' becomes redundant, but there
are no plans to remove it because there are many scripts still using
it, and there's no automated way to update these scripts.  (Making the
`argparse' API consistent with `optparse''s interface was discussed but
rejected as too messy and difficult.)

  In short, if you're writing a new script and don't need to worry
about compatibility with earlier versions of Python, use `argparse'
instead of `optparse'.

  Here's an example:

    import argparse

    parser = argparse.ArgumentParser(description='Command-line example.')

    # Add optional switches
    parser.add_argument('-v', action='store_true', dest='is_verbose',
                        help='produce verbose output')
    parser.add_argument('-o', action='store', dest='output',
                        metavar='FILE',
                        help='direct output to FILE instead of stdout')
    parser.add_argument('-C', action='store', type=int, dest='context',
                        metavar='NUM', default=0,
                        help='display NUM lines of added context')

    # Allow any number of additional arguments.
    parser.add_argument(nargs='*', action='store', dest='inputs',
                        help='input filenames (default is stdin)')

    args = parser.parse_args()
    print args.__dict__

Unless you override it, `-h' and `--help' switches are automatically
added, and produce neatly formatted output:

    -> ./python.exe argparse-example.py --help
    usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]

    Command-line example.

    positional arguments:
      inputs      input filenames (default is stdin)

    optional arguments:
      -h, --help  show this help message and exit
      -v          produce verbose output
      -o FILE     direct output to FILE instead of stdout
      -C NUM      display NUM lines of added context

As with `optparse', the command-line switches and arguments are
returned as an object with attributes named by the _dest_ parameters:

    -> ./python.exe argparse-example.py -v
    {'output': None,
     'is_verbose': True,
     'context': 0,
     'inputs': []}

    -> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2
    {'output': '/tmp/output',
     'is_verbose': True,
     'context': 4,
     'inputs': ['file1', 'file2']}

`argparse' has much fancier validation than `optparse'; you can specify
an exact number of arguments as an integer, 0 or more arguments by
passing `'*'', 1 or more by passing `'+'', or an optional argument with
`'?''.  A top-level parser can contain sub-parsers to define
subcommands that have different sets of switches, as in `svn commit',
`svn checkout', etc.  You can specify an argument's type as `FileType',
which will automatically open files for you and understands that `'-''
means standard input or output.

See also
........

argparse module documentation(1)

Upgrading optparse code to use argparse(2)
     Part of the Python documentation, describing how to convert code
     that uses `optparse'.

PEP 389(3) - argparse - New Command Line Parsing Module
     PEP written and implemented by Steven Bethard.

  ---------- Footnotes ----------

  (1) http://docs.python.org/dev/library/argparse.html

  (2)
http://docs.python.org/dev/library/argparse.html#upgrading-optparse-code

  (3) http://www.python.org/dev/peps/pep-0389


File: python-whatsnew-3.2.2.info,  Node: PEP 391 Dictionary-Based Configuration For Logging,  Next: PEP 3106 Dictionary Views,  Prev: PEP 389 The argparse Module for Parsing Command Lines,  Up: What's New in Python 2 7

4.6 PEP 391: Dictionary-Based Configuration For Logging
=======================================================

The `logging' module is very flexible; applications can define a tree
of logging subsystems, and each logger in this tree can filter out
certain messages, format them differently, and direct messages to a
varying number of handlers.

  All this flexibility can require a lot of configuration.  You can
write Python statements to create objects and set their properties, but
a complex set-up requires verbose but boring code.  `logging' also
supports a `fileConfig()' function that parses a file, but the file
format doesn't support configuring filters, and it's messier to
generate programmatically.

  Python 2.7 adds a `dictConfig()' function that uses a dictionary to
configure logging.  There are many ways to produce a dictionary from
different sources: construct one with code; parse a file containing
JSON; or use a YAML parsing library if one is installed.

  The following example configures two loggers, the root logger and a
logger named "network".   Messages sent to the root logger will be sent
to the system log using the syslog protocol, and messages to the
"network" logger will be written to a `network.log' file that will be
rotated once the log reaches 1Mb.

    import logging
    import logging.config

    configdict = {
     'version': 1,    # Configuration schema in use; must be 1 for now
     'formatters': {
         'standard': {
             'format': ('%(asctime)s %(name)-15s '
                        '%(levelname)-8s %(message)s')}},

     'handlers': {'netlog': {'backupCount': 10,
                         'class': 'logging.handlers.RotatingFileHandler',
                         'filename': '/logs/network.log',
                         'formatter': 'standard',
                         'level': 'INFO',
                         'maxBytes': 1024*1024},
                  'syslog': {'class': 'logging.handlers.SysLogHandler',
                             'formatter': 'standard',
                             'level': 'ERROR'}},

     # Specify all the subordinate loggers
     'loggers': {
                 'network': {
                             'handlers': ['netlog']
                 }
     },
     # Specify properties of the root logger
     'root': {
              'handlers': ['syslog']
     },
    }

    # Set up configuration
    logging.config.dictConfig(configdict)

    # As an example, log two error messages
    logger = logging.getLogger('/')
    logger.error('Database not found')

    netlogger = logging.getLogger('network')
    netlogger.error('Connection failed')

Three smaller enhancements to the `logging' module, all implemented by
Vinay Sajip, are:

   * The `SysLogHandler' class now supports syslogging over TCP.  The
     constructor has a _socktype_ parameter giving the type of socket
     to use, either `socket.SOCK_DGRAM' for UDP or `socket.SOCK_STREAM'
     for TCP.  The default protocol remains UDP.

   * `Logger' instances gained a `getChild()' method that retrieves a
     descendant logger using a relative path.  For example, once you
     retrieve a logger by doing `log = getLogger('app')', calling
     `log.getChild('network.listen')' is equivalent to
     `getLogger('app.network.listen')'.

   * The `LoggerAdapter' class gained a `isEnabledFor()' method that
     takes a _level_ and returns whether the underlying logger would
     process a message of that level of importance.

See also
........

PEP 391(1) - Dictionary-Based Configuration For Logging
     PEP written and implemented by Vinay Sajip.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0391


File: python-whatsnew-3.2.2.info,  Node: PEP 3106 Dictionary Views,  Next: PEP 3137 The memoryview Object,  Prev: PEP 391 Dictionary-Based Configuration For Logging,  Up: What's New in Python 2 7

4.7 PEP 3106: Dictionary Views
==============================

The dictionary methods `keys()', `values()', and `items()' are
different in Python 3.x.  They return an object called a _view_ instead
of a fully materialized list.

  It's not possible to change the return values of `keys()',
`values()', and `items()' in Python 2.7 because too much code would
break.  Instead the 3.x versions were added under the new names
`viewkeys()', `viewvalues()', and `viewitems()'.

    >>> d = dict((i*10, chr(65+i)) for i in range(26))
    >>> d
    {0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
    >>> d.viewkeys()
    dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])

Views can be iterated over, but the key and item views also behave like
sets.  The `&' operator performs intersection, and `|' performs a union:

    >>> d1 = dict((i*10, chr(65+i)) for i in range(26))
    >>> d2 = dict((i**.5, i) for i in range(1000))
    >>> d1.viewkeys() & d2.viewkeys()
    set([0.0, 10.0, 20.0, 30.0])
    >>> d1.viewkeys() | range(0, 30)
    set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])

The view keeps track of the dictionary and its contents change as the
dictionary is modified:

    >>> vk = d.viewkeys()
    >>> vk
    dict_keys([0, 130, 10, ..., 250])
    >>> d[260] = '&'
    >>> vk
    dict_keys([0, 130, 260, 10, ..., 250])

However, note that you can't add or remove keys while you're iterating
over the view:

    >>> for k in vk:
    ...     d[k*2] = k
    ...
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    RuntimeError: dictionary changed size during iteration

You can use the view methods in Python 2.x code, and the 2to3 converter
will change them to the standard `keys()', `values()', and `items()'
methods.

See also
........

PEP 3106(1) - Revamping dict.keys(), .values() and .items()
     PEP written by Guido van Rossum.  Backported to 2.7 by Alexandre
     Vassalotti; issue 1967(2).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3106

  (2) http://bugs.python.org/issue1967


File: python-whatsnew-3.2.2.info,  Node: PEP 3137 The memoryview Object,  Next: Other Language Changes<3>,  Prev: PEP 3106 Dictionary Views,  Up: What's New in Python 2 7

4.8 PEP 3137: The memoryview Object
===================================

The `memoryview' object provides a view of another object's memory
content that matches the `bytes' type's interface.

    >>> import string
    >>> m = memoryview(string.letters)
    >>> m
    <memory at 0x37f850>
    >>> len(m)           # Returns length of underlying object
    52
    >>> m[0], m[25], m[26]   # Indexing returns one byte
    ('a', 'z', 'A')
    >>> m2 = m[0:26]         # Slicing returns another memoryview
    >>> m2
    <memory at 0x37f080>

The content of the view can be converted to a string of bytes or a list
of integers:

    >>> m2.tobytes()
    'abcdefghijklmnopqrstuvwxyz'
    >>> m2.tolist()
    [97, 98, 99, 100, 101, 102, 103, ... 121, 122]
    >>>

`memoryview' objects allow modifying the underlying object if it's a
mutable object.

    >>> m2[0] = 75
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: cannot modify read-only memory
    >>> b = bytearray(string.letters)  # Creating a mutable object
    >>> b
    bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    >>> mb = memoryview(b)
    >>> mb[0] = '*'         # Assign to view, changing the bytearray.
    >>> b[0:5]              # The bytearray has been changed.
    bytearray(b'*bcde')
    >>>


See also
........

PEP 3137(1) - Immutable Bytes and Mutable Buffer
     PEP written by Guido van Rossum.  Implemented by Travis Oliphant,
     Antoine Pitrou and others.  Backported to 2.7 by Antoine Pitrou;
     issue 2396(2).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3137

  (2) http://bugs.python.org/issue2396


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<3>,  Next: New and Improved Modules,  Prev: PEP 3137 The memoryview Object,  Up: What's New in Python 2 7

4.9 Other Language Changes
==========================

Some smaller changes made to the core Python language are:

   * The syntax for set literals has been backported from Python 3.x.
     Curly brackets are used to surround the contents of the resulting
     mutable set; set literals are distinguished from dictionaries by
     not containing colons and values.  `{}' continues to represent an
     empty dictionary; use `set()' for an empty set.

         >>> {1,2,3,4,5}
         set([1, 2, 3, 4, 5])
         >>> set() # empty set
         set([])
         >>> {}    # empty dict
         {}

     Backported by Alexandre Vassalotti; issue 2335(1).

   * Dictionary and set comprehensions are another feature backported
     from 3.x, generalizing list/generator comprehensions to use the
     literal syntax for sets and dictionaries.

         >>> {x: x*x for x in range(6)}
         {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
         >>> {('a'*x) for x in range(6)}
         set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])

     Backported by Alexandre Vassalotti; issue 2333(2).

   * The `with' statement can now use multiple context managers in one
     statement.  Context managers are processed from left to right and
     each one is treated as beginning a new `with' statement.  This
     means that:

         with A() as a, B() as b:
             ... suite of statements ...

     is equivalent to:

         with A() as a:
             with B() as b:
                 ... suite of statements ...

     The `contextlib.nested()' function provides a very similar
     function, so it's no longer necessary and has been deprecated.

     (Proposed in <http://codereview.appspot.com/53094>; implemented by
     Georg Brandl.)

   * Conversions between floating-point numbers and strings are now
     correctly rounded on most platforms.  These conversions occur in
     many different places: `str()' on floats and complex numbers; the
     `float' and `complex' constructors; numeric formatting;
     serializing and deserializing floats and complex numbers using the
     `marshal', `pickle' and `json' modules; parsing of float and
     imaginary literals in Python code; and `Decimal'-to-float
     conversion.

     Related to this, the `repr()' of a floating-point number _x_ now
     returns a result based on the shortest decimal string that's
     guaranteed to round back to _x_ under correct rounding (with
     round-half-to-even rounding mode).  Previously it gave a string
     based on rounding x to 17 decimal digits.

     The rounding library responsible for this improvement works on
     Windows and on Unix platforms using the gcc, icc, or suncc
     compilers.  There may be a small number of platforms where correct
     operation of this code cannot be guaranteed, so the code is not
     used on such systems.  You can find out which code is being used
     by checking `sys.float_repr_style',  which will be `short' if the
     new code is in use and `legacy' if it isn't.

     Implemented by Eric Smith and Mark Dickinson, using David Gay's
     `dtoa.c' library; issue 7117(3).

   * Conversions from long integers and regular integers to floating
     point now round differently, returning the floating-point number
     closest to the number.  This doesn't matter for small integers that
     can be converted exactly, but for large numbers that will
     unavoidably lose precision, Python 2.7 now approximates more
     closely.  For example, Python 2.6 computed the following:

         >>> n = 295147905179352891391
         >>> float(n)
         2.9514790517935283e+20
         >>> n - long(float(n))
         65535L

     Python 2.7's floating-point result is larger, but much closer to
     the true value:

         >>> n = 295147905179352891391
         >>> float(n)
         2.9514790517935289e+20
         >>> n - long(float(n))
         -1L

     (Implemented by Mark Dickinson; issue 3166(4).)

     Integer division is also more accurate in its rounding behaviours.
     (Also implemented by Mark Dickinson; issue 1811(5).)

   * Implicit coercion for complex numbers has been removed; the
     interpreter will no longer ever attempt to call a `__coerce__()'
     method on complex objects.  (Removed by Meador Inge and Mark
     Dickinson; issue 5211(6).)

   * The `str.format()' method now supports automatic numbering of the
     replacement fields.  This makes using `str.format()' more closely
     resemble using `%s' formatting:

         >>> '{}:{}:{}'.format(2009, 04, 'Sunday')
         '2009:4:Sunday'
         >>> '{}:{}:{day}'.format(2009, 4, day='Sunday')
         '2009:4:Sunday'

     The auto-numbering takes the fields from left to right, so the
     first `{...}' specifier will use the first argument to
     `str.format()', the next specifier will use the next argument, and
     so on.  You can't mix auto-numbering and explicit numbering -
     either number all of your specifier fields or none of them - but
     you can mix auto-numbering and named fields, as in the second
     example above.  (Contributed by Eric Smith; issue 5237(7).)

     Complex numbers now correctly support usage with `format()', and
     default to being right-aligned.  Specifying a precision or
     comma-separation applies to both the real and imaginary parts of
     the number, but a specified field width and alignment is applied
     to the whole of the resulting `1.5+3j' output.  (Contributed by
     Eric Smith; issue 1588(8) and issue 7988(9).)

     The 'F' format code now always formats its output using uppercase
     characters, so it will now produce 'INF' and 'NAN'.  (Contributed
     by Eric Smith; issue 3382(10).)

     A low-level change: the `object.__format__()' method now triggers
     a `PendingDeprecationWarning' if it's passed a format string,
     because the `__format__()' method for `object' converts the object
     to a string representation and formats that.  Previously the
     method silently applied the format string to the string
     representation, but that could hide mistakes in Python code.  If
     you're supplying formatting information such as an alignment or
     precision, presumably you're expecting the formatting to be applied
     in some object-specific way.  (Fixed by Eric Smith; issue
     7994(11).)

   * The `int()' and `long()' types gained a `bit_length' method that
     returns the number of bits necessary to represent its argument in
     binary:

         >>> n = 37
         >>> bin(n)
         '0b100101'
         >>> n.bit_length()
         6
         >>> n = 2**123-1
         >>> n.bit_length()
         123
         >>> (n+1).bit_length()
         124

     (Contributed by Fredrik Johansson and Victor Stinner; issue
     3439(12).)

   * The `import' statement will no longer try an absolute import if a
     relative import (e.g. `from .os import sep') fails.  This fixes a
     bug, but could possibly break certain `import' statements that
     were only working by accident.  (Fixed by Meador Inge; issue
     7902(13).)

   * It's now possible for a subclass of the built-in `unicode' type to
     override the `__unicode__()' method.  (Implemented by Victor
     Stinner; issue 1583863(14).)

   * The `bytearray' type's `translate()' method now accepts `None' as
     its first argument.  (Fixed by Georg Brandl; issue 4759(15).)

   * When using `@classmethod' and `@staticmethod' to wrap methods as
     class or static methods, the wrapper object now exposes the
     wrapped function as their `__func__' attribute.  (Contributed by
     Amaury Forgeot d'Arc, after a suggestion by George Sakkis; issue
     5982(16).)

   * When a restricted set of attributes were set using `__slots__',
     deleting an unset attribute would not raise `AttributeError' as
     you would expect.  Fixed by Benjamin Peterson; issue 7604(17).)

   * Two new encodings are now supported: "cp720", used primarily for
     Arabic text; and "cp858", a variant of CP 850 that adds the euro
     symbol.  (CP720 contributed by Alexander Belchenko and Amaury
     Forgeot d'Arc in issue 1616979(18); CP858 contributed by Tim Hatch
     in issue 8016(19).)

   * The `file' object will now set the `filename' attribute on the
     `IOError' exception when trying to open a directory on POSIX
     platforms (noted by Jan Kaliszewski; issue 4764(20)), and now
     explicitly checks for and forbids writing to read-only file objects
     instead of trusting the C library to catch and report the error
     (fixed by Stefan Krah; issue 5677(21)).

   * The Python tokenizer now translates line endings itself, so the
     `compile()' built-in function now accepts code using any
     line-ending convention.  Additionally, it no longer requires that
     the code end in a newline.

   * Extra parentheses in function definitions are illegal in Python
     3.x, meaning that you get a syntax error from `def f((x)): pass'.
     In Python3-warning mode, Python 2.7 will now warn about this odd
     usage.  (Noted by James Lingard; issue 7362(22).)

   * It's now possible to create weak references to old-style class
     objects.  New-style classes were always weak-referenceable.  (Fixed
     by Antoine Pitrou; issue 8268(23).)

   * When a module object is garbage-collected, the module's dictionary
     is now only cleared if no one else is holding a reference to the
     dictionary (issue 7140(24)).

* Menu:

* Interpreter Changes::
* Optimizations: Optimizations<3>.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2335

  (2) http://bugs.python.org/issue2333

  (3) http://bugs.python.org/issue7117

  (4) http://bugs.python.org/issue3166

  (5) http://bugs.python.org/issue1811

  (6) http://bugs.python.org/issue5211

  (7) http://bugs.python.org/issue5237

  (8) http://bugs.python.org/issue1588

  (9) http://bugs.python.org/issue7988

  (10) http://bugs.python.org/issue3382

  (11) http://bugs.python.org/issue7994

  (12) http://bugs.python.org/issue3439

  (13) http://bugs.python.org/issue7902

  (14) http://bugs.python.org/issue1583863

  (15) http://bugs.python.org/issue4759

  (16) http://bugs.python.org/issue5982

  (17) http://bugs.python.org/issue7604

  (18) http://bugs.python.org/issue1616979

  (19) http://bugs.python.org/issue8016

  (20) http://bugs.python.org/issue4764

  (21) http://bugs.python.org/issue5677

  (22) http://bugs.python.org/issue7362

  (23) http://bugs.python.org/issue8268

  (24) http://bugs.python.org/issue7140


File: python-whatsnew-3.2.2.info,  Node: Interpreter Changes,  Next: Optimizations<3>,  Up: Other Language Changes<3>

4.9.1 Interpreter Changes
-------------------------

A new environment variable, `PYTHONWARNINGS', allows controlling
warnings.  It should be set to a string containing warning settings,
equivalent to those used with the `-W' switch, separated by commas.
(Contributed by Brian Curtin; issue 7301(1).)

  For example, the following setting will print warnings every time
they occur, but turn warnings from the `Cookie' module into an error.
(The exact syntax for setting an environment variable varies across
operating systems and shells.)

    export PYTHONWARNINGS=all,error:::Cookie:0


  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7301


File: python-whatsnew-3.2.2.info,  Node: Optimizations<3>,  Prev: Interpreter Changes,  Up: Other Language Changes<3>

4.9.2 Optimizations
-------------------

Several performance enhancements have been added:

   * A new opcode was added to perform the initial setup for `with'
     statements, looking up the `__enter__()' and `__exit__()' methods.
     (Contributed by Benjamin Peterson.)

   * The garbage collector now performs better for one common usage
     pattern: when many objects are being allocated without deallocating
     any of them.  This would previously take quadratic time for
     garbage collection, but now the number of full garbage collections
     is reduced as the number of objects on the heap grows.  The new
     logic only performs a full garbage collection pass when the middle
     generation has been collected 10 times and when the number of
     survivor objects from the middle generation exceeds 10% of the
     number of objects in the oldest generation.  (Suggested by Martin
     von Löwis and implemented by Antoine Pitrou; issue 4074(1).)

   * The garbage collector tries to avoid tracking simple containers
     which can't be part of a cycle. In Python 2.7, this is now true for
     tuples and dicts containing atomic types (such as ints, strings,
     etc.). Transitively, a dict containing tuples of atomic types won't
     be tracked either. This helps reduce the cost of each garbage
     collection by decreasing the number of objects to be considered
     and traversed by the collector.  (Contributed by Antoine Pitrou;
     issue 4688(2).)

   * Long integers are now stored internally either in base 2**15 or in
     base 2**30, the base being determined at build time.  Previously,
     they were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there's a new configure option
     `--enable-big-digits' that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there's a new structseq `sys.long_info' that
     provides information about the internal format, giving the number
     of bits per digit and the size in bytes of the C type used to store
     each digit:

         >>> import sys
         >>> sys.long_info
         sys.long_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(3).)

     Another set of changes made long objects a few bytes smaller: 2
     bytes smaller on 32-bit systems and 6 bytes on 64-bit.
     (Contributed by Mark Dickinson; issue 5260(4).)

   * The division algorithm for long integers has been made faster by
     tightening the inner loop, doing shifts instead of multiplications,
     and fixing an unnecessary extra iteration.  Various benchmarks
     show speedups of between 50% and 150% for long integer divisions
     and modulo operations.  (Contributed by Mark Dickinson; issue
     5512(5).)  Bitwise operations are also significantly faster
     (initial patch by Gregory Smith; issue 1087418(6)).

   * The implementation of `%' checks for the left-side operand being a
     Python string and special-cases it; this results in a 1-3%
     performance increase for applications that frequently use `%' with
     strings, such as templating libraries.  (Implemented by Collin
     Winter; issue 5176(7).)

   * List comprehensions with an `if' condition are compiled into
     faster bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by
     Jeffrey Yasskin; issue 4715(8).)

   * Converting an integer or long integer to a decimal string was made
     faster by special-casing base 10 instead of using a generalized
     conversion function that supports arbitrary bases.  (Patch by
     Gawain Bolton; issue 6713(9).)

   * The `split()', `replace()', `rindex()', `rpartition()', and
     `rsplit()' methods of string-like types (strings, Unicode strings,
     and `bytearray' objects) now use a fast reverse-search algorithm
     instead of a character-by-character scan.  This is sometimes
     faster by a factor of 10.  (Added by Florent Xicluna; issue
     7462(10) and issue 7622(11).)

   * The `pickle' and `cPickle' modules now automatically intern the
     strings used for attribute names, reducing memory usage of the
     objects resulting from unpickling.  (Contributed by Jake McGuire;
     issue 5084(12).)

   * The `cPickle' module now special-cases dictionaries, nearly
     halving the time required to pickle them.  (Contributed by Collin
     Winter; issue 5670(13).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4074

  (2) http://bugs.python.org/issue4688

  (3) http://bugs.python.org/issue4258

  (4) http://bugs.python.org/issue5260

  (5) http://bugs.python.org/issue5512

  (6) http://bugs.python.org/issue1087418

  (7) http://bugs.python.org/issue5176

  (8) http://bugs.python.org/issue4715

  (9) http://bugs.python.org/issue6713

  (10) http://bugs.python.org/issue7462

  (11) http://bugs.python.org/issue7622

  (12) http://bugs.python.org/issue5084

  (13) http://bugs.python.org/issue5670


File: python-whatsnew-3.2.2.info,  Node: New and Improved Modules,  Next: Build and C API Changes<4>,  Prev: Other Language Changes<3>,  Up: What's New in Python 2 7

4.10 New and Improved Modules
=============================

As in every release, Python's standard library received a number of
enhancements and bug fixes.  Here's a partial list of the most notable
changes, sorted alphabetically by module name. Consult the `Misc/NEWS'
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The `bdb' module's base debugging class `Bdb' gained a feature for
     skipping modules.  The constructor now takes an iterable
     containing glob-style patterns such as `django.*'; the debugger
     will not step into stack frames from a module that matches one of
     these patterns.  (Contributed by Maru Newby after a suggestion by
     Senthil Kumaran; issue 5142(1).)

   * The `binascii' module now supports the buffer API, so it can be
     used with `memoryview' instances and other similar buffer objects.
     (Backported from 3.x by Florent Xicluna; issue 7703(2).)

   * Updated module: the `bsddb' module has been updated from
     4.7.2devel9 to version 4.8.4 of the pybsddb package(3).  The new
     version features better Python 3.x compatibility, various bug
     fixes, and adds several new BerkeleyDB flags and methods.
     (Updated by Jesús Cea Avión; issue 8156(4).  The pybsddb changelog
     can be read at <http://hg.jcea.es/pybsddb/file/tip/ChangeLog>.)

   * The `bz2' module's `BZ2File' now supports the context management
     protocol, so you can write `with bz2.BZ2File(...) as f:'.
     (Contributed by Hagen Fürstenau; issue 3860(5).)

   * New class: the `Counter' class in the `collections' module is
     useful for tallying data.  `Counter' instances behave mostly like
     dictionaries but return zero for missing keys instead of raising a
     `KeyError':

         >>> from collections import Counter
         >>> c = Counter()
         >>> for letter in 'here is a sample of english text':
         ...   c[letter] += 1
         ...
         >>> c
         Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,
         'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,
         'p': 1, 'r': 1, 'x': 1})
         >>> c['e']
         5
         >>> c['z']
         0

     There are three additional `Counter' methods.  `most_common()'
     returns the N most common elements and their counts.  `elements()'
     returns an iterator over the contained elements, repeating each
     element as many times as its count.  `subtract()' takes an
     iterable and subtracts one for each element instead of adding; if
     the argument is a dictionary or another `Counter', the counts are
     subtracted.

         >>> c.most_common(5)
         [(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]
         >>> c.elements() ->
            'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',
            'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',
            'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',
            's', 's', 'r', 't', 't', 'x'
         >>> c['e']
         5
         >>> c.subtract('very heavy on the letter e')
         >>> c['e']    # Count is now lower
         -1

     Contributed by Raymond Hettinger; issue 1696199(6).

     New class: `OrderedDict' is described in the earlier section *note
     PEP 372; Adding an Ordered Dictionary to collections: 7e.

     New method: The `deque' data type now has a `count()' method that
     returns the number of contained elements equal to the supplied
     argument _x_, and a `reverse()' method that reverses the elements
     of the deque in-place.  `deque' also exposes its maximum length as
     the read-only `maxlen' attribute.  (Both features added by Raymond
     Hettinger.)

     The `namedtuple' class now has an optional _rename_ parameter.  If
     _rename_ is true, field names that are invalid because they've
     been repeated or aren't legal Python identifiers will be renamed
     to legal names that are derived from the field's position within
     the list of fields:

         >>> from collections import namedtuple
         >>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
         >>> T._fields
         ('field1', '_1', '_2', 'field2')

     (Added by Raymond Hettinger; issue 1818(7).)

     Finally, the `Mapping' abstract base class now returns
     `NotImplemented' if a mapping is compared to another type that
     isn't a `Mapping'.  (Fixed by Daniel Stutzbach; issue 8729(8).)

   * Constructors for the parsing classes in the `ConfigParser' module
     now take a _allow_no_value_ parameter, defaulting to false; if
     true, options without values will be allowed.  For example:

         >>> import ConfigParser, StringIO
         >>> sample_config = """
         ... [mysqld]
         ... user = mysql
         ... pid-file = /var/run/mysqld/mysqld.pid
         ... skip-bdb
         ... """
         >>> config = ConfigParser.RawConfigParser(allow_no_value=True)
         >>> config.readfp(StringIO.StringIO(sample_config))
         >>> config.get('mysqld', 'user')
         'mysql'
         >>> print config.get('mysqld', 'skip-bdb')
         None
         >>> print config.get('mysqld', 'unknown')
         Traceback (most recent call last):
           ...
         NoOptionError: No option 'unknown' in section: 'mysqld'

     (Contributed by Mats Kindahl; issue 7005(9).)

   * Deprecated function: `contextlib.nested()', which allows handling
     more than one context manager with a single `with' statement, has
     been deprecated, because the `with' statement now supports
     multiple context managers.

   * The `cookielib' module now ignores cookies that have an invalid
     version field, one that doesn't contain an integer value.  (Fixed
     by John J. Lee; issue 3924(10).)

   * The `copy' module's `deepcopy()' function will now correctly copy
     bound instance methods.  (Implemented by Robert Collins; issue
     1515(11).)

   * The `ctypes' module now always converts `None' to a C NULL pointer
     for arguments declared as pointers.  (Changed by Thomas Heller;
     issue 4606(12).)  The underlying libffi library(13) has been
     updated to version 3.0.9, containing various fixes for different
     platforms.  (Updated by Matthias Klose; issue 8142(14).)

   * New method: the `datetime' module's `timedelta' class gained a
     `total_seconds()' method that returns the number of seconds in the
     duration.  (Contributed by Brian Quinlan; issue 5788(15).)

   * New method: the `Decimal' class gained a `from_float()' class
     method that performs an exact conversion of a floating-point
     number to a `Decimal'.  This exact conversion strives for the
     closest decimal approximation to the floating-point
     representation's value; the resulting decimal value will therefore
     still include the inaccuracy, if any.  For example,
     `Decimal.from_float(0.1)' returns
     `Decimal('0.1000000000000000055511151231257827021181583404541015625')'.
     (Implemented by Raymond Hettinger; issue 4796(16).)

     Comparing instances of `Decimal' with floating-point numbers now
     produces sensible results based on the numeric values of the
     operands.  Previously such comparisons would fall back to Python's
     default rules for comparing objects, which produced arbitrary
     results based on their type.  Note that you still cannot combine
     `Decimal' and floating-point in other operations such as addition,
     since you should be explicitly choosing how to convert between
     float and `Decimal'.  (Fixed by Mark Dickinson; issue 2531(17).)

     The constructor for `Decimal' now accepts floating-point numbers
     (added by Raymond Hettinger; issue 8257(18)) and non-European
     Unicode characters such as Arabic-Indic digits (contributed by
     Mark Dickinson; issue 6595(19)).

     Most of the methods of the `Context' class now accept integers as
     well as `Decimal' instances; the only exceptions are the
     `canonical()' and `is_canonical()' methods.  (Patch by Juan José
     Conti; issue 7633(20).)

     When using `Decimal' instances with a string's `format()' method,
     the default alignment was previously left-alignment.  This has
     been changed to right-alignment, which is more sensible for
     numeric types.  (Changed by Mark Dickinson; issue 6857(21).)

     Comparisons involving a signaling NaN value (or `sNAN') now signal
     `InvalidOperation' instead of silently returning a true or false
     value depending on the comparison operator.  Quiet NaN values (or
     `NaN') are now hashable.  (Fixed by Mark Dickinson; issue
     7279(22).)

   * The `difflib' module now produces output that is more compatible
     with modern *diff*/*patch* tools through one small change, using a
     tab character instead of spaces as a separator in the header
     giving the filename.  (Fixed by Anatoly Techtonik; issue 7585(23).)

   * The Distutils `sdist' command now always regenerates the
     `MANIFEST' file, since even if the `MANIFEST.in' or `setup.py'
     files haven't been modified, the user might have created some new
     files that should be included.  (Fixed by Tarek Ziadé; issue
     8688(24).)

   * The `doctest' module's `IGNORE_EXCEPTION_DETAIL' flag will now
     ignore the name of the module containing the exception being
     tested.  (Patch by Lennart Regebro; issue 7490(25).)

   * The `email' module's `Message' class will now accept a
     Unicode-valued payload, automatically converting the payload to
     the encoding specified by `output_charset'.  (Added by R. David
     Murray; issue 1368247(26).)

   * The `Fraction' class now accepts a single float or `Decimal'
     instance, or two rational numbers, as arguments to its
     constructor.  (Implemented by Mark Dickinson; rationals added in
     issue 5812(27), and float/decimal in issue 8294(28).)

     Ordering comparisons (`<', `<=', `>', `>=') between fractions and
     complex numbers now raise a `TypeError'.  This fixes an oversight,
     making the `Fraction' match the other numeric types.

   * New class: `FTP_TLS' in the `ftplib' module provides secure FTP
     connections using TLS encapsulation of authentication as well as
     subsequent control and data transfers.  (Contributed by Giampaolo
     Rodola; issue 2054(29).)

     The `storbinary()' method for binary uploads can now restart
     uploads thanks to an added _rest_ parameter (patch by Pablo Mouzo;
     issue 6845(30).)

   * New class decorator: `total_ordering()' in the `functools' module
     takes a class that defines an `__eq__()' method and one of
     `__lt__()', `__le__()', `__gt__()', or `__ge__()', and generates
     the missing comparison methods.  Since the `__cmp__()' method is
     being deprecated in Python 3.x, this decorator makes it easier to
     define ordered classes.  (Added by Raymond Hettinger; issue
     5479(31).)

     New function: `cmp_to_key()' will take an old-style comparison
     function that expects two arguments and return a new callable that
     can be used as the _key_ parameter to functions such as
     `sorted()', `min()' and `max()', etc.  The primary intended use is
     to help with making code compatible with Python 3.x.  (Added by
     Raymond Hettinger.)

   * New function: the `gc' module's `is_tracked()' returns true if a
     given instance is tracked by the garbage collector, false
     otherwise. (Contributed by Antoine Pitrou; issue 4688(32).)

   * The `gzip' module's `GzipFile' now supports the context management
     protocol, so you can write `with gzip.GzipFile(...) as f:'
     (contributed by Hagen Fürstenau; issue 3860(33)), and it now
     implements the `io.BufferedIOBase' ABC, so you can wrap it with
     `io.BufferedReader' for faster processing (contributed by Nir
     Aides; issue 7471(34)).  It's also now possible to override the
     modification time recorded in a gzipped file by providing an
     optional timestamp to the constructor.  (Contributed by Jacques
     Frechet; issue 4272(35).)

     Files in gzip format can be padded with trailing zero bytes; the
     `gzip' module will now consume these trailing bytes.  (Fixed by
     Tadek Pietraszek and Brian Curtin; issue 2846(36).)

   * New attribute: the `hashlib' module now has an `algorithms'
     attribute containing a tuple naming the supported algorithms.  In
     Python 2.7, `hashlib.algorithms' contains `('md5', 'sha1',
     'sha224', 'sha256', 'sha384', 'sha512')'.  (Contributed by Carl
     Chenet; issue 7418(37).)

   * The default `HTTPResponse' class used by the `httplib' module now
     supports buffering, resulting in much faster reading of HTTP
     responses.  (Contributed by Kristján Valur Jónsson; issue
     4879(38).)

     The `HTTPConnection' and `HTTPSConnection' classes now support a
     _source_address_ parameter, a `(host, port)' 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(39).)

   * The `ihooks' module now supports relative imports.  Note that
     `ihooks' is an older module for customizing imports, superseded by
     the `imputil' module added in Python 2.0.  (Relative import
     support added by Neil Schemenauer.)

   * The `imaplib' module now supports IPv6 addresses.  (Contributed by
     Derek Morr; issue 1655(40).)

   * New function: the `inspect' module's `getcallargs()' takes a
     callable and its positional and keyword arguments, and figures out
     which of the callable's parameters will receive each argument,
     returning a dictionary mapping argument names to their values.
     For example:

         >>> from inspect import getcallargs
         >>> def f(a, b=1, *pos, **named):
         ...     pass
         >>> getcallargs(f, 1, 2, 3)
         {'a': 1, 'b': 2, 'pos': (3,), 'named': {}}
         >>> getcallargs(f, a=2, x=4)
         {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}
         >>> getcallargs(f)
         Traceback (most recent call last):
         ...
         TypeError: f() takes at least 1 argument (0 given)

     Contributed by George Sakkis; issue 3135(41).

   * Updated module: The `io' library has been upgraded to the version
     shipped with Python 3.1.  For 3.1, the I/O library was entirely
     rewritten in C and is 2 to 20 times faster depending on the task
     being performed.  The original Python version was renamed to the
     `_pyio' module.

     One minor resulting change: the `io.TextIOBase' class now has an
     `errors' attribute giving the error setting used for encoding and
     decoding errors (one of `'strict'', `'replace'', `'ignore'').

     The `io.FileIO' class now raises an `OSError' when passed an
     invalid file descriptor.  (Implemented by Benjamin Peterson; issue
     4991(42).)  The `truncate()' method now preserves the file
     position; previously it would change the file position to the end
     of the new file.  (Fixed by Pascal Chambon; issue 6939(43).)

   * New function: `itertools.compress(data, selectors)' takes two
     iterators.  Elements of _data_ are returned if the corresponding
     value in _selectors_ is true:

         itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>
           A, C, E, F


     New function: `itertools.combinations_with_replacement(iter, r)'
     returns all the possible _r_-length combinations of elements from
     the iterable _iter_.  Unlike `combinations()', individual elements
     can be repeated in the generated combinations:

         itertools.combinations_with_replacement('abc', 2) =>
           ('a', 'a'), ('a', 'b'), ('a', 'c'),
           ('b', 'b'), ('b', 'c'), ('c', 'c')

     Note that elements are treated as unique depending on their
     position in the input, not their actual values.

     The `itertools.count()' function now has a _step_ argument that
     allows incrementing by values other than 1.  `count()' also now
     allows keyword arguments, and using non-integer values such as
     floats or `Decimal' instances.  (Implemented by Raymond Hettinger;
     issue 5032(44).)

     `itertools.combinations()' and `itertools.product()' previously
     raised `ValueError' for values of _r_ larger than the input
     iterable.  This was deemed a specification error, so they now
     return an empty iterator.  (Fixed by Raymond Hettinger; issue
     4816(45).)

   * Updated module: The `json' module was upgraded to version 2.0.9 of
     the simplejson package, which includes a C extension that makes
     encoding and decoding faster.  (Contributed by Bob Ippolito; issue
     4136(46).)

     To support the new `collections.OrderedDict' type, `json.load()'
     now has an optional _object_pairs_hook_ parameter that will be
     called with any object literal that decodes to a list of pairs.
     (Contributed by Raymond Hettinger; issue 5381(47).)

   * The `mailbox' module's `Maildir' class now records the timestamp
     on the directories it reads, and only re-reads them if the
     modification time has subsequently changed.  This improves
     performance by avoiding unneeded directory scans.  (Fixed by A.M.
     Kuchling and Antoine Pitrou; issue 1607951(48), issue 6896(49).)

   * New functions: the `math' module gained `erf()' and `erfc()' for
     the error function and the complementary error function, `expm1()'
     which computes `e**x - 1' with more precision than using `exp()'
     and subtracting 1, `gamma()' for the Gamma function, and
     `lgamma()' for the natural log of the Gamma function.
     (Contributed by Mark Dickinson and nirinA raseliarison; issue
     3366(50).)

   * The `multiprocessing' module's `Manager*' classes can now be
     passed a callable that will be called whenever a subprocess is
     started, along with a set of arguments that will be passed to the
     callable.  (Contributed by lekma; issue 5585(51).)

     The `Pool' class, which controls a pool of worker processes, now
     has an optional _maxtasksperchild_ parameter.  Worker processes
     will perform the specified number of tasks and then exit, causing
     the `Pool' to start a new worker.  This is useful if tasks may leak
     memory or other resources, or if some tasks will cause the worker
     to become very large.  (Contributed by Charles Cazabon; issue
     6963(52).)

   * The `nntplib' module now supports IPv6 addresses.  (Contributed by
     Derek Morr; issue 1664(53).)

   * New functions: the `os' module wraps the following POSIX system
     calls: `getresgid()' and `getresuid()', which return the real,
     effective, and saved GIDs and UIDs; `setresgid()' and
     `setresuid()', which set real, effective, and saved GIDs and UIDs
     to new values; `initgroups()', which initialize the group access
     list for the current process.  (GID/UID functions contributed by
     Travis H.; issue 6508(54).  Support for initgroups added by
     Jean-Paul Calderone; issue 7333(55).)

     The `os.fork()' function now re-initializes the import lock in the
     child process; this fixes problems on Solaris when `fork()' is
     called from a thread.  (Fixed by Zsolt Cserna; issue 7242(56).)

   * In the `os.path' module, the `normpath()' and `abspath()'
     functions now preserve Unicode; if their input path is a Unicode
     string, the return value is also a Unicode string.  (`normpath()'
     fixed by Matt Giuca in issue 5827(57); `abspath()' fixed by Ezio
     Melotti in issue 3426(58).)

   * The `pydoc' module now has help for the various symbols that Python
     uses.  You can now do `help('<<')' or `help('@')', for example.
     (Contributed by David Laban; issue 4739(59).)

   * The `re' module's `split()', `sub()', and `subn()' now accept an
     optional _flags_ argument, for consistency with the other
     functions in the module.  (Added by Gregory P. Smith.)

   * New function: `run_path()' in the `runpy' module will execute the
     code at a provided _path_ argument.  _path_ can be the path of a
     Python source file (`example.py'), a compiled bytecode file
     (`example.pyc'), a directory (`./package/'), or a zip archive
     (`example.zip').  If a directory or zip path is provided, it will
     be added to the front of `sys.path' and the module `__main__' will
     be imported.  It's expected that the directory or zip contains a
     `__main__.py'; if it doesn't, some other `__main__.py' might be
     imported from a location later in `sys.path'.  This makes more of
     the machinery of `runpy' available to scripts that want to mimic
     the way Python's command line processes an explicit path name.
     (Added by Nick Coghlan; issue 6816(60).)

   * New function: in the `shutil' module, `make_archive()' takes a
     filename, archive type (zip or tar-format), and a directory path,
     and creates an archive containing the directory's contents.
     (Added by Tarek Ziadé.)

     `shutil''s `copyfile()' and `copytree()' functions now raise a
     `SpecialFileError' exception when asked to copy a named pipe.
     Previously the code would treat named pipes like a regular file by
     opening them for reading, and this would block indefinitely.
     (Fixed by Antoine Pitrou; issue 3002(61).)

   * The `signal' module no longer re-installs the signal handler
     unless this is truly necessary, which fixes a bug that could make
     it impossible to catch the EINTR signal robustly.  (Fixed by
     Charles-Francois Natali; issue 8354(62).)

   * New functions: in the `site' module, three new functions return
     various site- and user-specific paths.  `getsitepackages()'
     returns a list containing all global site-packages directories,
     `getusersitepackages()' returns the path of the user's
     site-packages directory, and `getuserbase()' returns the value of
     the `USER_BASE' environment variable, giving the path to a
     directory that can be used to store data.  (Contributed by Tarek
     Ziadé; issue 6693(63).)

     The `site' module now reports exceptions occurring when the
     `sitecustomize' module is imported, and will no longer catch and
     swallow the `KeyboardInterrupt' exception.  (Fixed by Victor
     Stinner; issue 3137(64).)

   * The `create_connection()' function gained a _source_address_
     parameter, a `(host, port)' 2-tuple giving the source address that
     will be used for the connection.  (Contributed by Eldon Ziegler;
     issue 3972(65).)

     The `recv_into()' and `recvfrom_into()' methods will now write
     into objects that support the buffer API, most usefully the
     `bytearray' and `memoryview' objects.  (Implemented by Antoine
     Pitrou; issue 8104(66).)

   * The `SocketServer' module's `TCPServer' class now supports socket
     timeouts and disabling the Nagle algorithm.  The
     `disable_nagle_algorithm' class attribute defaults to False; if
     overridden to be True, new request connections will have the
     TCP_NODELAY option set to prevent buffering many small sends into
     a single TCP packet.  The `timeout' class attribute can hold a
     timeout in seconds that will be applied to the request socket; if
     no request is received within that time, `handle_timeout()' will
     be called and `handle_request()' will return.  (Contributed by
     Kristján Valur Jónsson; issue 6192(67) and issue 6267(68).)

   * Updated module: the `sqlite3' module has been updated to version
     2.6.0 of the pysqlite package(69). Version 2.6.0 includes a number
     of bugfixes, and adds the ability to load SQLite extensions from
     shared libraries.  Call the `enable_load_extension(True)' method
     to enable extensions, and then call `load_extension()' to load a
     particular shared library.  (Updated by Gerhard Häring.)

   * The `ssl' module's `ssl.SSLSocket' objects now support the buffer
     API, which fixed a test suite failure (fix by Antoine Pitrou;
     issue 7133(70)) and automatically set OpenSSL's
     `SSL_MODE_AUTO_RETRY', which will prevent an error code being
     returned from `recv()' operations that trigger an SSL
     renegotiation (fix by Antoine Pitrou; issue 8222(71)).

     The `ssl.wrap_socket()' constructor function now takes a _ciphers_
     argument that's a string listing the encryption algorithms to be
     allowed; the format of the string is described in the OpenSSL
     documentation(72).  (Added by Antoine Pitrou; issue 8322(73).)

     Another change makes the extension load all of OpenSSL's ciphers
     and digest algorithms so that they're all available.  Some SSL
     certificates couldn't be verified, reporting an "unknown algorithm"
     error.  (Reported by Beda Kosata, and fixed by Antoine Pitrou;
     issue 8484(74).)

     The version of OpenSSL being used is now available as the module
     attributes `ssl.OPENSSL_VERSION' (a string),
     `ssl.OPENSSL_VERSION_INFO' (a 5-tuple), and
     `ssl.OPENSSL_VERSION_NUMBER' (an integer).  (Added by Antoine
     Pitrou; issue 8321(75).)

   * The `struct' module will no longer silently ignore overflow errors
     when a value is too large for a particular integer format code
     (one of `bBhHiIlLqQ'); it now always raises a `struct.error'
     exception.  (Changed by Mark Dickinson; issue 1523(76).)  The
     `pack()' function will also attempt to use `__index__()' to
     convert and pack non-integers before trying the `__int__()' method
     or reporting an error.  (Changed by Mark Dickinson; issue
     8300(77).)

   * New function: the `subprocess' module's `check_output()' runs a
     command with a specified set of arguments and returns the
     command's output as a string when the command runs without error,
     or raises a `CalledProcessError' exception otherwise.

         >>> subprocess.check_output(['df', '-h', '.'])
         'Filesystem     Size   Used  Avail Capacity  Mounted on\n
         /dev/disk0s2    52G    49G   3.0G    94%    /\n'

         >>> subprocess.check_output(['df', '-h', '/bogus'])
           ...
         subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1

     (Contributed by Gregory P. Smith.)

     The `subprocess' module will now retry its internal system calls
     on receiving an `EINTR' signal.  (Reported by several people; final
     patch by Gregory P. Smith in issue 1068268(78).)

   * New function: `is_declared_global()' in the `symtable' module
     returns true for variables that are explicitly declared to be
     global, false for ones that are implicitly global.  (Contributed
     by Jeremy Hylton.)

   * The `syslog' module will now use the value of `sys.argv[0]' as the
     identifier instead of the previous default value of `'python''.
     (Changed by Sean Reifschneider; issue 8451(79).)

   * The `sys.version_info' value is now a named tuple, with attributes
     named `major', `minor', `micro', `releaselevel', and `serial'.
     (Contributed by Ross Light; issue 4285(80).)

     `sys.getwindowsversion()' also returns a named tuple, with
     attributes named `major', `minor', `build', `platform',
     `service_pack', `service_pack_major', `service_pack_minor',
     `suite_mask', and `product_type'.  (Contributed by Brian Curtin;
     issue 7766(81).)

   * The `tarfile' module's default error handling has changed, to no
     longer suppress fatal errors.  The default error level was
     previously 0, which meant that errors would only result in a
     message being written to the debug log, but because the debug log
     is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there's
     an error.  (Changed by Lars Gustäbel; issue 7357(82).)

     `tarfile' now supports filtering the `TarInfo' objects being added
     to a tar file.  When you call `add()', you may supply an optional
     _filter_ argument that's a callable.  The _filter_ callable will
     be passed the `TarInfo' for every file being added, and can modify
     and return it.  If the callable returns `None', the file will be
     excluded from the resulting archive.  This is more powerful than
     the existing _exclude_ argument, which has therefore been
     deprecated.  (Added by Lars Gustäbel; issue 6856(83).)  The
     `TarFile' class also now supports the context manager protocol.
     (Added by Lars Gustäbel; issue 7232(84).)

   * The `wait()' method of the `threading.Event' class now returns the
     internal flag on exit.  This means the method will usually return
     true because `wait()' is supposed to block until the internal flag
     becomes true.  The return value will only be false if a timeout
     was provided and the operation timed out.  (Contributed by Tim
     Lesher; issue 1674032(85).)

   * The Unicode database provided by the `unicodedata' module is now
     used internally to determine which characters are numeric,
     whitespace, or represent line breaks.  The database also includes
     information from the `Unihan.txt' data file (patch by Anders
     Chrigström and Amaury Forgeot d'Arc; issue 1571184(86)) and has
     been updated to version 5.2.0 (updated by Florent Xicluna; issue
     8024(87)).

   * The `urlparse' module's `urlsplit()' now handles unknown URL
     schemes in a fashion compliant with RFC 3986(88): if the URL is of
     the form `"<something>://..."', the text before the `://' is
     treated as the scheme, even if it's a made-up scheme that the
     module doesn't know about.  This change may break code that worked
     around the old behaviour.  For example, Python 2.6.4 or 2.5 will
     return the following:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

     The `urlparse' module also supports IPv6 literal addresses as
     defined by RFC 2732(89) (contributed by Senthil Kumaran; issue
     2987(90)).

         >>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')
         ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',
                     path='/foo', params='', query='', fragment='')


   * New class: the `WeakSet' class in the `weakref' module is a set
     that only holds weak references to its elements; elements will be
     removed once there are no references pointing to them.
     (Originally implemented in Python 3.x by Raymond Hettinger, and
     backported to 2.7 by Michael Foord.)

   * The ElementTree library, `xml.etree', no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like `<?xml-stylesheet href="#style1"?>') or comment
     (which looks like `<!-- comment -->').  (Patch by Neil Muller;
     issue 2746(91).)

   * The XML-RPC client and server, provided by the `xmlrpclib' and
     `SimpleXMLRPCServer' modules, have improved performance by
     supporting HTTP/1.1 keep-alive and by optionally using gzip
     encoding to compress the XML being exchanged.  The gzip
     compression is controlled by the `encode_threshold' attribute of
     `SimpleXMLRPCRequestHandler', which contains a size in bytes;
     responses larger than this will be compressed.  (Contributed by
     Kristján Valur Jónsson; issue 6267(92).)

   * The `zipfile' module's `ZipFile' now supports the context
     management protocol, so you can write `with zipfile.ZipFile(...)
     as f:'.  (Contributed by Brian Curtin; issue 5511(93).)

     `zipfile' now also supports archiving empty directories and
     extracts them correctly.  (Fixed by Kuba Wieczorek; issue
     4710(94).)  Reading files out of an archive is faster, and
     interleaving `read()' and `readline()' now works correctly.
     (Contributed by Nir Aides; issue 7610(95).)

     The `is_zipfile()' function now accepts a file object, in addition
     to the path names accepted in earlier versions.  (Contributed by
     Gabriel Genellina; issue 4756(96).)

     The `writestr()' method now has an optional _compress_type_
     parameter that lets you override the default compression method
     specified in the `ZipFile' constructor.  (Contributed by Ronald
     Oussoren; issue 6003(97).)

* Menu:

* New module; importlib: New module importlib.
* New module; sysconfig: New module sysconfig.
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk.
* Updated module; unittest: Updated module unittest.
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5142

  (2) http://bugs.python.org/issue7703

  (3) http://www.jcea.es/programacion/pybsddb.htm

  (4) http://bugs.python.org/issue8156

  (5) http://bugs.python.org/issue3860

  (6) http://bugs.python.org/issue1696199

  (7) http://bugs.python.org/issue1818

  (8) http://bugs.python.org/issue8729

  (9) http://bugs.python.org/issue7005

  (10) http://bugs.python.org/issue3924

  (11) http://bugs.python.org/issue1515

  (12) http://bugs.python.org/issue4606

  (13) http://sourceware.org/libffi/

  (14) http://bugs.python.org/issue8142

  (15) http://bugs.python.org/issue5788

  (16) http://bugs.python.org/issue4796

  (17) http://bugs.python.org/issue2531

  (18) http://bugs.python.org/issue8257

  (19) http://bugs.python.org/issue6595

  (20) http://bugs.python.org/issue7633

  (21) http://bugs.python.org/issue6857

  (22) http://bugs.python.org/issue7279

  (23) http://bugs.python.org/issue7585

  (24) http://bugs.python.org/issue8688

  (25) http://bugs.python.org/issue7490

  (26) http://bugs.python.org/issue1368247

  (27) http://bugs.python.org/issue5812

  (28) http://bugs.python.org/issue8294

  (29) http://bugs.python.org/issue2054

  (30) http://bugs.python.org/issue6845

  (31) http://bugs.python.org/issue5479

  (32) http://bugs.python.org/issue4688

  (33) http://bugs.python.org/issue3860

  (34) http://bugs.python.org/issue7471

  (35) http://bugs.python.org/issue4272

  (36) http://bugs.python.org/issue2846

  (37) http://bugs.python.org/issue7418

  (38) http://bugs.python.org/issue4879

  (39) http://bugs.python.org/issue3972

  (40) http://bugs.python.org/issue1655

  (41) http://bugs.python.org/issue3135

  (42) http://bugs.python.org/issue4991

  (43) http://bugs.python.org/issue6939

  (44) http://bugs.python.org/issue5032

  (45) http://bugs.python.org/issue4816

  (46) http://bugs.python.org/issue4136

  (47) http://bugs.python.org/issue5381

  (48) http://bugs.python.org/issue1607951

  (49) http://bugs.python.org/issue6896

  (50) http://bugs.python.org/issue3366

  (51) http://bugs.python.org/issue5585

  (52) http://bugs.python.org/issue6963

  (53) http://bugs.python.org/issue1664

  (54) http://bugs.python.org/issue6508

  (55) http://bugs.python.org/issue7333

  (56) http://bugs.python.org/issue7242

  (57) http://bugs.python.org/issue5827

  (58) http://bugs.python.org/issue3426

  (59) http://bugs.python.org/issue4739

  (60) http://bugs.python.org/issue6816

  (61) http://bugs.python.org/issue3002

  (62) http://bugs.python.org/issue8354

  (63) http://bugs.python.org/issue6693

  (64) http://bugs.python.org/issue3137

  (65) http://bugs.python.org/issue3972

  (66) http://bugs.python.org/issue8104

  (67) http://bugs.python.org/issue6192

  (68) http://bugs.python.org/issue6267

  (69) http://code.google.com/p/pysqlite/

  (70) http://bugs.python.org/issue7133

  (71) http://bugs.python.org/issue8222

  (72) http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT

  (73) http://bugs.python.org/issue8322

  (74) http://bugs.python.org/issue8484

  (75) http://bugs.python.org/issue8321

  (76) http://bugs.python.org/issue1523

  (77) http://bugs.python.org/issue8300

  (78) http://bugs.python.org/issue1068268

  (79) http://bugs.python.org/issue8451

  (80) http://bugs.python.org/issue4285

  (81) http://bugs.python.org/issue7766

  (82) http://bugs.python.org/issue7357

  (83) http://bugs.python.org/issue6856

  (84) http://bugs.python.org/issue7232

  (85) http://bugs.python.org/issue1674032

  (86) http://bugs.python.org/issue1571184

  (87) http://bugs.python.org/issue8024

  (88) http://tools.ietf.org/html/rfc3986.html

  (89) http://tools.ietf.org/html/rfc2732.html

  (90) http://bugs.python.org/issue2987

  (91) http://bugs.python.org/issue2746

  (92) http://bugs.python.org/issue6267

  (93) http://bugs.python.org/issue5511

  (94) http://bugs.python.org/issue4710

  (95) http://bugs.python.org/issue7610

  (96) http://bugs.python.org/issue4756

  (97) http://bugs.python.org/issue6003


File: python-whatsnew-3.2.2.info,  Node: New module importlib,  Next: New module sysconfig,  Up: New and Improved Modules

4.10.1 New module: importlib
----------------------------

Python 3.1 includes the `importlib' package, a re-implementation of the
logic underlying Python's `import' statement.  `importlib' is useful
for implementors of Python interpreters and to users who wish to write
new importers that can participate in the import process.  Python 2.7
doesn't contain the complete `importlib' package, but instead has a
tiny subset that contains a single function, `import_module()'.

  `import_module(name, package=None)' imports a module.  _name_ is a
string containing the module or package's name.  It's possible to do
relative imports by providing a string that begins with a `.'
character, such as `..utils.errors'.  For relative imports, the
_package_ argument must be provided and is the name of the package that
will be used as the anchor for the relative import.  `import_module()'
both inserts the imported module into `sys.modules' and returns the
module object.

  Here are some examples:

    >>> from importlib import import_module
    >>> anydbm = import_module('anydbm')  # Standard absolute import
    >>> anydbm
    <module 'anydbm' from '/p/python/Lib/anydbm.py'>
    >>> # Relative import
    >>> file_util = import_module('..file_util', 'distutils.command')
    >>> file_util
    <module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>

`importlib' was implemented by Brett Cannon and introduced in Python
3.1.


File: python-whatsnew-3.2.2.info,  Node: New module sysconfig,  Next: ttk Themed Widgets for Tk,  Prev: New module importlib,  Up: New and Improved Modules

4.10.2 New module: sysconfig
----------------------------

The `sysconfig' module has been pulled out of the Distutils package,
becoming a new top-level module in its own right.  `sysconfig' provides
functions for getting information about Python's build process:
compiler switches, installation paths, the platform name, and whether
Python is running from its source directory.

  Some of the functions in the module are:

   * `get_config_var()' returns variables from Python's Makefile and
     the `pyconfig.h' file.

   * `get_config_vars()' returns a dictionary containing all of the
     configuration variables.

   * `getpath()' returns the configured path for a particular type of
     module: the standard library, site-specific modules,
     platform-specific modules, etc.

   * `is_python_build()' returns true if you're running a binary from a
     Python source tree, and false otherwise.

  Consult the `sysconfig' documentation for more details and for a
complete list of functions.

  The Distutils package and `sysconfig' are now maintained by Tarek
Ziadé, who has also started a Distutils2 package (source repository at
<http://hg.python.org/distutils2/>) for developing a next-generation
version of Distutils.


File: python-whatsnew-3.2.2.info,  Node: ttk Themed Widgets for Tk,  Next: Updated module unittest,  Prev: New module sysconfig,  Up: New and Improved Modules

4.10.3 ttk: Themed Widgets for Tk
---------------------------------

Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk
widgets but have a more customizable appearance and can therefore more
closely resemble the native platform's widgets.  This widget set was
originally called Tile, but was renamed to Ttk (for "themed Tk") on
being added to Tcl/Tck release 8.5.

  To learn more, read the `ttk' module documentation.  You may also
wish to read the Tcl/Tk manual page describing the Ttk theme engine,
available at <http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm>. Some
screenshots of the Python/Ttk code in use are at
<http://code.google.com/p/python-ttk/wiki/Screenshots>.

  The `ttk' module was written by Guilherme Polo and added in issue
2983(1).  An alternate version called `Tile.py', written by Martin
Franklin and maintained by Kevin Walzer, was proposed for inclusion in
issue 2618(2), but the authors argued that Guilherme Polo's work was
more comprehensive.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2983

  (2) http://bugs.python.org/issue2618


File: python-whatsnew-3.2.2.info,  Node: Updated module unittest,  Next: Updated module ElementTree 1 3,  Prev: ttk Themed Widgets for Tk,  Up: New and Improved Modules

4.10.4 Updated module: unittest
-------------------------------

The `unittest' module was greatly enhanced; many new features were
added.  Most of these features were implemented by Michael Foord,
unless otherwise noted.  The enhanced version of the module is
downloadable separately for use with Python versions 2.4 to 2.6,
packaged as the `unittest2' package, from
<http://pypi.python.org/pypi/unittest2>.

  When used from the command line, the module can automatically discover
tests.  It's not as fancy as py.test(1) or nose(2), but provides a
simple way to run tests kept within a set of package directories.  For
example, the following command will search the `test/' subdirectory for
any importable test files named `test*.py':

    python -m unittest discover -s test

Consult the `unittest' module documentation for more details.
(Developed in issue 6001(3).)

  The `main()' function supports some other new options:

   * `-b' or `--buffer' will buffer the standard output and standard
     error streams during each test.  If the test passes, any resulting
     output will be discarded; on failure, the buffered output will be
     displayed.

   * `-c' or `--catch' will cause the control-C interrupt to be handled
     more gracefully.  Instead of interrupting the test process
     immediately, the currently running test will be completed and then
     the partial results up to the interruption will be reported.  If
     you're impatient, a second press of control-C will cause an
     immediate interruption.

     This control-C handler tries to avoid causing problems when the
     code being tested or the tests being run have defined a signal
     handler of their own, by noticing that a signal handler was
     already set and calling it.  If this doesn't work for you, there's
     a `removeHandler()' decorator that can be used to mark tests that
     should have the control-C handling disabled.

   * `-f' or `--failfast' makes test execution stop immediately when a
     test fails instead of continuing to execute further tests.
     (Suggested by Cliff Dyer and implemented by Michael Foord; issue
     8074(4).)

  The progress messages now show 'x' for expected failures and 'u' for
unexpected successes when run in verbose mode.  (Contributed by
Benjamin Peterson.)

  Test cases can raise the `SkipTest' exception to skip a test (issue
1034053(5)).

  The error messages for `assertEqual()', `assertTrue()', and
`assertFalse()' failures now provide more information.  If you set the
`longMessage' attribute of your `TestCase' classes to True, both the
standard error message and any additional message you provide will be
printed for failures.  (Added by Michael Foord; issue 5663(6).)

  The `assertRaises()' method now returns a context handler when called
without providing a callable object to run.  For example, you can write
this:

    with self.assertRaises(KeyError):
        {}['foo']

(Implemented by Antoine Pitrou; issue 4444(7).)

  Module- and class-level setup and teardown fixtures are now supported.
Modules can contain `setUpModule()' and `tearDownModule()' functions.
Classes can have `setUpClass()' and `tearDownClass()' methods that must
be defined as class methods (using `@classmethod' or equivalent).
These functions and methods are invoked when the test runner switches
to a test case in a different module or class.

  The methods `addCleanup()' and `doCleanups()' were added.
`addCleanup()' lets you add cleanup functions that will be called
unconditionally (after `setUp()' if `setUp()' fails, otherwise after
`tearDown()'). This allows for much simpler resource allocation and
deallocation during tests (issue 5679(8)).

  A number of new methods were added that provide more specialized
tests.  Many of these methods were written by Google engineers for use
in their test suites; Gregory P. Smith, Michael Foord, and GvR worked
on merging them into Python's version of `unittest'.

   * `assertIsNone()' and `assertIsNotNone()' take one expression and
     verify that the result is or is not `None'.

   * `assertIs()' and `assertIsNot()' take two values and check whether
     the two values evaluate to the same object or not.  (Added by
     Michael Foord; issue 2578(9).)

   * `assertIsInstance()' and `assertNotIsInstance()' check whether the
     resulting object is an instance of a particular class, or of one
     of a tuple of classes.  (Added by Georg Brandl; issue 7031(10).)

   * `assertGreater()', `assertGreaterEqual()', `assertLess()', and
     `assertLessEqual()' compare two quantities.

   * `assertMultiLineEqual()' compares two strings, and if they're not
     equal, displays a helpful comparison that highlights the
     differences in the two strings.  This comparison is now used by
     default when Unicode strings are compared with `assertEqual()'.

   * `assertRegexpMatches()' and `assertNotRegexpMatches()' checks
     whether the first argument is a string matching or not matching
     the regular expression provided as the second argument (issue
     8038(11)).

   * `assertRaisesRegexp()' checks whether a particular exception is
     raised, and then also checks that the string representation of the
     exception matches the provided regular expression.

   * `assertIn()' and `assertNotIn()' tests whether _first_ is or is
     not in  _second_.

   * `assertItemsEqual()' tests whether two provided sequences contain
     the same elements.

   * `assertSetEqual()' compares whether two sets are equal, and only
     reports the differences between the sets in case of error.

   * Similarly, `assertListEqual()' and `assertTupleEqual()' compare
     the specified types and explain any differences without necessarily
     printing their full values; these methods are now used by default
     when comparing lists and tuples using `assertEqual()'.  More
     generally, `assertSequenceEqual()' compares two sequences and can
     optionally check whether both sequences are of a particular type.

   * `assertDictEqual()' compares two dictionaries and reports the
     differences; it's now used by default when you compare two
     dictionaries using `assertEqual()'.  `assertDictContainsSubset()'
     checks whether all of the key/value pairs in _first_ are found in
     _second_.

   * `assertAlmostEqual()' and `assertNotAlmostEqual()' test whether
     _first_ and _second_ are approximately equal.  This method can
     either round their difference to an optionally-specified number of
     _places_ (the default is 7) and compare it to zero, or require the
     difference to be smaller than a supplied _delta_ value.

   * `loadTestsFromName()' properly honors the `suiteClass' attribute of
     the `TestLoader'. (Fixed by Mark Roddy; issue 6866(12).)

   * A new hook lets you extend the `assertEqual()' method to handle
     new data types.  The `addTypeEqualityFunc()' method takes a type
     object and a function. The function will be used when both of the
     objects being compared are of the specified type.  This function
     should compare the two objects and raise an exception if they don't
     match; it's a good idea for the function to provide additional
     information about why the two objects aren't matching, much as the
     new sequence comparison methods do.

  `unittest.main()' now takes an optional `exit' argument.  If False,
`main()' doesn't call `sys.exit()', allowing `main()' to be used from
the interactive interpreter.  (Contributed by J. Pablo Fernández; issue
3379(13).)

  `TestResult' has new `startTestRun()' and `stopTestRun()' methods
that are called immediately before and after a test run.  (Contributed
by Robert Collins; issue 5728(14).)

  With all these changes, the `unittest.py' was becoming awkwardly
large, so the module was turned into a package and the code split into
several files (by Benjamin Peterson).  This doesn't affect how the
module is imported or used.

See also
........

<http://www.voidspace.org.uk/python/articles/unittest2.shtml>
     Describes the new features, how to use them, and the rationale for
     various design decisions.  (By Michael Foord.)

  ---------- Footnotes ----------

  (1) http://pytest.org

  (2) http://code.google.com/p/python-nose/

  (3) http://bugs.python.org/issue6001

  (4) http://bugs.python.org/issue8074

  (5) http://bugs.python.org/issue1034053

  (6) http://bugs.python.org/issue5663

  (7) http://bugs.python.org/issue4444

  (8) http://bugs.python.org/issue5679

  (9) http://bugs.python.org/issue2578

  (10) http://bugs.python.org/issue7031

  (11) http://bugs.python.org/issue8038

  (12) http://bugs.python.org/issue6866

  (13) http://bugs.python.org/issue3379

  (14) http://bugs.python.org/issue5728


File: python-whatsnew-3.2.2.info,  Node: Updated module ElementTree 1 3,  Prev: Updated module unittest,  Up: New and Improved Modules

4.10.5 Updated module: ElementTree 1.3
--------------------------------------

The version of the ElementTree library included with Python was updated
to version 1.3.  Some of the new features are:

   * The various parsing functions now take a _parser_ keyword argument
     giving an `XMLParser' instance that will be used.  This makes it
     possible to override the file's internal encoding:

         p = ET.XMLParser(encoding='utf-8')
         t = ET.XML("""<root/>""", parser=p)

     Errors in parsing XML now raise a `ParseError' exception, whose
     instances have a `position' attribute containing a (_line_,
     _column_) tuple giving the location of the problem.

   * ElementTree's code for converting trees to a string has been
     significantly reworked, making it roughly twice as fast in many
     cases.  The `ElementTree' `write()' and `Element' `write()'
     methods now have a _method_ parameter that can be "xml" (the
     default), "html", or "text".  HTML mode will output empty elements
     as `<empty></empty>' instead of `<empty/>', and text mode will
     skip over elements and only output the text chunks.  If you set
     the `tag' attribute of an element to `None' but leave its children
     in place, the element will be omitted when the tree is written
     out, so you don't need to do more extensive rearrangement to
     remove a single element.

     Namespace handling has also been improved.  All `xmlns:<whatever>'
     declarations are now output on the root element, not scattered
     throughout the resulting XML.  You can set the default namespace
     for a tree by setting the `default_namespace' attribute and can
     register new prefixes with `register_namespace()'.  In XML mode,
     you can use the true/false _xml_declaration_ parameter to suppress
     the XML declaration.

   * New `Element' method: `extend()' appends the items from a sequence
     to the element's children.  Elements themselves behave like
     sequences, so it's easy to move children from one element to
     another:

         from xml.etree import ElementTree as ET

         t = ET.XML("""<list>
           <item>1</item> <item>2</item>  <item>3</item>
         </list>""")
         new = ET.XML('<root/>')
         new.extend(t)

         # Outputs <root><item>1</item>...</root>
         print ET.tostring(new)


   * New `Element' method: `iter()' yields the children of the element
     as a generator.  It's also possible to write `for child in elem:'
     to loop over an element's children.  The existing method
     `getiterator()' is now deprecated, as is `getchildren()' which
     constructs and returns a list of children.

   * New `Element' method: `itertext()' yields all chunks of text that
     are descendants of the element.  For example:

         t = ET.XML("""<list>
           <item>1</item> <item>2</item>  <item>3</item>
         </list>""")

         # Outputs ['\n  ', '1', ' ', '2', '  ', '3', '\n']
         print list(t.itertext())


   * Deprecated: using an element as a Boolean (i.e., `if elem:') would
     return true if the element had any children, or false if there were
     no children.  This behaviour is confusing - `None' is false, but
     so is a childless element? - so it will now trigger a
     `FutureWarning'.  In your code, you should be explicit: write
     `len(elem) != 0' if you're interested in the number of children,
     or `elem is not None'.

  Fredrik Lundh develops ElementTree and produced the 1.3 version; you
can read his article describing 1.3 at
<http://effbot.org/zone/elementtree-13-intro.htm>.  Florent Xicluna
updated the version included with Python, after discussions on
python-dev and in issue 6472(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6472


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<4>,  Next: Other Changes and Fixes,  Prev: New and Improved Modules,  Up: What's New in Python 2 7

4.11 Build and C API Changes
============================

Changes to Python's build process and to the C API include:

   * The latest release of the GNU Debugger, GDB 7, can be scripted
     using Python(1).  When you begin debugging an executable program
     P, GDB will look for a file named `P-gdb.py' and automatically
     read it.  Dave Malcolm contributed a `python-gdb.py' that adds a
     number of commands useful when debugging Python itself.  For
     example, `py-up' and `py-down' go up or down one Python stack
     frame, which usually corresponds to several C stack frames.
     `py-print' prints the value of a Python variable, and `py-bt'
     prints the Python stack trace.  (Added as a result of issue
     8032(2).)

   * If you use the `.gdbinit' file provided with Python, the "pyo"
     macro in the 2.7 version now works correctly when the thread being
     debugged doesn't hold the GIL; the macro now acquires it before
     printing.  (Contributed by Victor Stinner; issue 3632(3).)

   * `Py_AddPendingCall()' is now thread-safe, letting any worker
     thread submit notifications to the main Python thread.  This is
     particularly useful for asynchronous IO operations.  (Contributed
     by Kristján Valur Jónsson; issue 4293(4).)

   * New function: `PyCode_NewEmpty()' creates an empty code object;
     only the filename, function name, and first line number are
     required.  This is useful for extension modules that are
     attempting to construct a more useful traceback stack.  Previously
     such extensions needed to call `PyCode_New()', which had many more
     arguments.  (Added by Jeffrey Yasskin.)

   * New function: `PyErr_NewExceptionWithDoc()' creates a new
     exception class, just as the existing `PyErr_NewException()' does,
     but takes an extra `char *' argument containing the docstring for
     the new exception class.  (Added by 'lekma' on the Python bug
     tracker; issue 7033(5).)

   * New function: `PyFrame_GetLineNumber()' takes a frame object and
     returns the line number that the frame is currently executing.
     Previously code would need to get the index of the bytecode
     instruction currently executing, and then look up the line number
     corresponding to that address.  (Added by Jeffrey Yasskin.)

   * New functions: `PyLong_AsLongAndOverflow()' and
     `PyLong_AsLongLongAndOverflow()'  approximates a Python long
     integer as a C `long' or `long long'.  If the number is too large
     to fit into the output type, an _overflow_ flag is set and
     returned to the caller.  (Contributed by Case Van Horsen; issue
     7528(6) and issue 7767(7).)

   * New function: stemming from the rewrite of string-to-float
     conversion, a new `PyOS_string_to_double()' function was added.
     The old `PyOS_ascii_strtod()' and `PyOS_ascii_atof()' functions
     are now deprecated.

   * New function: `PySys_SetArgvEx()' sets the value of `sys.argv' and
     can optionally update `sys.path' to include the directory
     containing the script named by `sys.argv[0]' depending on the
     value of an _updatepath_ parameter.

     This function was added to close a security hole for applications
     that embed Python.  The old function, `PySys_SetArgv()', would
     always update `sys.path', and sometimes it would add the current
     directory.  This meant that, if you ran an application embedding
     Python in a directory controlled by someone else, attackers could
     put a Trojan-horse module in the directory (say, a file named
     `os.py') that your application would then import and run.

     If you maintain a C/C++ application that embeds Python, check
     whether you're calling `PySys_SetArgv()' and carefully consider
     whether the application should be using `PySys_SetArgvEx()' with
     _updatepath_ set to false.

     Security issue reported as CVE-2008-5983(8); discussed in issue
     5753(9), and fixed by Antoine Pitrou.

   * New macros: the Python header files now define the following
     macros: `Py_ISALNUM', `Py_ISALPHA', `Py_ISDIGIT', `Py_ISLOWER',
     `Py_ISSPACE', `Py_ISUPPER', `Py_ISXDIGIT', and `Py_TOLOWER',
     `Py_TOUPPER'.  All of these functions are analogous to the C
     standard macros for classifying characters, but ignore the current
     locale setting, because in several places Python needs to analyze
     characters in a locale-independent way.  (Added by Eric Smith;
     issue 5793(10).)

   * Removed function: `PyEval_CallObject' is now only available as a
     macro.  A function version was being kept around to preserve ABI
     linking compatibility, but that was in 1997; it can certainly be
     deleted by now.  (Removed by Antoine Pitrou; issue 8276(11).)

   * New format codes: the `PyFormat_FromString()',
     `PyFormat_FromStringV()', and `PyErr_Format()' functions now
     accept `%lld' and `%llu' format codes for displaying C's `long
     long' types.  (Contributed by Mark Dickinson; issue 7228(12).)

   * The complicated interaction between threads and process forking has
     been changed.  Previously, the child process created by
     `os.fork()' might fail because the child is created with only a
     single thread running, the thread performing the `os.fork()'.  If
     other threads were holding a lock, such as Python's import lock,
     when the fork was performed, the lock would still be marked as
     "held" in the new process.  But in the child process nothing would
     ever release the lock, since the other threads weren't replicated,
     and the child process would no longer be able to perform imports.

     Python 2.7 acquires the import lock before performing an
     `os.fork()', and will also clean up any locks created using the
     `threading' module.  C extension modules that have internal locks,
     or that call `fork()' themselves, will not benefit from this
     clean-up.

     (Fixed by Thomas Wouters; issue 1590864(13).)

   * The `Py_Finalize()' function now calls the internal
     `threading._shutdown()' function; this prevents some exceptions
     from being raised when an interpreter shuts down.  (Patch by Adam
     Olsen; issue 1722344(14).)

   * When using the `PyMemberDef' structure to define attributes of a
     type, Python will no longer let you try to delete or set a
     `T_STRING_INPLACE' attribute.

   * Global symbols defined by the `ctypes' module are now prefixed
     with `Py', or with `_ctypes'.  (Implemented by Thomas Heller;
     issue 3102(15).)

   * New configure option: the `--with-system-expat' switch allows
     building the `pyexpat' module to use the system Expat library.
     (Contributed by Arfrever Frehtes Taifersar Arahesis; issue
     7609(16).)

   * New configure option: the `--with-valgrind' option will now
     disable the pymalloc allocator, which is difficult for the
     Valgrind memory-error detector to analyze correctly.  Valgrind
     will therefore be better at detecting memory leaks and overruns.
     (Contributed by James Henstridge; issue 2422(17).)

   * New configure option: you can now supply an empty string to
     `--with-dbmliborder=' in order to disable all of the various DBM
     modules.  (Added by Arfrever Frehtes Taifersar Arahesis; issue
     6491(18).)

   * The *configure* script now checks for floating-point rounding bugs
     on certain 32-bit Intel chips and defines a `X87_DOUBLE_ROUNDING'
     preprocessor definition.  No code currently uses this definition,
     but it's available if anyone wishes to use it.  (Added by Mark
     Dickinson; issue 2937(19).)

     *configure* also now sets a `LDCXXSHARED' Makefile variable for
     supporting C++ linking.  (Contributed by Arfrever Frehtes
     Taifersar Arahesis; issue 1222585(20).)

   * The build process now creates the necessary files for pkg-config
     support.  (Contributed by Clinton Roy; issue 3585(21).)

   * The build process now supports Subversion 1.7.  (Contributed by
     Arfrever Frehtes Taifersar Arahesis; issue 6094(22).)

* Menu:

* Capsules::
* Port-Specific Changes; Windows: Port-Specific Changes Windows.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X.
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD.

  ---------- Footnotes ----------

  (1) http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html

  (2) http://bugs.python.org/issue8032

  (3) http://bugs.python.org/issue3632

  (4) http://bugs.python.org/issue4293

  (5) http://bugs.python.org/issue7033

  (6) http://bugs.python.org/issue7528

  (7) http://bugs.python.org/issue7767

  (8) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983

  (9) http://bugs.python.org/issue5753

  (10) http://bugs.python.org/issue5793

  (11) http://bugs.python.org/issue8276

  (12) http://bugs.python.org/issue7228

  (13) http://bugs.python.org/issue1590864

  (14) http://bugs.python.org/issue1722344

  (15) http://bugs.python.org/issue3102

  (16) http://bugs.python.org/issue7609

  (17) http://bugs.python.org/issue2422

  (18) http://bugs.python.org/issue6491

  (19) http://bugs.python.org/issue2937

  (20) http://bugs.python.org/issue1222585

  (21) http://bugs.python.org/issue3585

  (22) http://bugs.python.org/issue6094


File: python-whatsnew-3.2.2.info,  Node: Capsules,  Next: Port-Specific Changes Windows,  Up: Build and C API Changes<4>

4.11.1 Capsules
---------------

Python 3.1 adds a new C datatype, `PyCapsule', for providing a C API to
an extension module.  A capsule is essentially the holder of a C `void
*' pointer, and is made available as a module attribute; for example,
the `socket' module's API is exposed as `socket.CAPI', and
`unicodedata' exposes `ucnhash_CAPI'.  Other extensions can import the
module, access its dictionary to get the capsule object, and then get
the `void *' pointer, which will usually point to an array of pointers
to the module's various API functions.

  There is an existing data type already used for this, `PyCObject',
but it doesn't provide type safety.  Evil code written in pure Python
could cause a segmentation fault by taking a `PyCObject' from module A
and somehow substituting it for the `PyCObject' in module B.   Capsules
know their own name, and getting the pointer requires providing the
name:

    void *vtable;

    if (!PyCapsule_IsValid(capsule, "mymodule.CAPI") {
            PyErr_SetString(PyExc_ValueError, "argument type invalid");
            return NULL;
    }

    vtable = PyCapsule_GetPointer(capsule, "mymodule.CAPI");

You are assured that `vtable' points to whatever you're expecting.  If
a different capsule was passed in, `PyCapsule_IsValid()' would detect
the mismatched name and return false.  Refer to _using-capsules_ for
more information on using these objects.

  Python 2.7 now uses capsules internally to provide various
extension-module APIs, but the `PyCObject_AsVoidPtr()' was modified to
handle capsules, preserving compile-time compatibility with the
`CObject' interface.  Use of `PyCObject_AsVoidPtr()' will signal a
`PendingDeprecationWarning', which is silent by default.

  Implemented in Python 3.1 and backported to 2.7 by Larry Hastings;
discussed in issue 5630(1).

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5630


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes Windows,  Next: Port-Specific Changes Mac OS X,  Prev: Capsules,  Up: Build and C API Changes<4>

4.11.2 Port-Specific Changes: Windows
-------------------------------------

   * The `msvcrt' module now contains some constants from the
     `crtassem.h' header file: `CRT_ASSEMBLY_VERSION',
     `VC_ASSEMBLY_PUBLICKEYTOKEN', and `LIBRARIES_ASSEMBLY_NAME_PREFIX'.
     (Contributed by David Cournapeau; issue 4365(1).)

   * The `_winreg' module for accessing the registry now implements the
     `CreateKeyEx()' and `DeleteKeyEx()' functions, extended versions
     of previously-supported functions that take several extra
     arguments.  The `DisableReflectionKey()', `EnableReflectionKey()',
     and `QueryReflectionKey()' were also tested and documented.
     (Implemented by Brian Curtin: issue 7347(2).)

   * The new `_beginthreadex()' API is used to start threads, and the
     native thread-local storage functions are now used.  (Contributed
     by Kristján Valur Jónsson; issue 3582(3).)

   * The `os.kill()' function now works on Windows.  The signal value
     can be the constants `CTRL_C_EVENT', `CTRL_BREAK_EVENT', or any
     integer.  The first two constants will send Control-C and
     Control-Break keystroke events to subprocesses; any other value
     will use the `TerminateProcess()' API.  (Contributed by Miki
     Tebeka; issue 1220212(4).)

   * The `os.listdir()' function now correctly fails for an empty path.
     (Fixed by Hirokazu Yamamoto; issue 5913(5).)

   * The `mimelib' module will now read the MIME database from the
     Windows registry when initializing.  (Patch by Gabriel Genellina;
     issue 4969(6).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4365

  (2) http://bugs.python.org/issue7347

  (3) http://bugs.python.org/issue3582

  (4) http://bugs.python.org/issue1220212

  (5) http://bugs.python.org/issue5913

  (6) http://bugs.python.org/issue4969


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes Mac OS X,  Next: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Windows,  Up: Build and C API Changes<4>

4.11.3 Port-Specific Changes: Mac OS X
--------------------------------------

   * The path `/Library/Python/2.7/site-packages' is now appended to
     `sys.path', in order to share added packages between the system
     installation and a user-installed copy of the same version.
     (Changed by Ronald Oussoren; issue 4865(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4865


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Mac OS X,  Up: Build and C API Changes<4>

4.11.4 Port-Specific Changes: FreeBSD
-------------------------------------

   * FreeBSD 7.1's `SO_SETFIB' constant, used with
     `getsockopt()'/`setsockopt()' to select an alternate routing
     table, is now available in the `socket' module.  (Added by Kyle
     VanderBeek; issue 8235(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8235


File: python-whatsnew-3.2.2.info,  Node: Other Changes and Fixes,  Next: Porting to Python 2 7,  Prev: Build and C API Changes<4>,  Up: What's New in Python 2 7

4.12 Other Changes and Fixes
============================

   * Two benchmark scripts, `iobench' and `ccbench', were added to the
     `Tools' directory.  `iobench' measures the speed of the built-in
     file I/O objects returned by `open()' while performing various
     operations, and `ccbench' is a concurrency benchmark that tries to
     measure computing throughput, thread switching latency, and IO
     processing bandwidth when performing several tasks using a varying
     number of threads.

   * The `Tools/i18n/msgfmt.py' script now understands plural forms in
     `.po' files.  (Fixed by Martin von Löwis; issue 5464(1).)

   * When importing a module from a `.pyc' or `.pyo' file with an
     existing `.py' counterpart, the `co_filename' attributes of the
     resulting code objects are overwritten when the original filename
     is obsolete.  This can happen if the file has been renamed, moved,
     or is accessed through different paths.  (Patch by Ziga Seilnacht
     and Jean-Paul Calderone; issue 1180193(2).)

   * The `regrtest.py' script now takes a `--randseed=' switch that
     takes an integer that will be used as the random seed for the `-r'
     option that executes tests in random order.  The `-r' option also
     reports the seed that was used (Added by Collin Winter.)

   * Another `regrtest.py' switch is `-j', which takes an integer
     specifying how many tests run in parallel. This allows reducing
     the total runtime on multi-core machines.  This option is
     compatible with several other options, including the `-R' switch
     which is known to produce long runtimes.  (Added by Antoine
     Pitrou, issue 6152(3).)  This can also be used with a new `-F'
     switch that runs selected tests in a loop until they fail.  (Added
     by Antoine Pitrou; issue 7312(4).)

   * When executed as a script, the `py_compile.py' module now accepts
     `'-'' as an argument, which will read standard input for the list
     of filenames to be compiled.  (Contributed by Piotr Ożarowski;
     issue 8233(5).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5464

  (2) http://bugs.python.org/issue1180193

  (3) http://bugs.python.org/issue6152

  (4) http://bugs.python.org/issue7312

  (5) http://bugs.python.org/issue8233


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 2 7,  Next: Acknowledgements,  Prev: Other Changes and Fixes,  Up: What's New in Python 2 7

4.13 Porting to Python 2.7
==========================

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The `range()' function processes its arguments more consistently;
     it will now call `__int__()' on non-float, non-integer arguments
     that are supplied to it.  (Fixed by Alexander Belopolsky; issue
     1533(1).)

   * The string `format()' method changed the default precision used
     for floating-point and complex numbers from 6 decimal places to
     12, which matches the precision used by `str()'.  (Changed by Eric
     Smith; issue 5920(2).)

   * Because of an optimization for the `with' statement, the special
     methods `__enter__()' and `__exit__()' must belong to the object's
     type, and cannot be directly attached to the object's instance.
     This affects new-style classes (derived from `object') and C
     extension types.  (issue 6101(3).)

   * Due to a bug in Python 2.6, the _exc_value_ parameter to
     `__exit__()' methods was often the string representation of the
     exception, not an instance.  This was fixed in 2.7, so _exc_value_
     will be an instance as expected.  (Fixed by Florent Xicluna; issue
     7853(4).)

   * When a restricted set of attributes were set using `__slots__',
     deleting an unset attribute would not raise `AttributeError' as
     you would expect.  Fixed by Benjamin Peterson; issue 7604(5).)

  In the standard library:

   * Operations with `datetime' instances that resulted in a year
     falling outside the supported range didn't always raise
     `OverflowError'.  Such errors are now checked more carefully and
     will now raise the exception. (Reported by Mark Leander, patch by
     Anand B. Pillai and Alexander Belopolsky; issue 7150(6).)

   * When using `Decimal' instances with a string's `format()' method,
     the default alignment was previously left-alignment.  This has
     been changed to right-alignment, which might change the output of
     your programs.  (Changed by Mark Dickinson; issue 6857(7).)

     Comparisons involving a signaling NaN value (or `sNAN') now signal
     `InvalidOperation' instead of silently returning a true or false
     value depending on the comparison operator.  Quiet NaN values (or
     `NaN') are now hashable.  (Fixed by Mark Dickinson; issue 7279(8).)

   * The ElementTree library, `xml.etree', no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like `<?xml-stylesheet href="#style1"?>') or comment
     (which looks like `<!- comment ->').  (Patch by Neil Muller; issue
     2746(9).)

   * The `readline()' method of `StringIO' objects now does nothing
     when a negative length is requested, as other file-like objects
     do.  (issue 7348(10)).

   * The `syslog' module will now use the value of `sys.argv[0]' as the
     identifier instead of the previous default value of `'python''.
     (Changed by Sean Reifschneider; issue 8451(11).)

   * The `tarfile' module's default error handling has changed, to no
     longer suppress fatal errors.  The default error level was
     previously 0, which meant that errors would only result in a
     message being written to the debug log, but because the debug log
     is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there's
     an error.  (Changed by Lars Gustäbel; issue 7357(12).)

   * The `urlparse' module's `urlsplit()' now handles unknown URL
     schemes in a fashion compliant with RFC 3986(13): if the URL is of
     the form `"<something>://..."', the text before the `://' is
     treated as the scheme, even if it's a made-up scheme that the
     module doesn't know about.  This change may break code that worked
     around the old behaviour.  For example, Python 2.6.4 or 2.5 will
     return the following:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

  For C extensions:

   * C extensions that use integer format codes with the `PyArg_Parse*'
     family of functions will now raise a `TypeError' exception instead
     of triggering a `DeprecationWarning' (issue 5080(14)).

   * Use the new `PyOS_string_to_double()' function instead of the old
     `PyOS_ascii_strtod()' and `PyOS_ascii_atof()' functions, which are
     now deprecated.

  For applications that embed Python:

   * The `PySys_SetArgvEx()' function was added, letting applications
     close a security hole when the existing `PySys_SetArgv()' function
     was used.  Check whether you're calling `PySys_SetArgv()' and
     carefully consider whether the application should be using
     `PySys_SetArgvEx()' with _updatepath_ set to false.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1533

  (2) http://bugs.python.org/issue5920

  (3) http://bugs.python.org/issue6101

  (4) http://bugs.python.org/issue7853

  (5) http://bugs.python.org/issue7604

  (6) http://bugs.python.org/issue7150

  (7) http://bugs.python.org/issue6857

  (8) http://bugs.python.org/issue7279

  (9) http://bugs.python.org/issue2746

  (10) http://bugs.python.org/issue7348

  (11) http://bugs.python.org/issue8451

  (12) http://bugs.python.org/issue7357

  (13) http://tools.ietf.org/html/rfc3986.html

  (14) http://bugs.python.org/issue5080


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements,  Prev: Porting to Python 2 7,  Up: What's New in Python 2 7

4.14 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray,
Hugh Secker-Walker.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 6,  Next: What's New in Python 2 5,  Prev: What's New in Python 2 7,  Up: Top

5 What's New in Python 2.6
**************************

     Author: A.M. Kuchling (amk at amk.ca)

     Release: 3.2.2

     Date: February 10, 2012

  This article explains the new features in Python 2.6, released on
October 1 2008.  The release schedule is described in PEP 361(1).

  The major theme of Python 2.6 is preparing the migration path to
Python 3.0, a major redesign of the language.  Whenever possible,
Python 2.6 incorporates new features and syntax from 3.0 while
remaining compatible with existing code by not removing older features
or syntax.  When it's not possible to do that, Python 2.6 tries to do
what it can, adding compatibility functions in a `future_builtins'
module and a `-3' switch to warn about usages that will become
unsupported in 3.0.

  Some significant new packages have been added to the standard library,
such as the `multiprocessing' and `json' modules, but there aren't many
new features that aren't related to Python 3.0 in some way.

  Python 2.6 also sees a number of improvements and bugfixes throughout
the source.  A search through the change logs finds there were 259
patches applied and 612 bugs fixed between Python 2.5 and 2.6.  Both
figures are likely to be underestimates.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.6. If you
want to understand the rationale for the design and implementation,
refer to the PEP for a particular new feature.  Whenever possible,
"What's New in Python" links to the bug/patch item for each change.

* Menu:

* Python 3.0: Python 3 0.
* Changes to the Development Process::
* PEP 343; The 'with' statement: PEP 343 The 'with' statement.
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module.
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory.
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package.
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting.
* PEP 3105; print As a Function: PEP 3105 print As a Function.
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes.
* PEP 3112; Byte Literals: PEP 3112 Byte Literals.
* PEP 3116; New I/O Library: PEP 3116 New I/O Library.
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol.
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes.
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax.
* PEP 3129; Class Decorators: PEP 3129 Class Decorators.
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers.
* Other Language Changes: Other Language Changes<4>.
* New and Improved Modules: New and Improved Modules<2>.
* Deprecations and Removals::
* Build and C API Changes: Build and C API Changes<5>.
* Porting to Python 2.6: Porting to Python 2 6.
* Acknowledgements: Acknowledgements<2>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0361


File: python-whatsnew-3.2.2.info,  Node: Python 3 0,  Next: Changes to the Development Process,  Up: What's New in Python 2 6

5.1 Python 3.0
==============

The development cycle for Python versions 2.6 and 3.0 was synchronized,
with the alpha and beta releases for both versions being made on the
same days.  The development of 3.0 has influenced many features in 2.6.

  Python 3.0 is a far-ranging redesign of Python that breaks
compatibility with the 2.x series.  This means that existing Python
code will need some conversion in order to run on Python 3.0.  However,
not all the changes in 3.0 necessarily break compatibility.  In cases
where new features won't cause existing code to break, they've been
backported to 2.6 and are described in this document in the appropriate
place.  Some of the 3.0-derived features are:

   * A `__complex__()' method for converting objects to a complex
     number.

   * Alternate syntax for catching exceptions: `except TypeError as
     exc'.

   * The addition of `functools.reduce()' as a synonym for the built-in
     `reduce()' function.

  Python 3.0 adds several new built-in functions and changes the
semantics of some existing builtins.  Functions that are new in 3.0
such as `bin()' have simply been added to Python 2.6, but existing
builtins haven't been changed; instead, the `future_builtins' module
has versions with the new 3.0 semantics.  Code written to be compatible
with 3.0 can do `from future_builtins import hex, map' as necessary.

  A new command-line switch, `-3', enables warnings about features that
will be removed in Python 3.0.  You can run code with this switch to
see how much work will be necessary to port code to 3.0.  The value of
this switch is available to Python code as the boolean variable
`sys.py3kwarning', and to C extension code as `Py_Py3kWarningFlag'.

See also
........

The 3xxx series of PEPs, which contains proposals for Python 3.0.  PEP
3000(1) describes the development process for Python 3.0.  Start with PEP
3100(2) that describes the general goals for Python 3.0, and then
explore the higher-numbered PEPS that propose specific features.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3000

  (2) http://www.python.org/dev/peps/pep-3100


File: python-whatsnew-3.2.2.info,  Node: Changes to the Development Process,  Next: PEP 343 The 'with' statement,  Prev: Python 3 0,  Up: What's New in Python 2 6

5.2 Changes to the Development Process
======================================

While 2.6 was being developed, the Python development process underwent
two significant changes: we switched from SourceForge's issue tracker
to a customized Roundup installation, and the documentation was
converted from LaTeX to reStructuredText.

* Menu:

* New Issue Tracker; Roundup: New Issue Tracker Roundup.
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx.


File: python-whatsnew-3.2.2.info,  Node: New Issue Tracker Roundup,  Next: New Documentation Format reStructuredText Using Sphinx,  Up: Changes to the Development Process

5.2.1 New Issue Tracker: Roundup
--------------------------------

For a long time, the Python developers had been growing increasingly
annoyed by SourceForge's bug tracker.  SourceForge's hosted solution
doesn't permit much customization; for example, it wasn't possible to
customize the life cycle of issues.

  The infrastructure committee of the Python Software Foundation
therefore posted a call for issue trackers, asking volunteers to set up
different products and import some of the bugs and patches from
SourceForge.  Four different trackers were examined: Jira(1),
Launchpad(2), Roundup(3), and Trac(4).  The committee eventually
settled on Jira and Roundup as the two candidates.  Jira is a
commercial product that offers no-cost hosted instances to
free-software projects; Roundup is an open-source project that requires
volunteers to administer it and a server to host it.

  After posting a call for volunteers, a new Roundup installation was
set up at <http://bugs.python.org>.  One installation of Roundup can
host multiple trackers, and this server now also hosts issue trackers
for Jython and for the Python web site.  It will surely find other uses
in the future.  Where possible, this edition of "What's New in Python"
links to the bug/patch item for each change.

  Hosting of the Python bug tracker is kindly provided by Upfront
Systems(5) of Stellenbosch, South Africa.  Martin von Loewis put a lot
of effort into importing existing bugs and patches from SourceForge;
his scripts for this import operation are at
<http://svn.python.org/view/tracker/importer/> and may be useful to
other projects wishing to move from SourceForge to Roundup.

See also
........

<http://bugs.python.org>
     The Python bug tracker.

<http://bugs.jython.org>:
     The Jython bug tracker.

<http://roundup.sourceforge.net/>
     Roundup downloads and documentation.

<http://svn.python.org/view/tracker/importer/>
     Martin von Loewis's conversion scripts.

  ---------- Footnotes ----------

  (1) http://www.atlassian.com/software/jira/

  (2) http://www.launchpad.net

  (3) http://roundup.sourceforge.net/

  (4) http://trac.edgewall.org/

  (5) http://www.upfrontsystems.co.za/


File: python-whatsnew-3.2.2.info,  Node: New Documentation Format reStructuredText Using Sphinx,  Prev: New Issue Tracker Roundup,  Up: Changes to the Development Process

5.2.2 New Documentation Format: reStructuredText Using Sphinx
-------------------------------------------------------------

The Python documentation was written using LaTeX since the project
started around 1989.  In the 1980s and early 1990s, most documentation
was printed out for later study, not viewed online. LaTeX was widely
used because it provided attractive printed output while remaining
straightforward to write once the basic rules of the markup were
learned.

  Today LaTeX is still used for writing publications destined for
printing, but the landscape for programming tools has shifted.  We no
longer print out reams of documentation; instead, we browse through it
online and HTML has become the most important format to support.
Unfortunately, converting LaTeX to HTML is fairly complicated and Fred
L. Drake Jr., the long-time Python documentation editor, spent a lot of
time maintaining the conversion process.  Occasionally people would
suggest converting the documentation into SGML and later XML, but
performing a good conversion is a major task and no one ever committed
the time required to finish the job.

  During the 2.6 development cycle, Georg Brandl put a lot of effort
into building a new toolchain for processing the documentation.  The
resulting package is called Sphinx, and is available from
<http://sphinx.pocoo.org/>.

  Sphinx concentrates on HTML output, producing attractively styled and
modern HTML; printed output is still supported through conversion to
LaTeX.  The input format is reStructuredText, a markup syntax
supporting custom extensions and directives that is commonly used in
the Python community.

  Sphinx is a standalone package that can be used for writing, and
almost two dozen other projects (listed on the Sphinx web site(1)) have
adopted Sphinx as their documentation tool.

See also
........

_documenting-index_
     Describes how to write for Python's documentation.

Sphinx(2)
     Documentation and code for the Sphinx toolchain.

Docutils(3)
     The underlying reStructuredText parser and toolset.

  ---------- Footnotes ----------

  (1) http://sphinx.pocoo.org/examples.html

  (2) http://sphinx.pocoo.org/

  (3) http://docutils.sf.net


File: python-whatsnew-3.2.2.info,  Node: PEP 343 The 'with' statement,  Next: PEP 366 Explicit Relative Imports From a Main Module,  Prev: Changes to the Development Process,  Up: What's New in Python 2 6

5.3 PEP 343: The 'with' statement
=================================

The previous version, Python 2.5, added the '`with'' statement as an
optional feature, to be enabled by a `from __future__ import
with_statement' directive.  In 2.6 the statement no longer needs to be
specially enabled; this means that `with' is now always a keyword.  The
rest of this section is a copy of the corresponding section from the
"What's New in Python 2.5" document; if you're familiar with the
'`with'' statement from Python 2.5, you can skip this section.

  The '`with'' statement clarifies code that previously would use
`try...finally' blocks to ensure that clean-up code is executed.  In
this section, I'll discuss the statement as it will commonly be used.
In the next section, I'll examine the implementation details and show
how to write objects for use with this statement.

  The '`with'' statement is a control-flow structure whose basic
structure is:

    with expression [as variable]:
        with-block

The expression is evaluated, and it should result in an object that
supports the context management protocol (that is, has `__enter__()'
and `__exit__()' methods).

  The object's `__enter__()' is called before _with-block_ is executed
and therefore can run set-up code. It also may return a value that is
bound to the name _variable_, if given.  (Note carefully that
_variable_ is _not_ assigned the result of _expression_.)

  After execution of the _with-block_ is finished, the object's
`__exit__()' method is called, even if the block raised an exception,
and can therefore run clean-up code.

  Some standard Python objects now support the context management
protocol and can be used with the '`with'' statement. File objects are
one example:

    with open('/etc/passwd', 'r') as f:
        for line in f:
            print line
            ... more processing code ...

After this statement has executed, the file object in _f_ will have been
automatically closed, even if the `for' loop raised an exception part-
way through the block.

     Note: In this case, _f_ is the same object created by `open()',
     because `file.__enter__()' returns _self_.

  The `threading' module's locks and condition variables  also support
the '`with'' statement:

    lock = threading.Lock()
    with lock:
        # Critical section of code
        ...

The lock is acquired before the block is executed and always released
once  the block is complete.

  The `localcontext()' function in the `decimal' module makes it easy
to save and restore the current decimal context, which encapsulates the
desired precision and rounding characteristics for computations:

    from decimal import Decimal, Context, localcontext

    # Displays with default precision of 28 digits
    v = Decimal('578')
    print v.sqrt()

    with localcontext(Context(prec=16)):
        # All code in this block uses a precision of 16 digits.
        # The original context is restored on exiting the block.
        print v.sqrt()


* Menu:

* Writing Context Managers::
* The contextlib module::


File: python-whatsnew-3.2.2.info,  Node: Writing Context Managers,  Next: The contextlib module,  Up: PEP 343 The 'with' statement

5.3.1 Writing Context Managers
------------------------------

Under the hood, the '`with'' statement is fairly complicated. Most
people will only use '`with'' in company with existing objects and
don't need to know these details, so you can skip the rest of this
section if you like.  Authors of new objects will need to understand
the details of the underlying implementation and should keep reading.

  A high-level explanation of the context management protocol is:

   * The expression is evaluated and should result in an object called
     a "context manager".  The context manager must have `__enter__()'
     and `__exit__()' methods.

   * The context manager's `__enter__()' method is called.  The value
     returned is assigned to _VAR_.  If no `as VAR' clause is present,
     the value is simply discarded.

   * The code in _BLOCK_ is executed.

   * If _BLOCK_ raises an exception, the context manager's `__exit__()'
     method is called with three arguments, the exception details
     (`type, value, traceback', the same values returned by
     `sys.exc_info()', which can also be `None' if no exception
     occurred).  The method's return value controls whether an exception
     is re-raised: any false value re-raises the exception, and `True'
     will result in suppressing it.  You'll only rarely want to
     suppress the exception, because if you do the author of the code
     containing the '`with'' statement will never realize anything went
     wrong.

   * If _BLOCK_ didn't raise an exception,  the `__exit__()' method is
     still called, but _type_, _value_, and _traceback_ are all `None'.

  Let's think through an example.  I won't present detailed code but
will only sketch the methods necessary for a database that supports
transactions.

  (For people unfamiliar with database terminology: a set of changes to
the database are grouped into a transaction.  Transactions can be
either committed, meaning that all the changes are written into the
database, or rolled back, meaning that the changes are all discarded
and the database is unchanged.  See any database textbook for more
information.)

  Let's assume there's an object representing a database connection.
Our goal will be to let the user write code like this:

    db_connection = DatabaseConnection()
    with db_connection as cursor:
        cursor.execute('insert into ...')
        cursor.execute('delete from ...')
        # ... more operations ...

The transaction should be committed if the code in the block runs
flawlessly or rolled back if there's an exception. Here's the basic
interface for `DatabaseConnection' that I'll assume:

    class DatabaseConnection:
        # Database interface
        def cursor(self):
            "Returns a cursor object and starts a new transaction"
        def commit(self):
            "Commits current transaction"
        def rollback(self):
            "Rolls back current transaction"

The `__enter__()' method is pretty easy, having only to start a new
transaction.  For this application the resulting cursor object would be
a useful result, so the method will return it.  The user can then add
`as cursor' to their '`with'' statement to bind the cursor to a
variable name.

    class DatabaseConnection:
        ...
        def __enter__(self):
            # Code to start a new transaction
            cursor = self.cursor()
            return cursor

The `__exit__()' method is the most complicated because it's where most
of the work has to be done.  The method has to check if an exception
occurred.  If there was no exception, the transaction is committed.
The transaction is rolled back if there was an exception.

  In the code below, execution will just fall off the end of the
function, returning the default value of `None'.  `None' is false, so
the exception will be re-raised automatically.  If you wished, you
could be more explicit and add a `return' statement at the marked
location.

    class DatabaseConnection:
        ...
        def __exit__(self, type, value, tb):
            if tb is None:
                # No exception, so commit
                self.commit()
            else:
                # Exception occurred, so rollback.
                self.rollback()
                # return False



File: python-whatsnew-3.2.2.info,  Node: The contextlib module,  Prev: Writing Context Managers,  Up: PEP 343 The 'with' statement

5.3.2 The contextlib module
---------------------------

The `contextlib' module provides some functions and a decorator that
are useful when writing objects for use with the '`with'' statement.

  The decorator is called `contextmanager()', and lets you write a
single generator function instead of defining a new class.  The
generator should yield exactly one value.  The code up to the `yield'
will be executed as the `__enter__()' method, and the value yielded
will be the method's return value that will get bound to the variable
in the '`with'' statement's `as' clause, if any.  The code after the
`yield' will be executed in the `__exit__()' method.  Any exception
raised in the block will be raised by the `yield' statement.

  Using this decorator, our database example from the previous section
could be written as:

    from contextlib import contextmanager

    @contextmanager
    def db_transaction(connection):
        cursor = connection.cursor()
        try:
            yield cursor
        except:
            connection.rollback()
            raise
        else:
            connection.commit()

    db = DatabaseConnection()
    with db_transaction(db) as cursor:
        ...

The `contextlib' module also has a `nested(mgr1, mgr2, ...)' function
that combines a number of context managers so you don't need to write
nested '`with'' statements.  In this example, the single '`with''
statement both starts a database transaction and acquires a thread lock:

    lock = threading.Lock()
    with nested (db_transaction(db), lock) as (cursor, locked):
        ...

Finally, the `closing()' function returns its argument so that it can be
bound to a variable, and calls the argument's `.close()' method at the
end of the block.

    import urllib, sys
    from contextlib import closing

    with closing(urllib.urlopen('http://www.yahoo.com')) as f:
        for line in f:
            sys.stdout.write(line)


See also
........

PEP 343(1) - The "with" statement
     PEP written by Guido van Rossum and Nick Coghlan; implemented by
     Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the
     code generated for a '`with'' statement, which can be helpful in
     learning how the statement works.

  The documentation  for the `contextlib' module.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python-whatsnew-3.2.2.info,  Node: PEP 366 Explicit Relative Imports From a Main Module,  Next: PEP 370 Per-user site-packages Directory,  Prev: PEP 343 The 'with' statement,  Up: What's New in Python 2 6

5.4 PEP 366: Explicit Relative Imports From a Main Module
=========================================================

Python's `-m' switch allows running a module as a script.  When you ran
a module that was located inside a package, relative imports didn't
work correctly.

  The fix for Python 2.6 adds a `__package__' attribute to modules.
When this attribute is present, relative imports will be relative to
the value of this attribute instead of the `__name__' attribute.

  PEP 302-style importers can then set `__package__' as necessary.  The
`runpy' module that implements the `-m' switch now does this, so
relative imports will now work correctly in scripts running from inside
a package.


File: python-whatsnew-3.2.2.info,  Node: PEP 370 Per-user site-packages Directory,  Next: PEP 371 The multiprocessing Package,  Prev: PEP 366 Explicit Relative Imports From a Main Module,  Up: What's New in Python 2 6

5.5 PEP 370: Per-user `site-packages' Directory
===============================================

When you run Python, the module search path `sys.path' usually includes
a directory whose path ends in `"site-packages"'.  This directory is
intended to hold locally-installed packages available to all users
using a machine or a particular site installation.

  Python 2.6 introduces a convention for user-specific site directories.
The directory varies depending on the platform:

   * Unix and Mac OS X: `~/.local/'

   * Windows: `%APPDATA%/Python'

  Within this directory, there will be version-specific subdirectories,
such as `lib/python2.6/site-packages' on Unix/Mac OS and
`Python26/site-packages' on Windows.

  If you don't like the default directory, it can be overridden by an
environment variable.  `PYTHONUSERBASE' sets the root directory used
for all Python versions supporting this feature.  On Windows, the
directory for application-specific data can be changed by setting the `APPDATA'
environment variable.  You can also modify the `site.py' file for your
Python installation.

  The feature can be disabled entirely by running Python with the `-s'
option or setting the `PYTHONNOUSERSITE' environment variable.

See also
........

PEP 370(1) - Per-user `site-packages' Directory
     PEP written and implemented by Christian Heimes.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0370


File: python-whatsnew-3.2.2.info,  Node: PEP 371 The multiprocessing Package,  Next: PEP 3101 Advanced String Formatting,  Prev: PEP 370 Per-user site-packages Directory,  Up: What's New in Python 2 6

5.6 PEP 371: The `multiprocessing' Package
==========================================

The new `multiprocessing' package lets Python programs create new
processes that will perform a computation and return a result to the
parent.  The parent and child processes can communicate using queues
and pipes, synchronize their operations using locks and semaphores, and
can share simple arrays of data.

  The `multiprocessing' module started out as an exact emulation of the
`threading' module using processes instead of threads.  That goal was
discarded along the path to Python 2.6, but the general approach of the
module is still similar.  The fundamental class is the `Process', which
is passed a callable object and a collection of arguments.  The
`start()' method sets the callable running in a subprocess, after which
you can call the `is_alive()' method to check whether the subprocess is
still running and the `join()' method to wait for the process to exit.

  Here's a simple example where the subprocess will calculate a
factorial.  The function doing the calculation is written strangely so
that it takes significantly longer when the input argument is a
multiple of 4.

    import time
    from multiprocessing import Process, Queue


    def factorial(queue, N):
        "Compute a factorial."
        # If N is a multiple of 4, this function will take much longer.
        if (N % 4) == 0:
            time.sleep(.05 * N/4)

        # Calculate the result
        fact = 1L
        for i in range(1, N+1):
            fact = fact * i

        # Put the result on the queue
        queue.put(fact)

    if __name__ == '__main__':
        queue = Queue()

        N = 5

        p = Process(target=factorial, args=(queue, N))
        p.start()
        p.join()

        result = queue.get()
        print 'Factorial', N, '=', result

A `Queue' is used to communicate the input parameter _N_ and the
result.  The `Queue' object is stored in a global variable.  The child
process will use the value of the variable when the child was created;
because it's a `Queue', parent and child can use the object to
communicate.  (If the parent were to change the value of the global
variable, the child's value would be unaffected, and vice versa.)

  Two other classes, `Pool' and `Manager', provide higher-level
interfaces.  `Pool' will create a fixed number of worker processes, and
requests can then be distributed to the workers by calling `apply()' or
`apply_async()' to add a single request, and `map()' or `map_async()'
to add a number of requests.  The following code uses a `Pool' to
spread requests across 5 worker processes and retrieve a list of
results:

    from multiprocessing import Pool

    def factorial(N, dictionary):
        "Compute a factorial."
        ...
    p = Pool(5)
    result = p.map(factorial, range(1, 1000, 10))
    for v in result:
        print v

This produces the following output:

    1
    39916800
    51090942171709440000
    8222838654177922817725562880000000
    33452526613163807108170062053440751665152000000000
    ...

The other high-level interface, the `Manager' class, creates a separate
server process that can hold master copies of Python data structures.
Other processes can then access and modify these data structures using
proxy objects.  The following example creates a shared dictionary by
calling the `dict()' method; the worker processes then insert values
into the dictionary.  (Locking is not done for you automatically, which
doesn't matter in this example.  `Manager''s methods also include
`Lock()', `RLock()', and `Semaphore()' to create shared locks.)

    import time
    from multiprocessing import Pool, Manager

    def factorial(N, dictionary):
        "Compute a factorial."
        # Calculate the result
        fact = 1L
        for i in range(1, N+1):
            fact = fact * i

        # Store result in dictionary
        dictionary[N] = fact

    if __name__ == '__main__':
        p = Pool(5)
        mgr = Manager()
        d = mgr.dict()         # Create shared dictionary

        # Run tasks using the pool
        for N in range(1, 1000, 10):
            p.apply_async(factorial, (N, d))

        # Mark pool as closed -- no more tasks can be added.
        p.close()

        # Wait for tasks to exit
        p.join()

        # Output results
        for k, v in sorted(d.items()):
            print k, v

This will produce the output:

    1 1
    11 39916800
    21 51090942171709440000
    31 8222838654177922817725562880000000
    41 33452526613163807108170062053440751665152000000000
    51 15511187532873822802242430164693032110632597200169861120000...


See also
........

The documentation for the `multiprocessing' module.

PEP 371(1) - Addition of the multiprocessing package
     PEP written by Jesse Noller and Richard Oudkerk; implemented by
     Richard Oudkerk and Jesse Noller.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0371


File: python-whatsnew-3.2.2.info,  Node: PEP 3101 Advanced String Formatting,  Next: PEP 3105 print As a Function,  Prev: PEP 371 The multiprocessing Package,  Up: What's New in Python 2 6

5.7 PEP 3101: Advanced String Formatting
========================================

In Python 3.0, the `%' operator is supplemented by a more powerful
string formatting method, `format()'.  Support for the `str.format()'
method has been backported to Python 2.6.

  In 2.6, both 8-bit and Unicode strings have a `.format()' method that
treats the string as a template and takes the arguments to be formatted.
The formatting template uses curly brackets (`{', `}') as special
characters:

    >>> # Substitute positional argument 0 into the string.
    >>> "User ID: {0}".format("root")
    'User ID: root'
    >>> # Use the named keyword arguments
    >>> "User ID: {uid}   Last seen: {last_login}".format(
    ...    uid="root",
    ...    last_login = "5 Mar 2008 07:20")
    'User ID: root   Last seen: 5 Mar 2008 07:20'

Curly brackets can be escaped by doubling them:

    >>> "Empty dict: {{}}".format()
    "Empty dict: {}"

Field names can be integers indicating positional arguments, such as
`{0}', `{1}', etc. or names of keyword arguments.  You can also supply
compound field names that read attributes or access dictionary keys:

    >>> import sys
    >>> print 'Platform: {0.platform}\nPython version: {0.version}'.format(sys)
    Platform: darwin
    Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)
    [GCC 4.0.1 (Apple Computer, Inc. build 5367)]'

    >>> import mimetypes
    >>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)
    'Content-type: video/mp4'

Note that when using dictionary-style notation such as `[.mp4]', you
don't need to put any quotation marks around the string; it will look
up the value using `.mp4' as the key.  Strings beginning with a number
will be converted to an integer.  You can't write more complicated
expressions inside a format string.

  So far we've shown how to specify which field to substitute into the
resulting string.  The precise formatting used is also controllable by
adding a colon followed by a format specifier.  For example:

    >>> # Field 0: left justify, pad to 15 characters
    >>> # Field 1: right justify, pad to 6 characters
    >>> fmt = '{0:15} ${1:>6}'
    >>> fmt.format('Registration', 35)
    'Registration    $    35'
    >>> fmt.format('Tutorial', 50)
    'Tutorial        $    50'
    >>> fmt.format('Banquet', 125)
    'Banquet         $   125'

Format specifiers can reference other fields through nesting:

    >>> fmt = '{0:{1}}'
    >>> width = 15
    >>> fmt.format('Invoice #1234', width)
    'Invoice #1234  '
    >>> width = 35
    >>> fmt.format('Invoice #1234', width)
    'Invoice #1234                      '

The alignment of a field within the desired width can be specified:

Character            Effect
---------------------------------------------------------------------- 
< (default)          Left-align
>                    Right-align
^                    Center
=                    (For numeric types only) Pad after the sign.

  Format specifiers can also include a presentation type, which
controls how the value is formatted.  For example, floating-point
numbers can be formatted as a general number or in exponential notation:

    >>> '{0:g}'.format(3.75)
    '3.75'
    >>> '{0:e}'.format(3.75)
    '3.750000e+00'

A variety of presentation types are available.  Consult the 2.6
documentation for a _complete list_; here's a sample:

`b'       Binary. Outputs the number in base 2.
`c'       Character. Converts the integer to the corresponding Unicode character
          before printing.
`d'       Decimal Integer. Outputs the number in base 10.
`o'       Octal format. Outputs the number in base 8.
`x'       Hex format. Outputs the number in base 16, using lower-case letters for the
          digits above 9.
`e'       Exponent notation. Prints the number in scientific notation using the
          letter 'e' to indicate the exponent.
`g'       General format. This prints the number as a fixed-point number, unless the
          number is too large, in which case it switches to 'e' exponent notation.
`n'       Number. This is the same as 'g' (for floats) or 'd' (for integers), except
          that it uses the current locale setting to insert the appropriate number
          separator characters.
`%'       Percentage. Multiplies the number by 100 and displays in fixed ('f')
          format, followed by a percent sign.

  Classes and types can define a `__format__()' method to control how
they're formatted.  It receives a single argument, the format specifier:

    def __format__(self, format_spec):
        if isinstance(format_spec, unicode):
            return unicode(str(self))
        else:
            return str(self)

There's also a `format()' builtin that will format a single value.  It
calls the type's `__format__()' method with the provided specifier:

    >>> format(75.6564, '.2f')
    '75.66'


See also
........

_formatstrings_
     The reference documentation for format fields.

PEP 3101(1) - Advanced String Formatting
     PEP written by Talin. Implemented by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3101


File: python-whatsnew-3.2.2.info,  Node: PEP 3105 print As a Function,  Next: PEP 3110 Exception-Handling Changes,  Prev: PEP 3101 Advanced String Formatting,  Up: What's New in Python 2 6

5.8 PEP 3105: `print' As a Function
===================================

The `print' statement becomes the `print()' function in Python 3.0.
Making `print()' a function makes it possible to replace the function
by doing `def print(...)' or importing a new function from somewhere
else.

  Python 2.6 has a `__future__' import that removes `print' as language
syntax, letting you use the functional form instead.  For example:

    >>> from __future__ import print_function
    >>> print('# of entries', len(dictionary), file=sys.stderr)

The signature of the new function is:

    def print(*args, sep=' ', end='\n', file=None)

The parameters are:

        * _args_: positional arguments whose values will be printed out.

        * _sep_: the separator, which will be printed between arguments.

        * _end_: the ending text, which will be printed after all of the
          arguments have been output.

        * _file_: the file object to which the output will be sent.

See also
........

PEP 3105(1) - Make print a function
     PEP written by Georg Brandl.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3105


File: python-whatsnew-3.2.2.info,  Node: PEP 3110 Exception-Handling Changes,  Next: PEP 3112 Byte Literals,  Prev: PEP 3105 print As a Function,  Up: What's New in Python 2 6

5.9 PEP 3110: Exception-Handling Changes
========================================

One error that Python programmers occasionally make is writing the
following code:

    try:
        ...
    except TypeError, ValueError:  # Wrong!
        ...

The author is probably trying to catch both `TypeError' and
`ValueError' exceptions, but this code actually does something
different: it will catch `TypeError' and bind the resulting exception
object to the local name `"ValueError"'.  The `ValueError' exception
will not be caught at all.  The correct code specifies a tuple of
exceptions:

    try:
        ...
    except (TypeError, ValueError):
        ...

This error happens because the use of the comma here is ambiguous: does
it indicate two different nodes in the parse tree, or a single node
that's a tuple?

  Python 3.0 makes this unambiguous by replacing the comma with the word
"as".  To catch an exception and store the exception object in the
variable `exc', you must write:

    try:
        ...
    except TypeError as exc:
        ...

Python 3.0 will only support the use of "as", and therefore interprets
the first example as catching two different exceptions.  Python 2.6
supports both the comma and "as", so existing code will continue to
work.  We therefore suggest using "as" when writing new Python code
that will only be executed with 2.6.

See also
........

PEP 3110(1) - Catching Exceptions in Python 3000
     PEP written and implemented by Collin Winter.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3110


File: python-whatsnew-3.2.2.info,  Node: PEP 3112 Byte Literals,  Next: PEP 3116 New I/O Library,  Prev: PEP 3110 Exception-Handling Changes,  Up: What's New in Python 2 6

5.10 PEP 3112: Byte Literals
============================

Python 3.0 adopts Unicode as the language's fundamental string type and
denotes 8-bit literals differently, either as `b'string'' or using a
`bytes' constructor.  For future compatibility, Python 2.6 adds `bytes'
as a synonym for the `str' type, and it also supports the `b'''
notation.

  The 2.6 `str' differs from 3.0's `bytes' type in various ways; most
notably, the constructor is completely different.  In 3.0, `bytes([65,
66, 67])' is 3 elements long, containing the bytes representing `ABC';
in 2.6, `bytes([65, 66, 67])' returns the 12-byte string representing
the `str()' of the list.

  The primary use of `bytes' in 2.6 will be to write tests of object
type such as `isinstance(x, bytes)'.  This will help the 2to3
converter, which can't tell whether 2.x code intends strings to contain
either characters or 8-bit bytes; you can now use either `bytes' or
`str' to represent your intention exactly, and the resulting code will
also be correct in Python 3.0.

  There's also a `__future__' import that causes all string literals to
become Unicode strings.  This means that `\u' escape sequences can be
used to include Unicode characters:

    from __future__ import unicode_literals

    s = ('\u751f\u3080\u304e\u3000\u751f\u3054'
         '\u3081\u3000\u751f\u305f\u307e\u3054')

    print len(s)               # 12 Unicode characters

At the C level, Python 3.0 will rename the existing 8-bit string type,
called `PyStringObject' in Python 2.x, to `PyBytesObject'.  Python 2.6
uses `#define' to support using the names `PyBytesObject()',
`PyBytes_Check()', `PyBytes_FromStringAndSize()', and all the other
functions and macros used with strings.

  Instances of the `bytes' type are immutable just as strings are.  A
new `bytearray' type stores a mutable sequence of bytes:

    >>> bytearray([65, 66, 67])
    bytearray(b'ABC')
    >>> b = bytearray(u'\u21ef\u3244', 'utf-8')
    >>> b
    bytearray(b'\xe2\x87\xaf\xe3\x89\x84')
    >>> b[0] = '\xe3'
    >>> b
    bytearray(b'\xe3\x87\xaf\xe3\x89\x84')
    >>> unicode(str(b), 'utf-8')
    u'\u31ef \u3244'

Byte arrays support most of the methods of string types, such as
`startswith()'/`endswith()', `find()'/`rfind()', and some of the
methods of lists, such as `append()', `pop()',  and `reverse()'.

    >>> b = bytearray('ABC')
    >>> b.append('d')
    >>> b.append(ord('e'))
    >>> b
    bytearray(b'ABCde')

There's also a corresponding C API, with `PyByteArray_FromObject()',
`PyByteArray_FromStringAndSize()', and various other functions.

See also
........

PEP 3112(1) - Bytes literals in Python 3000
     PEP written by Jason Orendorff; backported to 2.6 by Christian
     Heimes.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3112


File: python-whatsnew-3.2.2.info,  Node: PEP 3116 New I/O Library,  Next: PEP 3118 Revised Buffer Protocol,  Prev: PEP 3112 Byte Literals,  Up: What's New in Python 2 6

5.11 PEP 3116: New I/O Library
==============================

Python's built-in file objects support a number of methods, but
file-like objects don't necessarily support all of them.  Objects that
imitate files usually support `read()' and `write()', but they may not
support `readline()', for example.  Python 3.0 introduces a layered I/O
library in the `io' module that separates buffering and text-handling
features from the fundamental read and write operations.

  There are three levels of abstract base classes provided by the `io'
module:

   * `RawIOBase' defines raw I/O operations: `read()', `readinto()',
     `write()', `seek()', `tell()', `truncate()', and `close()'.  Most
     of the methods of this class will often map to a single system
     call.  There are also `readable()', `writable()', and `seekable()'
     methods for determining what operations a given object will allow.

     Python 3.0 has concrete implementations of this class for files and
     sockets, but Python 2.6 hasn't restructured its file and socket
     objects in this way.

   * `BufferedIOBase' is an abstract base class that buffers data in
     memory to reduce the number of system calls used, making I/O
     processing more efficient.  It supports all of the methods of
     `RawIOBase', and adds a `raw' attribute holding the underlying raw
     object.

     There are five concrete classes implementing this ABC.
     `BufferedWriter' and `BufferedReader' are for objects that support
     write-only or read-only usage that have a `seek()' method for
     random access.  `BufferedRandom' objects support read and write
     access upon the same underlying stream, and `BufferedRWPair' is
     for objects such as TTYs that have both read and write operations
     acting upon unconnected streams of data.  The `BytesIO' class
     supports reading, writing, and seeking over an in-memory buffer.

   * `TextIOBase': Provides functions for reading and writing strings
     (remember, strings will be Unicode in Python 3.0), and supporting
     universal newlines.  `TextIOBase' defines the `readline()' method
     and supports iteration upon objects.

     There are two concrete implementations.  `TextIOWrapper' wraps a
     buffered I/O object, supporting all of the methods for text I/O
     and adding a `buffer' attribute for access to the underlying
     object.  `StringIO' simply buffers everything in memory without
     ever writing anything to disk.

     (In Python 2.6, `io.StringIO' is implemented in pure Python, so
     it's pretty slow.   You should therefore stick with the existing
     `StringIO' module or `cStringIO' for now.  At some point Python
     3.0's `io' module will be rewritten into C for speed, and perhaps
     the C implementation will be  backported to the 2.x releases.)

  In Python 2.6, the underlying implementations haven't been
restructured to build on top of the `io' module's classes.  The module
is being provided to make it easier to write code that's
forward-compatible with 3.0, and to save developers the effort of
writing their own implementations of buffering and text I/O.

See also
........

PEP 3116(1) - New I/O
     PEP written by Daniel Stutzbach, Mike Verdone, and Guido van
     Rossum.  Code by Guido van Rossum, Georg Brandl, Walter Doerwald,
     Jeremy Hylton, Martin von Loewis, Tony Lownds, and others.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3116


File: python-whatsnew-3.2.2.info,  Node: PEP 3118 Revised Buffer Protocol,  Next: PEP 3119 Abstract Base Classes,  Prev: PEP 3116 New I/O Library,  Up: What's New in Python 2 6

5.12 PEP 3118: Revised Buffer Protocol
======================================

The buffer protocol is a C-level API that lets Python types exchange
pointers into their internal representations.  A memory-mapped file can
be viewed as a buffer of characters, for example, and this lets another
module such as `re' treat memory-mapped files as a string of characters
to be searched.

  The primary users of the buffer protocol are numeric-processing
packages such as NumPy, which expose the internal representation of
arrays so that callers can write data directly into an array instead of
going through a slower API.  This PEP updates the buffer protocol in
light of experience from NumPy development, adding a number of new
features such as indicating the shape of an array or locking a memory
region.

  The most important new C API function is `PyObject_GetBuffer(PyObject
*obj, Py_buffer *view, int flags)', which takes an object and a set of
flags, and fills in the `Py_buffer' structure with information about
the object's memory representation.  Objects can use this operation to
lock memory in place while an external caller could be modifying the
contents, so there's a corresponding `PyBuffer_Release(Py_buffer
*view)' to indicate that the external caller is done.

  The _flags_ argument to `PyObject_GetBuffer()' specifies constraints
upon the memory returned.  Some examples are:

        * `PyBUF_WRITABLE' indicates that the memory must be writable.

        * `PyBUF_LOCK' requests a read-only or exclusive lock on the
          memory.

        * `PyBUF_C_CONTIGUOUS' and `PyBUF_F_CONTIGUOUS' requests a
          C-contiguous (last dimension varies the fastest) or
          Fortran-contiguous (first dimension varies the fastest) array
          layout.

  Two new argument codes for `PyArg_ParseTuple()', `s*' and `z*',
return locked buffer objects for a parameter.

See also
........

PEP 3118(1) - Revising the buffer protocol
     PEP written by Travis Oliphant and Carl Banks; implemented by
     Travis Oliphant.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3118


File: python-whatsnew-3.2.2.info,  Node: PEP 3119 Abstract Base Classes,  Next: PEP 3127 Integer Literal Support and Syntax,  Prev: PEP 3118 Revised Buffer Protocol,  Up: What's New in Python 2 6

5.13 PEP 3119: Abstract Base Classes
====================================

Some object-oriented languages such as Java support interfaces,
declaring that a class has a given set of methods or supports a given
access protocol.  Abstract Base Classes (or ABCs) are an equivalent
feature for Python. The ABC support consists of an `abc' module
containing a metaclass called `ABCMeta', special handling of this
metaclass by the `isinstance()' and `issubclass()' builtins, and a
collection of basic ABCs that the Python developers think will be
widely useful.  Future versions of Python will probably add more ABCs.

  Let's say you have a particular class and wish to know whether it
supports dictionary-style access.  The phrase "dictionary-style" is
vague, however.  It probably means that accessing items with `obj[1]'
works.  Does it imply that setting items with `obj[2] = value' works?
Or that the object will have `keys()', `values()', and `items()'
methods?  What about the iterative variants  such as `iterkeys()'?
`copy()' and `update()'?  Iterating over the object with `iter()'?

  The Python 2.6 `collections' module includes a number of different
ABCs that represent these distinctions.  `Iterable' indicates that a
class defines `__iter__()', and `Container' means the class defines a
`__contains__()' method and therefore supports `x in y' expressions.
The basic dictionary interface of getting items, setting items, and
`keys()', `values()', and `items()', is defined by the `MutableMapping'
ABC.

  You can derive your own classes from a particular ABC to indicate
they support that ABC's interface:

    import collections

    class Storage(collections.MutableMapping):
        ...

Alternatively, you could write the class without deriving from the
desired ABC and instead register the class by calling the ABC's
`register()' method:

    import collections

    class Storage:
        ...

    collections.MutableMapping.register(Storage)

For classes that you write, deriving from the ABC is probably clearer.
The `register()'  method is useful when you've written a new ABC that
can describe an existing type or class, or if you want to declare that
some third-party class implements an ABC.  For example, if you defined
a `PrintableType' ABC, it's legal to do:

    # Register Python's types
    PrintableType.register(int)
    PrintableType.register(float)
    PrintableType.register(str)

Classes should obey the semantics specified by an ABC, but Python can't
check this; it's up to the class author to understand the ABC's
requirements and to implement the code accordingly.

  To check whether an object supports a particular interface, you can
now write:

    def func(d):
        if not isinstance(d, collections.MutableMapping):
            raise ValueError("Mapping object expected, not %r" % d)

Don't feel that you must now begin writing lots of checks as in the
above example.  Python has a strong tradition of duck-typing, where
explicit type-checking is never done and code simply calls methods on
an object, trusting that those methods will be there and raising an
exception if they aren't.  Be judicious in checking for ABCs and only
do it where it's absolutely necessary.

  You can write your own ABCs by using `abc.ABCMeta' as the metaclass
in a class definition:

    from abc import ABCMeta, abstractmethod

    class Drawable():
        __metaclass__ = ABCMeta

        @abstractmethod
        def draw(self, x, y, scale=1.0):
            pass

        def draw_doubled(self, x, y):
            self.draw(x, y, scale=2.0)


    class Square(Drawable):
        def draw(self, x, y, scale):
            ...

In the `Drawable' ABC above, the `draw_doubled()' method renders the
object at twice its size and can be implemented in terms of other
methods described in `Drawable'.  Classes implementing this ABC
therefore don't need to provide their own implementation of
`draw_doubled()', though they can do so.  An implementation of `draw()'
is necessary, though; the ABC can't provide a useful generic
implementation.

  You can apply the `@abstractmethod' decorator to methods such as
`draw()' that must be implemented; Python will then raise an exception
for classes that don't define the method.  Note that the exception is
only raised when you actually try to create an instance of a subclass
lacking the method:

    >>> class Circle(Drawable):
    ...     pass
    ...
    >>> c = Circle()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: Can't instantiate abstract class Circle with abstract methods draw
    >>>

Abstract data attributes can be declared using the `@abstractproperty'
decorator:

    from abc import abstractproperty
    ...

    @abstractproperty
    def readonly(self):
       return self._x

Subclasses must then define a `readonly()' property.

See also
........

PEP 3119(1) - Introducing Abstract Base Classes
     PEP written by Guido van Rossum and Talin.  Implemented by Guido
     van Rossum.  Backported to 2.6 by Benjamin Aranguren, with Alex
     Martelli.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3119


File: python-whatsnew-3.2.2.info,  Node: PEP 3127 Integer Literal Support and Syntax,  Next: PEP 3129 Class Decorators,  Prev: PEP 3119 Abstract Base Classes,  Up: What's New in Python 2 6

5.14 PEP 3127: Integer Literal Support and Syntax
=================================================

Python 3.0 changes the syntax for octal (base-8) integer literals,
prefixing them with "0o" or "0O" instead of a leading zero, and adds
support for binary (base-2) integer literals, signalled by a "0b" or
"0B" prefix.

  Python 2.6 doesn't drop support for a leading 0 signalling an octal
number, but it does add support for "0o" and "0b":

    >>> 0o21, 2*8 + 1
    (17, 17)
    >>> 0b101111
    47

The `oct()' builtin still returns numbers prefixed with a leading zero,
and a new `bin()' builtin returns the binary representation for a
number:

    >>> oct(42)
    '052'
    >>> future_builtins.oct(42)
    '0o52'
    >>> bin(173)
    '0b10101101'

The `int()' and `long()' builtins will now accept the "0o" and "0b"
prefixes when base-8 or base-2 are requested, or when the _base_
argument is zero (signalling that the base used should be determined
from the string):

    >>> int ('0o52', 0)
    42
    >>> int('1101', 2)
    13
    >>> int('0b1101', 2)
    13
    >>> int('0b1101', 0)
    13


See also
........

PEP 3127(1) - Integer Literal Support and Syntax
     PEP written by Patrick Maupin; backported to 2.6 by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3127


File: python-whatsnew-3.2.2.info,  Node: PEP 3129 Class Decorators,  Next: PEP 3141 A Type Hierarchy for Numbers,  Prev: PEP 3127 Integer Literal Support and Syntax,  Up: What's New in Python 2 6

5.15 PEP 3129: Class Decorators
===============================

Decorators have been extended from functions to classes.  It's now
legal to write:

    @foo
    @bar
    class A:
      pass

This is equivalent to:

    class A:
      pass

    A = foo(bar(A))


See also
........

PEP 3129(1) - Class Decorators
     PEP written by Collin Winter.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3129


File: python-whatsnew-3.2.2.info,  Node: PEP 3141 A Type Hierarchy for Numbers,  Next: Other Language Changes<4>,  Prev: PEP 3129 Class Decorators,  Up: What's New in Python 2 6

5.16 PEP 3141: A Type Hierarchy for Numbers
===========================================

Python 3.0 adds several abstract base classes for numeric types
inspired by Scheme's numeric tower.  These classes were backported to
2.6 as the `numbers' module.

  The most general ABC is `Number'.  It defines no operations at all,
and only exists to allow checking if an object is a number by doing
`isinstance(obj, Number)'.

  `Complex' is a subclass of `Number'.  Complex numbers can undergo the
basic operations of addition, subtraction, multiplication, division,
and exponentiation, and you can retrieve the real and imaginary parts
and obtain a number's conjugate.  Python's built-in complex type is an
implementation of `Complex'.

  `Real' further derives from `Complex', and adds operations that only
work on real numbers: `floor()', `trunc()', rounding, taking the
remainder mod N, floor division, and comparisons.

  `Rational' numbers derive from `Real', have `numerator' and
`denominator' properties, and can be converted to floats.  Python 2.6
adds a simple rational-number class, `Fraction', in the `fractions'
module.  (It's called `Fraction' instead of `Rational' to avoid a name
clash with `numbers.Rational'.)

  `Integral' numbers derive from `Rational', and can be shifted left
and right with `<<' and `>>', combined using bitwise operations such as
`&' and `|', and can be used as array indexes and slice boundaries.

  In Python 3.0, the PEP slightly redefines the existing builtins
`round()', `math.floor()', `math.ceil()', and adds a new one,
`math.trunc()', that's been backported to Python 2.6.  `math.trunc()'
rounds toward zero, returning the closest `Integral' that's between the
function's argument and zero.

See also
........

PEP 3141(1) - A Type Hierarchy for Numbers
     PEP written by Jeffrey Yasskin.

  Scheme's numerical tower(2), from the Guile manual.

  Scheme's number datatypes(3) from the R5RS Scheme specification.

* Menu:

* The fractions Module::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3141

  (2)
http://www.gnu.org/software/guile/manual/html_node/Numerical-Tower.html#Numerical-Tower

  (3)
http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2


File: python-whatsnew-3.2.2.info,  Node: The fractions Module,  Up: PEP 3141 A Type Hierarchy for Numbers

5.16.1 The `fractions' Module
-----------------------------

To fill out the hierarchy of numeric types, the `fractions' module
provides a rational-number class.  Rational numbers store their values
as a numerator and denominator forming a fraction, and can exactly
represent numbers such as `2/3' that floating-point numbers can only
approximate.

  The `Fraction' constructor takes two `Integral' values that will be
the numerator and denominator of the resulting fraction.

    >>> from fractions import Fraction
    >>> a = Fraction(2, 3)
    >>> b = Fraction(2, 5)
    >>> float(a), float(b)
    (0.66666666666666663, 0.40000000000000002)
    >>> a+b
    Fraction(16, 15)
    >>> a/b
    Fraction(5, 3)

For converting floating-point numbers to rationals, the float type now
has an `as_integer_ratio()' method that returns the numerator and
denominator for a fraction that evaluates to the same floating-point
value:

    >>> (2.5) .as_integer_ratio()
    (5, 2)
    >>> (3.1415) .as_integer_ratio()
    (7074029114692207L, 2251799813685248L)
    >>> (1./3) .as_integer_ratio()
    (6004799503160661L, 18014398509481984L)

Note that values that can only be approximated by floating-point
numbers, such as 1./3, are not simplified to the number being
approximated; the fraction attempts to match the floating-point value
*exactly*.

  The `fractions' module is based upon an implementation by Sjoerd
Mullender that was in Python's `Demo/classes/' directory for a long
time.  This implementation was significantly updated by Jeffrey Yasskin.


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<4>,  Next: New and Improved Modules<2>,  Prev: PEP 3141 A Type Hierarchy for Numbers,  Up: What's New in Python 2 6

5.17 Other Language Changes
===========================

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a `__main__.py' file can
     now be executed directly by passing their name to the interpreter.
     The directory or zip archive is automatically inserted as the
     first entry in sys.path.  (Suggestion and initial patch by Andy
     Chu, subsequently revised by Phillip J. Eby and Nick Coghlan;
     issue 1739468(1).)

   * The `hasattr()' function was catching and ignoring all errors,
     under the assumption that they meant a `__getattr__()' method was
     failing somehow and the return value of `hasattr()' would
     therefore be `False'.  This logic shouldn't be applied to
     `KeyboardInterrupt' and `SystemExit', however; Python 2.6 will no
     longer discard such exceptions when `hasattr()' encounters them.
     (Fixed by Benjamin Peterson; issue 2196(2).)

   * When calling a function using the `**' syntax to provide keyword
     arguments, you are no longer required to use a Python dictionary;
     any mapping will now work:

         >>> def f(**kw):
         ...    print sorted(kw)
         ...
         >>> ud=UserDict.UserDict()
         >>> ud['a'] = 1
         >>> ud['b'] = 'string'
         >>> f(**ud)
         ['a', 'b']

     (Contributed by Alexander Belopolsky; issue 1686487(3).)

     It's also become legal to provide keyword arguments after a
     `*args' argument to a function call.

         >>> def f(*args, **kw):
         ...     print args, kw
         ...
         >>> f(1,2,3, *(4,5,6), keyword=13)
         (1, 2, 3, 4, 5, 6) {'keyword': 13}

     Previously this would have been a syntax error.  (Contributed by
     Amaury Forgeot d'Arc; issue 3473(4).)

   * A new builtin, `next(iterator, [default])' returns the next item
     from the specified iterator.  If the _default_ argument is
     supplied, it will be returned if _iterator_ has been exhausted;
     otherwise, the `StopIteration' exception will be raised.
     (Backported in issue 2719(5).)

   * Tuples now have `index()' and `count()' methods matching the list
     type's `index()' and `count()' methods:

         >>> t = (0,1,2,3,4,0,1,2)
         >>> t.index(3)
         3
         >>> t.count(0)
         2

     (Contributed by Raymond Hettinger)

   * The built-in types now have improved support for extended slicing
     syntax, accepting various combinations of `(start, stop, step)'.
     Previously, the support was partial and certain corner cases
     wouldn't work.  (Implemented by Thomas Wouters.)

   * Properties now have three attributes, `getter', `setter' and
     `deleter', that are decorators providing useful shortcuts for
     adding a getter, setter or deleter function to an existing
     property. You would use them like this:

         class C(object):
             @property
             def x(self):
                 return self._x

             @x.setter
             def x(self, value):
                 self._x = value

             @x.deleter
             def x(self):
                 del self._x

         class D(C):
             @C.x.getter
             def x(self):
                 return self._x * 2

             @x.setter
             def x(self, value):
                 self._x = value / 2


   * Several methods of the built-in set types now accept multiple
     iterables: `intersection()', `intersection_update()', `union()',
     `update()', `difference()' and `difference_update()'.

         >>> s=set('1234567890')
         >>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs
         set(['2'])
         >>> s.difference('246', '789')
         set(['1', '0', '3', '5'])

     (Contributed by Raymond Hettinger.)

   * Many floating-point features were added.  The `float()' function
     will now turn the string `nan' into an IEEE 754 Not A Number
     value, and `+inf' and `-inf' into positive or negative infinity.
     This works on any platform with IEEE 754 semantics.  (Contributed
     by Christian Heimes; issue 1635(6).)

     Other functions in the `math' module, `isinf()' and `isnan()',
     return true if their floating-point argument is infinite or Not A
     Number.  (issue 1640(7))

     Conversion functions were added to convert floating-point numbers
     into hexadecimal strings (issue 3008(8)).  These functions convert
     floats to and from a string representation without introducing
     rounding errors from the conversion between decimal and binary.
     Floats have a `hex()' method that returns a string representation,
     and the `float.fromhex()' method converts a string back into a
     number:

         >>> a = 3.75
         >>> a.hex()
         '0x1.e000000000000p+1'
         >>> float.fromhex('0x1.e000000000000p+1')
         3.75
         >>> b=1./3
         >>> b.hex()
         '0x1.5555555555555p-2'


   * A numerical nicety: when creating a complex number from two floats
     on systems that support signed zeros (-0 and +0), the `complex()'
     constructor will now preserve the sign of the zero.  (Fixed by
     Mark T. Dickinson; issue 1507(9).)

   * Classes that inherit a `__hash__()' method from a parent class can
     set `__hash__ = None' to indicate that the class isn't hashable.
     This will make `hash(obj)' raise a `TypeError' and the class will
     not be indicated as implementing the `Hashable' ABC.

     You should do this when you've defined a `__cmp__()' or `__eq__()'
     method that compares objects by their value rather than by
     identity.  All objects have a default hash method that uses
     `id(obj)' as the hash value.  There's no tidy way to remove the
     `__hash__()' method inherited from a parent class, so assigning
     `None' was implemented as an override.  At the C level, extensions
     can set `tp_hash' to `PyObject_HashNotImplemented()'.  (Fixed by
     Nick Coghlan and Amaury Forgeot d'Arc; issue 2235(10).)

   * The `GeneratorExit' exception now subclasses `BaseException'
     instead of `Exception'.  This means that an exception handler that
     does `except Exception:' will not inadvertently catch
     `GeneratorExit'.  (Contributed by Chad Austin; issue 1537(11).)

   * Generator objects now have a `gi_code' attribute that refers to
     the original code object backing the generator.  (Contributed by
     Collin Winter; issue 1473257(12).)

   * The `compile()' built-in function now accepts keyword arguments as
     well as positional parameters.  (Contributed by Thomas Wouters;
     issue 1444529(13).)

   * The `complex()' constructor now accepts strings containing
     parenthesized complex numbers, meaning that `complex(repr(cplx))'
     will now round-trip values.  For example, `complex('(3+4j)')' now
     returns the value (3+4j).  (issue 1491866(14))

   * The string `translate()' method now accepts `None' as the
     translation table parameter, which is treated as the identity
     transformation.   This makes it easier to carry out operations
     that only delete characters.  (Contributed by Bengt Richter and
     implemented by Raymond Hettinger; issue 1193128(15).)

   * The built-in `dir()' function now checks for a `__dir__()' method
     on the objects it receives.  This method must return a list of
     strings containing the names of valid attributes for the object,
     and lets the object control the value that `dir()' produces.
     Objects that have `__getattr__()' or `__getattribute__()' methods
     can use this to advertise pseudo-attributes they will honor.
     (issue 1591665(16))

   * Instance method objects have new attributes for the object and
     function comprising the method; the new synonym for `im_self' is
     `__self__', and `im_func' is also available as `__func__'.  The
     old names are still supported in Python 2.6, but are gone in 3.0.

   * An obscure change: when you use the `locals()' function inside a
     `class' statement, the resulting dictionary no longer returns free
     variables.  (Free variables, in this case, are variables
     referenced in the `class' statement  that aren't attributes of the
     class.)

* Menu:

* Optimizations: Optimizations<4>.
* Interpreter Changes: Interpreter Changes<2>.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1739468

  (2) http://bugs.python.org/issue2196

  (3) http://bugs.python.org/issue1686487

  (4) http://bugs.python.org/issue3473

  (5) http://bugs.python.org/issue2719

  (6) http://bugs.python.org/issue1635

  (7) http://bugs.python.org/issue1640

  (8) http://bugs.python.org/issue3008

  (9) http://bugs.python.org/issue1507

  (10) http://bugs.python.org/issue2235

  (11) http://bugs.python.org/issue1537

  (12) http://bugs.python.org/issue1473257

  (13) http://bugs.python.org/issue1444529

  (14) http://bugs.python.org/issue1491866

  (15) http://bugs.python.org/issue1193128

  (16) http://bugs.python.org/issue1591665


File: python-whatsnew-3.2.2.info,  Node: Optimizations<4>,  Next: Interpreter Changes<2>,  Up: Other Language Changes<4>

5.17.1 Optimizations
--------------------

   * The `warnings' module has been rewritten in C.  This makes it
     possible to invoke warnings from the parser, and may also make the
     interpreter's startup faster.  (Contributed by Neal Norwitz and
     Brett Cannon; issue 1631171(1).)

   * Type objects now have a cache of methods that can reduce the work
     required to find the correct method implementation for a
     particular class; once cached, the interpreter doesn't need to
     traverse base classes to figure out the right method to call.  The
     cache is cleared if a base class or the class itself is modified,
     so the cache should remain correct even in the face of Python's
     dynamic nature.  (Original optimization implemented by Armin Rigo,
     updated for Python 2.6 by Kevin Jacobs; issue 1700288(2).)

     By default, this change is only applied to types that are included
     with the Python core.  Extension modules may not necessarily be
     compatible with this cache, so they must explicitly add
     `Py_TPFLAGS_HAVE_VERSION_TAG' to the module's `tp_flags' field to
     enable the method cache.  (To be compatible with the method cache,
     the extension module's code must not directly access and modify
     the `tp_dict' member of any of the types it implements.  Most
     modules don't do this, but it's impossible for the Python
     interpreter to determine that.  See issue 1878(3) for some
     discussion.)

   * Function calls that use keyword arguments are significantly faster
     by doing a quick pointer comparison, usually saving the time of a
     full string comparison.  (Contributed by Raymond Hettinger, after
     an initial implementation by Antoine Pitrou; issue 1819(4).)

   * All of the functions in the `struct' module have been rewritten in
     C, thanks to work at the Need For Speed sprint.  (Contributed by
     Raymond Hettinger.)

   * Some of the standard built-in types now set a bit in their type
     objects.  This speeds up checking whether an object is a subclass
     of one of these types.  (Contributed by Neal Norwitz.)

   * Unicode strings now use faster code for detecting whitespace and
     line breaks; this speeds up the `split()' method by about 25% and
     `splitlines()' by 35%.  (Contributed by Antoine Pitrou.)  Memory
     usage is reduced by using pymalloc for the Unicode string's data.

   * The `with' statement now stores the `__exit__()' method on the
     stack, producing a small speedup.  (Implemented by Jeffrey
     Yasskin.)

   * To reduce memory usage, the garbage collector will now clear
     internal free lists when garbage-collecting the highest generation
     of objects.  This may return memory to the operating system sooner.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1631171

  (2) http://bugs.python.org/issue1700288

  (3) http://bugs.python.org/issue1878

  (4) http://bugs.python.org/issue1819


File: python-whatsnew-3.2.2.info,  Node: Interpreter Changes<2>,  Prev: Optimizations<4>,  Up: Other Language Changes<4>

5.17.2 Interpreter Changes
--------------------------

Two command-line options have been reserved for use by other Python
implementations.  The `-J' switch has been reserved for use by Jython
for Jython-specific options, such as switches that are passed to the
underlying JVM.  `-X' has been reserved for options specific to a
particular implementation of Python such as CPython, Jython, or
IronPython.  If either option is used with Python 2.6, the interpreter
will report that the option isn't currently used.

  Python can now be prevented from writing `.pyc' or `.pyo' files by
supplying the `-B' switch to the Python interpreter, or by setting the `PYTHONDONTWRITEBYTECODE'
environment variable before running the interpreter.  This setting is
available to Python programs as the `sys.dont_write_bytecode' variable,
and Python code can change the value to modify the interpreter's
behaviour.  (Contributed by Neal Norwitz and Georg Brandl.)

  The encoding used for standard input, output, and standard error can
be specified by setting the `PYTHONIOENCODING' environment variable
before running the interpreter.  The value should be a string in the
form `<encoding>' or `<encoding>:<errorhandler>'.  The _encoding_ part
specifies the encoding's name, e.g. `utf-8' or `latin-1'; the optional
_errorhandler_ part specifies what to do with characters that can't be
handled by the encoding, and  should be one of "error", "ignore", or
"replace".   (Contributed by Martin von Loewis.)


File: python-whatsnew-3.2.2.info,  Node: New and Improved Modules<2>,  Next: Deprecations and Removals,  Prev: Other Language Changes<4>,  Up: What's New in Python 2 6

5.18 New and Improved Modules
=============================

As in every release, Python's standard library received a number of
enhancements and bug fixes.  Here's a partial list of the most notable
changes, sorted alphabetically by module name. Consult the `Misc/NEWS'
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The `asyncore' and `asynchat' modules are being actively
     maintained again, and a number of patches and bugfixes were
     applied.  (Maintained by Josiah Carlson; see issue 1736190(1) for
     one patch.)

   * The `bsddb' module also has a new maintainer, Jesús Cea Avion, and
     the package is now available as a standalone package.  The web
     page for the package is www.jcea.es/programacion/pybsddb.htm(2).
     The plan is to remove the package from the standard library in
     Python 3.0, because its pace of releases is much more frequent than
     Python's.

     The `bsddb.dbshelve' module now uses the highest pickling protocol
     available, instead of restricting itself to protocol 1.
     (Contributed by W. Barnes.)

   * The `cgi' module will now read variables from the query string of
     an HTTP POST request.  This makes it possible to use form actions
     with URLs that include query strings such as
     "/cgi-bin/add.py?category=1".  (Contributed by Alexandre Fiori and
     Nubis; issue 1817(3).)

     The `parse_qs()' and `parse_qsl()' functions have been relocated
     from the `cgi' module to the `urlparse' module.  The versions
     still available in the `cgi' module will trigger
     `PendingDeprecationWarning' messages in 2.6 (issue 600362(4)).

   * The `cmath' module underwent extensive revision, contributed by
     Mark Dickinson and Christian Heimes.  Five new functions were
     added:

        * `polar()' converts a complex number to polar form, returning
          the modulus and argument of the complex number.

        * `rect()' does the opposite, turning a modulus, argument pair
          back into the corresponding complex number.

        * `phase()' returns the argument (also called the angle) of a
          complex number.

        * `isnan()' returns True if either the real or imaginary part
          of its argument is a NaN.

        * `isinf()' returns True if either the real or imaginary part of
          its argument is infinite.

     The revisions also improved the numerical soundness of the `cmath'
     module.  For all functions, the real and imaginary parts of the
     results are accurate to within a few units of least precision
     (ulps) whenever possible.  See issue 1381(5) for the details.  The
     branch cuts for `asinh()', `atanh()': and `atan()' have also been
     corrected.

     The tests for the module have been greatly expanded; nearly 2000
     new test cases exercise the algebraic functions.

     On IEEE 754 platforms, the `cmath' module now handles IEEE 754
     special values and floating-point exceptions in a manner consistent
     with Annex 'G' of the C99 standard.

   * A new data type in the `collections' module: `namedtuple(typename,
     fieldnames)' is a factory function that creates subclasses of the
     standard tuple whose fields are accessible by name as well as
     index.  For example:

         >>> var_type = collections.namedtuple('variable',
         ...             'id name type size')
         >>> # Names are separated by spaces or commas.
         >>> # 'id, name, type, size' would also work.
         >>> var_type._fields
         ('id', 'name', 'type', 'size')

         >>> var = var_type(1, 'frequency', 'int', 4)
         >>> print var[0], var.id    # Equivalent
         1 1
         >>> print var[2], var.type  # Equivalent
         int int
         >>> var._asdict()
         {'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'}
         >>> v2 = var._replace(name='amplitude')
         >>> v2
         variable(id=1, name='amplitude', type='int', size=4)

     Several places in the standard library that returned tuples have
     been modified to return `namedtuple' instances.  For example, the
     `Decimal.as_tuple()' method now returns a named tuple with `sign',
     `digits', and `exponent' fields.

     (Contributed by Raymond Hettinger.)

   * Another change to the `collections' module is that the `deque'
     type now supports an optional _maxlen_ parameter; if supplied, the
     deque's size will be restricted to no more than _maxlen_ items.
     Adding more items to a full deque causes old items to be discarded.

         >>> from collections import deque
         >>> dq=deque(maxlen=3)
         >>> dq
         deque([], maxlen=3)
         >>> dq.append(1) ; dq.append(2) ; dq.append(3)
         >>> dq
         deque([1, 2, 3], maxlen=3)
         >>> dq.append(4)
         >>> dq
         deque([2, 3, 4], maxlen=3)

     (Contributed by Raymond Hettinger.)

   * The `Cookie' module's `Morsel' objects now support an `httponly'
     attribute.  In some browsers. cookies with this attribute set
     cannot be accessed or manipulated by JavaScript code.
     (Contributed by Arvin Schnell; issue 1638033(6).)

   * A new window method in the `curses' module, `chgat()', changes the
     display attributes for a certain number of characters on a single
     line.  (Contributed by Fabian Kreutz.)

         # Boldface text starting at y=0,x=21
         # and affecting the rest of the line.
         stdscr.chgat(0, 21, curses.A_BOLD)

     The `Textbox' class in the `curses.textpad' module now supports
     editing in insert mode as well as overwrite mode.  Insert mode is
     enabled by supplying a true value for the _insert_mode_ parameter
     when creating the `Textbox' instance.

   * The `datetime' module's `strftime()' methods now support a `%f'
     format code that expands to the number of microseconds in the
     object, zero-padded on the left to six places.  (Contributed by
     Skip Montanaro; issue 1158(7).)

   * The `decimal' module was updated to version 1.66 of the General
     Decimal Specification(8).  New features include some methods for
     some basic mathematical functions such as `exp()' and `log10()':

         >>> Decimal(1).exp()
         Decimal("2.718281828459045235360287471")
         >>> Decimal("2.7182818").ln()
         Decimal("0.9999999895305022877376682436")
         >>> Decimal(1000).log10()
         Decimal("3")

     The `as_tuple()' method of `Decimal' objects now returns a named
     tuple with `sign', `digits', and `exponent' fields.

     (Implemented by Facundo Batista and Mark Dickinson.  Named tuple
     support added by Raymond Hettinger.)

   * The `difflib' module's `SequenceMatcher' class now returns named
     tuples representing matches, with `a', `b', and `size' attributes.
     (Contributed by Raymond Hettinger.)

   * An optional `timeout' parameter, specifying a timeout measured in
     seconds, was added to the `ftplib.FTP' class constructor as well
     as the `connect()' method.  (Added by Facundo Batista.)  Also, the
     `FTP' class's `storbinary()' and `storlines()' now take an
     optional _callback_ parameter that will be called with each block
     of data after the data has been sent.  (Contributed by Phil
     Schwartz; issue 1221598(9).)

   * The `reduce()' built-in function is also available in the
     `functools' module.  In Python 3.0, the builtin has been dropped
     and `reduce()' is only available from `functools'; currently there
     are no plans to drop the builtin in the 2.x series.  (Patched by
     Christian Heimes; issue 1739906(10).)

   * When possible, the `getpass' module will now use `/dev/tty' to
     print a prompt message and read the password, falling back to
     standard error and standard input.  If the password may be echoed
     to the terminal, a warning is printed before the prompt is
     displayed.  (Contributed by Gregory P. Smith.)

   * The `glob.glob()' function can now return Unicode filenames if a
     Unicode path was used and Unicode filenames are matched within the
     directory.  (issue 1001604(11))

   * A new function in the `heapq' module, `merge(iter1, iter2, ...)',
     takes any number of iterables returning data in sorted order, and
     returns a new generator that returns the contents of all the
     iterators, also in sorted order.  For example:

         >>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))
         [1, 2, 3, 5, 8, 9, 16]

     Another new function, `heappushpop(heap, item)', pushes _item_
     onto _heap_, then pops off and returns the smallest item.  This is
     more efficient than making a call to `heappush()' and then
     `heappop()'.

     `heapq' is now implemented to only use less-than comparison,
     instead of the less-than-or-equal comparison it previously used.
     This makes `heapq''s usage of a type match the `list.sort()'
     method.  (Contributed by Raymond Hettinger.)

   * An optional `timeout' parameter, specifying a timeout measured in
     seconds, was added to the `httplib.HTTPConnection' and
     `HTTPSConnection' class constructors.  (Added by Facundo Batista.)

   * Most of the `inspect' module's functions, such as
     `getmoduleinfo()' and `getargs()', now return named tuples.  In
     addition to behaving like tuples, the elements of the  return value
     can also be accessed as attributes.  (Contributed by Raymond
     Hettinger.)

     Some new functions in the module include `isgenerator()',
     `isgeneratorfunction()', and `isabstract()'.

   * The `itertools' module gained several new functions.

     `izip_longest(iter1, iter2, ...[, fillvalue])' makes tuples from
     each of the elements; if some of the iterables are shorter than
     others, the missing values are set to _fillvalue_.  For example:

         >>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))
         ((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))

     `product(iter1, iter2, ..., [repeat=N])' returns the Cartesian
     product of the supplied iterables, a set of tuples containing
     every possible combination of the elements returned from each
     iterable.

         >>> list(itertools.product([1,2,3], [4,5,6]))
         [(1, 4), (1, 5), (1, 6),
          (2, 4), (2, 5), (2, 6),
          (3, 4), (3, 5), (3, 6)]

     The optional _repeat_ keyword argument is used for taking the
     product of an iterable or a set of iterables with themselves,
     repeated _N_ times.  With a single iterable argument, _N_-tuples
     are returned:

         >>> list(itertools.product([1,2], repeat=3))
         [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
          (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]

     With two iterables, _2N_-tuples are returned.

         >>> list(itertools.product([1,2], [3,4], repeat=2))
         [(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),
          (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),
          (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),
          (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]

     `combinations(iterable, r)' returns sub-sequences of length _r_
     from the elements of _iterable_.

         >>> list(itertools.combinations('123', 2))
         [('1', '2'), ('1', '3'), ('2', '3')]
         >>> list(itertools.combinations('123', 3))
         [('1', '2', '3')]
         >>> list(itertools.combinations('1234', 3))
         [('1', '2', '3'), ('1', '2', '4'),
          ('1', '3', '4'), ('2', '3', '4')]

     `permutations(iter[, r])' returns all the permutations of length
     _r_ of the iterable's elements.  If _r_ is not specified, it will
     default to the number of elements produced by the iterable.

         >>> list(itertools.permutations([1,2,3,4], 2))
         [(1, 2), (1, 3), (1, 4),
          (2, 1), (2, 3), (2, 4),
          (3, 1), (3, 2), (3, 4),
          (4, 1), (4, 2), (4, 3)]

     `itertools.chain(*iterables)' is an existing function in
     `itertools' that gained a new constructor in Python 2.6.
     `itertools.chain.from_iterable(iterable)' takes a single iterable
     that should return other iterables.  `chain()' will then return
     all the elements of the first iterable, then all the elements of
     the second, and so on.

         >>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))
         [1, 2, 3, 4, 5, 6]

     (All contributed by Raymond Hettinger.)

   * The `logging' module's `FileHandler' class and its subclasses
     `WatchedFileHandler', `RotatingFileHandler', and
     `TimedRotatingFileHandler' now have an optional _delay_ parameter
     to their constructors.  If _delay_ is true, opening of the log
     file is deferred until the first `emit()' call is made.
     (Contributed by Vinay Sajip.)

     `TimedRotatingFileHandler' also has a _utc_ constructor parameter.
     If the argument is true, UTC time will be used in determining when
     midnight occurs and in generating filenames; otherwise local time
     will be used.

   * Several new functions were added to the `math' module:

        * `isinf()' and `isnan()' determine whether a given float is a
          (positive or negative) infinity or a NaN (Not a Number),
          respectively.

        * `copysign()' copies the sign bit of an IEEE 754 number,
          returning the absolute value of _x_ combined with the sign
          bit of _y_.  For example, `math.copysign(1, -0.0)' returns
          -1.0.  (Contributed by Christian Heimes.)

        * `factorial()' computes the factorial of a number.
          (Contributed by Raymond Hettinger; issue 2138(12).)

        * `fsum()' adds up the stream of numbers from an iterable, and
          is careful to avoid loss of precision through using partial
          sums.  (Contributed by Jean Brouwers, Raymond Hettinger, and
          Mark Dickinson; issue 2819(13).)

        * `acosh()', `asinh()' and `atanh()' compute the inverse
          hyperbolic functions.

        * `log1p()' returns the natural logarithm of _1+x_ (base _e_).

        * `trunc()' rounds a number toward zero, returning the closest
          `Integral' that's between the function's argument and zero.
          Added as part of the backport of *note PEP 3141's type
          hierarchy for numbers: 6f.

   * The `math' module has been improved to give more consistent
     behaviour across platforms, especially with respect to handling of
     floating-point exceptions and IEEE 754 special values.

     Whenever possible, the module follows the recommendations of the
     C99 standard about 754's special values.  For example, `sqrt(-1.)'
     should now give a `ValueError' across almost all platforms, while
     `sqrt(float('NaN'))' should return a NaN on all IEEE 754
     platforms.  Where Annex 'F' of the C99 standard recommends
     signaling 'divide-by-zero' or 'invalid', Python will raise
     `ValueError'.  Where Annex 'F' of the C99 standard recommends
     signaling 'overflow', Python will raise `OverflowError'.  (See
     issue 711019(14) and issue 1640(15).)

     (Contributed by Christian Heimes and Mark Dickinson.)

   * `mmap' objects now have a `rfind()' method that searches for a
     substring beginning at the end of the string and searching
     backwards.  The `find()' method also gained an _end_ parameter
     giving an index at which to stop searching.  (Contributed by John
     Lenton.)

   * The `operator' module gained a `methodcaller()' function that
     takes a name and an optional set of arguments, returning a
     callable that will call the named function on any arguments passed
     to it.  For example:

         >>> # Equivalent to lambda s: s.replace('old', 'new')
         >>> replacer = operator.methodcaller('replace', 'old', 'new')
         >>> replacer('old wine in old bottles')
         'new wine in new bottles'

     (Contributed by Georg Brandl, after a suggestion by Gregory
     Petrosyan.)

     The `attrgetter()' function now accepts dotted names and performs
     the corresponding attribute lookups:

         >>> inst_name = operator.attrgetter(
         ...        '__class__.__name__')
         >>> inst_name('')
         'str'
         >>> inst_name(help)
         '_Helper'

     (Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)

   * The `os' module now wraps several new system calls.  `fchmod(fd,
     mode)' and `fchown(fd, uid, gid)' change the mode and ownership of
     an opened file, and `lchmod(path, mode)' changes the mode of a
     symlink.  (Contributed by Georg Brandl and Christian Heimes.)

     `chflags()' and `lchflags()' are wrappers for the corresponding
     system calls (where they're available), changing the flags set on
     a file.  Constants for the flag values are defined in the `stat'
     module; some possible values include `UF_IMMUTABLE' to signal the
     file may not be changed and `UF_APPEND' to indicate that data can
     only be appended to the file.  (Contributed by M. Levinson.)

     `os.closerange(low, high)' efficiently closes all file descriptors
     from _low_ to _high_, ignoring any errors and not including _high_
     itself.  This function is now used by the `subprocess' module to
     make starting processes faster.  (Contributed by Georg Brandl;
     issue 1663329(16).)

   * The `os.environ' object's `clear()' method will now unset the
     environment variables using `os.unsetenv()' in addition to clearing
     the object's keys.  (Contributed by Martin Horcicka; issue
     1181(17).)

   * The `os.walk()' function now has a `followlinks' parameter. If set
     to True, it will follow symlinks pointing to directories and visit
     the directory's contents.  For backward compatibility, the
     parameter's default value is false.  Note that the function can
     fall into an infinite recursion if there's a symlink that points
     to a parent directory.  (issue 1273829(18))

   * In the `os.path' module, the `splitext()' function has been
     changed to not split on leading period characters.  This produces
     better results when operating on Unix's dot-files.  For example,
     `os.path.splitext('.ipython')' now returns `('.ipython', '')'
     instead of `('', '.ipython')'.  (issue 1115886(19))

     A new function, `os.path.relpath(path, start='.')', returns a
     relative path from the `start' path, if it's supplied, or from the
     current working directory to the destination `path'.  (Contributed
     by Richard Barran; issue 1339796(20).)

     On Windows, `os.path.expandvars()' will now expand environment
     variables given in the form "%var%", and "~user" will be expanded
     into the user's home directory path.  (Contributed by Josiah
     Carlson; issue 957650(21).)

   * The Python debugger provided by the `pdb' module gained a new
     command: "run" restarts the Python program being debugged and can
     optionally take new command-line arguments for the program.
     (Contributed by Rocky Bernstein; issue 1393667(22).)

   * The `pdb.post_mortem()' function, used to begin debugging a
     traceback, will now use the traceback returned by `sys.exc_info()'
     if no traceback is supplied.   (Contributed by Facundo Batista;
     issue 1106316(23).)

   * The `pickletools' module now has an `optimize()' function that
     takes a string containing a pickle and removes some unused
     opcodes, returning a shorter pickle that contains the same data
     structure.  (Contributed by Raymond Hettinger.)

   * A `get_data()' function was added to the `pkgutil' module that
     returns the contents of resource files included with an installed
     Python package.  For example:

         >>> import pkgutil
         >>> print pkgutil.get_data('test', 'exception_hierarchy.txt')
         BaseException
          +-- SystemExit
          +-- KeyboardInterrupt
          +-- GeneratorExit
          +-- Exception
               +-- StopIteration
               +-- StandardError
          ...

     (Contributed by Paul Moore; issue 2439(24).)

   * The `pyexpat' module's `Parser' objects now allow setting their
     `buffer_size' attribute to change the size of the buffer used to
     hold character data.  (Contributed by Achim Gaedke; issue
     1137(25).)

   * The `Queue' module now provides queue variants that retrieve
     entries in different orders.  The `PriorityQueue' class stores
     queued items in a heap and retrieves them in priority order, and
     `LifoQueue' retrieves the most recently added entries first,
     meaning that it behaves like a stack.  (Contributed by Raymond
     Hettinger.)

   * The `random' module's `Random' objects can now be pickled on a
     32-bit system and unpickled on a 64-bit system, and vice versa.
     Unfortunately, this change also means that Python 2.6's `Random'
     objects can't be unpickled correctly on earlier versions of Python.
     (Contributed by Shawn Ligocki; issue 1727780(26).)

     The new `triangular(low, high, mode)' function returns random
     numbers following a triangular distribution.   The returned values
     are between _low_ and _high_, not including _high_ itself, and
     with _mode_ as the most frequently occurring value in the
     distribution.  (Contributed by Wladmir van der Laan and Raymond
     Hettinger; issue 1681432(27).)

   * Long regular expression searches carried out by the  `re' module
     will check for signals being delivered, so time-consuming searches
     can now be interrupted.  (Contributed by Josh Hoyt and Ralf
     Schmitt; issue 846388(28).)

     The regular expression module is implemented by compiling bytecodes
     for a tiny regex-specific virtual machine.  Untrusted code could
     create malicious strings of bytecode directly and cause crashes,
     so Python 2.6 includes a verifier for the regex bytecode.
     (Contributed by Guido van Rossum from work for Google App Engine;
     issue 3487(29).)

   * The `rlcompleter' module's `Completer.complete()' method will now
     ignore exceptions triggered while evaluating a name.  (Fixed by
     Lorenz Quack; issue 2250(30).)

   * The `sched' module's `scheduler' instances now have a read-only
     `queue' attribute that returns the contents of the scheduler's
     queue, represented as a list of named tuples with the fields
     `(time, priority, action, argument)'.  (Contributed by Raymond
     Hettinger; issue 1861(31).)

   * The `select' module now has wrapper functions for the Linux
     `epoll()' and BSD `kqueue()' system calls.  `modify()' method was
     added to the existing `poll' objects; `pollobj.modify(fd,
     eventmask)' takes a file descriptor or file object and an event
     mask, modifying the recorded event mask for that file.
     (Contributed by Christian Heimes; issue 1657(32).)

   * The `shutil.copytree()' function now has an optional _ignore_
     argument that takes a callable object.  This callable will receive
     each directory path and a list of the directory's contents, and
     returns a list of names that will be ignored, not copied.

     The `shutil' module also provides an `ignore_patterns()' function
     for use with this new parameter.  `ignore_patterns()' takes an
     arbitrary number of glob-style patterns and returns a callable
     that will ignore any files and directories that match any of these
     patterns.  The following example copies a directory tree, but
     skips both `.svn' directories and Emacs backup files, which have
     names ending with '~':

         shutil.copytree('Doc/library', '/tmp/library',
                         ignore=shutil.ignore_patterns('*~', '.svn'))

     (Contributed by Tarek Ziadé; issue 2663(33).)

   * Integrating signal handling with GUI handling event loops like
     those used by Tkinter or GTk+ has long been a problem; most
     software ends up polling, waking up every fraction of a second to
     check if any GUI events have occurred.  The `signal' module can
     now make this more efficient.  Calling `signal.set_wakeup_fd(fd)'
     sets a file descriptor to be used; when a signal is received, a
     byte is written to that file descriptor.  There's also a C-level
     function, `PySignal_SetWakeupFd()', for setting the descriptor.

     Event loops will use this by opening a pipe to create two
     descriptors, one for reading and one for writing.  The writable
     descriptor will be passed to `set_wakeup_fd()', and the readable
     descriptor will be added to the list of descriptors monitored by
     the event loop via `select()' or `poll()'.  On receiving a signal,
     a byte will be written and the main event loop will be woken up,
     avoiding the need to poll.

     (Contributed by Adam Olsen; issue 1583(34).)

     The `siginterrupt()' function is now available from Python code,
     and allows changing whether signals can interrupt system calls or
     not.  (Contributed by Ralf Schmitt.)

     The `setitimer()' and `getitimer()' functions have also been added
     (where they're available).  `setitimer()' allows setting interval
     timers that will cause a signal to be delivered to the process
     after a specified time, measured in wall-clock time, consumed
     process time, or combined process+system time.  (Contributed by
     Guilherme Polo; issue 2240(35).)

   * The `smtplib' module now supports SMTP over SSL thanks to the
     addition of the `SMTP_SSL' class. This class supports an interface
     identical to the existing `SMTP' class.  (Contributed by Monty
     Taylor.)  Both class constructors also have an optional `timeout'
     parameter that specifies a timeout for the initial connection
     attempt, measured in seconds.  (Contributed by Facundo Batista.)

     An implementation of the LMTP protocol ( RFC 2033(36)) was also
     added to the module.  LMTP is used in place of SMTP when
     transferring e-mail between agents that don't manage a mail queue.
     (LMTP implemented by Leif Hedstrom; issue 957003(37).)

     `SMTP.starttls()' now complies with RFC 3207(38) and forgets any
     knowledge obtained from the server not obtained from the TLS
     negotiation itself.  (Patch contributed by Bill Fenner; issue
     829951(39).)

   * The `socket' module now supports TIPC (<http://tipc.sf.net>), a
     high-performance non-IP-based protocol designed for use in
     clustered environments.  TIPC addresses are 4- or 5-tuples.
     (Contributed by Alberto Bertogli; issue 1646(40).)

     A new function, `create_connection()', takes an address and
     connects to it using an optional timeout value, returning the
     connected socket object.  This function also looks up the address's
     type and connects to it using IPv4 or IPv6 as appropriate.
     Changing your code to use `create_connection()' instead of
     `socket(socket.AF_INET, ...)' may be all that's required to make
     your code work with IPv6.

   * The base classes in the `SocketServer' module now support calling
     a `handle_timeout()' method after a span of inactivity specified
     by the server's `timeout' attribute.  (Contributed by Michael
     Pomraning.)  The `serve_forever()' method now takes an optional
     poll interval measured in seconds, controlling how often the
     server will check for a shutdown request.  (Contributed by Pedro
     Werneck and Jeffrey Yasskin; issue 742598(41), issue 1193577(42).)

   * The `sqlite3' module, maintained by Gerhard Haering, has been
     updated from version 2.3.2 in Python 2.5 to version 2.4.1.

   * The `struct' module now supports the C99 `_Bool' type, using the
     format character `'?''.  (Contributed by David Remahl.)

   * The `Popen' objects provided by the `subprocess' module now have
     `terminate()', `kill()', and `send_signal()' methods.  On Windows,
     `send_signal()' only supports the `SIGTERM' signal, and all these
     methods are aliases for the Win32 API function
     `TerminateProcess()'.  (Contributed by Christian Heimes.)

   * A new variable in the `sys' module, `float_info', is an object
     containing information derived from the `float.h' file about the
     platform's floating-point support.  Attributes of this object
     include `mant_dig' (number of digits in the mantissa), `epsilon'
     (smallest difference between 1.0 and the next largest value
     representable), and several others.  (Contributed by Christian
     Heimes; issue 1534(43).)

     Another new variable, `dont_write_bytecode', controls whether
     Python writes any `.pyc' or `.pyo' files on importing a module.
     If this variable is true, the compiled files are not written.  The
     variable is initially set on start-up by supplying the `-B' switch
     to the Python interpreter, or by setting the `PYTHONDONTWRITEBYTECODE'
     environment variable before running the interpreter.  Python code
     can subsequently change the value of this variable to control
     whether bytecode files are written or not.  (Contributed by Neal
     Norwitz and Georg Brandl.)

     Information about the command-line arguments supplied to the Python
     interpreter is available by reading attributes of a named tuple
     available as `sys.flags'.  For example, the `verbose' attribute is
     true if Python was executed in verbose mode, `debug' is true in
     debugging mode, etc.  These attributes are all read-only.
     (Contributed by Christian Heimes.)

     A new function, `getsizeof()', takes a Python object and returns
     the amount of memory used by the object, measured in bytes.
     Built-in objects return correct results; third-party extensions
     may not, but can define a `__sizeof__()' method to return the
     object's size.  (Contributed by Robert Schuppenies; issue
     2898(44).)

     It's now possible to determine the current profiler and tracer
     functions by calling `sys.getprofile()' and `sys.gettrace()'.
     (Contributed by Georg Brandl; issue 1648(45).)

   * The `tarfile' module now supports POSIX.1-2001 (pax) tarfiles in
     addition to the POSIX.1-1988 (ustar) and GNU tar formats that were
     already supported.  The default format is GNU tar; specify the
     `format' parameter to open a file using a different format:

         tar = tarfile.open("output.tar", "w",
                            format=tarfile.PAX_FORMAT)

     The new `encoding' and `errors' parameters specify an encoding and
     an error handling scheme for character conversions.  `'strict'',
     `'ignore'', and `'replace'' are the three standard ways Python can
     handle errors,; `'utf-8'' is a special value that replaces bad
     characters with their UTF-8 representation.  (Character
     conversions occur because the PAX format supports Unicode
     filenames, defaulting to UTF-8 encoding.)

     The `TarFile.add()' method now accepts an `exclude' argument that's
     a function that can be used to exclude certain filenames from an
     archive.  The function must take a filename and return true if the
     file should be excluded or false if it should be archived.  The
     function is applied to both the name initially passed to `add()'
     and to the names of files in recursively-added directories.

     (All changes contributed by Lars Gustäbel).

   * An optional `timeout' parameter was added to the
     `telnetlib.Telnet' class constructor, specifying a timeout
     measured in seconds.  (Added by Facundo Batista.)

   * The `tempfile.NamedTemporaryFile' class usually deletes the
     temporary file it created when the file is closed.  This behaviour
     can now be changed by passing `delete=False' to the constructor.
     (Contributed by Damien Miller; issue 1537850(46).)

     A new class, `SpooledTemporaryFile', behaves like a temporary file
     but stores its data in memory until a maximum size is exceeded.
     On reaching that limit, the contents will be written to an on-disk
     temporary file.  (Contributed by Dustin J. Mitchell.)

     The `NamedTemporaryFile' and `SpooledTemporaryFile' classes both
     work as context managers, so you can write `with
     tempfile.NamedTemporaryFile() as tmp: ...'.  (Contributed by
     Alexander Belopolsky; issue 2021(47).)

   * The `test.test_support' module gained a number of context managers
     useful for writing tests.  `EnvironmentVarGuard()' is a context
     manager that temporarily changes environment variables and
     automatically restores them to their old values.

     Another context manager, `TransientResource', can surround calls
     to resources that may or may not be available; it will catch and
     ignore a specified list of exceptions.  For example, a network
     test may ignore certain failures when connecting to an external
     web site:

         with test_support.TransientResource(IOError,
                                         errno=errno.ETIMEDOUT):
             f = urllib.urlopen('https://sf.net')
             ...

     Finally, `check_warnings()' resets the `warning' module's warning
     filters and returns an object that will record all warning
     messages triggered (issue 3781(48)):

         with test_support.check_warnings() as wrec:
             warnings.simplefilter("always")
             # ... code that triggers a warning ...
             assert str(wrec.message) == "function is outdated"
             assert len(wrec.warnings) == 1, "Multiple warnings raised"

     (Contributed by Brett Cannon.)

   * The `textwrap' module can now preserve existing whitespace at the
     beginnings and ends of the newly-created lines by specifying
     `drop_whitespace=False' as an argument:

         >>> S = """This  sentence  has a bunch   of
         ...   extra   whitespace."""
         >>> print textwrap.fill(S, width=15)
         This  sentence
         has a bunch
         of    extra
         whitespace.
         >>> print textwrap.fill(S, drop_whitespace=False, width=15)
         This  sentence
           has a bunch
            of    extra
            whitespace.
         >>>

     (Contributed by Dwayne Bailey; issue 1581073(49).)

   * The `threading' module API is being changed to use properties such
     as `daemon' instead of `setDaemon()' and `isDaemon()' methods, and
     some methods have been renamed to use underscores instead of
     camel-case; for example, the `activeCount()' method is renamed to
     `active_count()'.  Both the 2.6 and 3.0 versions of the module
     support the same properties and renamed methods, but don't remove
     the old methods.  No date has been set for the deprecation of the
     old APIs in Python 3.x; the old APIs won't be removed in any 2.x
     version.  (Carried out by several people, most notably Benjamin
     Peterson.)

     The `threading' module's `Thread' objects gained an `ident'
     property that returns the thread's identifier, a nonzero integer.
     (Contributed by Gregory P. Smith; issue 2871(50).)

   * The `timeit' module now accepts callables as well as strings for
     the statement being timed and for the setup code.  Two convenience
     functions were added for creating `Timer' instances: `repeat(stmt,
     setup, time, repeat, number)' and `timeit(stmt, setup, time,
     number)' create an instance and call the corresponding method.
     (Contributed by Erik Demaine; issue 1533909(51).)

   * The `Tkinter' module now accepts lists and tuples for options,
     separating the elements by spaces before passing the resulting
     value to Tcl/Tk.  (Contributed by Guilherme Polo; issue 2906(52).)

   * The `turtle' module for turtle graphics was greatly enhanced by
     Gregor Lingl.  New features in the module include:

        * Better animation of turtle movement and rotation.

        * Control over turtle movement using the new `delay()',
          `tracer()', and `speed()' methods.

        * The ability to set new shapes for the turtle, and to define a
          new coordinate system.

        * Turtles now have an `undo()' method that can roll back
          actions.

        * Simple support for reacting to input events such as mouse and
          keyboard activity, making it possible to write simple games.

        * A `turtle.cfg' file can be used to customize the starting
          appearance of the turtle's screen.

        * The module's docstrings can be replaced by new docstrings
          that have been translated into another language.

     (issue 1513695(53))

   * An optional `timeout' parameter was added to the
     `urllib.urlopen()' function and the `urllib.ftpwrapper' class
     constructor, as well as the `urllib2.urlopen()' function.  The
     parameter specifies a timeout measured in seconds.   For example:

         >>> u = urllib2.urlopen("http://slow.example.com",
                                 timeout=3)
         Traceback (most recent call last):
           ...
         urllib2.URLError: <urlopen error timed out>
         >>>

     (Added by Facundo Batista.)

   * The Unicode database provided by the `unicodedata' module has been
     updated to version 5.1.0.  (Updated by Martin von Loewis; issue
     3811(54).)

   * The `warnings' module's `formatwarning()' and `showwarning()'
     gained an optional _line_ argument that can be used to supply the
     line of source code.  (Added as part of issue 1631171(55), which
     re-implemented part of the `warnings' module in C code.)

     A new function, `catch_warnings()', is a context manager intended
     for testing purposes that lets you temporarily modify the warning
     filters and then restore their original values (issue 3781(56)).

   * The XML-RPC `SimpleXMLRPCServer' and `DocXMLRPCServer' classes can
     now be prevented from immediately opening and binding to their
     socket by passing True as the `bind_and_activate' constructor
     parameter.  This can be used to modify the instance's
     `allow_reuse_address' attribute before calling the `server_bind()'
     and `server_activate()' methods to open the socket and begin
     listening for connections.  (Contributed by Peter Parente; issue
     1599845(57).)

     `SimpleXMLRPCServer' also has a `_send_traceback_header'
     attribute; if true, the exception and formatted traceback are
     returned as HTTP headers "X-Exception" and "X-Traceback".  This
     feature is for debugging purposes only and should not be used on
     production servers because the tracebacks might reveal passwords
     or other sensitive information.  (Contributed by Alan McIntyre as
     part of his project for Google's Summer of Code 2007.)

   * The `xmlrpclib' module no longer automatically converts
     `datetime.date' and `datetime.time' to the `xmlrpclib.DateTime'
     type; the conversion semantics were not necessarily correct for
     all applications.  Code using `xmlrpclib' should convert `date'
     and `time' instances. (issue 1330538(58))  The code can also handle
     dates before 1900 (contributed by Ralf Schmitt; issue 2014(59))
     and 64-bit integers represented by using `<i8>' in XML-RPC
     responses (contributed by Riku Lindblad; issue 2985(60)).

   * The `zipfile' module's `ZipFile' class now has `extract()' and
     `extractall()' methods that will unpack a single file or all the
     files in the archive to the current directory, or to a specified
     directory:

         z = zipfile.ZipFile('python-251.zip')

         # Unpack a single file, writing it relative
         # to the /tmp directory.
         z.extract('Python/sysmodule.c', '/tmp')

         # Unpack all the files in the archive.
         z.extractall()

     (Contributed by Alan McIntyre; issue 467924(61).)

     The `open()', `read()' and `extract()' methods can now take either
     a filename or a `ZipInfo' object.  This is useful when an archive
     accidentally contains a duplicated filename.  (Contributed by
     Graham Horler; issue 1775025(62).)

     Finally, `zipfile' now supports using Unicode filenames for
     archived files.  (Contributed by Alexey Borzenkov; issue
     1734346(63).)

* Menu:

* The ast module::
* The future_builtins module::
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation.
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser.
* ctypes Enhancements::
* Improved SSL Support::

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1736190

  (2) http://www.jcea.es/programacion/pybsddb.htm

  (3) http://bugs.python.org/issue1817

  (4) http://bugs.python.org/issue600362

  (5) http://bugs.python.org/issue1381

  (6) http://bugs.python.org/issue1638033

  (7) http://bugs.python.org/issue1158

  (8) http://www2.hursley.ibm.com/decimal/decarith.html

  (9) http://bugs.python.org/issue1221598

  (10) http://bugs.python.org/issue1739906

  (11) http://bugs.python.org/issue1001604

  (12) http://bugs.python.org/issue2138

  (13) http://bugs.python.org/issue2819

  (14) http://bugs.python.org/issue711019

  (15) http://bugs.python.org/issue1640

  (16) http://bugs.python.org/issue1663329

  (17) http://bugs.python.org/issue1181

  (18) http://bugs.python.org/issue1273829

  (19) http://bugs.python.org/issue1115886

  (20) http://bugs.python.org/issue1339796

  (21) http://bugs.python.org/issue957650

  (22) http://bugs.python.org/issue1393667

  (23) http://bugs.python.org/issue1106316

  (24) http://bugs.python.org/issue2439

  (25) http://bugs.python.org/issue1137

  (26) http://bugs.python.org/issue1727780

  (27) http://bugs.python.org/issue1681432

  (28) http://bugs.python.org/issue846388

  (29) http://bugs.python.org/issue3487

  (30) http://bugs.python.org/issue2250

  (31) http://bugs.python.org/issue1861

  (32) http://bugs.python.org/issue1657

  (33) http://bugs.python.org/issue2663

  (34) http://bugs.python.org/issue1583

  (35) http://bugs.python.org/issue2240

  (36) http://tools.ietf.org/html/rfc2033.html

  (37) http://bugs.python.org/issue957003

  (38) http://tools.ietf.org/html/rfc3207.html

  (39) http://bugs.python.org/issue829951

  (40) http://bugs.python.org/issue1646

  (41) http://bugs.python.org/issue742598

  (42) http://bugs.python.org/issue1193577

  (43) http://bugs.python.org/issue1534

  (44) http://bugs.python.org/issue2898

  (45) http://bugs.python.org/issue1648

  (46) http://bugs.python.org/issue1537850

  (47) http://bugs.python.org/issue2021

  (48) http://bugs.python.org/issue3781

  (49) http://bugs.python.org/issue1581073

  (50) http://bugs.python.org/issue2871

  (51) http://bugs.python.org/issue1533909

  (52) http://bugs.python.org/issue2906

  (53) http://bugs.python.org/issue1513695

  (54) http://bugs.python.org/issue3811

  (55) http://bugs.python.org/issue1631171

  (56) http://bugs.python.org/issue3781

  (57) http://bugs.python.org/issue1599845

  (58) http://bugs.python.org/issue1330538

  (59) http://bugs.python.org/issue2014

  (60) http://bugs.python.org/issue2985

  (61) http://bugs.python.org/issue467924

  (62) http://bugs.python.org/issue1775025

  (63) http://bugs.python.org/issue1734346


File: python-whatsnew-3.2.2.info,  Node: The ast module,  Next: The future_builtins module,  Up: New and Improved Modules<2>

5.18.1 The `ast' module
-----------------------

The `ast' module provides an Abstract Syntax Tree representation of
Python code, and Armin Ronacher contributed a set of helper functions
that perform a variety of common tasks.  These will be useful for HTML
templating packages, code analyzers, and similar tools that process
Python code.

  The `parse()' function takes an expression and returns an AST.  The
`dump()' function outputs a representation of a tree, suitable for
debugging:

    import ast

    t = ast.parse("""
    d = {}
    for i in 'abcdefghijklm':
        d[i + i] = ord(i) - ord('a') + 1
    print d
    """)
    print ast.dump(t)

This outputs a deeply nested tree:

    Module(body=[
      Assign(targets=[
        Name(id='d', ctx=Store())
       ], value=Dict(keys=[], values=[]))
      For(target=Name(id='i', ctx=Store()),
          iter=Str(s='abcdefghijklm'), body=[
        Assign(targets=[
          Subscript(value=
            Name(id='d', ctx=Load()),
              slice=
              Index(value=
                BinOp(left=Name(id='i', ctx=Load()), op=Add(),
                 right=Name(id='i', ctx=Load()))), ctx=Store())
         ], value=
         BinOp(left=
          BinOp(left=
           Call(func=
            Name(id='ord', ctx=Load()), args=[
              Name(id='i', ctx=Load())
             ], keywords=[], starargs=None, kwargs=None),
           op=Sub(), right=Call(func=
            Name(id='ord', ctx=Load()), args=[
              Str(s='a')
             ], keywords=[], starargs=None, kwargs=None)),
           op=Add(), right=Num(n=1)))
        ], orelse=[])
       Print(dest=None, values=[
         Name(id='d', ctx=Load())
       ], nl=True)
     ])

The `literal_eval()' method takes a string or an AST representing a
literal expression, parses and evaluates it, and returns the resulting
value.  A literal expression is a Python expression containing only
strings, numbers, dictionaries, etc. but no statements or function
calls.  If you need to evaluate an expression but cannot accept the
security risk of using an `eval()' call, `literal_eval()' will handle
it safely:

    >>> literal = '("a", "b", {2:4, 3:8, 1:2})'
    >>> print ast.literal_eval(literal)
    ('a', 'b', {1: 2, 2: 4, 3: 8})
    >>> print ast.literal_eval('"a" + "b"')
    Traceback (most recent call last):
      ...
    ValueError: malformed string

The module also includes `NodeVisitor' and `NodeTransformer' classes
for traversing and modifying an AST, and functions for common
transformations such as changing line numbers.


File: python-whatsnew-3.2.2.info,  Node: The future_builtins module,  Next: The json module JavaScript Object Notation,  Prev: The ast module,  Up: New and Improved Modules<2>

5.18.2 The `future_builtins' module
-----------------------------------

Python 3.0 makes many changes to the repertoire of built-in functions,
and most of the changes can't be introduced in the Python 2.x series
because they would break compatibility.  The `future_builtins' module
provides versions of these built-in functions that can be imported when
writing 3.0-compatible code.

  The functions in this module currently include:

   * `ascii(obj)': equivalent to `repr()'.  In Python 3.0, `repr()'
     will return a Unicode string, while `ascii()' will return a pure
     ASCII bytestring.

   * `filter(predicate, iterable)', `map(func, iterable1, ...)': the
     3.0 versions return iterators, unlike the 2.x builtins which
     return lists.

   * `hex(value)', `oct(value)': instead of calling the `__hex__()' or
     `__oct__()' methods, these versions will call the `__index__()'
     method and convert the result to hexadecimal or octal.  `oct()'
     will use the new `0o' notation for its result.


File: python-whatsnew-3.2.2.info,  Node: The json module JavaScript Object Notation,  Next: The plistlib module A Property-List Parser,  Prev: The future_builtins module,  Up: New and Improved Modules<2>

5.18.3 The `json' module: JavaScript Object Notation
----------------------------------------------------

The new `json' module supports the encoding and decoding of Python
types in JSON (Javascript Object Notation). JSON is a lightweight
interchange format often used in web applications. For more information
about JSON, see <http://www.json.org>.

  `json' comes with support for decoding and encoding most built-in
Python types. The following example encodes and decodes a dictionary:

    >>> import json
    >>> data = {"spam" : "foo", "parrot" : 42}
    >>> in_json = json.dumps(data) # Encode the data
    >>> in_json
    '{"parrot": 42, "spam": "foo"}'
    >>> json.loads(in_json) # Decode into a Python object
    {"spam" : "foo", "parrot" : 42}

It's also possible to write your own decoders and encoders to support
more types. Pretty-printing of the JSON strings is also supported.

  `json' (originally called simplejson) was written by Bob Ippolito.


File: python-whatsnew-3.2.2.info,  Node: The plistlib module A Property-List Parser,  Next: ctypes Enhancements,  Prev: The json module JavaScript Object Notation,  Up: New and Improved Modules<2>

5.18.4 The `plistlib' module: A Property-List Parser
----------------------------------------------------

The `.plist' format is commonly used on Mac OS X to store basic data
types (numbers, strings, lists, and dictionaries) by serializing them
into an XML-based format.  It resembles the XML-RPC serialization of
data types.

  Despite being primarily used on Mac OS X, the format has nothing
Mac-specific about it and the Python implementation works on any
platform that Python supports, so the `plistlib' module has been
promoted to the standard library.

  Using the module is simple:

    import sys
    import plistlib
    import datetime

    # Create data structure
    data_struct = dict(lastAccessed=datetime.datetime.now(),
                       version=1,
                       categories=('Personal','Shared','Private'))

    # Create string containing XML.
    plist_str = plistlib.writePlistToString(data_struct)
    new_struct = plistlib.readPlistFromString(plist_str)
    print data_struct
    print new_struct

    # Write data structure to a file and read it back.
    plistlib.writePlist(data_struct, '/tmp/customizations.plist')
    new_struct = plistlib.readPlist('/tmp/customizations.plist')

    # read/writePlist accepts file-like objects as well as paths.
    plistlib.writePlist(data_struct, sys.stdout)



File: python-whatsnew-3.2.2.info,  Node: ctypes Enhancements,  Next: Improved SSL Support,  Prev: The plistlib module A Property-List Parser,  Up: New and Improved Modules<2>

5.18.5 ctypes Enhancements
--------------------------

Thomas Heller continued to maintain and enhance the `ctypes' module.

  `ctypes' now supports a `c_bool' datatype that represents the C99
`bool' type.  (Contributed by David Remahl; issue 1649190(1).)

  The `ctypes' string, buffer and array types have improved support for
extended slicing syntax, where various combinations of `(start, stop,
step)' are supplied.  (Implemented by Thomas Wouters.)

  All `ctypes' data types now support `from_buffer()' and
`from_buffer_copy()' methods that create a ctypes instance based on a
provided buffer object.  `from_buffer_copy()' copies the contents of
the object, while `from_buffer()' will share the same memory area.

  A new calling convention tells `ctypes' to clear the `errno' or Win32
LastError variables at the outset of each wrapped call.  (Implemented
by Thomas Heller; issue 1798(2).)

  You can now retrieve the Unix `errno' variable after a function call.
When creating a wrapped function, you can supply `use_errno=True' as a
keyword parameter to the `DLL()' function and then call the
module-level methods `set_errno()' and `get_errno()' to set and
retrieve the error value.

  The Win32 LastError variable is similarly supported by the `DLL()',
`OleDLL()', and `WinDLL()' functions.  You supply `use_last_error=True'
as a keyword parameter and then call the module-level methods
`set_last_error()' and `get_last_error()'.

  The `byref()' function, used to retrieve a pointer to a ctypes
instance, now has an optional _offset_ parameter that is a byte count
that will be added to the returned pointer.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1649190

  (2) http://bugs.python.org/issue1798


File: python-whatsnew-3.2.2.info,  Node: Improved SSL Support,  Prev: ctypes Enhancements,  Up: New and Improved Modules<2>

5.18.6 Improved SSL Support
---------------------------

Bill Janssen made extensive improvements to Python 2.6's support for
the Secure Sockets Layer by adding a new module, `ssl', that's built
atop the OpenSSL(1) library.  This new module provides more control
over the protocol negotiated, the X.509 certificates used, and has
better support for writing SSL servers (as opposed to clients) in
Python.  The existing SSL support in the `socket' module hasn't been
removed and continues to work, though it will be removed in Python 3.0.

  To use the new module, you must first create a TCP connection in the
usual way and then pass it to the `ssl.wrap_socket()' function.  It's
possible to specify whether a certificate is required, and to obtain
certificate info by calling the `getpeercert()' method.

See also
........

The documentation for the `ssl' module.

  ---------- Footnotes ----------

  (1) http://www.openssl.org/


File: python-whatsnew-3.2.2.info,  Node: Deprecations and Removals,  Next: Build and C API Changes<5>,  Prev: New and Improved Modules<2>,  Up: What's New in Python 2 6

5.19 Deprecations and Removals
==============================

   * String exceptions have been removed.  Attempting to use them
     raises a `TypeError'.

   * Changes to the `Exception' interface as dictated by PEP 352(1)
     continue to be made.  For 2.6, the `message' attribute is being
     deprecated in favor of the `args' attribute.

   * (3.0-warning mode) Python 3.0 will feature a reorganized standard
     library that will drop many outdated modules and rename others.
     Python 2.6 running in 3.0-warning mode will warn about these
     modules when they are imported.

     The list of deprecated modules is: `audiodev', `bgenlocations',
     `buildtools', `bundlebuilder', `Canvas', `compiler', `dircache',
     `dl', `fpformat', `gensuitemodule', `ihooks', `imageop', `imgfile',
     `linuxaudiodev', `mhlib', `mimetools', `multifile', `new', `pure',
     `statvfs', `sunaudiodev', `test.testall', and `toaiff'.

   * The `gopherlib' module has been removed.

   * The `MimeWriter' module and `mimify' module have been deprecated;
     use the `email' package instead.

   * The `md5' module has been deprecated; use the `hashlib' module
     instead.

   * The `posixfile' module has been deprecated; `fcntl.lockf()'
     provides better locking.

   * The `popen2' module has been deprecated; use the `subprocess'
     module.

   * The `rgbimg' module has been removed.

   * The `sets' module has been deprecated; it's better to use the
     built-in `set' and `frozenset' types.

   * The `sha' module has been deprecated; use the `hashlib' module
     instead.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0352


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<5>,  Next: Porting to Python 2 6,  Prev: Deprecations and Removals,  Up: What's New in Python 2 6

5.20 Build and C API Changes
============================

Changes to Python's build process and to the C API include:

   * Python now must be compiled with C89 compilers (after 19 years!).
     This means that the Python source tree has dropped its own
     implementations of `memmove()' and `strerror()', which are in the
     C89 standard library.

   * Python 2.6 can be built with Microsoft Visual Studio 2008 (version
     9.0), and this is the new default compiler.  See the `PCbuild'
     directory for the build files.  (Implemented by Christian Heimes.)

   * On Mac OS X, Python 2.6 can be compiled as a 4-way universal build.
     The *configure* script can take a
     `--with-universal-archs=[32-bit|64-bit|all]' switch, controlling
     whether the binaries are built for 32-bit architectures (x86,
     PowerPC), 64-bit (x86-64 and PPC-64), or both.  (Contributed by
     Ronald Oussoren.)

   * The BerkeleyDB module now has a C API object, available as
     `bsddb.db.api'.   This object can be used by other C extensions
     that wish to use the `bsddb' module for their own purposes.
     (Contributed by Duncan Grisby.)

   * The new buffer interface, previously described in *note the PEP
     3118 section: ae, adds `PyObject_GetBuffer()' and
     `PyBuffer_Release()', as well as a few other functions.

   * Python's use of the C stdio library is now thread-safe, or at least
     as thread-safe as the underlying library is.  A long-standing
     potential bug occurred if one thread closed a file object while
     another thread was reading from or writing to the object.  In 2.6
     file objects have a reference count, manipulated by the
     `PyFile_IncUseCount()' and `PyFile_DecUseCount()' functions.  File
     objects can't be closed unless the reference count is zero.
     `PyFile_IncUseCount()' should be called while the GIL is still
     held, before carrying out an I/O operation using the `FILE *'
     pointer, and `PyFile_DecUseCount()' should be called immediately
     after the GIL is re-acquired.  (Contributed by Antoine Pitrou and
     Gregory P. Smith.)

   * Importing modules simultaneously in two different threads no longer
     deadlocks; it will now raise an `ImportError'.  A new API
     function, `PyImport_ImportModuleNoBlock()', will look for a module
     in `sys.modules' first, then try to import it after acquiring an
     import lock.  If the import lock is held by another thread, an
     `ImportError' is raised.  (Contributed by Christian Heimes.)

   * Several functions return information about the platform's
     floating-point support.  `PyFloat_GetMax()' returns the maximum
     representable floating point value, and `PyFloat_GetMin()' returns
     the minimum positive value.  `PyFloat_GetInfo()' returns an object
     containing more information from the `float.h' file, such as
     `"mant_dig"' (number of digits in the mantissa), `"epsilon"'
     (smallest difference between 1.0 and the next largest value
     representable), and several others.  (Contributed by Christian
     Heimes; issue 1534(1).)

   * C functions and methods that use `PyComplex_AsCComplex()' will now
     accept arguments that have a `__complex__()' method.  In
     particular, the functions in the `cmath' module will now accept
     objects with this method.  This is a backport of a Python 3.0
     change.  (Contributed by Mark Dickinson; issue 1675423(2).)

   * Python's C API now includes two functions for case-insensitive
     string comparisons, `PyOS_stricmp(char*, char*)' and
     `PyOS_strnicmp(char*, char*, Py_ssize_t)'.  (Contributed by
     Christian Heimes; issue 1635(3).)

   * Many C extensions define their own little macro for adding
     integers and strings to the module's dictionary in the `init*'
     function.  Python 2.6 finally defines standard macros for adding
     values to a module, `PyModule_AddStringMacro' and
     `PyModule_AddIntMacro()'.  (Contributed by Christian Heimes.)

   * Some macros were renamed in both 3.0 and 2.6 to make it clearer
     that they are macros, not functions.  `Py_Size()' became
     `Py_SIZE()', `Py_Type()' became `Py_TYPE()', and `Py_Refcnt()'
     became `Py_REFCNT()'.  The mixed-case macros are still available
     in Python 2.6 for backward compatibility.  (issue 1629(4))

   * Distutils now places C extensions it builds in a different
     directory when running on a debug version of Python.  (Contributed
     by Collin Winter; issue 1530959(5).)

   * Several basic data types, such as integers and strings, maintain
     internal free lists of objects that can be re-used.  The data
     structures for these free lists now follow a naming convention: the
     variable is always named `free_list', the counter is always named
     `numfree', and a macro `Py<typename>_MAXFREELIST' is always
     defined.

   * A new Makefile target, "make patchcheck", prepares the Python
     source tree for making a patch: it fixes trailing whitespace in
     all modified `.py' files, checks whether the documentation has
     been changed, and reports whether the `Misc/ACKS' and `Misc/NEWS'
     files have been updated.  (Contributed by Brett Cannon.)

     Another new target, "make profile-opt", compiles a Python binary
     using GCC's profile-guided optimization.  It compiles Python with
     profiling enabled, runs the test suite to obtain a set of profiling
     results, and then compiles using these results for optimization.
     (Contributed by Gregory P. Smith.)

* Menu:

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>.
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1534

  (2) http://bugs.python.org/issue1675423

  (3) http://bugs.python.org/issue1635

  (4) http://bugs.python.org/issue1629

  (5) http://bugs.python.org/issue1530959


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes Windows<2>,  Next: Port-Specific Changes Mac OS X<2>,  Up: Build and C API Changes<5>

5.20.1 Port-Specific Changes: Windows
-------------------------------------

   * The support for Windows 95, 98, ME and NT4 has been dropped.
     Python 2.6 requires at least Windows 2000 SP4.

   * The new default compiler on Windows is Visual Studio 2008 (version
     9.0). The build directories for Visual Studio 2003 (version 7.1)
     and 2005 (version 8.0) were moved into the PC/ directory. The new
     `PCbuild' directory supports cross compilation for X64, debug
     builds and Profile Guided Optimization (PGO). PGO builds are
     roughly 10% faster than normal builds.  (Contributed by Christian
     Heimes with help from Amaury Forgeot d'Arc and Martin von Loewis.)

   * The `msvcrt' module now supports both the normal and wide char
     variants of the console I/O API.  The `getwch()' function reads a
     keypress and returns a Unicode value, as does the `getwche()'
     function.  The `putwch()' function takes a Unicode character and
     writes it to the console.  (Contributed by Christian Heimes.)

   * `os.path.expandvars()' will now expand environment variables in
     the form "%var%", and "~user" will be expanded into the user's home
     directory path.  (Contributed by Josiah Carlson; issue 957650(1).)

   * The `socket' module's socket objects now have an `ioctl()' method
     that provides a limited interface to the `WSAIoctl()' system
     interface.

   * The `_winreg' module now has a function,
     `ExpandEnvironmentStrings()', that expands environment variable
     references such as `%NAME%' in an input string.  The handle
     objects provided by this module now support the context protocol,
     so they can be used in `with' statements. (Contributed by
     Christian Heimes.)

     `_winreg' also has better support for x64 systems, exposing the
     `DisableReflectionKey()', `EnableReflectionKey()', and
     `QueryReflectionKey()' functions, which enable and disable
     registry reflection for 32-bit processes running on 64-bit systems.
     (issue 1753245(2))

   * The `msilib' module's `Record' object gained `GetInteger()' and
     `GetString()' methods that return field values as an integer or a
     string.  (Contributed by Floris Bruynooghe; issue 2125(3).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue957650

  (2) http://bugs.python.org/issue1753245

  (3) http://bugs.python.org/issue2125


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes Mac OS X<2>,  Next: Port-Specific Changes IRIX,  Prev: Port-Specific Changes Windows<2>,  Up: Build and C API Changes<5>

5.20.2 Port-Specific Changes: Mac OS X
--------------------------------------

   * When compiling a framework build of Python, you can now specify the
     framework name to be used by providing the
     `--with-framework-name=' option to the *configure* script.

   * The `macfs' module has been removed.  This in turn required the
     `macostools.touched()' function to be removed because it depended
     on the `macfs' module.  (issue 1490190(1))

   * Many other Mac OS modules have been deprecated and will removed in
     Python 3.0: `_builtinSuites', `aepack', `aetools', `aetypes',
     `applesingle', `appletrawmain', `appletrunner', `argvemulator',
     `Audio_mac', `autoGIL', `Carbon', `cfmfile', `CodeWarrior',
     `ColorPicker', `EasyDialogs', `Explorer', `Finder', `FrameWork',
     `findertools', `ic', `icglue', `icopen', `macerrors', `MacOS',
     `macfs', `macostools', `macresource', `MiniAEFrame', `Nav',
     `Netscape', `OSATerminology', `pimp', `PixMapWrapper', `StdSuites',
     `SystemEvents', `Terminal', and `terminalcommand'.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1490190


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes IRIX,  Prev: Port-Specific Changes Mac OS X<2>,  Up: Build and C API Changes<5>

5.20.3 Port-Specific Changes: IRIX
----------------------------------

A number of old IRIX-specific modules were deprecated and will be
removed in Python 3.0: `al' and `AL', `cd', `cddb', `cdplayer', `CL'
and `cl', `DEVICE', `ERRNO', `FILE', `FL' and `fl', `flp', `fm', `GET',
`GLWS', `GL' and `gl', `IN', `IOCTL', `jpeg', `panelparser', `readcd',
`SV' and `sv', `torgb', `videoreader', and `WAIT'.


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 2 6,  Next: Acknowledgements<2>,  Prev: Build and C API Changes<5>,  Up: What's New in Python 2 6

5.21 Porting to Python 2.6
==========================

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * Classes that aren't supposed to be hashable should set `__hash__ =
     None' in their definitions to indicate the fact.

   * String exceptions have been removed.  Attempting to use them
     raises a `TypeError'.

   * The `__init__()' method of `collections.deque' now clears any
     existing contents of the deque before adding elements from the
     iterable.  This change makes the behavior match `list.__init__()'.

   * `object.__init__()' previously accepted arbitrary arguments and
     keyword arguments, ignoring them.  In Python 2.6, this is no longer
     allowed and will result in a `TypeError'.  This will affect
     `__init__()' methods that end up calling the corresponding method
     on `object' (perhaps through using `super()').  See issue
     1683368(1) for discussion.

   * The `Decimal' constructor now accepts leading and trailing
     whitespace when passed a string.  Previously it would raise an
     `InvalidOperation' exception.  On the other hand, the
     `create_decimal()' method of `Context' objects now explicitly
     disallows extra whitespace, raising a `ConversionSyntax' exception.

   * Due to an implementation accident, if you passed a file path to
     the built-in  `__import__()' function, it would actually import
     the specified file.  This was never intended to work, however, and
     the implementation now explicitly checks for this case and raises
     an `ImportError'.

   * C API: the `PyImport_Import()' and `PyImport_ImportModule()'
     functions now default to absolute imports, not relative imports.
     This will affect C extensions that import other modules.

   * C API: extension data types that shouldn't be hashable should
     define their `tp_hash' slot to `PyObject_HashNotImplemented()'.

   * The `socket' module exception `socket.error' now inherits from
     `IOError'.  Previously it wasn't a subclass of `StandardError' but
     now it is, through `IOError'.  (Implemented by Gregory P. Smith;
     issue 1706815(2).)

   * The `xmlrpclib' module no longer automatically converts
     `datetime.date' and `datetime.time' to the `xmlrpclib.DateTime'
     type; the conversion semantics were not necessarily correct for
     all applications.  Code using `xmlrpclib' should convert `date'
     and `time' instances. (issue 1330538(3))

   * (3.0-warning mode) The `Exception' class now warns when accessed
     using slicing or index access; having `Exception' behave like a
     tuple is being phased out.

   * (3.0-warning mode) inequality comparisons between two dictionaries
     or two objects that don't implement comparison methods are reported
     as warnings.  `dict1 == dict2' still works, but `dict1 < dict2' is
     being phased out.

     Comparisons between cells, which are an implementation detail of
     Python's scoping rules, also cause warnings because such
     comparisons are forbidden entirely in 3.0.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1683368

  (2) http://bugs.python.org/issue1706815

  (3) http://bugs.python.org/issue1330538


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<2>,  Prev: Porting to Python 2 6,  Up: What's New in Python 2 6

5.22 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim
Jewett, Kent Johnson, Chris Lambacher,  Martin Michlmayr, Antoine
Pitrou, Brian Warner.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 5,  Next: What's New in Python 2 4,  Prev: What's New in Python 2 6,  Up: Top

6 What's New in Python 2.5
**************************

     Author: A.M. Kuchling

  This article explains the new features in Python 2.5.  The final
release of Python 2.5 is scheduled for August 2006; PEP 356(1)
describes the planned release schedule.

  The changes in Python 2.5 are an interesting mix of language and
library improvements. The library enhancements will be more important
to Python's user community, I think, because several widely-useful
packages were added.  New modules include ElementTree for XML
processing (`xml.etree'), the SQLite database module (`sqlite'), and
the `ctypes' module for calling C functions.

  The language changes are of middling significance.  Some pleasant new
features were added, but most of them aren't features that you'll use
every day.  Conditional expressions were finally added to the language
using a novel syntax; see section *note PEP 308; Conditional
Expressions: c9.  The new '`with'' statement will make writing cleanup
code easier (section *note PEP 343; The 'with' statement: ca.).  Values
can now be passed into generators (section *note PEP 342; New Generator
Features: cb.).  Imports are now visible as either absolute or relative
(section *note PEP 328; Absolute and Relative Imports: cc.).  Some
corner cases of exception handling are handled better (section *note
PEP 341; Unified try/except/finally: cd.).  All these improvements are
worthwhile, but they're improvements to one specific language feature or
another; none of them are broad modifications to Python's semantics.

  As well as the language and library additions, other improvements and
bugfixes were made throughout the source tree.  A search through the
SVN change logs finds there were 353 patches applied and 458 bugs fixed
between Python 2.4 and 2.5.  (Both figures are likely to be
underestimates.)

  This article doesn't try to be a complete specification of the new
features; instead changes are briefly introduced using helpful
examples.  For full details, you should always refer to the
documentation for Python 2.5 at <http://docs.python.org>. If you want
to understand the complete implementation and design rationale, refer
to the PEP for a particular new feature.

  Comments, suggestions, and error reports for this document are
welcome; please e-mail them to the author or open a bug in the Python
bug tracker.

* Menu:

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions.
* PEP 309; Partial Function Application: PEP 309 Partial Function Application.
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1.
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports.
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts.
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally.
* PEP 342; New Generator Features: PEP 342 New Generator Features.
* PEP 343; The 'with' statement: PEP 343 The 'with' statement<2>.
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes.
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type.
* PEP 357; The '__index__' method: PEP 357 The '__index__' method.
* Other Language Changes: Other Language Changes<5>.
* New, Improved, and Removed Modules: New Improved and Removed Modules.
* Build and C API Changes: Build and C API Changes<6>.
* Porting to Python 2.5: Porting to Python 2 5.
* Acknowledgements: Acknowledgements<3>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0356


File: python-whatsnew-3.2.2.info,  Node: PEP 308 Conditional Expressions,  Next: PEP 309 Partial Function Application,  Up: What's New in Python 2 5

6.1 PEP 308: Conditional Expressions
====================================

For a long time, people have been requesting a way to write conditional
expressions, which are expressions that return value A or value B
depending on whether a Boolean value is true or false.  A conditional
expression lets you write a single assignment statement that has the
same effect as the following:

    if condition:
        x = true_value
    else:
        x = false_value

There have been endless tedious discussions of syntax on both
python-dev and comp.lang.python.  A vote was even held that found the
majority of voters wanted conditional expressions in some form, but
there was no syntax that was preferred by a clear majority. Candidates
included C's `cond ? true_v : false_v', `if cond then true_v else
false_v', and 16 other variations.

  Guido van Rossum eventually chose a surprising syntax:

    x = true_value if condition else false_value

Evaluation is still lazy as in existing Boolean expressions, so the
order of evaluation jumps around a bit.  The _condition_ expression in
the middle is evaluated first, and the _true_value_ expression is
evaluated only if the condition was true.  Similarly, the _false_value_
expression is only evaluated when the condition is false.

  This syntax may seem strange and backwards; why does the condition go
in the _middle_ of the expression, and not in the front as in C's `c ?
x : y'?  The decision was checked by applying the new syntax to the
modules in the standard library and seeing how the resulting code read.
In many cases where a conditional expression is used, one value seems
to be the 'common case' and one value is an 'exceptional case', used
only on rarer occasions when the condition isn't met.  The conditional
syntax makes this pattern a bit more obvious:

    contents = ((doc + '\n') if doc else '')

I read the above statement as meaning "here _contents_ is  usually
assigned a value of `doc+'\n''; sometimes  _doc_ is empty, in which
special case an empty string is returned."   I doubt I will use
conditional expressions very often where there  isn't a clear common
and uncommon case.

  There was some discussion of whether the language should require
surrounding conditional expressions with parentheses.  The decision was
made to _not_ require parentheses in the Python language's grammar, but
as a matter of style I think you should always use them. Consider these
two statements:

    # First version -- no parens
    level = 1 if logging else 0

    # Second version -- with parens
    level = (1 if logging else 0)

In the first version, I think a reader's eye might group the statement
into 'level = 1', 'if logging', 'else 0', and think that the condition
decides whether the assignment to _level_ is performed.  The second
version reads better, in my opinion, because it makes it clear that the
assignment is always performed and the choice is being made between two
values.

  Another reason for including the brackets: a few odd combinations of
list comprehensions and lambdas could look like incorrect conditional
expressions.  See PEP 308(1) for some examples.  If you put parentheses
around your conditional expressions, you won't run into this case.

See also
........

PEP 308(2) - Conditional Expressions
     PEP written by Guido van Rossum and Raymond D. Hettinger;
     implemented by Thomas Wouters.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0308

  (2) http://www.python.org/dev/peps/pep-0308


File: python-whatsnew-3.2.2.info,  Node: PEP 309 Partial Function Application,  Next: PEP 314 Metadata for Python Software Packages v1 1,  Prev: PEP 308 Conditional Expressions,  Up: What's New in Python 2 5

6.2 PEP 309: Partial Function Application
=========================================

The `functools' module is intended to contain tools for functional-style
programming.

  One useful tool in this module is the `partial()' function. For
programs written in a functional style, you'll sometimes want to
construct variants of existing functions that have some of the
parameters filled in.  Consider a Python function `f(a, b, c)'; you
could create a new function `g(b, c)' that was equivalent to `f(1, b,
c)'.  This is called "partial function application".

  `partial()' takes the arguments `(function, arg1, arg2, ...
kwarg1=value1, kwarg2=value2)'.  The resulting object is callable, so
you can just call it to invoke _function_ with the filled-in arguments.

  Here's a small but realistic example:

    import functools

    def log (message, subsystem):
        "Write the contents of 'message' to the specified subsystem."
        print '%s: %s' % (subsystem, message)
        ...

    server_log = functools.partial(log, subsystem='server')
    server_log('Unable to open socket')

Here's another example, from a program that uses PyGTK.  Here a context-
sensitive pop-up menu is being constructed dynamically.  The callback
provided for the menu option is a partially applied version of the
`open_item()' method, where the first argument has been provided.

    ...
    class Application:
        def open_item(self, path):
           ...
        def init (self):
            open_func = functools.partial(self.open_item, item_path)
            popup_menu.append( ("Open", open_func, 1) )

Another function in the `functools' module is the
`update_wrapper(wrapper, wrapped)()' function that helps you write well-
behaved decorators.  `update_wrapper()' copies the name, module, and
docstring attribute to a wrapper function so that tracebacks inside the
wrapped function are easier to understand.  For example, you might
write:

    def my_decorator(f):
        def wrapper(*args, **kwds):
            print 'Calling decorated function'
            return f(*args, **kwds)
        functools.update_wrapper(wrapper, f)
        return wrapper

`wraps()' is a decorator that can be used inside your own decorators to
copy the wrapped function's information.  An alternate  version of the
previous example would be:

    def my_decorator(f):
        @functools.wraps(f)
        def wrapper(*args, **kwds):
            print 'Calling decorated function'
            return f(*args, **kwds)
        return wrapper


See also
........

PEP 309(1) - Partial Function Application
     PEP proposed and written by Peter Harris; implemented by Hye-Shik
     Chang and Nick Coghlan, with adaptations by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0309


File: python-whatsnew-3.2.2.info,  Node: PEP 314 Metadata for Python Software Packages v1 1,  Next: PEP 328 Absolute and Relative Imports,  Prev: PEP 309 Partial Function Application,  Up: What's New in Python 2 5

6.3 PEP 314: Metadata for Python Software Packages v1.1
=======================================================

Some simple dependency support was added to Distutils.  The `setup()'
function now has `requires', `provides', and `obsoletes' keyword
parameters.  When you build a source distribution using the `sdist'
command, the dependency information will be recorded in the `PKG-INFO'
file.

  Another new keyword parameter is `download_url', which should be set
to a URL for the package's source code.  This means it's now possible
to look up an entry in the package index, determine the dependencies
for a package, and download the required packages.

    VERSION = '1.0'
    setup(name='PyPackage',
          version=VERSION,
          requires=['numarray', 'zlib (>=1.1.4)'],
          obsoletes=['OldPackage']
          download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'
                        % VERSION),
         )

Another new enhancement to the Python package index at
<http://cheeseshop.python.org> is storing source and binary archives
for a package.  The new *upload* Distutils command will upload a
package to the repository.

  Before a package can be uploaded, you must be able to build a
distribution using the *sdist* Distutils command.  Once that works, you
can run `python setup.py upload' to add your package to the PyPI
archive.  Optionally you can GPG-sign the package by supplying the
`--sign' and `--identity' options.

  Package uploading was implemented by Martin von Löwis and Richard
Jones.

See also
........

PEP 314(1) - Metadata for Python Software Packages v1.1
     PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred
     Drake; implemented by Richard Jones and Fred Drake.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0314


File: python-whatsnew-3.2.2.info,  Node: PEP 328 Absolute and Relative Imports,  Next: PEP 338 Executing Modules as Scripts,  Prev: PEP 314 Metadata for Python Software Packages v1 1,  Up: What's New in Python 2 5

6.4 PEP 328: Absolute and Relative Imports
==========================================

The simpler part of PEP 328 was implemented in Python 2.4: parentheses
could now be used to enclose the names imported from a module using the
`from ... import ...' statement, making it easier to import many
different names.

  The more complicated part has been implemented in Python 2.5:
importing a module can be specified to use absolute or package-relative
imports.  The plan is to move toward making absolute imports the
default in future versions of Python.

  Let's say you have a package directory like this:

    pkg/
    pkg/__init__.py
    pkg/main.py
    pkg/string.py

This defines a package named `pkg' containing the `pkg.main' and
`pkg.string' submodules.

  Consider the code in the `main.py' module.  What happens if it
executes the statement `import string'?  In Python 2.4 and earlier, it
will first look in the package's directory to perform a relative
import, finds `pkg/string.py', imports the contents of that file as the
`pkg.string' module, and that module is bound to the name `string' in
the `pkg.main' module's namespace.

  That's fine if `pkg.string' was what you wanted.  But what if you
wanted Python's standard `string' module?  There's no clean way to
ignore `pkg.string' and look for the standard module; generally you had
to look at the contents of `sys.modules', which is slightly unclean.
Holger Krekel's `py.std' package provides a tidier way to perform
imports from the standard library, `import py ; py.std.string.join()',
but that package isn't available on all Python installations.

  Reading code which relies on relative imports is also less clear,
because a reader may be confused about which module, `string' or
`pkg.string', is intended to be used.  Python users soon learned not to
duplicate the names of standard library modules in the names of their
packages' submodules, but you can't protect against having your
submodule's name being used for a new module added in a future version
of Python.

  In Python 2.5, you can switch `import''s behaviour to  absolute
imports using a `from __future__ import absolute_import' directive.
This absolute- import behaviour will become the default in a future
version (probably Python 2.7).  Once absolute imports  are the default,
`import string' will always find the standard library's version. It's
suggested that users should begin using absolute imports as much as
possible, so it's preferable to begin writing `from pkg import string'
in your code.

  Relative imports are still possible by adding a leading period  to
the module name when using the `from ... import' form:

    # Import names from pkg.string
    from .string import name1, name2
    # Import pkg.string
    from . import string

This imports the `string' module relative to the current package, so in
`pkg.main' this will import _name1_ and _name2_ from `pkg.string'.
Additional leading periods perform the relative import starting from
the parent of the current package.  For example, code in the `A.B.C'
module can do:

    from . import D                 # Imports A.B.D
    from .. import E                # Imports A.E
    from ..F import G               # Imports A.F.G

Leading periods cannot be used with the `import modname'  form of the
import statement, only the `from ... import' form.

See also
........

PEP 328(1) - Imports: Multi-Line and Absolute/Relative
     PEP written by Aahz; implemented by Thomas Wouters.

<http://codespeak.net/py/current/doc/index.html>
     The py library by Holger Krekel, which contains the `py.std'
     package.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0328


File: python-whatsnew-3.2.2.info,  Node: PEP 338 Executing Modules as Scripts,  Next: PEP 341 Unified try/except/finally,  Prev: PEP 328 Absolute and Relative Imports,  Up: What's New in Python 2 5

6.5 PEP 338: Executing Modules as Scripts
=========================================

The `-m' switch added in Python 2.4 to execute a module as a script
gained a few more abilities.  Instead of being implemented in C code
inside the Python interpreter, the switch now uses an implementation in
a new module, `runpy'.

  The `runpy' module implements a more sophisticated import mechanism
so that it's now possible to run modules in a package such as
`pychecker.checker'.  The module also supports alternative import
mechanisms such as the `zipimport' module.  This means you can add a
.zip archive's path to `sys.path' and then use the `-m' switch to
execute code from the archive.

See also
........

PEP 338(1) - Executing modules as scripts
     PEP written and  implemented by Nick Coghlan.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0338


File: python-whatsnew-3.2.2.info,  Node: PEP 341 Unified try/except/finally,  Next: PEP 342 New Generator Features,  Prev: PEP 338 Executing Modules as Scripts,  Up: What's New in Python 2 5

6.6 PEP 341: Unified try/except/finally
=======================================

Until Python 2.5, the `try' statement came in two flavours. You could
use a `finally' block to ensure that code is always executed, or one or
more `except' blocks to catch  specific exceptions.  You couldn't
combine both `except' blocks and a `finally' block, because generating
the right bytecode for the combined version was complicated and it
wasn't clear what the semantics of the combined statement should be.

  Guido van Rossum spent some time working with Java, which does
support the equivalent of combining `except' blocks and a `finally'
block, and this clarified what the statement should mean.  In Python
2.5, you can now write:

    try:
        block-1 ...
    except Exception1:
        handler-1 ...
    except Exception2:
        handler-2 ...
    else:
        else-block
    finally:
        final-block

The code in _block-1_ is executed.  If the code raises an exception,
the various `except' blocks are tested: if the exception is of class
`Exception1', _handler-1_ is executed; otherwise if it's of class
`Exception2', _handler-2_ is executed, and so forth.  If no exception is
raised, the _else-block_ is executed.

  No matter what happened previously, the _final-block_ is executed
once the code block is complete and any raised exceptions handled. Even
if there's an error in an exception handler or the _else-block_ and a
new exception is raised, the code in the _final-block_ is still run.

See also
........

PEP 341(1) - Unifying try-except and try-finally
     PEP written by Georg Brandl;  implementation by Thomas Lee.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0341


File: python-whatsnew-3.2.2.info,  Node: PEP 342 New Generator Features,  Next: PEP 343 The 'with' statement<2>,  Prev: PEP 341 Unified try/except/finally,  Up: What's New in Python 2 5

6.7 PEP 342: New Generator Features
===================================

Python 2.5 adds a simple way to pass values _into_ a generator. As
introduced in Python 2.3, generators only produce output; once a
generator's code was invoked to create an iterator, there was no way to
pass any new information into the function when its execution is
resumed.  Sometimes the ability to pass in some information would be
useful.  Hackish solutions to this include making the generator's code
look at a global variable and then changing the global variable's
value, or passing in some mutable object that callers then modify.

  To refresh your memory of basic generators, here's a simple example:

    def counter (maximum):
        i = 0
        while i < maximum:
            yield i
            i += 1

When you call `counter(10)', the result is an iterator that returns the
values from 0 up to 9.  On encountering the `yield' statement, the
iterator returns the provided value and suspends the function's
execution, preserving the local variables. Execution resumes on the
following call to the iterator's `next()' method, picking up after the
`yield' statement.

  In Python 2.3, `yield' was a statement; it didn't return any value.
In 2.5, `yield' is now an expression, returning a value that can be
assigned to a variable or otherwise operated on:

    val = (yield i)

I recommend that you always put parentheses around a `yield' expression
when you're doing something with the returned value, as in the above
example.  The parentheses aren't always necessary, but it's easier to
always add them instead of having to remember when they're needed.

  ( PEP 342(1) explains the exact rules, which are that a
`yield'-expression must always be parenthesized except when it occurs
at the top-level expression on the right-hand side of an assignment.
This means you can write `val = yield i' but have to use parentheses
when there's an operation, as in `val = (yield i) + 12'.)

  Values are sent into a generator by calling its `send(value)()'
method.  The generator's code is then resumed and the `yield'
expression returns the specified _value_.  If the regular `next()'
method is called, the `yield' returns `None'.

  Here's the previous example, modified to allow changing the value of
the internal counter.

    def counter (maximum):
        i = 0
        while i < maximum:
            val = (yield i)
            # If value provided, change counter
            if val is not None:
                i = val
            else:
                i += 1

And here's an example of changing the counter:

    >>> it = counter(10)
    >>> print it.next()
    0
    >>> print it.next()
    1
    >>> print it.send(8)
    8
    >>> print it.next()
    9
    >>> print it.next()
    Traceback (most recent call last):
      File "t.py", line 15, in ?
        print it.next()
    StopIteration

`yield' will usually return `None', so you should always check for this
case.  Don't just use its value in expressions unless you're sure that
the `send()' method will be the only method used to resume your
generator function.

  In addition to `send()', there are two other new methods on
generators:

   * `throw(type, value=None, traceback=None)()' is used to raise an
     exception inside the generator; the exception is raised by the
     `yield' expression where the generator's execution is paused.

   * `close()' raises a new `GeneratorExit' exception inside the
     generator to terminate the iteration.  On receiving this
     exception, the generator's code must either raise `GeneratorExit'
     or `StopIteration'.  Catching the `GeneratorExit' exception and
     returning a value is illegal and will trigger a `RuntimeError'; if
     the function raises some other exception, that exception is
     propagated to the caller.  `close()' will also be called by
     Python's garbage collector when the generator is garbage-collected.

     If you need to run cleanup code when a `GeneratorExit' occurs, I
     suggest using a `try: ... finally:' suite instead of  catching
     `GeneratorExit'.

  The cumulative effect of these changes is to turn generators from
one-way producers of information into both producers and consumers.

  Generators also become _coroutines_, a more generalized form of
subroutines.  Subroutines are entered at one point and exited at
another point (the top of the function, and a `return' statement), but
coroutines can be entered, exited, and resumed at many different points
(the `yield' statements).  We'll have to figure out patterns for using
coroutines effectively in Python.

  The addition of the `close()' method has one side effect that isn't
obvious.  `close()' is called when a generator is garbage-collected, so
this means the generator's code gets one last chance to run before the
generator is destroyed.  This last chance means that `try...finally'
statements in generators can now be guaranteed to work; the `finally'
clause will now always get a chance to run.  The syntactic restriction
that you couldn't mix `yield' statements with a `try...finally' suite
has therefore been removed.  This seems like a minor bit of language
trivia, but using generators and `try...finally' is actually necessary
in order to implement the `with' statement described by PEP 343.  I'll
look at this new statement in the following  section.

  Another even more esoteric effect of this change: previously, the
`gi_frame' attribute of a generator was always a frame object. It's now
possible for `gi_frame' to be `None' once the generator has been
exhausted.

See also
........

PEP 342(2) - Coroutines via Enhanced Generators
     PEP written by  Guido van Rossum and Phillip J. Eby; implemented
     by Phillip J.  Eby.  Includes examples of  some fancier uses of
     generators as coroutines.

     Earlier versions of these features were proposed in PEP 288(3) by
     Raymond Hettinger and PEP 325(4) by Samuele Pedroni.

<http://en.wikipedia.org/wiki/Coroutine>
     The Wikipedia entry for  coroutines.

<http://www.sidhe.org/~dan/blog/archives/000178.html>
     An explanation of coroutines from a Perl point of view, written by
     Dan Sugalski.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0342

  (2) http://www.python.org/dev/peps/pep-0342

  (3) http://www.python.org/dev/peps/pep-0288

  (4) http://www.python.org/dev/peps/pep-0325


File: python-whatsnew-3.2.2.info,  Node: PEP 343 The 'with' statement<2>,  Next: PEP 352 Exceptions as New-Style Classes,  Prev: PEP 342 New Generator Features,  Up: What's New in Python 2 5

6.8 PEP 343: The 'with' statement
=================================

The '`with'' statement clarifies code that previously would use
`try...finally' blocks to ensure that clean-up code is executed.  In
this section, I'll discuss the statement as it will commonly be used.
In the next section, I'll examine the implementation details and show
how to write objects for use with this statement.

  The '`with'' statement is a new control-flow structure whose basic
structure is:

    with expression [as variable]:
        with-block

The expression is evaluated, and it should result in an object that
supports the context management protocol (that is, has `__enter__()'
and `__exit__()' methods.

  The object's `__enter__()' is called before _with-block_ is executed
and therefore can run set-up code. It also may return a value that is
bound to the name _variable_, if given.  (Note carefully that
_variable_ is _not_ assigned the result of _expression_.)

  After execution of the _with-block_ is finished, the object's
`__exit__()' method is called, even if the block raised an exception,
and can therefore run clean-up code.

  To enable the statement in Python 2.5, you need to add the following
directive to your module:

    from __future__ import with_statement

The statement will always be enabled in Python 2.6.

  Some standard Python objects now support the context management
protocol and can be used with the '`with'' statement. File objects are
one example:

    with open('/etc/passwd', 'r') as f:
        for line in f:
            print line
            ... more processing code ...

After this statement has executed, the file object in _f_ will have been
automatically closed, even if the `for' loop raised an exception part-
way through the block.

     Note: In this case, _f_ is the same object created by `open()',
     because `file.__enter__()' returns _self_.

  The `threading' module's locks and condition variables  also support
the '`with'' statement:

    lock = threading.Lock()
    with lock:
        # Critical section of code
        ...

The lock is acquired before the block is executed and always released
once  the block is complete.

  The new `localcontext()' function in the `decimal' module makes it
easy to save and restore the current decimal context, which
encapsulates the desired precision and rounding characteristics for
computations:

    from decimal import Decimal, Context, localcontext

    # Displays with default precision of 28 digits
    v = Decimal('578')
    print v.sqrt()

    with localcontext(Context(prec=16)):
        # All code in this block uses a precision of 16 digits.
        # The original context is restored on exiting the block.
        print v.sqrt()


* Menu:

* Writing Context Managers: Writing Context Managers<2>.
* The contextlib module: The contextlib module<2>.


File: python-whatsnew-3.2.2.info,  Node: Writing Context Managers<2>,  Next: The contextlib module<2>,  Up: PEP 343 The 'with' statement<2>

6.8.1 Writing Context Managers
------------------------------

Under the hood, the '`with'' statement is fairly complicated. Most
people will only use '`with'' in company with existing objects and
don't need to know these details, so you can skip the rest of this
section if you like.  Authors of new objects will need to understand
the details of the underlying implementation and should keep reading.

  A high-level explanation of the context management protocol is:

   * The expression is evaluated and should result in an object called
     a "context manager".  The context manager must have `__enter__()'
     and `__exit__()' methods.

   * The context manager's `__enter__()' method is called.  The value
     returned is assigned to _VAR_.  If no `'as VAR'' clause is
     present, the value is simply discarded.

   * The code in _BLOCK_ is executed.

   * If _BLOCK_ raises an exception, the `__exit__(type, value,
     traceback)()' is called with the exception details, the same
     values returned by `sys.exc_info()'.  The method's return value
     controls whether the exception is re-raised: any false value
     re-raises the exception, and `True' will result in suppressing it.
     You'll only rarely want to suppress the exception, because if you
     do the author of the code containing the '`with'' statement will
     never realize anything went wrong.

   * If _BLOCK_ didn't raise an exception,  the `__exit__()' method is
     still called, but _type_, _value_, and _traceback_ are all `None'.

  Let's think through an example.  I won't present detailed code but
will only sketch the methods necessary for a database that supports
transactions.

  (For people unfamiliar with database terminology: a set of changes to
the database are grouped into a transaction.  Transactions can be
either committed, meaning that all the changes are written into the
database, or rolled back, meaning that the changes are all discarded
and the database is unchanged.  See any database textbook for more
information.)

  Let's assume there's an object representing a database connection.
Our goal will be to let the user write code like this:

    db_connection = DatabaseConnection()
    with db_connection as cursor:
        cursor.execute('insert into ...')
        cursor.execute('delete from ...')
        # ... more operations ...

The transaction should be committed if the code in the block runs
flawlessly or rolled back if there's an exception. Here's the basic
interface for `DatabaseConnection' that I'll assume:

    class DatabaseConnection:
        # Database interface
        def cursor (self):
            "Returns a cursor object and starts a new transaction"
        def commit (self):
            "Commits current transaction"
        def rollback (self):
            "Rolls back current transaction"

The `__enter__()' method is pretty easy, having only to start a new
transaction.  For this application the resulting cursor object would be
a useful result, so the method will return it.  The user can then add
`as cursor' to their '`with'' statement to bind the cursor to a
variable name.

    class DatabaseConnection:
        ...
        def __enter__ (self):
            # Code to start a new transaction
            cursor = self.cursor()
            return cursor

The `__exit__()' method is the most complicated because it's where most
of the work has to be done.  The method has to check if an exception
occurred.  If there was no exception, the transaction is committed.
The transaction is rolled back if there was an exception.

  In the code below, execution will just fall off the end of the
function, returning the default value of `None'.  `None' is false, so
the exception will be re-raised automatically.  If you wished, you
could be more explicit and add a `return' statement at the marked
location.

    class DatabaseConnection:
        ...
        def __exit__ (self, type, value, tb):
            if tb is None:
                # No exception, so commit
                self.commit()
            else:
                # Exception occurred, so rollback.
                self.rollback()
                # return False



File: python-whatsnew-3.2.2.info,  Node: The contextlib module<2>,  Prev: Writing Context Managers<2>,  Up: PEP 343 The 'with' statement<2>

6.8.2 The contextlib module
---------------------------

The new `contextlib' module provides some functions and a decorator that
are useful for writing objects for use with the '`with'' statement.

  The decorator is called `contextmanager()', and lets you write a
single generator function instead of defining a new class.  The
generator should yield exactly one value.  The code up to the `yield'
will be executed as the `__enter__()' method, and the value yielded
will be the method's return value that will get bound to the variable
in the '`with'' statement's `as' clause, if any.  The code after the
`yield' will be executed in the `__exit__()' method.  Any exception
raised in the block will be raised by the `yield' statement.

  Our database example from the previous section could be written
using this decorator as:

    from contextlib import contextmanager

    @contextmanager
    def db_transaction (connection):
        cursor = connection.cursor()
        try:
            yield cursor
        except:
            connection.rollback()
            raise
        else:
            connection.commit()

    db = DatabaseConnection()
    with db_transaction(db) as cursor:
        ...

The `contextlib' module also has a `nested(mgr1, mgr2, ...)()' function
that combines a number of context managers so you don't need to write
nested '`with'' statements.  In this example, the single '`with''
statement both starts a database transaction and acquires a thread lock:

    lock = threading.Lock()
    with nested (db_transaction(db), lock) as (cursor, locked):
        ...

Finally, the `closing(object)()' function returns _object_ so that it
can be bound to a variable, and calls `object.close' at the end of the
block.

    import urllib, sys
    from contextlib import closing

    with closing(urllib.urlopen('http://www.yahoo.com')) as f:
        for line in f:
            sys.stdout.write(line)


See also
........

PEP 343(1) - The "with" statement
     PEP written by Guido van Rossum and Nick Coghlan; implemented by
     Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the
     code generated for a '`with'' statement, which can be helpful in
     learning how the statement works.

  The documentation  for the `contextlib' module.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python-whatsnew-3.2.2.info,  Node: PEP 352 Exceptions as New-Style Classes,  Next: PEP 353 Using ssize_t as the index type,  Prev: PEP 343 The 'with' statement<2>,  Up: What's New in Python 2 5

6.9 PEP 352: Exceptions as New-Style Classes
============================================

Exception classes can now be new-style classes, not just classic
classes, and the built-in `Exception' class and all the standard
built-in exceptions (`NameError', `ValueError', etc.) are now new-style
classes.

  The inheritance hierarchy for exceptions has been rearranged a bit.
In 2.5, the inheritance relationships are:

    BaseException       # New in Python 2.5
    |- KeyboardInterrupt
    |- SystemExit
    |- Exception
       |- (all other current built-in exceptions)

This rearrangement was done because people often want to catch all
exceptions that indicate program errors.  `KeyboardInterrupt' and
`SystemExit' aren't errors, though, and usually represent an explicit
action such as the user hitting Control-C or code calling `sys.exit()'.
A bare `except:' will catch all exceptions, so you commonly need to
list `KeyboardInterrupt' and `SystemExit' in order to re-raise them.
The usual pattern is:

    try:
        ...
    except (KeyboardInterrupt, SystemExit):
        raise
    except:
        # Log error...
        # Continue running program...

In Python 2.5, you can now write `except Exception' to achieve the same
result, catching all the exceptions that usually indicate errors  but
leaving `KeyboardInterrupt' and `SystemExit' alone.  As in previous
versions, a bare `except:' still catches all exceptions.

  The goal for Python 3.0 is to require any class raised as an
exception to derive from `BaseException' or some descendant of
`BaseException', and future releases in the Python 2.x series may begin
to enforce this constraint.  Therefore, I suggest you begin making all
your exception classes derive from `Exception' now.  It's been
suggested that the bare `except:' form should be removed in Python 3.0,
but Guido van Rossum hasn't decided whether to do this or not.

  Raising of strings as exceptions, as in the statement `raise "Error
occurred"', is deprecated in Python 2.5 and will trigger a warning.
The aim is to be able to remove the string-exception feature in a few
releases.

See also
........

PEP 352(1) - Required Superclass for Exceptions
     PEP written by  Brett Cannon and Guido van Rossum; implemented by
     Brett Cannon.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0352


File: python-whatsnew-3.2.2.info,  Node: PEP 353 Using ssize_t as the index type,  Next: PEP 357 The '__index__' method,  Prev: PEP 352 Exceptions as New-Style Classes,  Up: What's New in Python 2 5

6.10 PEP 353: Using ssize_t as the index type
=============================================

A wide-ranging change to Python's C API, using a new  `Py_ssize_t' type
definition instead of `int',  will permit the interpreter to handle more
data on 64-bit platforms. This change doesn't affect Python's capacity
on 32-bit platforms.

  Various pieces of the Python interpreter used C's `int' type to store
sizes or counts; for example, the number of items in a list or tuple
were stored in an `int'.  The C compilers for most 64-bit platforms
still define `int' as a 32-bit type, so that meant that lists could
only hold up to `2**31 - 1' = 2147483647 items. (There are actually a
few different programming models that 64-bit C compilers can use - see
<http://www.unix.org/version2/whatsnew/lp64_wp.html> for a discussion -
but the most commonly available model leaves `int' as 32 bits.)

  A limit of 2147483647 items doesn't really matter on a 32-bit
platform because you'll run out of memory before hitting the length
limit. Each list item requires space for a pointer, which is 4 bytes,
plus space for a `PyObject' representing the item.  2147483647*4 is
already more bytes than a 32-bit address space can contain.

  It's possible to address that much memory on a 64-bit platform,
however.  The pointers for a list that size would only require 16 GiB
of space, so it's not unreasonable that Python programmers might
construct lists that large.  Therefore, the Python interpreter had to
be changed to use some type other than `int', and this will be a 64-bit
type on 64-bit platforms.  The change will cause incompatibilities on
64-bit machines, so it was deemed worth making the transition now,
while the number of 64-bit users is still relatively small.  (In 5 or
10 years, we may _all_ be on 64-bit machines, and the transition would
be more painful then.)

  This change most strongly affects authors of C extension modules.
Python strings and container types such as lists and tuples  now use
`Py_ssize_t' to store their size.   Functions such as `PyList_Size()'
now return `Py_ssize_t'.  Code in extension modules may therefore need
to have some variables changed to `Py_ssize_t'.

  The `PyArg_ParseTuple()' and `Py_BuildValue()' functions have a new
conversion code, `n', for `Py_ssize_t'.   `PyArg_ParseTuple()''s `s#'
and `t#' still output `int' by default, but you can define the macro
`PY_SSIZE_T_CLEAN' before including `Python.h'  to make them return
`Py_ssize_t'.

  PEP 353(1) has a section on conversion guidelines that  extension
authors should read to learn about supporting 64-bit platforms.

See also
........

PEP 353(2) - Using ssize_t as the index type
     PEP written and implemented by Martin von Löwis.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0353

  (2) http://www.python.org/dev/peps/pep-0353


File: python-whatsnew-3.2.2.info,  Node: PEP 357 The '__index__' method,  Next: Other Language Changes<5>,  Prev: PEP 353 Using ssize_t as the index type,  Up: What's New in Python 2 5

6.11 PEP 357: The '__index__' method
====================================

The NumPy developers had a problem that could only be solved by adding
a new special method, `__index__()'.  When using slice notation, as in
`[start:stop:step]', the values of the _start_, _stop_, and _step_
indexes must all be either integers or long integers.  NumPy defines a
variety of specialized integer types corresponding to unsigned and
signed integers of 8, 16, 32, and 64 bits, but there was no way to
signal that these types could be used as slice indexes.

  Slicing can't just use the existing `__int__()' method because that
method is also used to implement coercion to integers.  If slicing used
`__int__()', floating-point numbers would also become legal slice
indexes and that's clearly an undesirable behaviour.

  Instead, a new special method called `__index__()' was added.  It
takes no arguments and returns an integer giving the slice index to
use.  For example:

    class C:
        def __index__ (self):
            return self.value

The return value must be either a Python integer or long integer. The
interpreter will check that the type returned is correct, and raises a
`TypeError' if this requirement isn't met.

  A corresponding `nb_index' slot was added to the C-level
`PyNumberMethods' structure to let C extensions implement this protocol.
`PyNumber_Index(obj)()' can be used in extension code to call the
`__index__()' function and retrieve its result.

See also
........

PEP 357(1) - Allowing Any Object to be Used for Slicing
     PEP written  and implemented by Travis Oliphant.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0357


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<5>,  Next: New Improved and Removed Modules,  Prev: PEP 357 The '__index__' method,  Up: What's New in Python 2 5

6.12 Other Language Changes
===========================

Here are all of the changes that Python 2.5 makes to the core Python
language.

   * The `dict' type has a new hook for letting subclasses provide a
     default value when a key isn't contained in the dictionary. When a
     key isn't found, the dictionary's `__missing__(key)()' method will
     be called.  This hook is used to implement the new `defaultdict'
     class in the `collections' module.  The following example defines
     a dictionary  that returns zero for any missing key:

         class zerodict (dict):
             def __missing__ (self, key):
                 return 0

         d = zerodict({1:1, 2:2})
         print d[1], d[2]   # Prints 1, 2
         print d[3], d[4]   # Prints 0, 0


   * Both 8-bit and Unicode strings have new `partition(sep)()'  and
     `rpartition(sep)()' methods that simplify a common use case.

     The `find(S)()' method is often used to get an index which is then
     used to slice the string and obtain the pieces that are before and
     after the separator.  `partition(sep)()' condenses this pattern
     into a single method call that returns a 3-tuple containing the
     substring before the separator, the separator itself, and the
     substring after the separator.  If the separator isn't found, the
     first element of the tuple is the entire string and the other two
     elements are empty.  `rpartition(sep)()' also returns a 3-tuple
     but starts searching from the end of the string; the `r' stands
     for 'reverse'.

     Some examples:

         >>> ('http://www.python.org').partition('://')
         ('http', '://', 'www.python.org')
         >>> ('file:/usr/share/doc/index.html').partition('://')
         ('file:/usr/share/doc/index.html', '', '')
         >>> (u'Subject: a quick question').partition(':')
         (u'Subject', u':', u' a quick question')
         >>> 'www.python.org'.rpartition('.')
         ('www.python', '.', 'org')
         >>> 'www.python.org'.rpartition(':')
         ('', '', 'www.python.org')

     (Implemented by Fredrik Lundh following a suggestion by Raymond
     Hettinger.)

   * The `startswith()' and `endswith()' methods of string types now
     accept tuples of strings to check for.

         def is_image_file (filename):
             return filename.endswith(('.gif', '.jpg', '.tiff'))

     (Implemented by Georg Brandl following a suggestion by Tom Lynn.)

   * The `min()' and `max()' built-in functions gained a `key' keyword
     parameter analogous to the `key' argument for `sort()'.  This
     parameter supplies a function that takes a single argument and is
     called for every value in the list; `min()'/`max()' will return
     the element with the smallest/largest return value from this
     function. For example, to find the longest string in a list, you
     can do:

         L = ['medium', 'longest', 'short']
         # Prints 'longest'
         print max(L, key=len)
         # Prints 'short', because lexicographically 'short' has the largest value
         print max(L)

     (Contributed by Steven Bethard and Raymond Hettinger.)

   * Two new built-in functions, `any()' and `all()', evaluate whether
     an iterator contains any true or false values.  `any()' returns
     `True' if any value returned by the iterator is true; otherwise it
     will return `False'.  `all()' returns `True' only if all of the
     values returned by the iterator evaluate as true. (Suggested by
     Guido van Rossum, and implemented by Raymond Hettinger.)

   * The result of a class's `__hash__()' method can now be either a
     long integer or a regular integer.  If a long integer is returned,
     the hash of that value is taken.  In earlier versions the hash
     value was required to be a regular integer, but in 2.5 the `id()'
     built-in was changed to always return non-negative numbers, and
     users often seem to use `id(self)' in `__hash__()' methods (though
     this is discouraged).

   * ASCII is now the default encoding for modules.  It's now  a syntax
     error if a module contains string literals with 8-bit characters
     but doesn't have an encoding declaration.  In Python 2.4 this
     triggered a warning, not a syntax error.  See PEP 263(1)  for how
     to declare a module's encoding; for example, you might add  a line
     like this near the top of the source file:

         # -*- coding: latin1 -*-


   * A new warning, `UnicodeWarning', is triggered when  you attempt to
     compare a Unicode string and an 8-bit string  that can't be
     converted to Unicode using the default ASCII encoding.   The
     result of the comparison is false:

         >>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode
         __main__:1: UnicodeWarning: Unicode equal comparison failed
           to convert both arguments to Unicode - interpreting them
           as being unequal
         False
         >>> chr(127) == unichr(127)   # chr(127) can be converted
         True

     Previously this would raise a `UnicodeDecodeError' exception, but
     in 2.5 this could result in puzzling problems when accessing a
     dictionary.  If you looked up `unichr(128)' and `chr(128)' was
     being used as a key, you'd get a `UnicodeDecodeError' exception.
     Other changes in 2.5 resulted in this exception being raised
     instead of suppressed by the code in `dictobject.c' that
     implements dictionaries.

     Raising an exception for such a comparison is strictly correct,
     but the change might have broken code, so instead
     `UnicodeWarning' was introduced.

     (Implemented by Marc-André Lemburg.)

   * One error that Python programmers sometimes make is forgetting to
     include an `__init__.py' module in a package directory. Debugging
     this mistake can be confusing, and usually requires running Python
     with the `-v' switch to log all the paths searched. In Python 2.5,
     a new `ImportWarning' warning is triggered when an import would
     have picked up a directory as a package but no `__init__.py' was
     found.  This warning is silently ignored by default; provide the
     `-Wd' option when running the Python executable to display the
     warning message. (Implemented by Thomas Wouters.)

   * The list of base classes in a class definition can now be empty.
     As an example, this is now legal:

         class C():
             pass

     (Implemented by Brett Cannon.)

* Menu:

* Interactive Interpreter Changes::
* Optimizations: Optimizations<5>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0263


File: python-whatsnew-3.2.2.info,  Node: Interactive Interpreter Changes,  Next: Optimizations<5>,  Up: Other Language Changes<5>

6.12.1 Interactive Interpreter Changes
--------------------------------------

In the interactive interpreter, `quit' and `exit'  have long been
strings so that new users get a somewhat helpful message when they try
to quit:

    >>> quit
    'Use Ctrl-D (i.e. EOF) to exit.'

In Python 2.5, `quit' and `exit' are now objects that still produce
string representations of themselves, but are also callable. Newbies
who try `quit()' or `exit()' will now exit the interpreter as they
expect.  (Implemented by Georg Brandl.)

  The Python executable now accepts the standard long options  `--help'
and `--version'; on Windows,  it also accepts the `/?' option for
displaying a help message. (Implemented by Georg Brandl.)


File: python-whatsnew-3.2.2.info,  Node: Optimizations<5>,  Prev: Interactive Interpreter Changes,  Up: Other Language Changes<5>

6.12.2 Optimizations
--------------------

Several of the optimizations were developed at the NeedForSpeed sprint,
an event held in Reykjavik, Iceland, from May 21-28 2006. The sprint
focused on speed enhancements to the CPython implementation and was
funded by EWT LLC with local support from CCP Games.  Those
optimizations added at this sprint are specially marked in the
following list.

   * When they were introduced  in Python 2.4, the built-in `set' and
     `frozenset' types were built on top of Python's dictionary type.
     In 2.5 the internal data structure has been customized for
     implementing sets, and as a result sets will use a third less
     memory and are somewhat faster. (Implemented by Raymond Hettinger.)

   * The speed of some Unicode operations, such as finding substrings,
     string splitting, and character map encoding and decoding, has
     been improved.  (Substring search and splitting improvements were
     added by Fredrik Lundh and Andrew Dalke at the NeedForSpeed
     sprint. Character maps were improved by Walter Dörwald and Martin
     von Löwis.)

   * The `long(str, base)()' function is now faster on long digit
     strings because fewer intermediate results are calculated.  The
     peak is for strings of around 800-1000 digits where  the function
     is 6 times faster. (Contributed by Alan McIntyre and committed at
     the NeedForSpeed sprint.)

   * It's now illegal to mix iterating over a file  with `for line in
     file' and calling  the file object's
     `read()'/`readline()'/`readlines()' methods.  Iteration uses an
     internal buffer and the  `read*()' methods don't use that buffer.
     Instead they would return the data following the buffer, causing
     the data to appear out of order.  Mixing iteration and these
     methods will now trigger a `ValueError' from the `read*()' method.
     (Implemented by Thomas Wouters.)

   * The `struct' module now compiles structure format  strings into an
     internal representation and caches this representation, yielding a
     20% speedup.  (Contributed by Bob Ippolito at the NeedForSpeed
     sprint.)

   * The `re' module got a 1 or 2% speedup by switching to  Python's
     allocator functions instead of the system's  `malloc()' and
     `free()'.  (Contributed by Jack Diederich at the NeedForSpeed
     sprint.)

   * The code generator's peephole optimizer now performs simple
     constant folding in expressions.  If you write something like `a =
     2+3', the code generator will do the arithmetic and produce code
     corresponding to `a = 5'.  (Proposed and implemented  by Raymond
     Hettinger.)

   * Function calls are now faster because code objects now keep  the
     most recently finished frame (a "zombie frame") in an internal
     field of the code object, reusing it the next time the code object
     is invoked.  (Original patch by Michael Hudson, modified by Armin
     Rigo and Richard Jones; committed at the NeedForSpeed sprint.)
     Frame objects are also slightly smaller, which may improve cache
     locality and reduce memory usage a bit.  (Contributed by Neal
     Norwitz.)

   * Python's built-in exceptions are now new-style classes, a change
     that speeds up instantiation considerably.  Exception handling in
     Python 2.5 is therefore about 30% faster than in 2.4. (Contributed
     by Richard Jones, Georg Brandl and Sean Reifschneider at the
     NeedForSpeed sprint.)

   * Importing now caches the paths tried, recording whether  they
     exist or not so that the interpreter makes fewer  `open()' and
     `stat()' calls on startup. (Contributed by Martin von Löwis and
     Georg Brandl.)



File: python-whatsnew-3.2.2.info,  Node: New Improved and Removed Modules,  Next: Build and C API Changes<6>,  Prev: Other Language Changes<5>,  Up: What's New in Python 2 5

6.13 New, Improved, and Removed Modules
=======================================

The standard library received many enhancements and bug fixes in Python
2.5.  Here's a partial list of the most notable changes, sorted
alphabetically by module name. Consult the `Misc/NEWS' file in the
source tree for a more complete list of changes, or look through the
SVN logs for all the details.

   * The `audioop' module now supports the a-LAW encoding, and the code
     for u-LAW encoding has been improved.  (Contributed by Lars
     Immisch.)

   * The `codecs' module gained support for incremental codecs.  The
     `codec.lookup()' function now returns a `CodecInfo' instance
     instead of a tuple. `CodecInfo' instances behave like a 4-tuple to
     preserve backward compatibility but also have the attributes
     `encode', `decode', `incrementalencoder', `incrementaldecoder',
     `streamwriter', and `streamreader'.  Incremental codecs  can
     receive input and produce output in multiple chunks; the output is
     the same as if the entire input was fed to the non-incremental
     codec. See the `codecs' module documentation for details.
     (Designed and implemented by Walter Dörwald.)

   * The `collections' module gained a new type, `defaultdict', that
     subclasses the standard `dict' type.  The new type mostly behaves
     like a dictionary but constructs a default value when a key isn't
     present, automatically adding it to the dictionary for the
     requested key value.

     The first argument to `defaultdict''s constructor is a factory
     function that gets called whenever a key is requested but not
     found. This factory function receives no arguments, so you can use
     built-in type constructors such as `list()' or `int()'.  For
     example,  you can make an index of words based on their initial
     letter like this:

         words = """Nel mezzo del cammin di nostra vita
         mi ritrovai per una selva oscura
         che la diritta via era smarrita""".lower().split()

         index = defaultdict(list)

         for w in words:
             init_letter = w[0]
             index[init_letter].append(w)

     Printing `index' results in the following output:

         defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],
                 'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],
                 'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],
                 'p': ['per'], 's': ['selva', 'smarrita'],
                 'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}

     (Contributed by Guido van Rossum.)

   * The `deque' double-ended queue type supplied by the `collections'
     module now has a `remove(value)()' method that removes the first
     occurrence of _value_ in the queue, raising `ValueError' if the
     value isn't found.  (Contributed by Raymond Hettinger.)

   * New module: The `contextlib' module contains helper functions for
     use with the new '`with'' statement.  See section *note The
     contextlib module: dc.  for more about this module.

   * New module: The `cProfile' module is a C implementation of  the
     existing `profile' module that has much lower overhead. The
     module's interface is the same as `profile': you run
     `cProfile.run('main()')' to profile a function, can save profile
     data to a file, etc.  It's not yet known if the Hotshot profiler,
     which is also written in C but doesn't match the `profile'
     module's interface, will continue to be maintained in future
     versions of Python.  (Contributed by Armin Rigo.)

     Also, the `pstats' module for analyzing the data measured by the
     profiler now supports directing the output to any file object by
     supplying a _stream_ argument to the `Stats' constructor.
     (Contributed by Skip Montanaro.)

   * The `csv' module, which parses files in comma-separated value
     format, received several enhancements and a number of bugfixes.
     You can now set the maximum size in bytes of a field by calling the
     `csv.field_size_limit(new_limit)()' function; omitting the
     _new_limit_ argument will return the currently-set limit.  The
     `reader' class now has a `line_num' attribute that counts the
     number of physical lines read from the source; records can span
     multiple physical lines, so `line_num' is not the same as the
     number of records read.

     The CSV parser is now stricter about multi-line quoted fields.
     Previously, if a line ended within a quoted field without a
     terminating newline character, a newline would be inserted into
     the returned field. This behavior caused problems when reading
     files that contained carriage return characters within fields, so
     the code was changed to return the field without inserting
     newlines. As a consequence, if newlines embedded within fields are
     important, the input should be split into lines in a manner that
     preserves the newline characters.

     (Contributed by Skip Montanaro and Andrew McNamara.)

   * The `datetime' class in the `datetime'  module now has a
     `strptime(string, format)()'  method for parsing date strings,
     contributed by Josh Spoerri. It uses the same format characters as
     `time.strptime()' and `time.strftime()':

         from datetime import datetime

         ts = datetime.strptime('10:13:15 2006-03-07',
                                '%H:%M:%S %Y-%m-%d')


   * The `SequenceMatcher.get_matching_blocks()' method in the `difflib'
     module now guarantees to return a minimal list of blocks
     describing matching subsequences.  Previously, the algorithm would
     occasionally break a block of matching elements into two list
     entries. (Enhancement by Tim Peters.)

   * The `doctest' module gained a `SKIP' option that keeps an example
     from being executed at all.  This is intended for code snippets
     that are usage examples intended for the reader and aren't
     actually test cases.

     An _encoding_ parameter was added to the `testfile()' function and
     the `DocFileSuite' class to specify the file's encoding.  This
     makes it easier to use non-ASCII characters in  tests contained
     within a docstring.  (Contributed by Bjorn Tillenius.)

   * The `email' package has been updated to version 4.0. (Contributed
     by Barry Warsaw.)

   * The `fileinput' module was made more flexible. Unicode filenames
     are now supported, and a _mode_ parameter that defaults to `"r"'
     was added to the `input()' function to allow opening files in
     binary or universal-newline mode.  Another new parameter,
     _openhook_, lets you use a function other than `open()'  to open
     the input files.  Once you're iterating over  the set of files,
     the `FileInput' object's new `fileno()' returns the file
     descriptor for the currently opened file. (Contributed by Georg
     Brandl.)

   * In the `gc' module, the new `get_count()' function returns a
     3-tuple containing the current collection counts for the three GC
     generations.  This is accounting information for the garbage
     collector; when these counts reach a specified threshold, a
     garbage collection sweep will be made.  The existing
     `gc.collect()' function now takes an optional _generation_
     argument of 0, 1, or 2 to specify which generation to collect.
     (Contributed by Barry Warsaw.)

   * The `nsmallest()' and  `nlargest()' functions in the `heapq'
     module  now support a `key' keyword parameter similar to the one
     provided by the `min()'/`max()' functions and the `sort()'
     methods.  For example:

         >>> import heapq
         >>> L = ["short", 'medium', 'longest', 'longer still']
         >>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically
         ['longer still', 'longest']
         >>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements
         ['short', 'medium']

     (Contributed by Raymond Hettinger.)

   * The `itertools.islice()' function now accepts `None' for the start
     and step arguments.  This makes it more compatible with the
     attributes of slice objects, so that you can now write the
     following:

         s = slice(5)     # Create slice object
         itertools.islice(iterable, s.start, s.stop, s.step)

     (Contributed by Raymond Hettinger.)

   * The `format()' function in the `locale' module has been modified
     and two new functions were added, `format_string()' and
     `currency()'.

     The `format()' function's _val_ parameter could previously be a
     string as long as no more than one %char specifier appeared; now
     the parameter must be exactly one %char specifier with no
     surrounding text.  An optional _monetary_ parameter was also added
     which, if `True', will use the locale's rules for formatting
     currency in placing a separator between groups of three digits.

     To format strings with multiple %char specifiers, use the new
     `format_string()' function that works like `format()' but also
     supports mixing %char specifiers with arbitrary text.

     A new `currency()' function was also added that formats a number
     according to the current locale's settings.

     (Contributed by Georg Brandl.)

   * The `mailbox' module underwent a massive rewrite to add the
     capability to modify mailboxes in addition to reading them.  A new
     set of classes that include `mbox', `MH', and `Maildir' are used
     to read mailboxes, and have an `add(message)()' method to add
     messages, `remove(key)()' to remove messages, and
     `lock()'/`unlock()' to lock/unlock the mailbox.  The following
     example converts a maildir-format mailbox into an mbox-format one:

         import mailbox

         # 'factory=None' uses email.Message.Message as the class representing
         # individual messages.
         src = mailbox.Maildir('maildir', factory=None)
         dest = mailbox.mbox('/tmp/mbox')

         for msg in src:
             dest.add(msg)

     (Contributed by Gregory K. Johnson.  Funding was provided by
     Google's 2005 Summer of Code.)

   * New module: the `msilib' module allows creating Microsoft Installer
     `.msi' files and CAB files.  Some support for reading the `.msi'
     database is also included. (Contributed by Martin von Löwis.)

   * The `nis' module now supports accessing domains other than the
     system default domain by supplying a _domain_ argument to the
     `nis.match()' and `nis.maps()' functions. (Contributed by Ben
     Bell.)

   * The `operator' module's `itemgetter()'  and `attrgetter()'
     functions now support multiple fields.   A call such as
     `operator.attrgetter('a', 'b')' will return a function  that
     retrieves the `a' and `b' attributes.  Combining  this new feature
     with the `sort()' method's `key' parameter  lets you easily sort
     lists using multiple fields. (Contributed by Raymond Hettinger.)

   * The `optparse' module was updated to version 1.5.1 of the Optik
     library.  The `OptionParser' class gained an `epilog' attribute, a
     string that will be printed after the help message, and a
     `destroy()' method to break reference cycles created by the
     object. (Contributed by Greg Ward.)

   * The `os' module underwent several changes.  The `stat_float_times'
     variable now defaults to true, meaning that `os.stat()' will now
     return time values as floats.  (This doesn't necessarily mean that
     `os.stat()' will return times that are precise to fractions of a
     second; not all systems support such precision.)

     Constants named `os.SEEK_SET', `os.SEEK_CUR', and `os.SEEK_END'
     have been added; these are the parameters to the `os.lseek()'
     function.  Two new constants for locking are `os.O_SHLOCK' and
     `os.O_EXLOCK'.

     Two new functions, `wait3()' and `wait4()', were added.  They're
     similar the `waitpid()' function which waits for a child process
     to exit and returns a tuple of the process ID and its exit status,
     but `wait3()' and `wait4()' return additional information.
     `wait3()' doesn't take a process ID as input, so it waits for any
     child process to exit and returns a 3-tuple of _process-id_,
     _exit-status_, _resource-usage_ as returned from the
     `resource.getrusage()' function. `wait4(pid)()' does take a
     process ID.  (Contributed by Chad J. Schroeder.)

     On FreeBSD, the `os.stat()' function now returns  times with
     nanosecond resolution, and the returned object now has `st_gen' and
     `st_birthtime'. The `st_flags' attribute is also available, if the
     platform supports it. (Contributed by Antti Louko and  Diego
     Pettenò.)

   * The Python debugger provided by the `pdb' module can now store
     lists of commands to execute when a breakpoint is reached and
     execution stops.  Once breakpoint #1 has been created, enter
     `commands 1' and enter a series of commands to be executed,
     finishing the list with `end'.  The command list can include
     commands that resume execution, such as `continue' or `next'.
     (Contributed by Grégoire Dooms.)

   * The `pickle' and `cPickle' modules no longer accept a return value
     of `None' from the `__reduce__()' method; the method must return a
     tuple of arguments instead.  The ability to return `None' was
     deprecated in Python 2.4, so this completes the removal of the
     feature.

   * The `pkgutil' module, containing various utility functions for
     finding packages, was enhanced to support PEP 302's import hooks
     and now also works for packages stored in ZIP-format archives.
     (Contributed by Phillip J. Eby.)

   * The pybench benchmark suite by Marc-André Lemburg is now included
     in the `Tools/pybench' directory.  The pybench suite is an
     improvement on the commonly used `pystone.py' program because
     pybench provides a more detailed measurement of the interpreter's
     speed.  It times particular operations such as function calls,
     tuple slicing, method lookups, and numeric operations, instead of
     performing many different operations and reducing the result to a
     single number as `pystone.py' does.

   * The `pyexpat' module now uses version 2.0 of the Expat parser.
     (Contributed by Trent Mick.)

   * The `Queue' class provided by the `Queue' module gained two new
     methods.  `join()' blocks until all items in the queue have been
     retrieved and all processing work on the items  have been
     completed.  Worker threads call the other new method,
     `task_done()', to signal that processing for an item has been
     completed.  (Contributed by Raymond Hettinger.)

   * The old `regex' and `regsub' modules, which have been  deprecated
     ever since Python 2.0, have finally been deleted.   Other deleted
     modules: `statcache', `tzparse', `whrandom'.

   * Also deleted: the `lib-old' directory, which includes ancient
     modules such as `dircmp' and `ni', was removed.  `lib-old' wasn't
     on the default `sys.path', so unless your programs explicitly
     added the directory to `sys.path', this removal shouldn't affect
     your code.

   * The `rlcompleter' module is no longer  dependent on importing the
     `readline' module and therefore now works on non-Unix platforms.
     (Patch from Robert Kiendl.)

   * The `SimpleXMLRPCServer' and `DocXMLRPCServer'  classes now have a
     `rpc_paths' attribute that constrains XML-RPC operations to a
     limited set of URL paths; the default is to allow only `'/'' and
     `'/RPC2''.  Setting `rpc_paths' to `None' or an empty tuple
     disables  this path checking.

   * The `socket' module now supports `AF_NETLINK' sockets on Linux,
     thanks to a patch from Philippe Biondi.   Netlink sockets are a
     Linux-specific mechanism for communications between a user-space
     process and kernel code; an introductory  article about them is at
     <http://www.linuxjournal.com/article/7356>.  In Python code,
     netlink addresses are represented as a tuple of 2 integers, `(pid,
     group_mask)'.

     Two new methods on socket objects, `recv_into(buffer)()' and
     `recvfrom_into(buffer)()', store the received data in an object
     that supports the buffer protocol instead of returning the data as
     a string.  This means you can put the data directly into an array
     or a memory-mapped file.

     Socket objects also gained `getfamily()', `gettype()', and
     `getproto()' accessor methods to retrieve the family, type, and
     protocol values for the socket.

   * New module: the `spwd' module provides functions for accessing the
     shadow password database on systems that support  shadow passwords.

   * The `struct' is now faster because it  compiles format strings into
     `Struct' objects with `pack()' and `unpack()' methods.  This is
     similar to how the `re' module lets you create compiled regular
     expression objects.  You can still use the module-level  `pack()'
     and `unpack()' functions; they'll create  `Struct' objects and
     cache them.  Or you can use  `Struct' instances directly:

         s = struct.Struct('ih3s')

         data = s.pack(1972, 187, 'abc')
         year, number, name = s.unpack(data)

     You can also pack and unpack data to and from buffer objects
     directly using the `pack_into(buffer, offset, v1, v2, ...)()' and
     `unpack_from(buffer, offset)()' methods.  This lets you store data
     directly into an array or a memory- mapped file.

     (`Struct' objects were implemented by Bob Ippolito at the
     NeedForSpeed sprint.  Support for buffer objects was added by
     Martin Blais, also at the NeedForSpeed sprint.)

   * The Python developers switched from CVS to Subversion during the
     2.5 development process.  Information about the exact build
     version is available as the `sys.subversion' variable, a 3-tuple
     of `(interpreter-name, branch-name, revision-range)'.  For
     example, at the time of writing my copy of 2.5 was reporting
     `('CPython', 'trunk', '45313:45315')'.

     This information is also available to C extensions via the
     `Py_GetBuildInfo()' function that returns a  string of build
     information like this: `"trunk:45355:45356M, Apr 13 2006,
     07:42:19"'.   (Contributed by Barry Warsaw.)

   * Another new function, `sys._current_frames()', returns the current
     stack frames for all running threads as a dictionary mapping
     thread identifiers to the topmost stack frame currently active in
     that thread at the time the function is called.  (Contributed by
     Tim Peters.)

   * The `TarFile' class in the `tarfile' module now has an
     `extractall()' method that extracts all members from the archive
     into the current working directory.  It's also possible to set a
     different directory as the extraction target, and to unpack only a
     subset of the archive's members.

     The compression used for a tarfile opened in stream mode can now
     be autodetected using the mode `'r|*''. (Contributed by Lars
     Gustäbel.)

   * The `threading' module now lets you set the stack size used when
     new threads are created. The `stack_size([*size*])()' function
     returns the currently configured stack size, and supplying the
     optional _size_ parameter sets a new value.  Not all platforms
     support changing the stack size, but Windows, POSIX threading, and
     OS/2 all do. (Contributed by Andrew MacIntyre.)

   * The `unicodedata' module has been updated to use version 4.1.0 of
     the Unicode character database.  Version 3.2.0 is required  by
     some specifications, so it's still available as
     `unicodedata.ucd_3_2_0'.

   * New module: the  `uuid' module generates  universally unique
     identifiers (UUIDs) according to RFC 4122(1).  The RFC defines
     several different UUID versions that are generated from a starting
     string, from system properties, or purely randomly.  This module
     contains a `UUID' class and  functions named `uuid1()', `uuid3()',
     `uuid4()',  and  `uuid5()' to generate different versions of UUID.
     (Version 2 UUIDs  are not specified in RFC 4122(2) and are not
     supported by this module.)

         >>> import uuid
         >>> # make a UUID based on the host ID and current time
         >>> uuid.uuid1()
         UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

         >>> # make a UUID using an MD5 hash of a namespace UUID and a name
         >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
         UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

         >>> # make a random UUID
         >>> uuid.uuid4()
         UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

         >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
         >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
         UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

     (Contributed by Ka-Ping Yee.)

   * The `weakref' module's `WeakKeyDictionary' and
     `WeakValueDictionary' types gained new methods for iterating over
     the weak references contained in the dictionary.  `iterkeyrefs()'
     and `keyrefs()' methods were added to `WeakKeyDictionary', and
     `itervaluerefs()' and `valuerefs()' were added to
     `WeakValueDictionary'.  (Contributed by Fred L. Drake, Jr.)

   * The `webbrowser' module received a number of enhancements. It's now
     usable as a script with `python -m webbrowser', taking a URL as
     the argument; there are a number of switches  to control the
     behaviour (`-n' for a new browser window,  `-t' for a new tab).
     New module-level functions, `open_new()' and `open_new_tab()',
     were added  to support this.  The module's `open()' function
     supports an additional feature, an _autoraise_ parameter that
     signals whether to raise the open window when possible. A number
     of additional browsers were added to the supported list such as
     Firefox, Opera, Konqueror, and elinks.  (Contributed by Oleg
     Broytmann and Georg Brandl.)

   * The `xmlrpclib' module now supports returning  `datetime' objects
     for the XML-RPC date type.  Supply  `use_datetime=True' to the
     `loads()' function or the `Unmarshaller' class to enable this
     feature. (Contributed by Skip Montanaro.)

   * The `zipfile' module now supports the ZIP64 version of the  format,
     meaning that a .zip archive can now be larger than 4 GiB and can
     contain individual files larger than 4 GiB.  (Contributed by
     Ronald Oussoren.)

   * The `zlib' module's `Compress' and `Decompress' objects now
     support a `copy()' method that makes a copy of the  object's
     internal state and returns a new  `Compress' or `Decompress'
     object.  (Contributed by Chris AtLee.)


* Menu:

* The ctypes package::
* The ElementTree package::
* The hashlib package::
* The sqlite3 package::
* The wsgiref package::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc4122.html

  (2) http://tools.ietf.org/html/rfc4122.html


File: python-whatsnew-3.2.2.info,  Node: The ctypes package,  Next: The ElementTree package,  Up: New Improved and Removed Modules

6.13.1 The ctypes package
-------------------------

The `ctypes' package, written by Thomas Heller, has been added  to the
standard library.  `ctypes' lets you call arbitrary functions  in shared
libraries or DLLs.  Long-time users may remember the `dl' module, which
provides functions for loading shared libraries and calling functions
in them.  The `ctypes' package is much fancier.

  To load a shared library or DLL, you must create an instance of the
`CDLL' class and provide the name or path of the shared library or DLL.
Once that's done, you can call arbitrary functions by accessing them as
attributes of the `CDLL' object.

    import ctypes

    libc = ctypes.CDLL('libc.so.6')
    result = libc.printf("Line of output\n")

Type constructors for the various C types are provided: `c_int()',
`c_float()', `c_double()', `c_char_p()' (equivalent to `char *'), and
so forth.  Unlike Python's types, the C versions are all mutable; you
can assign to their `value' attribute to change the wrapped value.
Python integers and strings will be automatically converted to the
corresponding C types, but for other types you  must call the correct
type constructor.  (And I mean _must_;  getting it wrong will often
result in the interpreter crashing with a segmentation fault.)

  You shouldn't use `c_char_p()' with a Python string when the C
function will be modifying the memory area, because Python strings are
supposed to be immutable; breaking this rule will cause puzzling bugs.
When you need a modifiable memory area, use `create_string_buffer()':

    s = "this is a string"
    buf = ctypes.create_string_buffer(s)
    libc.strfry(buf)

C functions are assumed to return integers, but you can set the
`restype' attribute of the function object to  change this:

    >>> libc.atof('2.71828')
    -1783957616
    >>> libc.atof.restype = ctypes.c_double
    >>> libc.atof('2.71828')
    2.71828

`ctypes' also provides a wrapper for Python's C API  as the
`ctypes.pythonapi' object.  This object does _not_  release the global
interpreter lock before calling a function, because the lock must be
held when calling into the interpreter's code.   There's a
`py_object()' type constructor that will create a  `PyObject *'
pointer.  A simple usage:

    import ctypes

    d = {}
    ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),
              ctypes.py_object("abc"),  ctypes.py_object(1))
    # d is now {'abc', 1}.

Don't forget to use `py_object()'; if it's omitted you end  up with a
segmentation fault.

  `ctypes' has been around for a while, but people still write  and
distribution hand-coded extension modules because you can't rely on
`ctypes' being present. Perhaps developers will begin to write  Python
wrappers atop a library accessed through `ctypes' instead of extension
modules, now that `ctypes' is included with core Python.

See also
........

<http://starship.python.net/crew/theller/ctypes/>
     The ctypes web page, with a tutorial, reference, and FAQ.

  The documentation  for the `ctypes' module.


File: python-whatsnew-3.2.2.info,  Node: The ElementTree package,  Next: The hashlib package,  Prev: The ctypes package,  Up: New Improved and Removed Modules

6.13.2 The ElementTree package
------------------------------

A subset of Fredrik Lundh's ElementTree library for processing XML has
been added to the standard library as `xml.etree'.  The available
modules are `ElementTree', `ElementPath', and `ElementInclude' from
ElementTree 1.2.6.    The `cElementTree' accelerator module is also
included.

  The rest of this section will provide a brief overview of using
ElementTree.  Full documentation for ElementTree is available at
<http://effbot.org/zone/element-index.htm>.

  ElementTree represents an XML document as a tree of element nodes.
The text content of the document is stored as the `text' and `tail'
attributes of  (This is one of the major differences between
ElementTree and the Document Object Model; in the DOM there are many
different types of node, including `TextNode'.)

  The most commonly used parsing function is `parse()', that takes
either a string (assumed to contain a filename) or a file-like object
and returns an `ElementTree' instance:

    from xml.etree import ElementTree as ET

    tree = ET.parse('ex-1.xml')

    feed = urllib.urlopen(
              'http://planet.python.org/rss10.xml')
    tree = ET.parse(feed)

Once you have an `ElementTree' instance, you can call its `getroot()'
method to get the root `Element' node.

  There's also an `XML()' function that takes a string literal and
returns an `Element' node (not an `ElementTree').   This function
provides a tidy way to incorporate XML fragments, approaching the
convenience of an XML literal:

    svg = ET.XML("""<svg width="10px" version="1.0">
                 </svg>""")
    svg.set('height', '320px')
    svg.append(elem1)

Each XML element supports some dictionary-like and some list-like access
methods.  Dictionary-like operations are used to access attribute
values, and list-like operations are used to access child nodes.

Operation                           Result
------------------------------------------------------------------------------------- 
`elem[n]'                           Returns n'th child element.
`elem[m:n]'                         Returns list of m'th through n'th child
                                    elements.
`len(elem)'                         Returns number of child elements.
`list(elem)'                        Returns list of child elements.
`elem.append(elem2)'                Adds _elem2_ as a child.
`elem.insert(index, elem2)'         Inserts _elem2_ at the specified location.
`del elem[n]'                       Deletes n'th child element.
`elem.keys()'                       Returns list of attribute names.
`elem.get(name)'                    Returns value of attribute _name_.
`elem.set(name, value)'             Sets new value for attribute _name_.
`elem.attrib'                       Retrieves the dictionary containing attributes.
`del elem.attrib[name]'             Deletes attribute _name_.

  Comments and processing instructions are also represented as `Element'
nodes.  To check if a node is a comment or processing instructions:

    if elem.tag is ET.Comment:
        ...
    elif elem.tag is ET.ProcessingInstruction:
        ...

To generate XML output, you should call the `ElementTree.write()'
method.  Like `parse()', it can take either a string or a file-like
object:

    # Encoding is US-ASCII
    tree.write('output.xml')

    # Encoding is UTF-8
    f = open('output.xml', 'w')
    tree.write(f, encoding='utf-8')

(Caution: the default encoding used for output is ASCII.  For general
XML work, where an element's name may contain arbitrary Unicode
characters, ASCII isn't a very useful encoding because it will raise an
exception if an element's name contains any characters with values
greater than 127.  Therefore, it's best to specify a different encoding
such as UTF-8 that can handle any Unicode character.)

  This section is only a partial description of the ElementTree
interfaces. Please read the package's official documentation for more
details.

See also
........

<http://effbot.org/zone/element-index.htm>
     Official documentation for ElementTree.


File: python-whatsnew-3.2.2.info,  Node: The hashlib package,  Next: The sqlite3 package,  Prev: The ElementTree package,  Up: New Improved and Removed Modules

6.13.3 The hashlib package
--------------------------

A new `hashlib' module, written by Gregory P. Smith,  has been added to
replace the `md5' and `sha' modules.  `hashlib' adds support for
additional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When
available, the module uses OpenSSL for fast platform optimized
implementations of algorithms.

  The old `md5' and `sha' modules still exist as wrappers around hashlib
to preserve backwards compatibility.  The new module's interface is
very close to that of the old modules, but not identical. The most
significant difference is that the constructor functions for creating
new hashing objects are named differently.

    # Old versions
    h = md5.md5()
    h = md5.new()

    # New version
    h = hashlib.md5()

    # Old versions
    h = sha.sha()
    h = sha.new()

    # New version
    h = hashlib.sha1()

    # Hash that weren't previously available
    h = hashlib.sha224()
    h = hashlib.sha256()
    h = hashlib.sha384()
    h = hashlib.sha512()

    # Alternative form
    h = hashlib.new('md5')          # Provide algorithm as a string

Once a hash object has been created, its methods are the same as before:
`update(string)()' hashes the specified string into the  current digest
state, `digest()' and `hexdigest()' return the digest value as a binary
string or a string of hex digits, and `copy()' returns a new hashing
object with the same digest state.

See also
........

The documentation  for the `hashlib' module.


File: python-whatsnew-3.2.2.info,  Node: The sqlite3 package,  Next: The wsgiref package,  Prev: The hashlib package,  Up: New Improved and Removed Modules

6.13.4 The sqlite3 package
--------------------------

The pysqlite module (<http://www.pysqlite.org>), a wrapper for the
SQLite embedded database, has been added to the standard library under
the package name `sqlite3'.

  SQLite is a C library that provides a lightweight disk-based database
that doesn't require a separate server process and allows accessing the
database using a nonstandard variant of the SQL query language. Some
applications can use SQLite for internal data storage.  It's also
possible to prototype an application using SQLite and then port the
code to a larger database such as PostgreSQL or Oracle.

  pysqlite was written by Gerhard Häring and provides a SQL interface
compliant with the DB-API 2.0 specification described by PEP 249(1).

  If you're compiling the Python source yourself, note that the source
tree doesn't include the SQLite code, only the wrapper module. You'll
need to have the SQLite libraries and headers installed before
compiling Python, and the build process will compile the module when
the necessary headers are available.

  To use the module, you must first create a `Connection' object that
represents the database.  Here the data will be stored in the
`/tmp/example' file:

    conn = sqlite3.connect('/tmp/example')

You can also supply the special name `:memory:' to create a database in
RAM.

  Once you have a `Connection', you can create a `Cursor'  object and
call its `execute()' method to perform SQL commands:

    c = conn.cursor()

    # Create table
    c.execute('''create table stocks
    (date text, trans text, symbol text,
     qty real, price real)''')

    # Insert a row of data
    c.execute("""insert into stocks
              values ('2006-01-05','BUY','RHAT',100,35.14)""")

Usually your SQL operations will need to use values from Python
variables.  You shouldn't assemble your query using Python's string
operations because doing so is insecure; it makes your program
vulnerable to an SQL injection attack.

  Instead, use the DB-API's parameter substitution.  Put `?' as a
placeholder wherever you want to use a value, and then provide a tuple
of values as the second argument to the cursor's `execute()' method.
(Other database modules may use a different placeholder, such as `%s'
or `:1'.) For example:

    # Never do this -- insecure!
    symbol = 'IBM'
    c.execute("... where symbol = '%s'" % symbol)

    # Do this instead
    t = (symbol,)
    c.execute('select * from stocks where symbol=?', t)

    # Larger example
    for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
              ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),
              ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
             ):
        c.execute('insert into stocks values (?,?,?,?,?)', t)

To retrieve data after executing a SELECT statement, you can either
treat the cursor as an iterator, call the cursor's `fetchone()' method
to retrieve a single matching row,  or call `fetchall()' to get a list
of the matching rows.

  This example uses the iterator form:

    >>> c = conn.cursor()
    >>> c.execute('select * from stocks order by price')
    >>> for row in c:
    ...    print row
    ...
    (u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)
    (u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)
    (u'2006-04-06', u'SELL', u'IBM', 500, 53.0)
    (u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)
    >>>

For more information about the SQL dialect supported by SQLite, see
<http://www.sqlite.org>.

See also
........

<http://www.pysqlite.org>
     The pysqlite web page.

<http://www.sqlite.org>
     The SQLite web page; the documentation describes the syntax and
     the available data types for the supported SQL dialect.

  The documentation  for the `sqlite3' module.

PEP 249(2) - Database API Specification 2.0
     PEP written by Marc-André Lemburg.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0249

  (2) http://www.python.org/dev/peps/pep-0249


File: python-whatsnew-3.2.2.info,  Node: The wsgiref package,  Prev: The sqlite3 package,  Up: New Improved and Removed Modules

6.13.5 The wsgiref package
--------------------------

The Web Server Gateway Interface (WSGI) v1.0 defines a standard
interface between web servers and Python web applications and is
described in PEP 333(1).  The `wsgiref' package is a reference
implementation of the WSGI specification.

  The package includes a basic HTTP server that will run a WSGI
application; this server is useful for debugging but isn't intended for
production use.  Setting up a server takes only a few lines of code:

    from wsgiref import simple_server

    wsgi_app = ...

    host = ''
    port = 8000
    httpd = simple_server.make_server(host, port, wsgi_app)
    httpd.serve_forever()


See also
........

<http://www.wsgi.org>
     A central web site for WSGI-related resources.

PEP 333(2) - Python Web Server Gateway Interface v1.0
     PEP written by Phillip J. Eby.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<6>,  Next: Porting to Python 2 5,  Prev: New Improved and Removed Modules,  Up: What's New in Python 2 5

6.14 Build and C API Changes
============================

Changes to Python's build process and to the C API include:

   * The Python source tree was converted from CVS to Subversion,  in a
     complex migration procedure that was supervised and flawlessly
     carried out by Martin von Löwis.  The procedure was developed as PEP
     347(1).

   * Coverity, a company that markets a source code analysis tool
     called Prevent, provided the results of their examination of the
     Python source code.  The analysis found about 60 bugs that  were
     quickly fixed.  Many of the bugs were refcounting problems, often
     occurring in error-handling code.  See <http://scan.coverity.com>
     for the statistics.

   * The largest change to the C API came from PEP 353(2), which
     modifies the interpreter to use a `Py_ssize_t' type definition
     instead of `int'.  See the earlier section *note PEP 353; Using
     ssize_t as the index type: df. for a discussion of this change.

   * The design of the bytecode compiler has changed a great deal,  no
     longer generating bytecode by traversing the parse tree.  Instead
     the parse tree is converted to an abstract syntax tree (or AST),
     and it is  the abstract syntax tree that's traversed to produce
     the bytecode.

     It's possible for Python code to obtain AST objects by using the
     `compile()' built-in and specifying `_ast.PyCF_ONLY_AST' as the
     value of the  _flags_ parameter:

         from _ast import PyCF_ONLY_AST
         ast = compile("""a=0
         for i in range(10):
             a += i
         """, "<string>", 'exec', PyCF_ONLY_AST)

         assignment = ast.body[0]
         for_loop = ast.body[1]

     No official documentation has been written for the AST code yet,
     but PEP 339(3) discusses the design.  To start learning about the
     code, read the definition of the various AST nodes in
     `Parser/Python.asdl'.  A Python script reads this file and
     generates a set of C structure definitions in
     `Include/Python-ast.h'.  The `PyParser_ASTFromString()' and
     `PyParser_ASTFromFile()', defined in `Include/pythonrun.h', take
     Python source as input and return the root of an AST representing
     the contents.  This AST can then be turned into a code object by
     `PyAST_Compile()'.  For more information, read the source code,
     and then ask questions on python-dev.

     The AST code was developed under Jeremy Hylton's management, and
     implemented by (in alphabetical order) Brett Cannon, Nick Coghlan,
     Grant Edwards, John Ehresman, Kurt Kaiser, Neal Norwitz, Tim
     Peters, Armin Rigo, and Neil Schemenauer, plus the participants in
     a number of AST sprints at conferences such as PyCon.

   * Evan Jones's patch to obmalloc, first described in a talk at PyCon
     DC 2005, was applied.  Python 2.4 allocated small objects in
     256K-sized arenas, but never freed arenas.  With this patch,
     Python will free arenas when they're empty.  The net effect is
     that on some platforms, when you allocate many objects, Python's
     memory usage may actually drop when you delete them and the memory
     may be returned to the operating system.  (Implemented by Evan
     Jones, and reworked by Tim Peters.)

     Note that this change means extension modules must be more careful
     when allocating memory.  Python's API has many different functions
     for allocating memory that are grouped into families.  For
     example, `PyMem_Malloc()', `PyMem_Realloc()', and `PyMem_Free()'
     are one family that allocates raw memory, while
     `PyObject_Malloc()', `PyObject_Realloc()', and `PyObject_Free()'
     are another family that's supposed to be used for creating Python
     objects.

     Previously these different families all reduced to the platform's
     `malloc()' and `free()' functions.  This meant  it didn't matter if
     you got things wrong and allocated memory with the `PyMem()'
     function but freed it with the `PyObject()' function.  With 2.5's
     changes to obmalloc, these families now do different things and
     mismatches will probably result in a segfault.  You should
     carefully test your C extension modules with Python 2.5.

   * The built-in set types now have an official C API.  Call
     `PySet_New()' and `PyFrozenSet_New()' to create a new set,
     `PySet_Add()' and `PySet_Discard()' to add and remove elements,
     and `PySet_Contains()' and `PySet_Size()' to examine the set's
     state. (Contributed by Raymond Hettinger.)

   * C code can now obtain information about the exact revision of the
     Python interpreter by calling the  `Py_GetBuildInfo()' function
     that returns a string of build information like this:
     `"trunk:45355:45356M, Apr 13 2006, 07:42:19"'.   (Contributed by
     Barry Warsaw.)

   * Two new macros can be used to indicate C functions that are local
     to the current file so that a faster calling convention can be
     used.  `Py_LOCAL(type)()' declares the function as returning a
     value of the specified _type_ and uses a fast-calling qualifier.
     `Py_LOCAL_INLINE(type)()' does the same thing and also requests the
     function be inlined.  If `PY_LOCAL_AGGRESSIVE()' is defined before
     `python.h' is included, a set of more aggressive optimizations are
     enabled for the module; you should benchmark the results to find
     out if these optimizations actually make the code faster.
     (Contributed by Fredrik Lundh at the NeedForSpeed sprint.)

   * `PyErr_NewException(name, base, dict)()' can now accept a tuple of
     base classes as its _base_ argument.  (Contributed by Georg
     Brandl.)

   * The `PyErr_Warn()' function for issuing warnings is now deprecated
     in favour of `PyErr_WarnEx(category, message, stacklevel)()' which
     lets you specify the number of stack frames separating this
     function and the caller.  A _stacklevel_ of 1 is the function
     calling `PyErr_WarnEx()', 2 is the function above that, and so
     forth.  (Added by Neal Norwitz.)

   * The CPython interpreter is still written in C, but  the code can
     now be compiled with a C++ compiler without errors.   (Implemented
     by Anthony Baxter, Martin von Löwis, Skip Montanaro.)

   * The `PyRange_New()' function was removed.  It was never
     documented, never used in the core code, and had dangerously lax
     error checking.  In the unlikely case that your extensions were
     using it, you can replace it by something like the following:

         range = PyObject_CallFunction((PyObject*) &PyRange_Type, "lll",
                                       start, stop, step);



* Menu:

* Port-Specific Changes::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0347

  (2) http://www.python.org/dev/peps/pep-0353

  (3) http://www.python.org/dev/peps/pep-0339


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes,  Up: Build and C API Changes<6>

6.14.1 Port-Specific Changes
----------------------------

   * MacOS X (10.3 and higher): dynamic loading of modules now uses the
     `dlopen()' function instead of MacOS-specific functions.

   * MacOS X: an `--enable-universalsdk' switch was added to the
     *configure* script that compiles the interpreter as a universal
     binary able to run on both PowerPC and Intel processors.
     (Contributed by Ronald Oussoren; issue 2573(1).)

   * Windows: `.dll' is no longer supported as a filename extension for
     extension modules.  `.pyd' is now the only filename extension that
     will be searched for.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2573


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 2 5,  Next: Acknowledgements<3>,  Prev: Build and C API Changes<6>,  Up: What's New in Python 2 5

6.15 Porting to Python 2.5
==========================

This section lists previously described changes that may require
changes to your code:

   * ASCII is now the default encoding for modules.  It's now  a syntax
     error if a module contains string literals with 8-bit characters
     but doesn't have an encoding declaration.  In Python 2.4 this
     triggered a warning, not a syntax error.

   * Previously, the `gi_frame' attribute of a generator was always a
     frame object.  Because of the PEP 342(1) changes described in
     section *note PEP 342; New Generator Features: cb, it's now
     possible for `gi_frame' to be `None'.

   * A new warning, `UnicodeWarning', is triggered when  you attempt to
     compare a Unicode string and an 8-bit string that can't be
     converted to Unicode using the default ASCII encoding.  Previously
     such comparisons would raise a `UnicodeDecodeError' exception.

   * Library: the `csv' module is now stricter about multi-line quoted
     fields.  If your files contain newlines embedded within fields,
     the input should be split into lines in a manner which preserves
     the newline characters.

   * Library: the `locale' module's  `format()' function's would
     previously  accept any string as long as no more than one %char
     specifier appeared.  In Python 2.5, the argument must be exactly
     one %char specifier with no surrounding text.

   * Library: The `pickle' and `cPickle' modules no longer accept a
     return value of `None' from the `__reduce__()' method; the method
     must return a tuple of arguments instead.  The modules also no
     longer accept the deprecated _bin_ keyword parameter.

   * Library: The `SimpleXMLRPCServer' and `DocXMLRPCServer'  classes
     now have a `rpc_paths' attribute that constrains XML-RPC
     operations to a limited set of URL paths; the default is to allow
     only `'/'' and `'/RPC2''.  Setting  `rpc_paths' to `None' or an
     empty tuple disables  this path checking.

   * C API: Many functions now use `Py_ssize_t'  instead of `int' to
     allow processing more data on 64-bit machines.  Extension code may
     need to make the same change to avoid warnings and to support
     64-bit machines.  See the earlier section *note PEP 353; Using
     ssize_t as the index type: df. for a discussion of this change.

   * C API:  The obmalloc changes mean that  you must be careful to not
     mix usage of the `PyMem_*()' and `PyObject_*()' families of
     functions. Memory allocated with  one family's `*_Malloc()' must
     be  freed with the corresponding family's `*_Free()' function.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0342


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<3>,  Prev: Porting to Python 2 5,  Up: What's New in Python 2 5

6.16 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel,
Raymond Hettinger, Ralf W. Grosse- Kunstleve, Kent Johnson, Iain Lowe,
Martin von Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro,
Gustavo Niemeyer, Paul Prescod, James Pryor, Mike Rovner, Scott
Weikart, Barry Warsaw, Thomas Wouters.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 4,  Next: What's New in Python 2 3,  Prev: What's New in Python 2 5,  Up: Top

7 What's New in Python 2.4
**************************

     Author: A.M. Kuchling

  This article explains the new features in Python 2.4.1, released on
March 30, 2005.

  Python 2.4 is a medium-sized release.  It doesn't introduce as many
changes as the radical Python 2.2, but introduces more features than
the conservative 2.3 release.  The most significant new language
features are function decorators and generator expressions; most other
changes are to the standard library.

  According to the CVS change logs, there were 481 patches applied and
502 bugs fixed between Python 2.3 and 2.4.  Both figures are likely to
be underestimates.

  This article doesn't attempt to provide a complete specification of
every single new feature, but instead provides a brief introduction to
each feature.  For full details, you should refer to the documentation
for Python 2.4, such as the Python Library Reference and the Python
Reference Manual.  Often you will be referred to the PEP for a
particular new feature for explanations of the implementation and
design rationale.

* Menu:

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers.
* PEP 289; Generator Expressions: PEP 289 Generator Expressions.
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions.
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods.
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration.
* PEP 324; New subprocess Module: PEP 324 New subprocess Module.
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type.
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports.
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions.
* Other Language Changes: Other Language Changes<6>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<3>.
* Build and C API Changes: Build and C API Changes<7>.
* Porting to Python 2.4: Porting to Python 2 4.
* Acknowledgements: Acknowledgements<4>.


File: python-whatsnew-3.2.2.info,  Node: PEP 218 Built-In Set Objects,  Next: PEP 237 Unifying Long Integers and Integers,  Up: What's New in Python 2 4

7.1 PEP 218: Built-In Set Objects
=================================

Python 2.3 introduced the `sets' module.  C implementations of set data
types have now been added to the Python core as two new built-in types,
`set(iterable)()' and `frozenset(iterable)()'.  They provide high speed
operations for membership testing, for eliminating duplicates from
sequences, and for mathematical operations like unions, intersections,
differences, and symmetric differences.

    >>> a = set('abracadabra')              # form a set from a string
    >>> 'z' in a                            # fast membership testing
    False
    >>> a                                   # unique letters in a
    set(['a', 'r', 'b', 'c', 'd'])
    >>> ''.join(a)                          # convert back into a string
    'arbcd'

    >>> b = set('alacazam')                 # form a second set
    >>> a - b                               # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                               # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                               # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                               # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])

    >>> a.add('z')                          # add a new element
    >>> a.update('wxy')                     # add multiple new elements
    >>> a
    set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])
    >>> a.remove('x')                       # take one element out
    >>> a
    set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])

The `frozenset()' type is an immutable version of `set()'. Since it is
immutable and hashable, it may be used as a dictionary key or as a
member of another set.

  The `sets' module remains in the standard library, and may be useful
if you wish to subclass the `Set' or `ImmutableSet' classes.  There are
currently no plans to deprecate the module.

See also
........

PEP 218(1) - Adding a Built-In Set Object Type
     Originally proposed by Greg Wilson and ultimately implemented by
     Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0218


File: python-whatsnew-3.2.2.info,  Node: PEP 237 Unifying Long Integers and Integers,  Next: PEP 289 Generator Expressions,  Prev: PEP 218 Built-In Set Objects,  Up: What's New in Python 2 4

7.2 PEP 237: Unifying Long Integers and Integers
================================================

The lengthy transition process for this PEP, begun in Python 2.2, takes
another step forward in Python 2.4.  In 2.3, certain integer operations
that would behave differently after int/long unification triggered
`FutureWarning' warnings and returned values limited to 32 or 64 bits
(depending on your platform).  In 2.4, these expressions no longer
produce a warning and instead produce a different result that's usually
a long integer.

  The problematic expressions are primarily left shifts and lengthy
hexadecimal and octal constants.  For example, `2 << 32' results in a
warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4,
this expression now returns the correct answer, 8589934592.

See also
........

PEP 237(1) - Unifying Long Integers and Integers
     Original PEP written by Moshe Zadka and GvR.  The changes for 2.4
     were implemented by  Kalle Svensson.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0237


File: python-whatsnew-3.2.2.info,  Node: PEP 289 Generator Expressions,  Next: PEP 292 Simpler String Substitutions,  Prev: PEP 237 Unifying Long Integers and Integers,  Up: What's New in Python 2 4

7.3 PEP 289: Generator Expressions
==================================

The iterator feature introduced in Python 2.2 and the `itertools' module
make it easier to write programs that loop through large data sets
without having the entire data set in memory at one time.  List
comprehensions don't fit into this picture very well because they
produce a Python list object containing all of the items.  This
unavoidably pulls all of the objects into memory, which can be a
problem if your data set is very large.  When trying to write a
functionally-styled program, it would be natural to write something
like:

    links = [link for link in get_all_links() if not link.followed]
    for link in links:
        ...

instead of

    for link in get_all_links():
        if link.followed:
            continue
        ...

The first form is more concise and perhaps more readable, but if you're
dealing with a large number of link objects you'd have to write the
second form to avoid having all link objects in memory at the same time.

  Generator expressions work similarly to list comprehensions but don't
materialize the entire list; instead they create a generator that will
return elements one by one.  The above example could be written as:

    links = (link for link in get_all_links() if not link.followed)
    for link in links:
        ...

Generator expressions always have to be written inside parentheses, as
in the above example.  The parentheses signalling a function call also
count, so if you want to create an iterator that will be immediately
passed to a function you could write:

    print sum(obj.count for obj in list_all_objects())

Generator expressions differ from list comprehensions in various small
ways.  Most notably, the loop variable (_obj_ in the above example) is
not accessible outside of the generator expression.  List
comprehensions leave the variable assigned to its last value; future
versions of Python will change this, making list comprehensions match
generator expressions in this respect.

See also
........

PEP 289(1) - Generator Expressions
     Proposed by Raymond Hettinger and implemented by Jiwon Seo with
     early efforts steered by Hye-Shik Chang.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0289


File: python-whatsnew-3.2.2.info,  Node: PEP 292 Simpler String Substitutions,  Next: PEP 318 Decorators for Functions and Methods,  Prev: PEP 289 Generator Expressions,  Up: What's New in Python 2 4

7.4 PEP 292: Simpler String Substitutions
=========================================

Some new classes in the standard library provide an alternative
mechanism for substituting variables into strings; this style of
substitution may be better for applications where untrained users need
to edit templates.

  The usual way of substituting variables by name is the `%' operator:

    >>> '%(page)i: %(title)s' % {'page':2, 'title': 'The Best of Times'}
    '2: The Best of Times'

When writing the template string, it can be easy to forget the `i' or
`s' after the closing parenthesis.  This isn't a big problem if the
template is in a Python module, because you run the code, get an
"Unsupported format character" `ValueError', and fix the problem.
However, consider an application such as Mailman where template strings
or translations are being edited by users who aren't aware of the
Python language.  The format string's syntax is complicated to explain
to such users, and if they make a mistake, it's difficult to provide
helpful feedback to them.

  PEP 292 adds a `Template' class to the `string' module that uses `$'
to indicate a substitution:

    >>> import string
    >>> t = string.Template('$page: $title')
    >>> t.substitute({'page':2, 'title': 'The Best of Times'})
    '2: The Best of Times'

If a key is missing from the dictionary, the `substitute()' method will
raise a `KeyError'.  There's also a `safe_substitute()' method that
ignores missing keys:

    >>> t = string.Template('$page: $title')
    >>> t.safe_substitute({'page':3})
    '3: $title'


See also
........

PEP 292(1) - Simpler String Substitutions
     Written and implemented  by Barry Warsaw.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0292


File: python-whatsnew-3.2.2.info,  Node: PEP 318 Decorators for Functions and Methods,  Next: PEP 322 Reverse Iteration,  Prev: PEP 292 Simpler String Substitutions,  Up: What's New in Python 2 4

7.5 PEP 318: Decorators for Functions and Methods
=================================================

Python 2.2 extended Python's object model by adding static methods and
class methods, but it didn't extend Python's syntax to provide any new
way of defining static or class methods.  Instead, you had to write a
`def' statement in the usual way, and pass the resulting method to a
`staticmethod()' or `classmethod()' function that would wrap up the
function as a method of the new type. Your code would look like this:

    class C:
       def meth (cls):
           ...

       meth = classmethod(meth)   # Rebind name to wrapped-up class method

If the method was very long, it would be easy to miss or forget the
`classmethod()' invocation after the function body.

  The intention was always to add some syntax to make such definitions
more readable, but at the time of 2.2's release a good syntax was not
obvious.  Today a good syntax _still_ isn't obvious but users are
asking for easier access to the feature; a new syntactic feature has
been added to meet this need.

  The new feature is called "function decorators".  The name comes from
the idea that `classmethod()', `staticmethod()', and friends are storing
additional information on a function object; they're _decorating_
functions with more details.

  The notation borrows from Java and uses the `'@'' character as an
indicator.  Using the new syntax, the example above would be written:

    class C:

       @classmethod
       def meth (cls):
           ...

The `@classmethod' is shorthand for the `meth=classmethod(meth)'
assignment.  More generally, if you have the following:

    @A
    @B
    @C
    def f ():
        ...

It's equivalent to the following pre-decorator code:

    def f(): ...
    f = A(B(C(f)))

Decorators must come on the line before a function definition, one
decorator per line, and can't be on the same line as the def statement,
meaning that `@A def f(): ...' is illegal.  You can only decorate
function definitions, either at the module level or inside a class; you
can't decorate class definitions.

  A decorator is just a function that takes the function to be
decorated as an argument and returns either the same function or some
new object.  The return value of the decorator need not be callable
(though it typically is), unless further decorators will be applied to
the result.  It's easy to write your own decorators.  The following
simple example just sets an attribute on the function object:

    >>> def deco(func):
    ...    func.attr = 'decorated'
    ...    return func
    ...
    >>> @deco
    ... def f(): pass
    ...
    >>> f
    <function f at 0x402ef0d4>
    >>> f.attr
    'decorated'
    >>>

As a slightly more realistic example, the following decorator checks
that the supplied argument is an integer:

    def require_int (func):
        def wrapper (arg):
            assert isinstance(arg, int)
            return func(arg)

        return wrapper

    @require_int
    def p1 (arg):
        print arg

    @require_int
    def p2(arg):
        print arg*2

An example in PEP 318(1) contains a fancier version of this idea that
lets you both specify the required type and check the returned type.

  Decorator functions can take arguments.  If arguments are supplied,
your decorator function is called with only those arguments and must
return a new decorator function; this function must take a single
function and return a function, as previously described.  In other
words, `@A @B @C(args)' becomes:

    def f(): ...
    _deco = C(args)
    f = A(B(_deco(f)))

Getting this right can be slightly brain-bending, but it's not too
difficult.

  A small related change makes the `func_name' attribute of functions
writable.  This attribute is used to display function names in
tracebacks, so decorators should change the name of any new function
that's constructed and returned.

See also
........

PEP 318(2) - Decorators for Functions, Methods and Classes
     Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.
     Several people wrote patches implementing function decorators, but
     the one that was actually checked in was patch #979728, written by
     Mark Russell.

<http://www.python.org/moin/PythonDecoratorLibrary>
     This Wiki page contains several examples of decorators.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0318

  (2) http://www.python.org/dev/peps/pep-0318


File: python-whatsnew-3.2.2.info,  Node: PEP 322 Reverse Iteration,  Next: PEP 324 New subprocess Module,  Prev: PEP 318 Decorators for Functions and Methods,  Up: What's New in Python 2 4

7.6 PEP 322: Reverse Iteration
==============================

A new built-in function, `reversed(seq)()', takes a sequence and
returns an iterator that loops over the elements of the sequence  in
reverse order.

    >>> for i in reversed(xrange(1,4)):
    ...    print i
    ...
    3
    2
    1

Compared to extended slicing, such as `range(1,4)[::-1]', `reversed()'
is easier to read, runs faster, and uses substantially less memory.

  Note that `reversed()' only accepts sequences, not arbitrary
iterators.  If you want to reverse an iterator, first convert it to  a
list with `list()'.

    >>> input = open('/etc/passwd', 'r')
    >>> for line in reversed(list(input)):
    ...   print line
    ...
    root:*:0:0:System Administrator:/var/root:/bin/tcsh
      ...


See also
........

PEP 322(1) - Reverse Iteration
     Written and implemented by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0322


File: python-whatsnew-3.2.2.info,  Node: PEP 324 New subprocess Module,  Next: PEP 327 Decimal Data Type,  Prev: PEP 322 Reverse Iteration,  Up: What's New in Python 2 4

7.7 PEP 324: New subprocess Module
==================================

The standard library provides a number of ways to execute a subprocess,
offering different features and different levels of complexity.
`os.system(command)()' is easy to use, but slow (it runs a shell process
which executes the command) and dangerous (you have to be careful about
escaping the shell's metacharacters).  The `popen2' module offers
classes that can capture standard output and standard error from the
subprocess, but the naming is confusing.  The `subprocess' module
cleans  this up, providing a unified interface that offers all the
features you might need.

  Instead of `popen2''s collection of classes, `subprocess' contains a
single class called `Popen'  whose constructor supports a number of
different keyword arguments.

    class Popen(args, bufsize=0, executable=None,
                stdin=None, stdout=None, stderr=None,
                preexec_fn=None, close_fds=False, shell=False,
                cwd=None, env=None, universal_newlines=False,
                startupinfo=None, creationflags=0):

_args_ is commonly a sequence of strings that will be the arguments to
the program executed as the subprocess.  (If the _shell_ argument is
true, _args_ can be a string which will then be passed on to the shell
for interpretation, just as `os.system()' does.)

  _stdin_, _stdout_, and _stderr_ specify what the subprocess's input,
output, and error streams will be.  You can provide a file object or a
file descriptor, or you can use the constant `subprocess.PIPE' to
create a pipe between the subprocess and the parent.

  The constructor has a number of handy options:

   * _close_fds_ requests that all file descriptors be closed before
     running the subprocess.

   * _cwd_ specifies the working directory in which the subprocess will
     be executed (defaulting to whatever the parent's working directory
     is).

   * _env_ is a dictionary specifying environment variables.

   * _preexec_fn_ is a function that gets called before the child is
     started.

   * _universal_newlines_ opens the child's input and output using
     Python's universal newline feature.

  Once you've created the `Popen' instance,  you can call its `wait()'
method to pause until the subprocess has exited, `poll()' to check if
it's exited without pausing,  or `communicate(data)()' to send the
string _data_ to the subprocess's standard input.
`communicate(data)()'  then reads any data that the subprocess has sent
to its standard output  or standard error, returning a tuple
`(stdout_data, stderr_data)'.

  `call()' is a shortcut that passes its arguments along to the `Popen'
constructor, waits for the command to complete, and returns the status
code of the subprocess.  It can serve as a safer analog to
`os.system()':

    sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])
    if sts == 0:
        # Success
        ...
    else:
        # dpkg returned an error
        ...

The command is invoked without use of the shell.  If you really do want
to  use the shell, you can add `shell=True' as a keyword argument and
provide a string instead of a sequence:

    sts = subprocess.call('dpkg -i /tmp/new-package.deb', shell=True)

The PEP takes various examples of shell and Python code and shows how
they'd be translated into Python code that uses `subprocess'.  Reading
this section of the PEP is highly recommended.

See also
........

PEP 324(1) - subprocess - New process module
     Written and implemented by Peter Åstrand, with assistance from
     Fredrik Lundh and others.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0324


File: python-whatsnew-3.2.2.info,  Node: PEP 327 Decimal Data Type,  Next: PEP 328 Multi-line Imports,  Prev: PEP 324 New subprocess Module,  Up: What's New in Python 2 4

7.8 PEP 327: Decimal Data Type
==============================

Python has always supported floating-point (FP) numbers, based on the
underlying C `double' type, as a data type.  However, while most
programming languages provide a floating-point type, many people (even
programmers) are unaware that floating-point numbers don't represent
certain decimal fractions accurately.  The new `Decimal' type can
represent these fractions accurately, up to a user-specified precision
limit.

* Menu:

* Why is Decimal needed?::
* The Decimal type::
* The Context type::


File: python-whatsnew-3.2.2.info,  Node: Why is Decimal needed?,  Next: The Decimal type,  Up: PEP 327 Decimal Data Type

7.8.1 Why is Decimal needed?
----------------------------

The limitations arise from the representation used for floating-point
numbers.  FP numbers are made up of three components:

   * The sign, which is positive or negative.

   * The mantissa, which is a single-digit binary number   followed by
     a fractional part.  For example, `1.01' in base-2 notation is `1 +
     0/2 + 1/4', or 1.25 in decimal notation.

   * The exponent, which tells where the decimal point is located in
     the number represented.

  For example, the number 1.25 has positive sign, a mantissa value of
1.01 (in binary), and an exponent of 0 (the decimal point doesn't need
to be shifted).  The number 5 has the same sign and mantissa, but the
exponent is 2 because the mantissa is multiplied by 4 (2 to the power
of the exponent 2); 1.25 * 4 equals 5.

  Modern systems usually provide floating-point support that conforms
to a standard called IEEE 754.  C's `double' type is usually
implemented as a 64-bit IEEE 754 number, which uses 52 bits of space
for the mantissa.  This means that numbers can only be specified to 52
bits of precision.  If you're trying to represent numbers whose
expansion repeats endlessly, the expansion is cut off after 52 bits.
Unfortunately, most software needs to produce output in base 10, and
common fractions in base 10 are often repeating decimals in binary.
For example, 1.1 decimal is binary `1.0001100110011 ...'; .1 = 1/16 +
1/32 + 1/256 plus an infinite number of additional terms.  IEEE 754 has
to chop off that infinitely repeated decimal after 52 digits, so the
representation is slightly inaccurate.

  Sometimes you can see this inaccuracy when the number is printed:

    >>> 1.1
    1.1000000000000001

The inaccuracy isn't always visible when you print the number because
the FP-to- decimal-string conversion is provided by the C library, and
most C libraries try to produce sensible output.  Even if it's not
displayed, however, the inaccuracy is still there and subsequent
operations can magnify the error.

  For many applications this doesn't matter.  If I'm plotting points and
displaying them on my monitor, the difference between 1.1 and
1.1000000000000001 is too small to be visible.  Reports often limit
output to a certain number of decimal places, and if you round the
number to two or three or even eight decimal places, the error is never
apparent.  However, for applications where it does matter,  it's a lot
of work to implement your own custom arithmetic routines.

  Hence, the `Decimal' type was created.


File: python-whatsnew-3.2.2.info,  Node: The Decimal type,  Next: The Context type,  Prev: Why is Decimal needed?,  Up: PEP 327 Decimal Data Type

7.8.2 The `Decimal' type
------------------------

A new module, `decimal', was added to Python's standard library.  It
contains two classes, `Decimal' and `Context'.  `Decimal' instances
represent numbers, and `Context' instances are used to wrap up various
settings such as the precision and default rounding mode.

  `Decimal' instances are immutable, like regular Python integers and FP
numbers; once it's been created, you can't change the value an instance
represents.  `Decimal' instances can be created from integers or
strings:

    >>> import decimal
    >>> decimal.Decimal(1972)
    Decimal("1972")
    >>> decimal.Decimal("1.1")
    Decimal("1.1")

You can also provide tuples containing the sign, the mantissa
represented  as a tuple of decimal digits, and the exponent:

    >>> decimal.Decimal((1, (1, 4, 7, 5), -2))
    Decimal("-14.75")

Cautionary note: the sign bit is a Boolean value, so 0 is positive and
1 is negative.

  Converting from floating-point numbers poses a bit of a problem:
should the FP number representing 1.1 turn into the decimal number for
exactly 1.1, or for 1.1 plus whatever inaccuracies are introduced? The
decision was to dodge the issue and leave such a conversion out of the
API.  Instead, you should convert the floating-point number into a
string using the desired precision and pass the string to the `Decimal'
constructor:

    >>> f = 1.1
    >>> decimal.Decimal(str(f))
    Decimal("1.1")
    >>> decimal.Decimal('%.12f' % f)
    Decimal("1.100000000000")

Once you have `Decimal' instances, you can perform the usual
mathematical operations on them.  One limitation: exponentiation
requires an integer exponent:

    >>> a = decimal.Decimal('35.72')
    >>> b = decimal.Decimal('1.73')
    >>> a+b
    Decimal("37.45")
    >>> a-b
    Decimal("33.99")
    >>> a*b
    Decimal("61.7956")
    >>> a/b
    Decimal("20.64739884393063583815028902")
    >>> a ** 2
    Decimal("1275.9184")
    >>> a**b
    Traceback (most recent call last):
      ...
    decimal.InvalidOperation: x ** (non-integer)

You can combine `Decimal' instances with integers, but not with
floating- point numbers:

    >>> a + 4
    Decimal("39.72")
    >>> a + 4.5
    Traceback (most recent call last):
      ...
    TypeError: You can interact Decimal only with int, long or Decimal data types.
    >>>

`Decimal' numbers can be used with the `math' and `cmath' modules, but
note that they'll be immediately converted to  floating-point numbers
before the operation is performed, resulting in a possible loss of
precision and accuracy.  You'll also get back a regular floating-point
number and not a `Decimal'.

    >>> import math, cmath
    >>> d = decimal.Decimal('123456789012.345')
    >>> math.sqrt(d)
    351364.18288201344
    >>> cmath.sqrt(-d)
    351364.18288201344j

`Decimal' instances have a `sqrt()' method that returns a `Decimal',
but if you need other things such as trigonometric functions you'll
have to implement them.

    >>> d.sqrt()
    Decimal("351364.1828820134592177245001")



File: python-whatsnew-3.2.2.info,  Node: The Context type,  Prev: The Decimal type,  Up: PEP 327 Decimal Data Type

7.8.3 The `Context' type
------------------------

Instances of the `Context' class encapsulate several settings for
decimal operations:

   * `prec' is the precision, the number of decimal places.

   * `rounding' specifies the rounding mode.  The `decimal' module has
     constants for the various possibilities: `ROUND_DOWN',
     `ROUND_CEILING',  `ROUND_HALF_EVEN', and various others.

   * `traps' is a dictionary specifying what happens on encountering
     certain error conditions: either  an exception is raised or  a
     value is returned.  Some examples of error conditions are division
     by zero, loss of precision, and overflow.

  There's a thread-local default context available by calling
`getcontext()'; you can change the properties of this context to alter
the default precision, rounding, or trap handling.  The following
example shows the effect of changing the precision of the default
context:

    >>> decimal.getcontext().prec
    28
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.1428571428571428571428571429")
    >>> decimal.getcontext().prec = 9
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.142857143")

The default action for error conditions is selectable; the module can
either return a special value such as infinity or not-a-number, or
exceptions can be raised:

    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Traceback (most recent call last):
      ...
    decimal.DivisionByZero: x / 0
    >>> decimal.getcontext().traps[decimal.DivisionByZero] = False
    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Decimal("Infinity")
    >>>

The `Context' instance also has various methods for formatting  numbers
such as `to_eng_string()' and `to_sci_string()'.

  For more information, see the documentation for the `decimal' module,
which includes a quick-start tutorial and a reference.

See also
........

PEP 327(1) - Decimal Data Type
     Written by Facundo Batista and implemented by Facundo Batista,
     Eric Price, Raymond Hettinger, Aahz, and Tim Peters.

<http://www.lahey.com/float.htm>
     The article uses Fortran code to illustrate many of the problems
     that floating- point inaccuracy can cause.

<http://www2.hursley.ibm.com/decimal/>
     A description of a decimal-based representation.  This
     representation is being proposed as a standard, and underlies the
     new Python decimal type.  Much of this material was written by
     Mike Cowlishaw, designer of the Rexx language.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0327


File: python-whatsnew-3.2.2.info,  Node: PEP 328 Multi-line Imports,  Next: PEP 331 Locale-Independent Float/String Conversions,  Prev: PEP 327 Decimal Data Type,  Up: What's New in Python 2 4

7.9 PEP 328: Multi-line Imports
===============================

One language change is a small syntactic tweak aimed at making it
easier to import many names from a module.  In a `from module import
names' statement, _names_ is a sequence of names separated by commas.
If the sequence is  very long, you can either write multiple imports
from the same module, or you can use backslashes to escape the line
endings like this:

    from SimpleXMLRPCServer import SimpleXMLRPCServer,\
                SimpleXMLRPCRequestHandler,\
                CGIXMLRPCRequestHandler,\
                resolve_dotted_attribute

The syntactic change in Python 2.4 simply allows putting the names
within parentheses.  Python ignores newlines within a parenthesized
expression, so the backslashes are no longer needed:

    from SimpleXMLRPCServer import (SimpleXMLRPCServer,
                                    SimpleXMLRPCRequestHandler,
                                    CGIXMLRPCRequestHandler,
                                    resolve_dotted_attribute)

The PEP also proposes that all `import' statements be absolute imports,
with a leading `.' character to indicate a relative import.  This part
of the PEP was not implemented for Python 2.4, but was completed for
Python 2.5.

See also
........

PEP 328(1) - Imports: Multi-Line and Absolute/Relative
     Written by Aahz.  Multi-line imports were implemented by Dima
     Dorfman.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0328


File: python-whatsnew-3.2.2.info,  Node: PEP 331 Locale-Independent Float/String Conversions,  Next: Other Language Changes<6>,  Prev: PEP 328 Multi-line Imports,  Up: What's New in Python 2 4

7.10 PEP 331: Locale-Independent Float/String Conversions
=========================================================

The `locale' modules lets Python software select various conversions and
display conventions that are localized to a particular country or
language.  However, the module was careful to not change the numeric
locale because various functions in Python's implementation required
that the numeric locale remain set to the `'C'' locale.  Often this was
because the code was using the C library's `atof()' function.

  Not setting the numeric locale caused trouble for extensions that
used third- party C libraries, however, because they wouldn't have the
correct locale set.  The motivating example was GTK+, whose user
interface widgets weren't displaying numbers in the current locale.

  The solution described in the PEP is to add three new functions to
the Python API that perform ASCII-only conversions, ignoring the locale
setting:

   * `PyOS_ascii_strtod(str, ptr)()'  and `PyOS_ascii_atof(str, ptr)()'
     both convert a string to a C `double'.

   * `PyOS_ascii_formatd(buffer, buf_len, format, d)()' converts a
     `double' to an ASCII string.

  The code for these functions came from the GLib library
(<http://library.gnome.org/devel/glib/stable/>), whose developers kindly
relicensed the relevant functions and donated them to the Python
Software Foundation.  The `locale' module  can now change the numeric
locale, letting extensions such as GTK+  produce the correct results.

See also
........

PEP 331(1) - Locale-Independent Float/String Conversions
     Written by Christian R. Reis, and implemented by Gustavo Carneiro.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0331


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<6>,  Next: New Improved and Deprecated Modules<3>,  Prev: PEP 331 Locale-Independent Float/String Conversions,  Up: What's New in Python 2 4

7.11 Other Language Changes
===========================

Here are all of the changes that Python 2.4 makes to the core Python
language.

   * Decorators for functions and methods were added ( PEP 318(1)).

   * Built-in `set()' and `frozenset()' types were  added ( PEP 218(2)).
     Other new built-ins include the `reversed(seq)()' function ( PEP
     322(3)).

   * Generator expressions were added ( PEP 289(4)).

   * Certain numeric expressions no longer return values restricted to
     32 or 64 bits ( PEP 237(5)).

   * You can now put parentheses around the list of names in a `from
     module import names' statement ( PEP 328(6)).

   * The `dict.update()' method now accepts the same argument forms as
     the `dict' constructor.  This includes any mapping, any iterable
     of key/value pairs, and keyword arguments. (Contributed by Raymond
     Hettinger.)

   * The string methods `ljust()', `rjust()', and `center()' now take
     an optional argument for specifying a fill character other than a
     space.  (Contributed by Raymond Hettinger.)

   * Strings also gained an `rsplit()' method that works like the
     `split()' method but splits from the end of the string.
     (Contributed by Sean Reifschneider.)

         >>> 'www.python.org'.split('.', 1)
         ['www', 'python.org']
         'www.python.org'.rsplit('.', 1)
         ['www.python', 'org']


   * Three keyword parameters, _cmp_, _key_, and _reverse_, were added
     to the `sort()' method of lists. These parameters make some common
     usages of `sort()' simpler. All of these parameters are optional.

     For the _cmp_ parameter, the value should be a comparison function
     that takes two parameters and returns -1, 0, or +1 depending on
     how the parameters compare.  This function will then be used to
     sort the list.  Previously this was the only parameter that could
     be provided to `sort()'.

     _key_ should be a single-parameter function that takes a list
     element and returns a comparison key for the element.  The list is
     then sorted using the comparison keys.  The following example
     sorts a list case-insensitively:

         >>> L = ['A', 'b', 'c', 'D']
         >>> L.sort()                 # Case-sensitive sort
         >>> L
         ['A', 'D', 'b', 'c']
         >>> # Using 'key' parameter to sort list
         >>> L.sort(key=lambda x: x.lower())
         >>> L
         ['A', 'b', 'c', 'D']
         >>> # Old-fashioned way
         >>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))
         >>> L
         ['A', 'b', 'c', 'D']

     The last example, which uses the _cmp_ parameter, is the old way
     to perform a case-insensitive sort.  It works but is slower than
     using a _key_ parameter.  Using _key_ calls `lower()' method once
     for each element in the list while using _cmp_ will call it twice
     for each comparison, so using _key_ saves on invocations of the
     `lower()' method.

     For simple key functions and comparison functions, it is often
     possible to avoid a `lambda' expression by using an unbound method
     instead.  For example, the above case-insensitive sort is best
     written as:

         >>> L.sort(key=str.lower)
         >>> L
         ['A', 'b', 'c', 'D']

     Finally, the _reverse_ parameter takes a Boolean value.  If the
     value is true, the list will be sorted into reverse order. Instead
     of `L.sort() ; L.reverse()', you can now write
     `L.sort(reverse=True)'.

     The results of sorting are now guaranteed to be stable.  This
     means that two entries with equal keys will be returned in the
     same order as they were input.  For example, you can sort a list
     of people by name, and then sort the list by age, resulting in a
     list sorted by age where people with the same age are in
     name-sorted order.

     (All changes to `sort()' contributed by Raymond Hettinger.)

   * There is a new built-in function `sorted(iterable)()' that works
     like the in-place `list.sort()' method but can be used in
     expressions.  The differences are:

   * the input may be any iterable;

   * a newly formed copy is sorted, leaving the original intact; and

   * the expression returns the new sorted copy

         >>> L = [9,7,8,3,2,4,1,6,5]
         >>> [10+i for i in sorted(L)]       # usable in a list comprehension
         [11, 12, 13, 14, 15, 16, 17, 18, 19]
         >>> L                               # original is left unchanged
         [9,7,8,3,2,4,1,6,5]
         >>> sorted('Monty Python')          # any iterable may be an input
         [' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']

         >>> # List the contents of a dict sorted by key values
         >>> colormap = dict(red=1, blue=2, green=3, black=4, yellow=5)
         >>> for k, v in sorted(colormap.iteritems()):
         ...     print k, v
         ...
         black 4
         blue 2
         green 3
         red 1
         yellow 5

     (Contributed by Raymond Hettinger.)

   * Integer operations will no longer trigger an `OverflowWarning'. The
     `OverflowWarning' warning will disappear in Python 2.5.

   * The interpreter gained a new switch, `-m', that takes a name,
     searches for the corresponding  module on `sys.path', and runs the
     module as a script.  For example,  you can now run the Python
     profiler with `python -m profile'.  (Contributed by Nick Coghlan.)

   * The `eval(expr, globals, locals)()' and `execfile(filename,
     globals, locals)()' functions and the `exec' statement now accept
     any mapping type for the _locals_ parameter.  Previously this had
     to be a regular Python dictionary.  (Contributed by Raymond
     Hettinger.)

   * The `zip()' built-in function and `itertools.izip()' now return an
     empty list if called with no arguments. Previously they raised a
     `TypeError' exception.  This makes them more suitable for use with
     variable length argument lists:

         >>> def transpose(array):
         ...    return zip(*array)
         ...
         >>> transpose([(1,2,3), (4,5,6)])
         [(1, 4), (2, 5), (3, 6)]
         >>> transpose([])
         []

     (Contributed by Raymond Hettinger.)

   * Encountering a failure while importing a module no longer leaves a
     partially- initialized module object in `sys.modules'.  The
     incomplete module object left behind would fool further imports of
     the same module into succeeding, leading to confusing errors.
     (Fixed by Tim Peters.)

   * `None' is now a constant; code that binds a new value to  the name
     `None' is now a syntax error. (Contributed by Raymond Hettinger.)

* Menu:

* Optimizations: Optimizations<6>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0318

  (2) http://www.python.org/dev/peps/pep-0218

  (3) http://www.python.org/dev/peps/pep-0322

  (4) http://www.python.org/dev/peps/pep-0289

  (5) http://www.python.org/dev/peps/pep-0237

  (6) http://www.python.org/dev/peps/pep-0328


File: python-whatsnew-3.2.2.info,  Node: Optimizations<6>,  Up: Other Language Changes<6>

7.11.1 Optimizations
--------------------

   * The inner loops for list and tuple slicing were optimized and now
     run about one-third faster.  The inner loops for dictionaries were
     also optimized, resulting in performance boosts for `keys()',
     `values()', `items()', `iterkeys()', `itervalues()', and
     `iteritems()'. (Contributed by Raymond Hettinger.)

   * The machinery for growing and shrinking lists was optimized for
     speed and for space efficiency.  Appending and popping from lists
     now runs faster due to more efficient code paths and less frequent
     use of the underlying system `realloc()'.  List comprehensions
     also benefit.   `list.extend()' was also optimized and no longer
     converts its argument into a temporary list before extending the
     base list.  (Contributed by Raymond Hettinger.)

   * `list()', `tuple()', `map()', `filter()', and `zip()' now run
     several times faster with non-sequence arguments that supply a
     `__len__()' method.  (Contributed by Raymond Hettinger.)

   * The methods `list.__getitem__()', `dict.__getitem__()', and
     `dict.__contains__()' are are now implemented as
     `method_descriptor' objects rather than `wrapper_descriptor'
     objects.  This form of  access doubles their performance and makes
     them more suitable for use as arguments to functionals:
     `map(mydict.__getitem__, keylist)'. (Contributed by Raymond
     Hettinger.)

   * Added a new opcode, `LIST_APPEND', that simplifies the generated
     bytecode for list comprehensions and speeds them up by about a
     third.  (Contributed by Raymond Hettinger.)

   * The peephole bytecode optimizer has been improved to  produce
     shorter, faster bytecode; remarkably, the resulting bytecode is
     more readable.  (Enhanced by Raymond Hettinger.)

   * String concatenations in statements of the form `s = s + "abc"'
     and `s += "abc"' are now performed more efficiently in certain
     circumstances.  This optimization won't be present in other Python
     implementations such as Jython, so you shouldn't rely on it; using
     the `join()' method of strings is still recommended when you want
     to efficiently glue a large number of strings together.
     (Contributed by Armin Rigo.)

  The net result of the 2.4 optimizations is that Python 2.4 runs the
pystone benchmark around 5% faster than Python 2.3 and 35% faster than
Python 2.2.  (pystone is not a particularly good benchmark, but it's
the most commonly used measurement of Python's performance.  Your own
applications may show greater or smaller benefits from Python 2.4.)


File: python-whatsnew-3.2.2.info,  Node: New Improved and Deprecated Modules<3>,  Next: Build and C API Changes<7>,  Prev: Other Language Changes<6>,  Up: What's New in Python 2 4

7.12 New, Improved, and Deprecated Modules
==========================================

As usual, Python's standard library received a number of enhancements
and bug fixes.  Here's a partial list of the most notable changes,
sorted alphabetically by module name. Consult the `Misc/NEWS' file in
the source tree for a more complete list of changes, or look through
the CVS logs for all the details.

   * The `asyncore' module's `loop()' function now has a _count_
     parameter that lets you perform a limited number of passes through
     the polling loop.  The default is still to loop forever.

   * The `base64' module now has more complete RFC 3548 support for
     Base64, Base32, and Base16 encoding and decoding, including
     optional case folding and optional alternative alphabets.
     (Contributed by Barry Warsaw.)

   * The `bisect' module now has an underlying C implementation for
     improved performance. (Contributed by Dmitry Vasiliev.)

   * The CJKCodecs collections of East Asian codecs, maintained by
     Hye-Shik Chang, was integrated into 2.4.   The new encodings are:

   * Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz

   * Chinese (ROC): big5, cp950

   *
    Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,
          iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext,
          iso-2022-jp-2004, shift-jis, shift-jisx0213, shift-jis-2004

   * Korean: cp949, euc-kr, johab, iso-2022-kr

   * Some other new encodings were added: HP Roman8,  ISO_8859-11,
     ISO_8859-16, PCTP-154, and TIS-620.

   * The UTF-8 and UTF-16 codecs now cope better with receiving partial
     input.  Previously the `StreamReader' class would try to read more
     data, making it impossible to resume decoding from the stream.
     The `read()' method will now return as much data as it can and
     future calls will resume decoding where previous ones left off.
     (Implemented by Walter Dörwald.)

   * There is a new `collections' module for  various specialized
     collection datatypes.   Currently it contains just one type,
     `deque',  a double- ended queue that supports efficiently adding
     and removing elements from either end:

         >>> from collections import deque
         >>> d = deque('ghi')        # make a new deque with three items
         >>> d.append('j')           # add a new entry to the right side
         >>> d.appendleft('f')       # add a new entry to the left side
         >>> d                       # show the representation of the deque
         deque(['f', 'g', 'h', 'i', 'j'])
         >>> d.pop()                 # return and remove the rightmost item
         'j'
         >>> d.popleft()             # return and remove the leftmost item
         'f'
         >>> list(d)                 # list the contents of the deque
         ['g', 'h', 'i']
         >>> 'h' in d                # search the deque
         True

     Several modules, such as the `Queue' and `threading' modules, now
     take advantage of `collections.deque' for improved performance.
     (Contributed by Raymond Hettinger.)

   * The `ConfigParser' classes have been enhanced slightly. The
     `read()' method now returns a list of the files that were
     successfully parsed, and the `set()' method raises `TypeError' if
     passed a _value_ argument that isn't a string.   (Contributed by
     John Belmonte and David Goodger.)

   * The `curses' module now supports the ncurses extension
     `use_default_colors()'.  On platforms where the terminal supports
     transparency, this makes it possible to use a transparent
     background.  (Contributed by Jörg Lehmann.)

   * The `difflib' module now includes an `HtmlDiff' class that creates
     an HTML table showing a side by side comparison of two versions of
     a text.  (Contributed by Dan Gass.)

   * The `email' package was updated to version 3.0,  which dropped
     various deprecated APIs and removes support for Python versions
     earlier than 2.3.  The 3.0 version of the package uses a new
     incremental parser for MIME messages, available in the
     `email.FeedParser' module.  The new parser doesn't require reading
     the entire message into memory, and doesn't raise exceptions if a
     message is malformed; instead it records any problems in the
     `defect' attribute of the message.  (Developed by Anthony Baxter,
     Barry Warsaw, Thomas Wouters, and others.)

   * The `heapq' module has been converted to C.  The resulting tenfold
     improvement in speed makes the module suitable for handling high
     volumes of data.  In addition, the module has two new functions
     `nlargest()' and `nsmallest()' that use heaps to find the N
     largest or smallest values in a dataset without the expense of a
     full sort.  (Contributed by Raymond Hettinger.)

   * The `httplib' module now contains constants for HTTP status codes
     defined in various HTTP-related RFC documents.  Constants have
     names such as `OK', `CREATED', `CONTINUE', and
     `MOVED_PERMANENTLY'; use pydoc to get a full list.  (Contributed by
     Andrew Eland.)

   * The `imaplib' module now supports IMAP's THREAD command
     (contributed by Yves Dionne) and new `deleteacl()' and
     `myrights()' methods (contributed by Arnaud Mazin).

   * The `itertools' module gained a `groupby(iterable[, *func*])()'
     function. _iterable_ is something that can be iterated over to
     return a stream of elements, and the optional _func_ parameter is
     a function that takes an element and returns a key value; if
     omitted, the key is simply the element itself.  `groupby()' then
     groups the elements into subsequences which have matching values
     of the key, and returns a series of 2-tuples containing the key
     value and an iterator over the subsequence.

     Here's an example to make this clearer.  The _key_ function simply
     returns whether a number is even or odd, so the result of
     `groupby()' is to return consecutive runs of odd or even numbers.

         >>> import itertools
         >>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]
         >>> for key_val, it in itertools.groupby(L, lambda x: x % 2):
         ...    print key_val, list(it)
         ...
         0 [2, 4, 6]
         1 [7]
         0 [8]
         1 [9, 11]
         0 [12, 14]
         >>>

     `groupby()' is typically used with sorted input.  The logic for
     `groupby()' is similar to the Unix `uniq' filter which makes it
     handy for eliminating, counting, or identifying duplicate elements:

         >>> word = 'abracadabra'
         >>> letters = sorted(word)   # Turn string into a sorted list of letters
         >>> letters
         ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']
         >>> for k, g in itertools.groupby(letters):
         ...    print k, list(g)
         ...
         a ['a', 'a', 'a', 'a', 'a']
         b ['b', 'b']
         c ['c']
         d ['d']
         r ['r', 'r']
         >>> # List unique letters
         >>> [k for k, g in groupby(letters)]
         ['a', 'b', 'c', 'd', 'r']
         >>> # Count letter occurrences
         >>> [(k, len(list(g))) for k, g in groupby(letters)]
         [('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]

     (Contributed by Hye-Shik Chang.)

   * `itertools' also gained a function named `tee(iterator, N)()' that
     returns _N_ independent iterators that replicate _iterator_.  If
     _N_ is omitted, the default is 2.

         >>> L = [1,2,3]
         >>> i1, i2 = itertools.tee(L)
         >>> i1,i2
         (<itertools.tee object at 0x402c2080>, <itertools.tee object at 0x402c2090>)
         >>> list(i1)               # Run the first iterator to exhaustion
         [1, 2, 3]
         >>> list(i2)               # Run the second iterator to exhaustion
         [1, 2, 3]

     Note that `tee()' has to keep copies of the values returned  by the
     iterator; in the worst case, it may need to keep all of them.
     This should therefore be used carefully if the leading iterator
     can run far ahead of the trailing iterator in a long stream of
     inputs. If the separation is large, then you might as well use
     `list()' instead.  When the iterators track closely with one
     another, `tee()' is ideal.  Possible applications include
     bookmarking, windowing, or lookahead iterators. (Contributed by
     Raymond Hettinger.)

   * A number of functions were added to the `locale'  module, such as
     `bind_textdomain_codeset()' to specify a particular encoding and a
     family of `l*gettext()' functions that return messages in the
     chosen encoding.  (Contributed by Gustavo Niemeyer.)

   * Some keyword arguments were added to the `logging' package's
     `basicConfig()' function to simplify log configuration.  The
     default behavior is to log messages to standard error, but various
     keyword arguments can be specified to log to a particular file,
     change the logging format, or set the logging level. For example:

         import logging
         logging.basicConfig(filename='/var/log/application.log',
             level=0,  # Log all messages
             format='%(levelname):%(process):%(thread):%(message)')

     Other additions to the `logging' package include a `log(level,
     msg)()' convenience method, as well as a
     `TimedRotatingFileHandler' class that rotates its log files at a
     timed interval.  The module already had `RotatingFileHandler',
     which rotated logs once the file exceeded a certain size.  Both
     classes derive from a new `BaseRotatingHandler' class that can be
     used to implement other rotating handlers.

     (Changes implemented by Vinay Sajip.)

   * The `marshal' module now shares interned strings on unpacking a
     data structure.  This may shrink the size of certain pickle
     strings, but the primary effect is to make `.pyc' files
     significantly smaller. (Contributed by Martin von Löwis.)

   * The `nntplib' module's `NNTP' class gained `description()' and
     `descriptions()' methods to retrieve  newsgroup descriptions for a
     single group or for a range of groups. (Contributed by Jürgen A.
     Erhard.)

   * Two new functions were added to the `operator' module,
     `attrgetter(attr)()' and `itemgetter(index)()'. Both functions
     return callables that take a single argument and return the
     corresponding attribute or item; these callables make excellent
     data extractors when used with `map()' or `sorted()'.  For example:

         >>> L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)]
         >>> map(operator.itemgetter(0), L)
         ['c', 'd', 'a', 'b']
         >>> map(operator.itemgetter(1), L)
         [2, 1, 4, 3]
         >>> sorted(L, key=operator.itemgetter(1)) # Sort list by second tuple item
         [('d', 1), ('c', 2), ('b', 3), ('a', 4)]

     (Contributed by Raymond Hettinger.)

   * The `optparse' module was updated in various ways.  The module now
     passes its messages through `gettext.gettext()', making it
     possible to internationalize Optik's help and error messages.
     Help messages for options can now include the string `'%default'',
     which will be replaced by the option's default value.
     (Contributed by Greg Ward.)

   * The long-term plan is to deprecate the `rfc822' module in some
     future Python release in favor of the `email' package. To this
     end, the `email.Utils.formatdate()' function has been changed to
     make it usable as a replacement for `rfc822.formatdate()'.  You
     may want to write new e-mail processing code with this in mind.
     (Change implemented by Anthony Baxter.)

   * A new `urandom(n)()' function was added to the `os' module,
     returning a string containing _n_ bytes of random data.  This
     function provides access to platform-specific sources of
     randomness such as `/dev/urandom' on Linux or the Windows
     CryptoAPI.  (Contributed by Trevor Perrin.)

   * Another new function: `os.path.lexists(path)()'  returns true if
     the file specified by _path_ exists, whether or not it's a
     symbolic link.  This differs from the existing
     `os.path.exists(path)()' function, which returns false if _path_
     is a symlink that points to a destination that doesn't exist.
     (Contributed by Beni Cherniavsky.)

   * A new `getsid()' function was added to the `posix' module that
     underlies the `os' module. (Contributed by J. Raynor.)

   * The `poplib' module now supports POP over SSL.  (Contributed by
     Hector Urtubia.)

   * The `profile' module can now profile C extension functions.
     (Contributed by Nick Bastin.)

   * The `random' module has a new method called `getrandbits(N)()' that
     returns a long integer _N_ bits in length.  The existing
     `randrange()' method now uses `getrandbits()' where appropriate,
     making generation of arbitrarily large random numbers more
     efficient.  (Contributed by Raymond Hettinger.)

   * The regular expression language accepted by the `re' module was
     extended with simple conditional expressions, written as
     `(?(group)A|B)'.  _group_ is either a numeric group ID or a group
     name defined with `(?P<group>...)' earlier in the expression.  If
     the specified group matched, the regular expression pattern _A_
     will be tested against the string; if the group didn't match, the
     pattern _B_ will be used instead. (Contributed by Gustavo
     Niemeyer.)

   * The `re' module is also no longer recursive, thanks to a massive
     amount of work by Gustavo Niemeyer.  In a recursive regular
     expression engine, certain patterns result in a large amount of C
     stack space being consumed, and it was possible to overflow the
     stack. For example, if you matched a 30000-byte string of `a'
     characters against the expression `(a|b)+', one stack frame was
     consumed per character.  Python 2.3 tried to check for stack
     overflow and raise a `RuntimeError' exception, but certain
     patterns could sidestep the checking and if you were unlucky
     Python could segfault. Python 2.4's regular expression engine can
     match this pattern without problems.

   * The `signal' module now performs tighter error-checking on the
     parameters to the `signal.signal()' function.  For example, you
     can't set a handler on the `SIGKILL' signal; previous versions of
     Python would quietly accept this, but 2.4 will raise a
     `RuntimeError' exception.

   * Two new functions were added to the `socket' module. `socketpair()'
     returns a pair of connected sockets and `getservbyport(port)()'
     looks up the service name for a given port number. (Contributed by
     Dave Cole and Barry Warsaw.)

   * The `sys.exitfunc()' function has been deprecated.  Code should be
     using the existing `atexit' module, which correctly handles
     calling multiple exit functions.  Eventually `sys.exitfunc()' will
     become a purely internal interface, accessed only by `atexit'.

   * The `tarfile' module now generates GNU-format tar files by default.
     (Contributed by Lars Gustaebel.)

   * The `threading' module now has an elegantly simple way to support
     thread-local data.  The module contains a `local' class whose
     attribute values are local to different threads.

         import threading

         data = threading.local()
         data.number = 42
         data.url = ('www.python.org', 80)

     Other threads can assign and retrieve their own values for the
     `number' and `url' attributes.  You can subclass `local' to
     initialize attributes or to add methods. (Contributed by Jim
     Fulton.)

   * The `timeit' module now automatically disables periodic garbage
     collection during the timing loop.  This change makes consecutive
     timings more comparable.  (Contributed by Raymond Hettinger.)

   * The `weakref' module now supports a wider variety of objects
     including Python functions, class instances, sets, frozensets,
     deques, arrays, files, sockets, and regular expression pattern
     objects. (Contributed by Raymond Hettinger.)

   * The `xmlrpclib' module now supports a multi-call extension for
     transmitting multiple XML-RPC calls in a single HTTP operation.
     (Contributed by Brian Quinlan.)

   * The `mpz', `rotor', and `xreadlines' modules have  been removed.

* Menu:

* cookielib::
* doctest::


File: python-whatsnew-3.2.2.info,  Node: cookielib,  Next: doctest,  Up: New Improved and Deprecated Modules<3>

7.12.1 cookielib
----------------

The `cookielib' library supports client-side handling for HTTP cookies,
mirroring the `Cookie' module's server-side cookie support. Cookies are
stored in cookie jars; the library transparently stores cookies offered
by the web server in the cookie jar, and fetches the cookie from the
jar when connecting to the server. As in web browsers, policy objects
control whether cookies are accepted or not.

  In order to store cookies across sessions, two implementations of
cookie jars are provided: one that stores cookies in the Netscape
format so applications can use the Mozilla or Lynx cookie files, and
one that stores cookies in the same format as the Perl libwww library.

  `urllib2' has been changed to interact with `cookielib':
`HTTPCookieProcessor' manages a cookie jar that is used when accessing
URLs.

  This module was contributed by John J. Lee.


File: python-whatsnew-3.2.2.info,  Node: doctest,  Prev: cookielib,  Up: New Improved and Deprecated Modules<3>

7.12.2 doctest
--------------

The `doctest' module underwent considerable refactoring thanks to Edward
Loper and Tim Peters.  Testing can still be as simple as running
`doctest.testmod()', but the refactorings allow customizing the module's
operation in various ways

  The new `DocTestFinder' class extracts the tests from a given
object's docstrings:

    def f (x, y):
        """>>> f(2,2)
    4
    >>> f(3,2)
    6
        """
        return x*y

    finder = doctest.DocTestFinder()

    # Get list of DocTest instances
    tests = finder.find(f)

The new `DocTestRunner' class then runs individual tests and can produce
a summary of the results:

    runner = doctest.DocTestRunner()
    for t in tests:
        tried, failed = runner.run(t)

    runner.summarize(verbose=1)

The above example produces the following output:

    1 items passed all tests:
       2 tests in f
    2 tests in 1 items.
    2 passed and 0 failed.
    Test passed.

`DocTestRunner' uses an instance of the `OutputChecker' class to
compare the expected output with the actual output.  This class takes a
number of different flags that customize its behaviour; ambitious users
can also write a completely new subclass of `OutputChecker'.

  The default output checker provides a number of handy features. For
example, with the `doctest.ELLIPSIS' option flag, an ellipsis (`...')
in the expected output matches any substring,  making it easier to
accommodate outputs that vary in minor ways:

    def o (n):
        """>>> o(1)
    <__main__.C instance at 0x...>
    >>>
    """

Another special string, `<BLANKLINE>', matches a blank line:

    def p (n):
        """>>> p(1)
    <BLANKLINE>
    >>>
    """

Another new capability is producing a diff-style display of the output
by specifying the `doctest.REPORT_UDIFF' (unified diffs),
`doctest.REPORT_CDIFF' (context diffs), or `doctest.REPORT_NDIFF'
(delta-style) option flags.  For example:

    def g (n):
        """>>> g(4)
    here
    is
    a
    lengthy
    >>>"""
        L = 'here is a rather lengthy list of words'.split()
        for word in L[:n]:
            print word

Running the above function's tests with `doctest.REPORT_UDIFF'
specified, you get the following output:

    **********************************************************************
    File "t.py", line 15, in g
    Failed example:
        g(4)
    Differences (unified diff with -expected +actual):
        @@ -2,3 +2,3 @@
         is
         a
        -lengthy
        +rather
    **********************************************************************



File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<7>,  Next: Porting to Python 2 4,  Prev: New Improved and Deprecated Modules<3>,  Up: What's New in Python 2 4

7.13 Build and C API Changes
============================

Some of the changes to Python's build process and to the C API are:

   * Three new convenience macros were added for common return values
     from extension functions: `Py_RETURN_NONE', `Py_RETURN_TRUE', and
     `Py_RETURN_FALSE'. (Contributed by Brett Cannon.)

   * Another new macro, `Py_CLEAR(obj)',  decreases the reference count
     of _obj_ and sets _obj_ to the null pointer.  (Contributed by Jim
     Fulton.)

   * A new function, `PyTuple_Pack(N, obj1, obj2, ..., objN)()',
     constructs tuples from a variable length argument list of Python
     objects.  (Contributed by Raymond Hettinger.)

   * A new function, `PyDict_Contains(d, k)()', implements fast
     dictionary lookups without masking exceptions raised during the
     look-up process.  (Contributed by Raymond Hettinger.)

   * The `Py_IS_NAN(X)' macro returns 1 if  its float or double argument
     _X_ is a NaN.   (Contributed by Tim Peters.)

   * C code can avoid unnecessary locking by using the new
     `PyEval_ThreadsInitialized()' function to tell  if any thread
     operations have been performed.  If this function  returns false,
     no lock operations are needed. (Contributed by Nick Coghlan.)

   * A new function, `PyArg_VaParseTupleAndKeywords()', is the same as
     `PyArg_ParseTupleAndKeywords()' but takes a  `va_list' instead of a
     number of arguments. (Contributed by Greg Chapman.)

   * A new method flag, `METH_COEXISTS', allows a function defined in
     slots to co-exist with a `PyCFunction' having the same name.  This
     can halve the access time for a method such as
     `set.__contains__()'.  (Contributed by Raymond Hettinger.)

   * Python can now be built with additional profiling for the
     interpreter itself, intended as an aid to people developing the
     Python core.  Providing `----enable-profiling' to the *configure*
     script will let you profile the interpreter with *gprof*, and
     providing the `----with-tsc' switch enables profiling using the
     Pentium's Time-Stamp- Counter register.  Note that the
     `----with-tsc' switch is slightly misnamed, because the profiling
     feature also works on the PowerPC platform, though that processor
     architecture doesn't call that register "the TSC register".
     (Contributed by Jeremy Hylton.)

   * The `tracebackobject' type has been renamed to `PyTracebackObject'.

* Menu:

* Port-Specific Changes: Port-Specific Changes<2>.


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes<2>,  Up: Build and C API Changes<7>

7.13.1 Port-Specific Changes
----------------------------

   * The Windows port now builds under MSVC++ 7.1 as well as version 6.
     (Contributed by Martin von Löwis.)


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 2 4,  Next: Acknowledgements<4>,  Prev: Build and C API Changes<7>,  Up: What's New in Python 2 4

7.14 Porting to Python 2.4
==========================

This section lists previously described changes that may require
changes to your code:

   * Left shifts and hexadecimal/octal constants that are too  large no
     longer trigger a `FutureWarning' and return  a value limited to 32
     or 64 bits; instead they return a long integer.

   * Integer operations will no longer trigger an `OverflowWarning'. The
     `OverflowWarning' warning will disappear in Python 2.5.

   * The `zip()' built-in function and `itertools.izip()' now return  an
     empty list instead of raising a `TypeError' exception if called
     with no arguments.

   * You can no longer compare the `date' and `datetime' instances
     provided by the `datetime' module.  Two  instances of different
     classes will now always be unequal, and  relative comparisons
     (`<', `>') will raise a `TypeError'.

   * `dircache.listdir()' now passes exceptions to the caller instead of
     returning empty lists.

   * `LexicalHandler.startDTD()' used to receive the public and system
     IDs in the wrong order.  This has been corrected; applications
     relying on the wrong order need to be fixed.

   * `fcntl.ioctl()' now warns if the _mutate_  argument is omitted and
     relevant.

   * The `tarfile' module now generates GNU-format tar files by default.

   * Encountering a failure while importing a module no longer leaves a
     partially- initialized module object in `sys.modules'.

   * `None' is now a constant; code that binds a new value to  the name
     `None' is now a syntax error.

   * The `signals.signal()' function now raises a `RuntimeError'
     exception for certain illegal values; previously these errors
     would pass silently.  For example, you can no longer set a handler
     on the `SIGKILL' signal.


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<4>,  Prev: Porting to Python 2 4,  Up: What's New in Python 2 4

7.15 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Koray Can, Hye- Shik Chang, Michael Dyck, Raymond Hettinger,
Brian Hurt, Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin
Rejeb.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 3,  Next: What's New in Python 2 2,  Prev: What's New in Python 2 4,  Up: Top

8 What's New in Python 2.3
**************************

     Author: A.M. Kuchling

  This article explains the new features in Python 2.3.  Python 2.3 was
released on July 29, 2003.

  The main themes for Python 2.3 are polishing some of the features
added in 2.2, adding various small but useful enhancements to the core
language, and expanding the standard library.  The new object model
introduced in the previous version has benefited from 18 months of
bugfixes and from optimization efforts that have improved the
performance of new-style classes.  A few new built-in functions have
been added such as `sum()' and `enumerate()'.  The `in' operator can
now be used for substring searches (e.g. `"ab" in "abc"' returns
`True').

  Some of the many new library features include Boolean, set, heap, and
date/time data types, the ability to import modules from ZIP-format
archives, metadata support for the long-awaited Python catalog, an
updated version of IDLE, and modules for logging messages, wrapping
text, parsing CSV files, processing command-line options, using
BerkeleyDB databases...  the list of new and enhanced modules is
lengthy.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.3, such as
the Python Library Reference and the Python Reference Manual.  If you
want to understand the complete implementation and design rationale,
refer to the PEP for a particular new feature.

* Menu:

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype.
* PEP 255; Simple Generators: PEP 255 Simple Generators.
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings.
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives.
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT.
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support.
* PEP 279; enumerate(): PEP 279 enumerate.
* PEP 282; The logging Package: PEP 282 The logging Package.
* PEP 285; A Boolean Type: PEP 285 A Boolean Type.
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks.
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils.
* PEP 302; New Import Hooks: PEP 302 New Import Hooks.
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files.
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements.
* Extended Slices::
* Other Language Changes: Other Language Changes<7>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<4>.
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator.
* Build and C API Changes: Build and C API Changes<8>.
* Other Changes and Fixes: Other Changes and Fixes<2>.
* Porting to Python 2.3: Porting to Python 2 3.
* Acknowledgements: Acknowledgements<5>.


File: python-whatsnew-3.2.2.info,  Node: PEP 218 A Standard Set Datatype,  Next: PEP 255 Simple Generators,  Up: What's New in Python 2 3

8.1 PEP 218: A Standard Set Datatype
====================================

The new `sets' module contains an implementation of a set datatype.  The
`Set' class is for mutable sets, sets that can have members added and
removed.  The `ImmutableSet' class is for sets that can't be modified,
and instances of `ImmutableSet' can therefore be used as dictionary
keys.  Sets are built on top of dictionaries, so the elements within a
set must be hashable.

  Here's a simple example:

    >>> import sets
    >>> S = sets.Set([1,2,3])
    >>> S
    Set([1, 2, 3])
    >>> 1 in S
    True
    >>> 0 in S
    False
    >>> S.add(5)
    >>> S.remove(3)
    >>> S
    Set([1, 2, 5])
    >>>

The union and intersection of sets can be computed with the `union()'
and `intersection()' methods; an alternative notation uses the bitwise
operators `&' and `|'. Mutable sets also have in-place versions of
these methods, `union_update()' and `intersection_update()'.

    >>> S1 = sets.Set([1,2,3])
    >>> S2 = sets.Set([4,5,6])
    >>> S1.union(S2)
    Set([1, 2, 3, 4, 5, 6])
    >>> S1 | S2                  # Alternative notation
    Set([1, 2, 3, 4, 5, 6])
    >>> S1.intersection(S2)
    Set([])
    >>> S1 & S2                  # Alternative notation
    Set([])
    >>> S1.union_update(S2)
    >>> S1
    Set([1, 2, 3, 4, 5, 6])
    >>>

It's also possible to take the symmetric difference of two sets.  This
is the set of all elements in the union that aren't in the
intersection.  Another way of putting it is that the symmetric
difference contains all elements that are in exactly one set.  Again,
there's an alternative notation (`^'), and an in- place version with
the ungainly name `symmetric_difference_update()'.

    >>> S1 = sets.Set([1,2,3,4])
    >>> S2 = sets.Set([3,4,5,6])
    >>> S1.symmetric_difference(S2)
    Set([1, 2, 5, 6])
    >>> S1 ^ S2
    Set([1, 2, 5, 6])
    >>>

There are also `issubset()' and `issuperset()' methods for checking
whether one set is a subset or superset of another:

    >>> S1 = sets.Set([1,2,3])
    >>> S2 = sets.Set([2,3])
    >>> S2.issubset(S1)
    True
    >>> S1.issubset(S2)
    False
    >>> S1.issuperset(S2)
    True
    >>>


See also
........

PEP 218(1) - Adding a Built-In Set Object Type
     PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex
     Martelli, and GvR.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0218


File: python-whatsnew-3.2.2.info,  Node: PEP 255 Simple Generators,  Next: PEP 263 Source Code Encodings,  Prev: PEP 218 A Standard Set Datatype,  Up: What's New in Python 2 3

8.2 PEP 255: Simple Generators
==============================

In Python 2.2, generators were added as an optional feature, to be
enabled by a `from __future__ import generators' directive.  In 2.3
generators no longer need to be specially enabled, and are now always
present; this means that `yield' is now always a keyword.  The rest of
this section is a copy of the description of generators from the
"What's New in Python 2.2" document; if you read it back when Python
2.2 came out, you can skip the rest of this section.

  You're doubtless familiar with how function calls work in Python or
C. When you call a function, it gets a private namespace where its
local variables are created.  When the function reaches a `return'
statement, the local variables are destroyed and the resulting value is
returned to the caller.  A later call to the same function will get a
fresh new set of local variables.  But, what if the local variables
weren't thrown away on exiting a function?  What if you could later
resume the function where it left off?  This is what generators
provide; they can be thought of as resumable functions.

  Here's the simplest example of a generator function:

    def generate_ints(N):
        for i in range(N):
            yield i

A new keyword, `yield', was introduced for generators.  Any function
containing a `yield' statement is a generator function; this is
detected by Python's bytecode compiler which compiles the function
specially as a result.

  When you call a generator function, it doesn't return a single value;
instead it returns a generator object that supports the iterator
protocol.  On executing the `yield' statement, the generator outputs
the value of `i', similar to a `return' statement.  The big difference
between `yield' and a `return' statement is that on reaching a `yield'
the generator's state of execution is suspended and local variables are
preserved.  On the next call to the generator's `.next()' method, the
function will resume executing immediately after the `yield' statement.
(For complicated reasons, the `yield' statement isn't allowed inside
the `try' block of a `try'...`finally' statement; read PEP 255(1) for a
full explanation of the interaction between `yield' and exceptions.)

  Here's a sample usage of the `generate_ints()' generator:

    >>> gen = generate_ints(3)
    >>> gen
    <generator object at 0x8117f90>
    >>> gen.next()
    0
    >>> gen.next()
    1
    >>> gen.next()
    2
    >>> gen.next()
    Traceback (most recent call last):
      File "stdin", line 1, in ?
      File "stdin", line 2, in generate_ints
    StopIteration

You could equally write `for i in generate_ints(5)', or `a,b,c =
generate_ints(3)'.

  Inside a generator function, the `return' statement can only be used
without a value, and signals the end of the procession of values;
afterwards the generator cannot return any further values. `return'
with a value, such as `return 5', is a syntax error inside a generator
function.  The end of the generator's results can also be indicated by
raising `StopIteration' manually, or by just letting the flow of
execution fall off the bottom of the function.

  You could achieve the effect of generators manually by writing your
own class and storing all the local variables of the generator as
instance variables.  For example, returning a list of integers could be
done by setting `self.count' to 0, and having the `next()' method
increment `self.count' and return it.  However, for a moderately
complicated generator, writing a corresponding class would be much
messier. `Lib/test/test_generators.py' contains a number of more
interesting examples.  The simplest one implements an in-order
traversal of a tree using generators recursively.

    # A recursive generator that generates Tree leaves in in-order.
    def inorder(t):
        if t:
            for x in inorder(t.left):
                yield x
            yield t.label
            for x in inorder(t.right):
                yield x

Two other examples in `Lib/test/test_generators.py' produce solutions
for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so
that no queen threatens another) and the Knight's Tour (a route that
takes a knight to every square of an $NxN$ chessboard without visiting
any square twice).

  The idea of generators comes from other programming languages,
especially Icon (<http://www.cs.arizona.edu/icon/>), where the idea of
generators is central.  In Icon, every expression and function call
behaves like a generator.  One example from "An Overview of the Icon
Programming Language" at
<http://www.cs.arizona.edu/icon/docs/ipd266.htm> gives an idea of what
this looks like:

    sentence := "Store it in the neighboring harbor"
    if (i := find("or", sentence)) > 5 then write(i)

In Icon the `find()' function returns the indexes at which the substring
"or" is found: 3, 23, 33.  In the `if' statement, `i' is first assigned
a value of 3, but 3 is less than 5, so the comparison fails, and Icon
retries it with the second value of 23.  23 is greater than 5, so the
comparison now succeeds, and the code prints the value 23 to the screen.

  Python doesn't go nearly as far as Icon in adopting generators as a
central concept.  Generators are considered part of the core Python
language, but learning or using them isn't compulsory; if they don't
solve any problems that you have, feel free to ignore them. One novel
feature of Python's interface as compared to Icon's is that a
generator's state is represented as a concrete object (the iterator)
that can be passed around to other functions or stored in a data
structure.

See also
........

PEP 255(2) - Simple Generators
     Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.
     Implemented mostly by Neil Schemenauer and Tim Peters, with other
     fixes from the Python Labs crew.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0255

  (2) http://www.python.org/dev/peps/pep-0255


File: python-whatsnew-3.2.2.info,  Node: PEP 263 Source Code Encodings,  Next: PEP 273 Importing Modules from ZIP Archives,  Prev: PEP 255 Simple Generators,  Up: What's New in Python 2 3

8.3 PEP 263: Source Code Encodings
==================================

Python source files can now be declared as being in different character
set encodings.  Encodings are declared by including a specially
formatted comment in the first or second line of the source file.  For
example, a UTF-8 file can be declared with:

    #!/usr/bin/env python
    # -*- coding: UTF-8 -*-

Without such an encoding declaration, the default encoding used is
7-bit ASCII.  Executing or importing modules that contain string
literals with 8-bit characters and have no encoding declaration will
result in a `DeprecationWarning' being signalled by Python 2.3; in 2.4
this will be a syntax error.

  The encoding declaration only affects Unicode string literals, which
will be converted to Unicode using the specified encoding.  Note that
Python identifiers are still restricted to ASCII characters, so you
can't have variable names that use characters outside of the usual
alphanumerics.

See also
........

PEP 263(1) - Defining Python Source Code Encodings
     Written by Marc-André Lemburg and Martin von Löwis; implemented by
     Suzuki Hisao and Martin von Löwis.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0263


File: python-whatsnew-3.2.2.info,  Node: PEP 273 Importing Modules from ZIP Archives,  Next: PEP 277 Unicode file name support for Windows NT,  Prev: PEP 263 Source Code Encodings,  Up: What's New in Python 2 3

8.4 PEP 273: Importing Modules from ZIP Archives
================================================

The new `zipimport' module adds support for importing modules from a
ZIP- format archive.  You don't need to import the module explicitly;
it will be automatically imported if a ZIP archive's filename is added
to `sys.path'.  For example:

    amk@nyman:~/src/python$ unzip -l /tmp/example.zip
    Archive:  /tmp/example.zip
      Length     Date   Time    Name
     --------    ----   ----    ----
         8467  11-26-02 22:30   jwzthreading.py
     --------                   -------
         8467                   1 file
    amk@nyman:~/src/python$ ./python
    Python 2.3 (#1, Aug 1 2003, 19:54:32)
    >>> import sys
    >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
    >>> import jwzthreading
    >>> jwzthreading.__file__
    '/tmp/example.zip/jwzthreading.py'
    >>>

An entry in `sys.path' can now be the filename of a ZIP archive. The ZIP
archive can contain any kind of files, but only files named `*.py',
`*.pyc', or `*.pyo' can be imported.  If an archive only contains
`*.py' files, Python will not attempt to modify the archive by adding
the corresponding `*.pyc' file, meaning that if a ZIP archive doesn't
contain `*.pyc' files, importing may be rather slow.

  A path within the archive can also be specified to only import from a
subdirectory; for example, the path `/tmp/example.zip/lib/' would only
import from the `lib/' subdirectory within the archive.

See also
........

PEP 273(1) - Import Modules from Zip Archives
     Written by James C. Ahlstrom,  who also provided an
     implementation. Python 2.3 follows the specification in PEP
     273(2),  but uses an implementation written by Just van Rossum
     that uses the import hooks described in PEP 302(3). See section
     *note PEP 302; New Import Hooks: 11d. for a description of the new
     import hooks.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0273

  (2) http://www.python.org/dev/peps/pep-0273

  (3) http://www.python.org/dev/peps/pep-0302


File: python-whatsnew-3.2.2.info,  Node: PEP 277 Unicode file name support for Windows NT,  Next: PEP 278 Universal Newline Support,  Prev: PEP 273 Importing Modules from ZIP Archives,  Up: What's New in Python 2 3

8.5 PEP 277: Unicode file name support for Windows NT
=====================================================

On Windows NT, 2000, and XP, the system stores file names as Unicode
strings.  Traditionally, Python has represented file names as byte
strings, which is inadequate because it renders some file names
inaccessible.

  Python now allows using arbitrary Unicode strings (within the
limitations of the file system) for all functions that expect file
names, most notably the `open()' built-in function. If a Unicode string
is passed to `os.listdir()', Python now returns a list of Unicode
strings.  A new function, `os.getcwdu()', returns the current directory
as a Unicode string.

  Byte strings still work as file names, and on Windows Python will
transparently convert them to Unicode using the `mbcs' encoding.

  Other systems also allow Unicode strings as file names but convert
them to byte strings before passing them to the system, which can cause
a `UnicodeError' to be raised. Applications can test whether arbitrary
Unicode strings are supported as file names by checking
`os.path.supports_unicode_filenames', a Boolean value.

  Under MacOS, `os.listdir()' may now return Unicode filenames.

See also
........

PEP 277(1) - Unicode file name support for Windows NT
     Written by Neil Hodgson; implemented by Neil Hodgson, Martin von
     Löwis, and Mark Hammond.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0277


File: python-whatsnew-3.2.2.info,  Node: PEP 278 Universal Newline Support,  Next: PEP 279 enumerate,  Prev: PEP 277 Unicode file name support for Windows NT,  Up: What's New in Python 2 3

8.6 PEP 278: Universal Newline Support
======================================

The three major operating systems used today are Microsoft Windows,
Apple's Macintosh OS, and the various Unix derivatives.  A minor
irritation of cross- platform work  is that these three platforms all
use different characters to mark the ends of lines in text files.  Unix
uses the linefeed (ASCII character 10), MacOS uses the carriage return
(ASCII character 13), and Windows uses a two-character sequence of a
carriage return plus a newline.

  Python's file objects can now support end of line conventions other
than the one followed by the platform on which Python is running.
Opening a file with the mode `'U'' or `'rU'' will open a file for
reading in universal newline mode.  All three line ending conventions
will be translated to a `'\n'' in the strings returned by the various
file methods such as `read()' and `readline()'.

  Universal newline support is also used when importing modules and
when executing a file with the `execfile()' function.  This means that
Python modules can be shared between all three operating systems
without needing to convert the line-endings.

  This feature can be disabled when compiling Python by specifying the
`--without-universal-newlines' switch when running Python's *configure*
script.

See also
........

PEP 278(1) - Universal Newline Support
     Written and implemented by Jack Jansen.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0278


File: python-whatsnew-3.2.2.info,  Node: PEP 279 enumerate,  Next: PEP 282 The logging Package,  Prev: PEP 278 Universal Newline Support,  Up: What's New in Python 2 3

8.7 PEP 279: enumerate()
========================

A new built-in function, `enumerate()', will make certain loops a bit
clearer.  `enumerate(thing)', where _thing_ is either an iterator or a
sequence, returns a iterator that will return `(0, thing[0])', `(1,
thing[1])', `(2, thing[2])', and so forth.

  A common idiom to change every element of a list looks like this:

    for i in range(len(L)):
        item = L[i]
        # ... compute some result based on item ...
        L[i] = result

This can be rewritten using `enumerate()' as:

    for i, item in enumerate(L):
        # ... compute some result based on item ...
        L[i] = result


See also
........

PEP 279(1) - The enumerate() built-in function
     Written and implemented by Raymond D. Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0279


File: python-whatsnew-3.2.2.info,  Node: PEP 282 The logging Package,  Next: PEP 285 A Boolean Type,  Prev: PEP 279 enumerate,  Up: What's New in Python 2 3

8.8 PEP 282: The logging Package
================================

A standard package for writing logs, `logging', has been added to Python
2.3.  It provides a powerful and flexible mechanism for generating
logging output which can then be filtered and processed in various
ways.  A configuration file written in a standard format can be used to
control the logging behavior of a program.  Python includes handlers
that will write log records to standard error or to a file or socket,
send them to the system log, or even e-mail them to a particular
address; of course, it's also possible to write your own handler
classes.

  The `Logger' class is the primary class. Most application code will
deal with one or more `Logger' objects, each one used by a particular
subsystem of the application. Each `Logger' is identified by a name, and
names are organized into a hierarchy using `.'  as the component
separator.  For example, you might have `Logger' instances named
`server', `server.auth' and `server.network'.  The latter two instances
are below `server' in the hierarchy.  This means that if you turn up
the verbosity for `server' or direct `server' messages to a different
handler, the changes will also apply to records logged to `server.auth'
and `server.network'.  There's also a root `Logger' that's the parent
of all other loggers.

  For simple uses, the `logging' package contains some convenience
functions that always use the root log:

    import logging

    logging.debug('Debugging information')
    logging.info('Informational message')
    logging.warning('Warning:config file %s not found', 'server.conf')
    logging.error('Error occurred')
    logging.critical('Critical error -- shutting down')

This produces the following output:

    WARNING:root:Warning:config file server.conf not found
    ERROR:root:Error occurred
    CRITICAL:root:Critical error -- shutting down

In the default configuration, informational and debugging messages are
suppressed and the output is sent to standard error.  You can enable
the display of informational and debugging messages by calling the
`setLevel()' method on the root logger.

  Notice the `warning()' call's use of string formatting operators; all
of the functions for logging messages take the arguments `(msg, arg1,
arg2, ...)' and log the string resulting from `msg % (arg1, arg2, ...)'.

  There's also an `exception()' function that records the most recent
traceback.  Any of the other functions will also record the traceback
if you specify a true value for the keyword argument _exc_info_.

    def f():
        try:    1/0
        except: logging.exception('Problem recorded')

    f()

This produces the following output:

    ERROR:root:Problem recorded
    Traceback (most recent call last):
      File "t.py", line 6, in f
        1/0
    ZeroDivisionError: integer division or modulo by zero

Slightly more advanced programs will use a logger other than the root
logger.  The `getLogger(name)()' function is used to get a particular
log, creating it if it doesn't exist yet. `getLogger(None)()' returns
the root logger.

    log = logging.getLogger('server')
     ...
    log.info('Listening on port %i', port)
     ...
    log.critical('Disk full')
     ...

Log records are usually propagated up the hierarchy, so a message
logged to `server.auth' is also seen by `server' and `root', but a
`Logger' can prevent this by setting its `propagate' attribute to
`False'.

  There are more classes provided by the `logging' package that can be
customized.  When a `Logger' instance is told to log a message, it
creates a `LogRecord' instance that is sent to any number of different
`Handler' instances.  Loggers and handlers can also have an attached
list of filters, and each filter can cause the `LogRecord' to be
ignored or can modify the record before passing it along.  When they're
finally output, `LogRecord' instances are converted to text by a
`Formatter' class.  All of these classes can be replaced by your own
specially-written classes.

  With all of these features the `logging' package should provide enough
flexibility for even the most complicated applications.  This is only an
incomplete overview of its features, so please see the package's
reference documentation for all of the details.  Reading PEP 282(1)
will also be helpful.

See also
........

PEP 282(2) - A Logging System
     Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0282

  (2) http://www.python.org/dev/peps/pep-0282


File: python-whatsnew-3.2.2.info,  Node: PEP 285 A Boolean Type,  Next: PEP 293 Codec Error Handling Callbacks,  Prev: PEP 282 The logging Package,  Up: What's New in Python 2 3

8.9 PEP 285: A Boolean Type
===========================

A Boolean type was added to Python 2.3.  Two new constants were added
to the `__builtin__' module, `True' and `False'.  (`True' and `False'
constants were added to the built-ins in Python 2.2.1, but the 2.2.1
versions are simply set to integer values of 1 and 0 and aren't a
different type.)

  The type object for this new type is named `bool'; the constructor
for it takes any Python value and converts it to `True' or `False'.

    >>> bool(1)
    True
    >>> bool(0)
    False
    >>> bool([])
    False
    >>> bool( (1,) )
    True

Most of the standard library modules and built-in functions have been
changed to return Booleans.

    >>> obj = []
    >>> hasattr(obj, 'append')
    True
    >>> isinstance(obj, list)
    True
    >>> isinstance(obj, tuple)
    False

Python's Booleans were added with the primary goal of making code
clearer.  For example, if you're reading a function and encounter the
statement `return 1', you might wonder whether the `1' represents a
Boolean truth value, an index, or a coefficient that multiplies some
other quantity.  If the statement is `return True', however, the
meaning of the return value is quite clear.

  Python's Booleans were _not_ added for the sake of strict
type-checking.  A very strict language such as Pascal would also
prevent you performing arithmetic with Booleans, and would require that
the expression in an `if' statement always evaluate to a Boolean
result.  Python is not this strict and never will be, as PEP 285(1)
explicitly says.  This means you can still use any expression in an
`if' statement, even ones that evaluate to a list or tuple or some
random object.  The Boolean type is a subclass of the `int' class so
that arithmetic using a Boolean still works.

    >>> True + 1
    2
    >>> False + 1
    1
    >>> False * 75
    0
    >>> True * 75
    75

To sum up `True' and `False' in a sentence: they're alternative ways to
spell the integer values 1 and 0, with the single difference that
`str()' and `repr()' return the strings `'True'' and `'False'' instead
of `'1'' and `'0''.

See also
........

PEP 285(2) - Adding a bool type
     Written and implemented by GvR.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0285

  (2) http://www.python.org/dev/peps/pep-0285


File: python-whatsnew-3.2.2.info,  Node: PEP 293 Codec Error Handling Callbacks,  Next: PEP 301 Package Index and Metadata for Distutils,  Prev: PEP 285 A Boolean Type,  Up: What's New in Python 2 3

8.10 PEP 293: Codec Error Handling Callbacks
============================================

When encoding a Unicode string into a byte string, unencodable
characters may be encountered.  So far, Python has allowed specifying
the error processing as either "strict" (raising `UnicodeError'),
"ignore" (skipping the character), or "replace" (using a question mark
in the output string), with "strict" being the default behavior. It may
be desirable to specify alternative processing of such errors, such as
inserting an XML character reference or HTML entity reference into the
converted string.

  Python now has a flexible framework to add different processing
strategies.  New error handlers can be added with
`codecs.register_error()', and codecs then can access the error handler
with `codecs.lookup_error()'. An equivalent C API has been added for
codecs written in C. The error handler gets the necessary state
information such as the string being converted, the position in the
string where the error was detected, and the target encoding.  The
handler can then either raise an exception or return a replacement
string.

  Two additional error handlers have been implemented using this
framework: "backslashreplace" uses Python backslash quoting to
represent unencodable characters and "xmlcharrefreplace" emits XML
character references.

See also
........

PEP 293(1) - Codec Error Handling Callbacks
     Written and implemented by Walter Dörwald.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0293


File: python-whatsnew-3.2.2.info,  Node: PEP 301 Package Index and Metadata for Distutils,  Next: PEP 302 New Import Hooks,  Prev: PEP 293 Codec Error Handling Callbacks,  Up: What's New in Python 2 3

8.11 PEP 301: Package Index and Metadata for Distutils
======================================================

Support for the long-requested Python catalog makes its first
appearance in 2.3.

  The heart of the catalog is the new Distutils *register* command.
Running `python setup.py register' will collect the metadata describing
a package, such as its name, version, maintainer, description, &c., and
send it to a central catalog server.  The resulting catalog is
available from <http://www.python.org/pypi>.

  To make the catalog a bit more useful, a new optional _classifiers_
keyword argument has been added to the Distutils `setup()' function.  A
list of Trove(1)-style strings can be supplied to help classify the
software.

  Here's an example `setup.py' with classifiers, written to be
compatible with older versions of the Distutils:

    from distutils import core
    kw = {'name': "Quixote",
          'version': "0.5.1",
          'description': "A highly Pythonic Web application framework",
          # ...
          }

    if (hasattr(core, 'setup_keywords') and
        'classifiers' in core.setup_keywords):
        kw['classifiers'] = \
            ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',
             'Environment :: No Input/Output (Daemon)',
             'Intended Audience :: Developers'],

    core.setup(**kw)

The full list of classifiers can be obtained by running  `python
setup.py register --list-classifiers'.

See also
........

PEP 301(2) - Package Index and Metadata for Distutils
     Written and implemented by Richard Jones.

  ---------- Footnotes ----------

  (1) http://catb.org/~esr/trove/

  (2) http://www.python.org/dev/peps/pep-0301


File: python-whatsnew-3.2.2.info,  Node: PEP 302 New Import Hooks,  Next: PEP 305 Comma-separated Files,  Prev: PEP 301 Package Index and Metadata for Distutils,  Up: What's New in Python 2 3

8.12 PEP 302: New Import Hooks
==============================

While it's been possible to write custom import hooks ever since the
`ihooks' module was introduced in Python 1.3, no one has ever been
really happy with it because writing new import hooks is difficult and
messy.  There have been various proposed alternatives such as the
`imputil' and `iu' modules, but none of them has ever gained much
acceptance, and none of them were easily usable from C code.

  PEP 302(1) borrows ideas from its predecessors, especially from Gordon
McMillan's `iu' module.  Three new items  are added to the `sys' module:

   * `sys.path_hooks' is a list of callable objects; most  often
     they'll be classes.  Each callable takes a string containing a
     path and either returns an importer object that will handle
     imports from this path or raises an `ImportError' exception if it
     can't handle this path.

   * `sys.path_importer_cache' caches importer objects for each path, so
     `sys.path_hooks' will only need to be traversed once for each path.

   * `sys.meta_path' is a list of importer objects that will be
     traversed before `sys.path' is checked.  This list is initially
     empty, but user code can add objects to it.  Additional built-in
     and frozen modules can be imported by an object added to this list.

  Importer objects must have a single method, `find_module(fullname,
path=None)()'.  _fullname_ will be a module or package name, e.g.
`string' or `distutils.core'.  `find_module()' must return a loader
object that has a single method, `load_module(fullname)()', that
creates and returns the corresponding module object.

  Pseudo-code for Python's new import logic, therefore, looks something
like this (simplified a bit; see PEP 302(2) for the full details):

    for mp in sys.meta_path:
        loader = mp(fullname)
        if loader is not None:
            <module> = loader.load_module(fullname)

    for path in sys.path:
        for hook in sys.path_hooks:
            try:
                importer = hook(path)
            except ImportError:
                # ImportError, so try the other path hooks
                pass
            else:
                loader = importer.find_module(fullname)
                <module> = loader.load_module(fullname)

    # Not found!
    raise ImportError


See also
........

PEP 302(3) - New Import Hooks
     Written by Just van Rossum and Paul Moore. Implemented by Just van
     Rossum.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0302

  (2) http://www.python.org/dev/peps/pep-0302

  (3) http://www.python.org/dev/peps/pep-0302


File: python-whatsnew-3.2.2.info,  Node: PEP 305 Comma-separated Files,  Next: PEP 307 Pickle Enhancements,  Prev: PEP 302 New Import Hooks,  Up: What's New in Python 2 3

8.13 PEP 305: Comma-separated Files
===================================

Comma-separated files are a format frequently used for exporting data
from databases and spreadsheets.  Python 2.3 adds a parser for
comma-separated files.

  Comma-separated format is deceptively simple at first glance:

    Costs,150,200,3.95

Read a line and call `line.split(',')': what could be simpler? But toss
in string data that can contain commas, and things get more complicated:

    "Costs",150,200,3.95,"Includes taxes, shipping, and sundry items"

A big ugly regular expression can parse this, but using the new  `csv'
package is much simpler:

    import csv

    input = open('datafile', 'rb')
    reader = csv.reader(input)
    for line in reader:
        print line

The `reader()' function takes a number of different options. The field
separator isn't limited to the comma and can be changed to any
character, and so can the quoting and line-ending characters.

  Different dialects of comma-separated files can be defined and
registered; currently there are two dialects, both used by Microsoft
Excel. A separate `csv.writer' class will generate comma-separated
files from a succession of tuples or lists, quoting strings that
contain the delimiter.

See also
........

PEP 305(1) - CSV File API
     Written and implemented  by Kevin Altis, Dave Cole, Andrew
     McNamara, Skip Montanaro, Cliff Wells.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0305


File: python-whatsnew-3.2.2.info,  Node: PEP 307 Pickle Enhancements,  Next: Extended Slices,  Prev: PEP 305 Comma-separated Files,  Up: What's New in Python 2 3

8.14 PEP 307: Pickle Enhancements
=================================

The `pickle' and `cPickle' modules received some attention during the
2.3 development cycle.  In 2.2, new-style classes could be pickled
without difficulty, but they weren't pickled very compactly; PEP 307(1)
quotes a trivial example where a new-style class results in a pickled
string three times longer than that for a classic class.

  The solution was to invent a new pickle protocol.  The
`pickle.dumps()' function has supported a text-or-binary flag  for a
long time.  In 2.3, this flag is redefined from a Boolean to an
integer: 0 is the old text-mode pickle format, 1 is the old binary
format, and now 2 is a new 2.3-specific format.  A new constant,
`pickle.HIGHEST_PROTOCOL', can be used to select the fanciest protocol
available.

  Unpickling is no longer considered a safe operation.  2.2's `pickle'
provided hooks for trying to prevent unsafe classes from being unpickled
(specifically, a `__safe_for_unpickling__' attribute), but none of this
code was ever audited and therefore it's all been ripped out in 2.3.
You should not unpickle untrusted data in any version of Python.

  To reduce the pickling overhead for new-style classes, a new
interface for customizing pickling was added using three special
methods: `__getstate__()', `__setstate__()', and `__getnewargs__()'.
Consult PEP 307(2) for the full semantics  of these methods.

  As a way to compress pickles yet further, it's now possible to use
integer codes instead of long strings to identify pickled classes. The
Python Software Foundation will maintain a list of standardized codes;
there's also a range of codes for private use.  Currently no codes have
been specified.

See also
........

PEP 307(3) - Extensions to the pickle protocol
     Written and implemented  by Guido van Rossum and Tim Peters.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0307

  (2) http://www.python.org/dev/peps/pep-0307

  (3) http://www.python.org/dev/peps/pep-0307


File: python-whatsnew-3.2.2.info,  Node: Extended Slices,  Next: Other Language Changes<7>,  Prev: PEP 307 Pickle Enhancements,  Up: What's New in Python 2 3

8.15 Extended Slices
====================

Ever since Python 1.4, the slicing syntax has supported an optional
third "step" or "stride" argument.  For example, these are all legal
Python syntax: `L[1:10:2]', `L[:-1:1]', `L[::-1]'.  This was added to
Python at the request of the developers of Numerical Python, which uses
the third argument extensively.  However, Python's built-in list,
tuple, and string sequence types have never supported this feature,
raising a `TypeError' if you tried it.  Michael Hudson contributed a
patch to fix this shortcoming.

  For example, you can now easily extract the elements of a list that
have even indexes:

    >>> L = range(10)
    >>> L[::2]
    [0, 2, 4, 6, 8]

Negative values also work to make a copy of the same list in reverse
order:

    >>> L[::-1]
    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

This also works for tuples, arrays, and strings:

    >>> s='abcd'
    >>> s[::2]
    'ac'
    >>> s[::-1]
    'dcba'

If you have a mutable sequence such as a list or an array you can
assign to or delete an extended slice, but there are some differences
between assignment to extended and regular slices.  Assignment to a
regular slice can be used to change the length of the sequence:

    >>> a = range(3)
    >>> a
    [0, 1, 2]
    >>> a[1:3] = [4, 5, 6]
    >>> a
    [0, 4, 5, 6]

Extended slices aren't this flexible.  When assigning to an extended
slice, the list on the right hand side of the statement must contain
the same number of items as the slice it is replacing:

    >>> a = range(4)
    >>> a
    [0, 1, 2, 3]
    >>> a[::2]
    [0, 2]
    >>> a[::2] = [0, -1]
    >>> a
    [0, 1, -1, 3]
    >>> a[::2] = [0,1,2]
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: attempt to assign sequence of size 3 to extended slice of size 2

Deletion is more straightforward:

    >>> a = range(4)
    >>> a
    [0, 1, 2, 3]
    >>> a[::2]
    [0, 2]
    >>> del a[::2]
    >>> a
    [1, 3]

One can also now pass slice objects to the `__getitem__()' methods of
the built-in sequences:

    >>> range(10).__getitem__(slice(0, 5, 2))
    [0, 2, 4]

Or use slice objects directly in subscripts:

    >>> range(10)[slice(0, 5, 2)]
    [0, 2, 4]

To simplify implementing sequences that support extended slicing, slice
objects now have a method `indices(length)()' which, given the length
of a sequence, returns a `(start, stop, step)' tuple that can be passed
directly to `range()'. `indices()' handles omitted and out-of-bounds
indices in a manner consistent with regular slices (and this innocuous
phrase hides a welter of confusing details!).  The method is intended
to be used like this:

    class FakeSeq:
        ...
        def calc_item(self, i):
            ...
        def __getitem__(self, item):
            if isinstance(item, slice):
                indices = item.indices(len(self))
                return FakeSeq([self.calc_item(i) for i in range(*indices)])
            else:
                return self.calc_item(i)

From this example you can also see that the built-in `slice' object is
now the type object for the slice type, and is no longer a function.
This is consistent with Python 2.2, where `int', `str', etc., underwent
the same change.


File: python-whatsnew-3.2.2.info,  Node: Other Language Changes<7>,  Next: New Improved and Deprecated Modules<4>,  Prev: Extended Slices,  Up: What's New in Python 2 3

8.16 Other Language Changes
===========================

Here are all of the changes that Python 2.3 makes to the core Python
language.

   * The `yield' statement is now always a keyword, as described in
     section *note PEP 255; Simple Generators: 118. of this document.

   * A new built-in function `enumerate()' was added, as described in
     section *note PEP 279; enumerate(): 121. of this document.

   * Two new constants, `True' and `False' were added along with the
     built-in `bool' type, as described in section *note PEP 285; A
     Boolean Type: 124. of this document.

   * The `int()' type constructor will now return a long integer
     instead of raising an `OverflowError' when a string or
     floating-point number is too large to fit into an integer.  This
     can lead to the paradoxical result that
     `isinstance(int(expression), int)' is false, but that seems
     unlikely to cause problems in practice.

   * Built-in types now support the extended slicing syntax, as
     described in section *note Extended Slices: 12d. of this document.

   * A new built-in function, `sum(iterable, start=0)()',  adds up the
     numeric items in the iterable object and returns their sum.
     `sum()' only accepts numbers, meaning that you can't use it to
     concatenate a bunch of strings.  (Contributed by Alex Martelli.)

   * `list.insert(pos, value)' used to  insert _value_ at the front of
     the list when _pos_ was negative.  The behaviour has now been
     changed to be consistent with slice indexing, so when _pos_ is -1
     the value will be inserted before the last element, and so forth.

   * `list.index(value)', which searches for _value_  within the list
     and returns its index, now takes optional  _start_ and _stop_
     arguments to limit the search to  only part of the list.

   * Dictionaries have a new method, `pop(key[, *default*])()', that
     returns the value corresponding to _key_ and removes that
     key/value pair from the dictionary.  If the requested key isn't
     present in the dictionary, _default_ is returned if it's specified
     and `KeyError' raised if it isn't.

         >>> d = {1:2}
         >>> d
         {1: 2}
         >>> d.pop(4)
         Traceback (most recent call last):
           File "stdin", line 1, in ?
         KeyError: 4
         >>> d.pop(1)
         2
         >>> d.pop(1)
         Traceback (most recent call last):
           File "stdin", line 1, in ?
         KeyError: 'pop(): dictionary is empty'
         >>> d
         {}
         >>>

     There's also a new class method,  `dict.fromkeys(iterable,
     value)()', that creates a dictionary with keys taken from the
     supplied iterator _iterable_ and all values set to _value_,
     defaulting to `None'.

     (Patches contributed by Raymond Hettinger.)

     Also, the `dict()' constructor now accepts keyword arguments to
     simplify creating small dictionaries:

         >>> dict(red=1, blue=2, green=3, black=4)
         {'blue': 2, 'black': 4, 'green': 3, 'red': 1}

     (Contributed by Just van Rossum.)

   * The `assert' statement no longer checks the `__debug__' flag, so
     you can no longer disable assertions by assigning to `__debug__'.
     Running Python with the `-O' switch will still generate code that
     doesn't execute any assertions.

   * Most type objects are now callable, so you can use them to create
     new objects such as functions, classes, and modules.  (This means
     that the `new' module can be deprecated in a future Python
     version, because you can now use the type objects available in the
     `types' module.) For example, you can create a new module object
     with the following code:

         >>> import types
         >>> m = types.ModuleType('abc','docstring')
         >>> m
         <module 'abc' (built-in)>
         >>> m.__doc__
         'docstring'


   * A new warning, `PendingDeprecationWarning' was added to indicate
     features which are in the process of being deprecated.  The
     warning will _not_ be printed by default.  To check for use of
     features that will be deprecated in the future, supply
     `-Walways::PendingDeprecationWarning::' on the command line or use
     `warnings.filterwarnings()'.

   * The process of deprecating string-based exceptions, as in `raise
     "Error occurred"', has begun.  Raising a string will now trigger
     `PendingDeprecationWarning'.

   * Using `None' as a variable name will now result in a
     `SyntaxWarning' warning.  In a future version of Python, `None'
     may finally become a keyword.

   * The `xreadlines()' method of file objects, introduced in Python
     2.1, is no longer necessary because files now behave as their own
     iterator.  `xreadlines()' was originally introduced as a faster
     way to loop over all the lines in a file, but now you can simply
     write `for line in file_obj'.  File objects also have a new
     read-only `encoding' attribute that gives the encoding used by the
     file; Unicode strings written to the file will be automatically
     converted to bytes using the given encoding.

   * The method resolution order used by new-style classes has changed,
     though you'll only notice the difference if you have a really
     complicated inheritance hierarchy.  Classic classes are unaffected
     by this change.  Python 2.2 originally used a topological sort of
     a class's ancestors, but 2.3 now uses the C3 algorithm as
     described in the paper "A Monotonic Superclass Linearization for
     Dylan"(1). To understand the motivation for this change,  read
     Michele Simionato's article "Python 2.3 Method Resolution
     Order"(2), or read the thread on python-dev starting with the
     message at
     <http://mail.python.org/pipermail/python-dev/2002-October/029035.html>.
     Samuele Pedroni first pointed out the problem and also implemented
     the fix by coding the C3 algorithm.

   * Python runs multithreaded programs by switching between threads
     after executing N bytecodes.  The default value for N has been
     increased from 10 to 100 bytecodes, speeding up single-threaded
     applications by reducing the switching overhead.  Some
     multithreaded applications may suffer slower response time, but
     that's easily fixed by setting the limit back to a lower number
     using `sys.setcheckinterval(N)()'. The limit can be retrieved with
     the new `sys.getcheckinterval()' function.

   * One minor but far-reaching change is that the names of extension
     types defined by the modules included with Python now contain the
     module and a `'.'' in front of the type name.  For example, in
     Python 2.2, if you created a socket and printed its `__class__',
     you'd get this output:

         >>> s = socket.socket()
         >>> s.__class__
         <type 'socket'>

     In 2.3, you get this:

         >>> s.__class__
         <type '_socket.socket'>


   * One of the noted incompatibilities between old- and new-style
     classes has been removed: you can now assign to the `__name__' and
     `__bases__' attributes of new-style classes.  There are some
     restrictions on what can be assigned to `__bases__' along the
     lines of those relating to assigning to an instance's `__class__'
     attribute.

* Menu:

* String Changes::
* Optimizations: Optimizations<7>.

  ---------- Footnotes ----------

  (1) http://www.webcom.com/haahr/dylan/linearization-oopsla96.html

  (2) http://www.python.org/2.3/mro.html


File: python-whatsnew-3.2.2.info,  Node: String Changes,  Next: Optimizations<7>,  Up: Other Language Changes<7>

8.16.1 String Changes
---------------------

   * The `in' operator now works differently for strings. Previously,
     when evaluating `X in Y' where _X_ and _Y_ are strings, _X_ could
     only be a single character. That's now changed; _X_ can be a
     string of any length, and `X in Y' will return `True' if _X_ is a
     substring of _Y_.  If _X_ is the empty string, the result is
     always `True'.

         >>> 'ab' in 'abcd'
         True
         >>> 'ad' in 'abcd'
         False
         >>> '' in 'abcd'
         True

     Note that this doesn't tell you where the substring starts; if you
     need that information, use the `find()' string method.

   * The `strip()', `lstrip()', and `rstrip()' string methods now have
     an optional argument for specifying the characters to strip.  The
     default is still to remove all whitespace characters:

         >>> '   abc '.strip()
         'abc'
         >>> '><><abc<><><>'.strip('<>')
         'abc'
         >>> '><><abc<><><>\n'.strip('<>')
         'abc<><><>\n'
         >>> u'\u4000\u4001abc\u4000'.strip(u'\u4000')
         u'\u4001abc'
         >>>

     (Suggested by Simon Brunning and implemented by Walter Dörwald.)

   * The `startswith()' and `endswith()' string methods now accept
     negative numbers for the _start_ and _end_ parameters.

   * Another new string method is `zfill()', originally a function in
     the `string' module.  `zfill()' pads a numeric string with zeros
     on the left until it's the specified width. Note that the `%'
     operator is still more flexible and powerful than `zfill()'.

         >>> '45'.zfill(4)
         '0045'
         >>> '12345'.zfill(4)
         '12345'
         >>> 'goofy'.zfill(6)
         '0goofy'

     (Contributed by Walter Dörwald.)

   * A new type object, `basestring', has been added. Both 8-bit
     strings and Unicode strings inherit from this type, so
     `isinstance(obj, basestring)' will return `True' for either kind
     of string.  It's a completely abstract type, so you can't create
     `basestring' instances.

   * Interned strings are no longer immortal and will now be
     garbage-collected in the usual way when the only reference to them
     is from the internal dictionary of interned strings.  (Implemented
     by Oren Tirosh.)


File: python-whatsnew-3.2.2.info,  Node: Optimizations<7>,  Prev: String Changes,  Up: Other Language Changes<7>

8.16.2 Optimizations
--------------------

   * The creation of new-style class instances has been made much
     faster; they're now faster than classic classes!

   * The `sort()' method of list objects has been extensively rewritten
     by Tim Peters, and the implementation is significantly faster.

   * Multiplication of large long integers is now much faster thanks to
     an implementation of Karatsuba multiplication, an algorithm that
     scales better than the O(n*n) required for the grade-school
     multiplication algorithm.  (Original patch by Christopher A.
     Craig, and significantly reworked by Tim Peters.)

   * The `SET_LINENO' opcode is now gone.  This may provide a small
     speed increase, depending on your compiler's idiosyncrasies. See
     section *note Other Changes and Fixes: 132. for a longer
     explanation. (Removed by Michael Hudson.)

   * `xrange()' objects now have their own iterator, making `for i in
     xrange(n)' slightly faster than `for i in range(n)'.  (Patch by
     Raymond Hettinger.)

   * A number of small rearrangements have been made in various
     hotspots to improve performance, such as inlining a function or
     removing some code.  (Implemented mostly by GvR, but lots of
     people have contributed single changes.)

  The net result of the 2.3 optimizations is that Python 2.3 runs the
pystone benchmark around 25% faster than Python 2.2.


File: python-whatsnew-3.2.2.info,  Node: New Improved and Deprecated Modules<4>,  Next: Pymalloc A Specialized Object Allocator,  Prev: Other Language Changes<7>,  Up: What's New in Python 2 3

8.17 New, Improved, and Deprecated Modules
==========================================

As usual, Python's standard library received a number of enhancements
and bug fixes.  Here's a partial list of the most notable changes,
sorted alphabetically by module name. Consult the `Misc/NEWS' file in
the source tree for a more complete list of changes, or look through
the CVS logs for all the details.

   * The `array' module now supports arrays of Unicode characters using
     the `'u'' format character.  Arrays also now support using the
     `+=' assignment operator to add another array's contents, and the
     `*=' assignment operator to repeat an array. (Contributed by Jason
     Orendorff.)

   * The `bsddb' module has been replaced by version 4.1.6 of the
     PyBSDDB(1) package, providing a more complete interface to the
     transactional features of the BerkeleyDB library.

     The old version of the module has been renamed to  `bsddb185' and
     is no longer built automatically; you'll  have to edit
     `Modules/Setup' to enable it.  Note that the new `bsddb' package
     is intended to be compatible with the  old module, so be sure to
     file bugs if you discover any incompatibilities.  When upgrading
     to Python 2.3, if the new interpreter is compiled with a new
     version of  the underlying BerkeleyDB library, you will almost
     certainly have to convert your database files to the new version.
     You can do this fairly easily with the new scripts `db2pickle.py'
     and `pickle2db.py' which you will find in the distribution's
     `Tools/scripts' directory.  If you've already been using the
     PyBSDDB package and importing it as `bsddb3', you will have to
     change your `import' statements to import it as `bsddb'.

   * The new `bz2' module is an interface to the bz2 data compression
     library.  bz2-compressed data is usually smaller than
     corresponding `zlib'-compressed data. (Contributed by Gustavo
     Niemeyer.)

   * A set of standard date/time types has been added in the new
     `datetime' module.  See the following section for more details.

   * The Distutils `Extension' class now supports an extra constructor
     argument named _depends_ for listing additional source files that
     an extension depends on.  This lets Distutils recompile the module
     if any of the dependency files are modified.  For example, if
     `sampmodule.c' includes the header file `sample.h', you would
     create the `Extension' object like this:

         ext = Extension("samp",
                         sources=["sampmodule.c"],
                         depends=["sample.h"])

     Modifying `sample.h' would then cause the module to be recompiled.
     (Contributed by Jeremy Hylton.)

   * Other minor changes to Distutils: it now checks for the `CC', `CFLAGS', `CPP', `LDFLAGS',
     and `CPPFLAGS' environment variables, using them to override the
     settings in Python's configuration (contributed by Robert Weber).

   * Previously the `doctest' module would only search the docstrings of
     public methods and functions for test cases, but it now also
     examines private ones as well.  The `DocTestSuite(()' function
     creates a `unittest.TestSuite' object from a set of `doctest'
     tests.

   * The new `gc.get_referents(object)()' function returns a list of
     all the objects referenced by _object_.

   * The `getopt' module gained a new function, `gnu_getopt()', that
     supports the same arguments as the existing `getopt()' function
     but uses GNU-style scanning mode. The existing `getopt()' stops
     processing options as soon as a non-option argument is
     encountered, but in GNU-style mode processing continues, meaning
     that options and arguments can be mixed.  For example:

         >>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v')
         ([('-f', 'filename')], ['output', '-v'])
         >>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v')
         ([('-f', 'filename'), ('-v', '')], ['output'])

     (Contributed by Peter Åstrand.)

   * The `grp', `pwd', and `resource' modules now return enhanced
     tuples:

         >>> import grp
         >>> g = grp.getgrnam('amk')
         >>> g.gr_name, g.gr_gid
         ('amk', 500)


   * The `gzip' module can now handle files exceeding 2 GiB.

   * The new `heapq' module contains an implementation of a heap queue
     algorithm.  A heap is an array-like data structure that keeps
     items in a partially sorted order such that, for every index _k_,
     `heap[k] <= heap[2*k+1]' and `heap[k] <= heap[2*k+2]'.  This makes
     it quick to remove the smallest item, and inserting a new item
     while maintaining the heap property is O(lg n).  (See
     <http://www.nist.gov/dads/HTML/priorityque.html> for more
     information about the priority queue data structure.)

     The `heapq' module provides `heappush()' and `heappop()' functions
     for adding and removing items while maintaining the heap property
     on top of some other mutable Python sequence type.  Here's an
     example that uses a Python list:

         >>> import heapq
         >>> heap = []
         >>> for item in [3, 7, 5, 11, 1]:
         ...    heapq.heappush(heap, item)
         ...
         >>> heap
         [1, 3, 5, 11, 7]
         >>> heapq.heappop(heap)
         1
         >>> heapq.heappop(heap)
         3
         >>> heap
         [5, 7, 11]

     (Contributed by Kevin O'Connor.)

   * The IDLE integrated development environment has been updated using
     the code from the IDLEfork project (<http://idlefork.sf.net>).
     The most notable feature is that the code being developed is now
     executed in a subprocess, meaning that there's no longer any need
     for manual `reload()' operations. IDLE's core code has been
     incorporated into the standard library as the `idlelib' package.

   * The `imaplib' module now supports IMAP over SSL. (Contributed by
     Piers Lauder and Tino Lange.)

   * The `itertools' contains a number of useful functions for use with
     iterators, inspired by various functions provided by the ML and
     Haskell languages.  For example, `itertools.ifilter(predicate,
     iterator)' returns all elements in the iterator for which the
     function `predicate()' returns `True', and `itertools.repeat(obj,
     N)' returns `obj' _N_ times.  There are a number of other
     functions in the module; see the package's reference documentation
     for details.  (Contributed by Raymond Hettinger.)

   * Two new functions in the `math' module, `degrees(rads)()' and
     `radians(degs)()', convert between radians and degrees.  Other
     functions in the `math' module such as `math.sin()' and
     `math.cos()' have always required input values measured in
     radians.  Also, an optional _base_ argument was added to
     `math.log()' to make it easier to compute logarithms for bases
     other than `e' and `10'.  (Contributed by Raymond Hettinger.)

   * Several new POSIX functions (`getpgid()', `killpg()', `lchown()',
     `loadavg()', `major()', `makedev()', `minor()', and `mknod()')
     were added to the `posix' module that underlies the `os' module.
     (Contributed by Gustavo Niemeyer, Geert Jansen, and Denis S.
     Otkidach.)

   * In the `os' module, the `*stat()' family of functions can now
     report fractions of a second in a timestamp.  Such time stamps are
     represented as floats, similar to the value returned by
     `time.time()'.

     During testing, it was found that some applications will break if
     time stamps are floats.  For compatibility, when using the tuple
     interface of the `stat_result' time stamps will be represented as
     integers. When using named fields (a feature first introduced in
     Python 2.2), time stamps are still represented as integers, unless
     `os.stat_float_times()' is invoked to enable float return values:

         >>> os.stat("/tmp").st_mtime
         1034791200
         >>> os.stat_float_times(True)
         >>> os.stat("/tmp").st_mtime
         1034791200.6335014

     In Python 2.4, the default will change to always returning floats.

     Application developers should enable this feature only if all
     their libraries work properly when confronted with floating point
     time stamps, or if they use the tuple API. If used, the feature
     should be activated on an application level instead of trying to
     enable it on a per-use basis.

   * The `optparse' module contains a new parser for command-line
     arguments that can convert option values to a particular Python
     type  and will automatically generate a usage message.  See the
     following section for  more details.

   * The old and never-documented `linuxaudiodev' module has been
     deprecated, and a new version named `ossaudiodev' has been added.
     The module was renamed because the OSS sound drivers can be used
     on platforms other than Linux, and the interface has also been
     tidied and brought up to date in various ways.  (Contributed by
     Greg Ward and Nicholas FitzRoy-Dale.)

   * The new `platform' module contains a number of functions that try
     to determine various properties of the platform you're running on.
     There are functions for getting the architecture, CPU type, the
     Windows OS version, and even the Linux distribution version.
     (Contributed by Marc-André Lemburg.)

   * The parser objects provided by the `pyexpat' module can now
     optionally buffer character data, resulting in fewer calls to your
     character data handler and therefore faster performance.  Setting
     the parser object's `buffer_text' attribute to `True' will enable
     buffering.

   * The `sample(population, k)()' function was added to the `random'
     module.  _population_ is a sequence or `xrange' object containing
     the elements of a population, and `sample()' chooses _k_ elements
     from the population without replacing chosen elements.  _k_ can be
     any value up to `len(population)'. For example:

         >>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn']
         >>> random.sample(days, 3)      # Choose 3 elements
         ['St', 'Sn', 'Th']
         >>> random.sample(days, 7)      # Choose 7 elements
         ['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']
         >>> random.sample(days, 7)      # Choose 7 again
         ['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']
         >>> random.sample(days, 8)      # Can't choose eight
         Traceback (most recent call last):
           File "<stdin>", line 1, in ?
           File "random.py", line 414, in sample
               raise ValueError, "sample larger than population"
         ValueError: sample larger than population
         >>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under 10000
         [3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]

     The `random' module now uses a new algorithm, the Mersenne Twister,
     implemented in C.  It's faster and more extensively studied than
     the previous algorithm.

     (All changes contributed by Raymond Hettinger.)

   * The `readline' module also gained a number of new functions:
     `get_history_item()', `get_current_history_length()', and
     `redisplay()'.

   * The `rexec' and `Bastion' modules have been declared dead, and
     attempts to import them will fail with a `RuntimeError'.
     New-style classes provide new ways to break out of the restricted
     execution environment provided by `rexec', and no one has interest
     in fixing them or time to do so.  If you have applications using
     `rexec', rewrite them to use something else.

     (Sticking with Python 2.2 or 2.1 will not make your applications
     any safer because there are known bugs in the `rexec' module in
     those versions.  To repeat: if you're using `rexec', stop using it
     immediately.)

   * The `rotor' module has been deprecated because the  algorithm it
     uses for encryption is not believed to be secure.  If you need
     encryption, use one of the several AES Python modules that are
     available separately.

   * The `shutil' module gained a `move(src, dest)()' function that
     recursively moves a file or directory to a new location.

   * Support for more advanced POSIX signal handling was added to the
     `signal' but then removed again as it proved impossible to make it
     work reliably across platforms.

   * The `socket' module now supports timeouts.  You can call the
     `settimeout(t)()' method on a socket object to set a timeout of
     _t_ seconds.  Subsequent socket operations that take longer than
     _t_ seconds to complete will abort and raise a `socket.timeout'
     exception.

     The original timeout implementation was by Tim O'Malley.  Michael
     Gilfix integrated it into the Python `socket' module and
     shepherded it through a lengthy review.  After the code was
     checked in, Guido van Rossum rewrote parts of it.  (This is a good
     example of a collaborative development process in action.)

   * On Windows, the `socket' module now ships with Secure  Sockets
     Layer (SSL) support.

   * The value of the C `PYTHON_API_VERSION' macro is now exposed at the
     Python level as `sys.api_version'.  The current exception can be
     cleared by calling the new `sys.exc_clear()' function.

   * The new `tarfile' module  allows reading from and writing to
     *tar*-format archive files. (Contributed by Lars Gustäbel.)

   * The new `textwrap' module contains functions for wrapping strings
     containing paragraphs of text.  The `wrap(text, width)()' function
     takes a string and returns a list containing the text split into
     lines of no more than the chosen width.  The `fill(text, width)()'
     function returns a single string, reformatted to fit into lines no
     longer than the chosen width. (As you can guess, `fill()' is built
     on top of `wrap()'.  For example:

         >>> import textwrap
         >>> paragraph = "Not a whit, we defy augury: ... more text ..."
         >>> textwrap.wrap(paragraph, 60)
         ["Not a whit, we defy augury: there's a special providence in",
          "the fall of a sparrow. If it be now, 'tis not to come; if it",
          ...]
         >>> print textwrap.fill(paragraph, 35)
         Not a whit, we defy augury: there's
         a special providence in the fall of
         a sparrow. If it be now, 'tis not
         to come; if it be not to come, it
         will be now; if it be not now, yet
         it will come: the readiness is all.
         >>>

     The module also contains a `TextWrapper' class that actually
     implements the text wrapping strategy.   Both the `TextWrapper'
     class and the `wrap()' and `fill()' functions support a number of
     additional keyword arguments for fine-tuning the formatting;
     consult the module's documentation for details. (Contributed by
     Greg Ward.)

   * The `thread' and `threading' modules now have companion modules,
     `dummy_thread' and `dummy_threading', that provide a do-nothing
     implementation of the `thread' module's interface for platforms
     where threads are not supported.  The intention is to simplify
     thread-aware modules (ones that _don't_ rely on threads to run) by
     putting the following code at the top:

         try:
             import threading as _threading
         except ImportError:
             import dummy_threading as _threading

     In this example, `_threading' is used as the module name to make
     it clear that the module being used is not necessarily the actual
     `threading' module. Code can call functions and use classes in
     `_threading' whether or not threads are supported, avoiding an
     `if' statement and making the code slightly clearer.  This module
     will not magically make multithreaded code run without threads;
     code that waits for another thread to return or to do something
     will simply hang forever.

   * The `time' module's `strptime()' function has long been an
     annoyance because it uses the platform C library's `strptime()'
     implementation, and different platforms sometimes have odd bugs.
     Brett Cannon contributed a portable implementation that's written
     in pure Python and should behave identically on all platforms.

   * The new `timeit' module helps measure how long snippets of Python
     code take to execute.  The `timeit.py' file can be run directly
     from the command line, or the module's `Timer' class can be
     imported and used directly.  Here's a short example that figures
     out whether it's faster to convert an 8-bit string to Unicode by
     appending an empty Unicode string to it or by using the
     `unicode()' function:

         import timeit

         timer1 = timeit.Timer('unicode("abc")')
         timer2 = timeit.Timer('"abc" + u""')

         # Run three trials
         print timer1.repeat(repeat=3, number=100000)
         print timer2.repeat(repeat=3, number=100000)

         # On my laptop this outputs:
         # [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]
         # [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]


   * The `Tix' module has received various bug fixes and updates for the
     current version of the Tix package.

   * The `Tkinter' module now works with a thread-enabled  version of
     Tcl.  Tcl's threading model requires that widgets only be accessed
     from the thread in which they're created; accesses from another
     thread can cause Tcl to panic.  For certain Tcl interfaces,
     `Tkinter' will now automatically avoid this  when a widget is
     accessed from a different thread by marshalling a command, passing
     it to the correct thread, and waiting for the results.  Other
     interfaces can't be handled automatically but `Tkinter' will now
     raise an exception on such an access so that you can at least find
     out about the problem.  See
     <http://mail.python.org/pipermail/python-dev/2002-December/031107.html>
     for a more detailed explanation of this change.  (Implemented by
     Martin von Löwis.)

   * Calling Tcl methods through `_tkinter' no longer  returns only
     strings.  Instead, if Tcl returns other objects those objects are
     converted to their Python equivalent, if one exists, or wrapped
     with a `_tkinter.Tcl_Obj' object if no Python equivalent exists.
     This behavior can be controlled through the `wantobjects()' method
     of `tkapp' objects.

     When using `_tkinter' through the `Tkinter' module (as most Tkinter
     applications will), this feature is always activated. It should
     not cause compatibility problems, since Tkinter would always
     convert string results to Python types where possible.

     If any incompatibilities are found, the old behavior can be
     restored by setting the `wantobjects' variable in the `Tkinter'
     module to false before creating the first `tkapp' object.

         import Tkinter
         Tkinter.wantobjects = 0

     Any breakage caused by this change should be reported as a bug.

   * The `UserDict' module has a new `DictMixin' class which defines
     all dictionary methods for classes that already have a minimum
     mapping interface.  This greatly simplifies writing classes that
     need to be substitutable for dictionaries, such as the classes in
     the `shelve' module.

     Adding the mix-in as a superclass provides the full dictionary
     interface whenever the class defines `__getitem__()',
     `__setitem__()', `__delitem__()', and `keys()'. For example:

         >>> import UserDict
         >>> class SeqDict(UserDict.DictMixin):
         ...     """Dictionary lookalike implemented with lists."""
         ...     def __init__(self):
         ...         self.keylist = []
         ...         self.valuelist = []
         ...     def __getitem__(self, key):
         ...         try:
         ...             i = self.keylist.index(key)
         ...         except ValueError:
         ...             raise KeyError
         ...         return self.valuelist[i]
         ...     def __setitem__(self, key, value):
         ...         try:
         ...             i = self.keylist.index(key)
         ...             self.valuelist[i] = value
         ...         except ValueError:
         ...             self.keylist.append(key)
         ...             self.valuelist.append(value)
         ...     def __delitem__(self, key):
         ...         try:
         ...             i = self.keylist.index(key)
         ...         except ValueError:
         ...             raise KeyError
         ...         self.keylist.pop(i)
         ...         self.valuelist.pop(i)
         ...     def keys(self):
         ...         return list(self.keylist)
         ...
         >>> s = SeqDict()
         >>> dir(s)      # See that other dictionary methods are implemented
         ['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',
          '__init__', '__iter__', '__len__', '__module__', '__repr__',
          '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',
          'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',
          'setdefault', 'update', 'valuelist', 'values']

     (Contributed by Raymond Hettinger.)

   * The DOM implementation in `xml.dom.minidom' can now generate XML
     output in a particular encoding by providing an optional encoding
     argument to the `toxml()' and `toprettyxml()' methods of DOM nodes.

   * The `xmlrpclib' module now supports an XML-RPC extension for
     handling nil data values such as Python's `None'.  Nil values are
     always supported on unmarshalling an XML-RPC response.  To
     generate requests containing `None', you must supply a true value
     for the _allow_none_ parameter when creating a `Marshaller'
     instance.

   * The new `DocXMLRPCServer' module allows writing self-documenting
     XML-RPC servers. Run it in demo mode (as a program) to see it in
     action.   Pointing the Web browser to the RPC server produces
     pydoc-style documentation; pointing xmlrpclib to the server allows
     invoking the actual methods. (Contributed by Brian Quinlan.)

   * Support for internationalized domain names (RFCs 3454, 3490, 3491,
     and 3492) has been added. The "idna" encoding can be used to
     convert between a Unicode domain name and the ASCII-compatible
     encoding (ACE) of that name.

         >{}>{}> u"www.Alliancefrançaise.nu".encode("idna")
         'www.xn--alliancefranaise-npb.nu'

     The `socket' module has also been extended to transparently convert
     Unicode hostnames to the ACE version before passing them to the C
     library.  Modules that deal with hostnames such as `httplib' and
     `ftplib') also support Unicode host names; `httplib' also sends
     HTTP `Host' headers using the ACE version of the domain name.
     `urllib' supports Unicode URLs with non-ASCII host names as long
     as the `path' part of the URL is ASCII only.

     To implement this change, the `stringprep' module, the
     `mkstringprep' tool and the `punycode' encoding have been added.

* Menu:

* Date/Time Type::
* The optparse Module::

  ---------- Footnotes ----------

  (1) http://pybsddb.sourceforge.net


File: python-whatsnew-3.2.2.info,  Node: Date/Time Type,  Next: The optparse Module,  Up: New Improved and Deprecated Modules<4>

8.17.1 Date/Time Type
---------------------

Date and time types suitable for expressing timestamps were added as the
`datetime' module.  The types don't support different calendars or many
fancy features, and just stick to the basics of representing time.

  The three primary types are: `date', representing a day, month, and
year; `time', consisting of hour, minute, and second; and `datetime',
which contains all the attributes of both `date' and `time'.  There's
also a `timedelta' class representing differences between two points in
time, and time zone logic is implemented by classes inheriting from the
abstract `tzinfo' class.

  You can create instances of `date' and `time' by either supplying
keyword arguments to the appropriate constructor, e.g.
`datetime.date(year=1972, month=10, day=15)', or by using one of a
number of class methods.  For example, the `date.today()' class method
returns the current local date.

  Once created, instances of the date/time classes are all immutable.
There are a number of methods for producing formatted strings from
objects:

    >>> import datetime
    >>> now = datetime.datetime.now()
    >>> now.isoformat()
    '2002-12-30T21:27:03.994956'
    >>> now.ctime()  # Only available on date, datetime
    'Mon Dec 30 21:27:03 2002'
    >>> now.strftime('%Y %d %b')
    '2002 30 Dec'

The `replace()' method allows modifying one or more fields  of a `date'
or `datetime' instance, returning a new instance:

    >>> d = datetime.datetime.now()
    >>> d
    datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)
    >>> d.replace(year=2001, hour = 12)
    datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)
    >>>

Instances can be compared, hashed, and converted to strings (the result
is the same as that of `isoformat()').  `date' and `datetime' instances
can be subtracted from each other, and added to `timedelta' instances.
The largest missing feature is that there's no standard library support
for parsing strings and getting back a `date' or `datetime'.

  For more information, refer to the module's reference documentation.
(Contributed by Tim Peters.)


File: python-whatsnew-3.2.2.info,  Node: The optparse Module,  Prev: Date/Time Type,  Up: New Improved and Deprecated Modules<4>

8.17.2 The optparse Module
--------------------------

The `getopt' module provides simple parsing of command-line arguments.
The new `optparse' module (originally named Optik) provides more
elaborate command-line parsing that follows the Unix conventions,
automatically creates the output for `--help', and can perform
different actions for different options.

  You start by creating an instance of `OptionParser' and telling it
what your program's options are.

    import sys
    from optparse import OptionParser

    op = OptionParser()
    op.add_option('-i', '--input',
                  action='store', type='string', dest='input',
                  help='set input filename')
    op.add_option('-l', '--length',
                  action='store', type='int', dest='length',
                  help='set maximum length of output')

Parsing a command line is then done by calling the `parse_args()'
method.

    options, args = op.parse_args(sys.argv[1:])
    print options
    print args

This returns an object containing all of the option values, and a list
of strings containing the remaining arguments.

  Invoking the script with the various arguments now works as you'd
expect it to.  Note that the length argument is automatically converted
to an integer.

    $ ./python opt.py -i data arg1
    <Values at 0x400cad4c: {'input': 'data', 'length': None}>
    ['arg1']
    $ ./python opt.py --input=data --length=4
    <Values at 0x400cad2c: {'input': 'data', 'length': 4}>
    []
    $

The help message is automatically generated for you:

    $ ./python opt.py --help
    usage: opt.py [options]

    options:
      -h, --help            show this help message and exit
      -iINPUT, --input=INPUT
                            set input filename
      -lLENGTH, --length=LENGTH
                            set maximum length of output
    $

See the module's documentation for more details.

  Optik was written by Greg Ward, with suggestions from the readers of
the Getopt SIG.


File: python-whatsnew-3.2.2.info,  Node: Pymalloc A Specialized Object Allocator,  Next: Build and C API Changes<8>,  Prev: New Improved and Deprecated Modules<4>,  Up: What's New in Python 2 3

8.18 Pymalloc: A Specialized Object Allocator
=============================================

Pymalloc, a specialized object allocator written by Vladimir
Marangozov, was a feature added to Python 2.1.  Pymalloc is intended to
be faster than the system `malloc()' and to have less memory overhead
for allocation patterns typical of Python programs. The allocator uses
C's `malloc()' function to get large pools of memory and then fulfills
smaller memory requests from these pools.

  In 2.1 and 2.2, pymalloc was an experimental feature and wasn't
enabled by default; you had to explicitly enable it when compiling
Python by providing the `--with-pymalloc' option to the *configure*
script.  In 2.3, pymalloc has had further enhancements and is now
enabled by default; you'll have to supply `--without-pymalloc' to
disable it.

  This change is transparent to code written in Python; however,
pymalloc may expose bugs in C extensions.  Authors of C extension
modules should test their code with pymalloc enabled, because some
incorrect code may cause core dumps at runtime.

  There's one particularly common error that causes problems.  There
are a number of memory allocation functions in Python's C API that have
previously just been aliases for the C library's `malloc()' and
`free()', meaning that if you accidentally called mismatched functions
the error wouldn't be noticeable.  When the object allocator is
enabled, these functions aren't aliases of `malloc()' and `free()' any
more, and calling the wrong function to free memory may get you a core
dump.  For example, if memory was allocated using `PyObject_Malloc()',
it has to be freed using `PyObject_Free()', not `free()'.  A few
modules included with Python fell afoul of this and had to be fixed;
doubtless there are more third-party modules that will have the same
problem.

  As part of this change, the confusing multiple interfaces for
allocating memory have been consolidated down into two API families.
Memory allocated with one family must not be manipulated with functions
from the other family.  There is one family for allocating chunks of
memory and another family of functions specifically for allocating
Python objects.

   * To allocate and free an undistinguished chunk of memory use the
     "raw memory" family: `PyMem_Malloc()', `PyMem_Realloc()', and
     `PyMem_Free()'.

   * The "object memory" family is the interface to the pymalloc
     facility described above and is biased towards a large number of
     "small" allocations: `PyObject_Malloc()', `PyObject_Realloc()',
     and `PyObject_Free()'.

   * To allocate and free Python objects, use the "object" family
     `PyObject_New()', `PyObject_NewVar()', and `PyObject_Del()'.

  Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides
debugging features to catch memory overwrites and doubled frees in both
extension modules and in the interpreter itself.  To enable this
support, compile a debugging version of the Python interpreter by
running *configure* with `--with-pydebug'.

  To aid extension writers, a header file `Misc/pymemcompat.h' is
distributed with the source to Python 2.3 that allows Python extensions
to use the 2.3 interfaces to memory allocation while compiling against
any version of Python since 1.5.2.  You would copy the file from
Python's source distribution and bundle it with the source of your
extension.

See also
........

<http://svn.python.org/view/python/trunk/Objects/obmalloc.c>
     For the full details of the pymalloc implementation, see the
     comments at the top of the file `Objects/obmalloc.c' in the Python
     source code.  The above link points to the file within the
     python.org SVN browser.


File: python-whatsnew-3.2.2.info,  Node: Build and C API Changes<8>,  Next: Other Changes and Fixes<2>,  Prev: Pymalloc A Specialized Object Allocator,  Up: What's New in Python 2 3

8.19 Build and C API Changes
============================

Changes to Python's build process and to the C API include:

   * The cycle detection implementation used by the garbage collection
     has proven to be stable, so it's now been made mandatory.  You can
     no longer compile Python without it, and the `--with-cycle-gc'
     switch to *configure* has been removed.

   * Python can now optionally be built as a shared library
     (`libpython2.3.so') by supplying `--enable-shared' when running
     Python's *configure* script.  (Contributed by Ondrej Palkovsky.)

   * The `DL_EXPORT' and `DL_IMPORT' macros are now deprecated.
     Initialization functions for Python extension modules should now
     be declared using the new macro `PyMODINIT_FUNC', while the Python
     core will generally use the `PyAPI_FUNC' and `PyAPI_DATA' macros.

   * The interpreter can be compiled without any docstrings for the
     built-in functions and modules by supplying
     `--without-doc-strings' to the *configure* script. This makes the
     Python executable about 10% smaller, but will also mean that you
     can't get help for Python's built-ins.  (Contributed by Gustavo
     Niemeyer.)

   * The `PyArg_NoArgs()' macro is now deprecated, and code that uses it
     should be changed.  For Python 2.2 and later, the method
     definition table can specify the `METH_NOARGS' flag, signalling
     that there are no arguments, and the argument checking can then be
     removed.  If compatibility with pre-2.2 versions of Python is
     important, the code could use `PyArg_ParseTuple(args, "")'
     instead, but this will be slower than using `METH_NOARGS'.

   * `PyArg_ParseTuple()' accepts new format characters for various
     sizes of unsigned integers: `B' for `unsigned char', `H' for
     `unsigned short int',  `I' for `unsigned int',  and `K' for
     `unsigned long long'.

   * A new function, `PyObject_DelItemString(mapping, char *key)()' was
     added as shorthand for `PyObject_DelItem(mapping,
     PyString_New(key))'.

   * File objects now manage their internal string buffer differently,
     increasing it exponentially when needed.  This results in the
     benchmark tests in `Lib/test/test_bufio.py' speeding up
     considerably (from 57 seconds to 1.7 seconds, according to one
     measurement).

   * It's now possible to define class and static methods for a C
     extension type by setting either the `METH_CLASS' or `METH_STATIC'
     flags in a method's `PyMethodDef' structure.

   * Python now includes a copy of the Expat XML parser's source code,
     removing any dependence on a system version or local installation
     of Expat.

   * If you dynamically allocate type objects in your extension, you
     should be aware of a change in the rules relating to the
     `__module__' and `__name__' attributes.  In summary, you will want
     to ensure the type's dictionary contains a `'__module__'' key;
     making the module name the part of the type name leading up to the
     final period will no longer have the desired effect.  For more
     detail, read the API reference documentation or the  source.

* Menu:

* Port-Specific Changes: Port-Specific Changes<3>.


File: python-whatsnew-3.2.2.info,  Node: Port-Specific Changes<3>,  Up: Build and C API Changes<8>

8.19.1 Port-Specific Changes
----------------------------

Support for a port to IBM's OS/2 using the EMX runtime environment was
merged into the main Python source tree.  EMX is a POSIX emulation
layer over the OS/2 system APIs.  The Python port for EMX tries to
support all the POSIX-like capability exposed by the EMX runtime, and
mostly succeeds; `fork()' and `fcntl()' are restricted by the
limitations of the underlying emulation layer.  The standard OS/2 port,
which uses IBM's Visual Age compiler, also gained support for
case-sensitive import semantics as part of the integration of the EMX
port into CVS.  (Contributed by Andrew MacIntyre.)

  On MacOS, most toolbox modules have been weaklinked to improve
backward compatibility.  This means that modules will no longer fail to
load if a single routine is missing on the current OS version. Instead
calling the missing routine will raise an exception. (Contributed by
Jack Jansen.)

  The RPM spec files, found in the `Misc/RPM/' directory in the Python
source distribution, were updated for 2.3.  (Contributed by Sean
Reifschneider.)

  Other new platforms now supported by Python include AtheOS
(<http://www.atheos.cx/>), GNU/Hurd, and OpenVMS.


File: python-whatsnew-3.2.2.info,  Node: Other Changes and Fixes<2>,  Next: Porting to Python 2 3,  Prev: Build and C API Changes<8>,  Up: What's New in Python 2 3

8.20 Other Changes and Fixes
============================

As usual, there were a bunch of other improvements and bugfixes
scattered throughout the source tree.  A search through the CVS change
logs finds there were 523 patches applied and 514 bugs fixed between
Python 2.2 and 2.3.  Both figures are likely to be underestimates.

  Some of the more notable changes are:

   * If the `PYTHONINSPECT' environment variable is set, the Python
     interpreter will enter the interactive prompt after running a
     Python program, as if Python had been invoked with the `-i'
     option. The environment variable can be set before running the
     Python interpreter, or it can be set by the Python program as part
     of its execution.

   * The `regrtest.py' script now provides a way to allow "all resources
     except _foo_."  A resource name passed to the `-u' option can now
     be prefixed with a hyphen (`'-'') to mean "remove this resource."
     For example, the option '`-uall,-bsddb'' could be used to enable
     the use of all resources except `bsddb'.

   * The tools used to build the documentation now work under Cygwin as
     well as Unix.

   * The `SET_LINENO' opcode has been removed.  Back in the mists of
     time, this opcode was needed to produce line numbers in tracebacks
     and support trace functions (for, e.g., `pdb'). Since Python 1.5,
     the line numbers in tracebacks have been computed using a
     different mechanism that works with "python -O".  For Python 2.3
     Michael Hudson implemented a similar scheme to determine when to
     call the trace function, removing the need for `SET_LINENO'
     entirely.

     It would be difficult to detect any resulting difference from
     Python code, apart from a slight speed up when Python is run
     without `-O'.

     C extensions that access the `f_lineno' field of frame objects
     should instead call `PyCode_Addr2Line(f->f_code, f->f_lasti)'.
     This will have the added effect of making the code work as desired
     under "python -O" in earlier versions of Python.

     A nifty new feature is that trace functions can now assign to the
     `f_lineno' attribute of frame objects, changing the line that will
     be executed next.  A `jump' command has been added to the `pdb'
     debugger taking advantage of this new feature. (Implemented by
     Richie Hindle.)


File: python-whatsnew-3.2.2.info,  Node: Porting to Python 2 3,  Next: Acknowledgements<5>,  Prev: Other Changes and Fixes<2>,  Up: What's New in Python 2 3

8.21 Porting to Python 2.3
==========================

This section lists previously described changes that may require
changes to your code:

   * `yield' is now always a keyword; if it's used as a variable name in
     your code, a different name must be chosen.

   * For strings _X_ and _Y_, `X in Y' now works if _X_ is more than one
     character long.

   * The `int()' type constructor will now return a long integer
     instead of raising an `OverflowError' when a string or
     floating-point number is too large to fit into an integer.

   * If you have Unicode strings that contain 8-bit characters, you
     must declare the file's encoding (UTF-8, Latin-1, or whatever) by
     adding a comment to the top of the file.  See section *note PEP
     263; Source Code Encodings: 11a. for more information.

   * Calling Tcl methods through `_tkinter' no longer  returns only
     strings.  Instead, if Tcl returns other objects those objects are
     converted to their Python equivalent, if one exists, or wrapped
     with a `_tkinter.Tcl_Obj' object if no Python equivalent exists.

   * Large octal and hex literals such as `0xffffffff' now trigger a
     `FutureWarning'. Currently they're stored as 32-bit numbers and
     result in a negative value, but in Python 2.4 they'll become
     positive long integers.

     There are a few ways to fix this warning.  If you really need a
     positive number, just add an `L' to the end of the literal.  If
     you're trying to get a 32-bit integer with low bits set and have
     previously used an expression such as `~(1 << 31)', it's probably
     clearest to start with all bits set and clear the desired upper
     bits. For example, to clear just the top bit (bit 31), you could
     write `0xffffffffL &~(1L<<31)'.

   * You can no longer disable assertions by assigning to `__debug__'.

   * The Distutils `setup()' function has gained various new keyword
     arguments such as _depends_.  Old versions of the Distutils will
     abort if passed unknown keywords.  A solution is to check for the
     presence of the new `get_distutil_options()' function in your
     `setup.py' and only uses the new keywords with a version of the
     Distutils that supports them:

         from distutils import core

         kw = {'sources': 'foo.c', ...}
         if hasattr(core, 'get_distutil_options'):
             kw['depends'] = ['foo.h']
         ext = Extension(**kw)


   * Using `None' as a variable name will now result in a
     `SyntaxWarning' warning.

   * Names of extension types defined by the modules included with
     Python now contain the module and a `'.'' in front of the type
     name.


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<5>,  Prev: Porting to Python 2 3,  Up: What's New in Python 2 3

8.22 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside,
Andrew Dalke, Scott David Daniels, Fred L. Drake, Jr., David Fraser,
Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef
Lannert, Martin von Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer,
Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, Francesco
Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason Tishler,
Just van Rossum.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 2,  Next: What's New in Python 2 1,  Prev: What's New in Python 2 3,  Up: Top

9 What's New in Python 2.2
**************************

     Author: A.M. Kuchling

* Menu:

* Introduction::
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes.
* PEP 234; Iterators: PEP 234 Iterators.
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>.
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator.
* Unicode Changes::
* PEP 227; Nested Scopes: PEP 227 Nested Scopes.
* New and Improved Modules: New and Improved Modules<3>.
* Interpreter Changes and Fixes::
* Other Changes and Fixes: Other Changes and Fixes<3>.
* Acknowledgements: Acknowledgements<6>.


File: python-whatsnew-3.2.2.info,  Node: Introduction,  Next: PEPs 252 and 253 Type and Class Changes,  Up: What's New in Python 2 2

9.1 Introduction
================

This article explains the new features in Python 2.2.2, released on
October 14, 2002.  Python 2.2.2 is a bugfix release of Python 2.2,
originally released on December 21, 2001.

  Python 2.2 can be thought of as the "cleanup release".  There are
some features such as generators and iterators that are completely new,
but most of the changes, significant and far-reaching though they may
be, are aimed at cleaning up irregularities and dark corners of the
language design.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.2, such as
the Python Library Reference(1) and the Python Reference Manual(2).  If
you want to understand the complete implementation and design rationale
for a change, refer to the PEP for a particular new feature.

  ---------- Footnotes ----------

  (1) http://www.python.org/doc/2.2/lib/lib.html

  (2) http://www.python.org/doc/2.2/ref/ref.html


File: python-whatsnew-3.2.2.info,  Node: PEPs 252 and 253 Type and Class Changes,  Next: PEP 234 Iterators,  Prev: Introduction,  Up: What's New in Python 2 2

9.2 PEPs 252 and 253: Type and Class Changes
============================================

The largest and most far-reaching changes in Python 2.2 are to Python's
model of objects and classes.  The changes should be backward
compatible, so it's likely that your code will continue to run
unchanged, but the changes provide some amazing new capabilities.
Before beginning this, the longest and most complicated section of this
article, I'll provide an overview of the changes and offer some
comments.

  A long time ago I wrote a Web page listing flaws in Python's design.
One of the most significant flaws was that it's impossible to subclass
Python types implemented in C.  In particular, it's not possible to
subclass built-in types, so you can't just subclass, say, lists in
order to add a single useful method to them. The `UserList' module
provides a class that supports all of the methods of lists and that can
be subclassed further, but there's lots of C code that expects a
regular Python list and won't accept a `UserList' instance.

  Python 2.2 fixes this, and in the process adds some exciting new
capabilities.  A brief summary:

   * You can subclass built-in types such as lists and even integers,
     and your subclasses should work in every place that requires the
     original type.

   * It's now possible to define static and class methods, in addition
     to the instance methods available in previous versions of Python.

   * It's also possible to automatically call methods on accessing or
     setting an instance attribute by using a new mechanism called
     _properties_.  Many uses of `__getattr__()' can be rewritten to
     use properties instead, making the resulting code simpler and
     faster.  As a small side benefit, attributes can now have
     docstrings, too.

   * The list of legal attributes for an instance can be limited to a
     particular set using _slots_, making it possible to safeguard
     against typos and perhaps make more optimizations possible in
     future versions of Python.

  Some users have voiced concern about all these changes.  Sure, they
say, the new features are neat and lend themselves to all sorts of
tricks that weren't possible in previous versions of Python, but they
also make the language more complicated.  Some people have said that
they've always recommended Python for its simplicity, and feel that its
simplicity is being lost.

  Personally, I think there's no need to worry.  Many of the new
features are quite esoteric, and you can write a lot of Python code
without ever needed to be aware of them.  Writing a simple class is no
more difficult than it ever was, so you don't need to bother learning
or teaching them unless they're actually needed.  Some very complicated
tasks that were previously only possible from C will now be possible in
pure Python, and to my mind that's all for the better.

  I'm not going to attempt to cover every single corner case and small
change that were required to make the new features work.  Instead this
section will paint only the broad strokes.  See section *note Related
Links: 142, "Related Links", for further sources of information about
Python 2.2's new object model.

* Menu:

* Old and New Classes::
* Descriptors::
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule.
* Attribute Access::
* Related Links::


File: python-whatsnew-3.2.2.info,  Node: Old and New Classes,  Next: Descriptors,  Up: PEPs 252 and 253 Type and Class Changes

9.2.1 Old and New Classes
-------------------------

First, you should know that Python 2.2 really has two kinds of classes:
classic or old-style classes, and new-style classes.  The old-style
class model is exactly the same as the class model in earlier versions
of Python.  All the new features described in this section apply only
to new-style classes. This divergence isn't intended to last forever;
eventually old-style classes will be dropped, possibly in Python 3.0.

  So how do you define a new-style class?  You do it by subclassing an
existing new-style class.  Most of Python's built-in types, such as
integers, lists, dictionaries, and even files, are new-style classes
now.  A new-style class named `object', the base class for all built-in
types, has also been added so if no built-in type is suitable, you can
just subclass `object':

    class C(object):
        def __init__ (self):
            ...
        ...

This means that `class' statements that don't have any base classes are
always classic classes in Python 2.2.  (Actually you can also change
this by setting a module-level variable named `__metaclass__' -- see PEP
253(1) for the details -- but it's easier to just subclass `object'.)

  The type objects for the built-in types are available as built-ins,
named using a clever trick.  Python has always had built-in functions
named `int()', `float()', and `str()'.  In 2.2, they aren't functions
any more, but type objects that behave as factories when called.

    >>> int
    <type 'int'>
    >>> int('123')
    123

To make the set of types complete, new type objects such as `dict()' and
`file()' have been added.  Here's a more interesting example, adding a
`lock()' method to file objects:

    class LockableFile(file):
        def lock (self, operation, length=0, start=0, whence=0):
            import fcntl
            return fcntl.lockf(self.fileno(), operation,
                               length, start, whence)

The now-obsolete `posixfile' module contained a class that emulated all
of a file object's methods and also added a `lock()' method, but this
class couldn't be passed to internal functions that expected a built-in
file, something which is possible with our new `LockableFile'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0253


File: python-whatsnew-3.2.2.info,  Node: Descriptors,  Next: Multiple Inheritance The Diamond Rule,  Prev: Old and New Classes,  Up: PEPs 252 and 253 Type and Class Changes

9.2.2 Descriptors
-----------------

In previous versions of Python, there was no consistent way to discover
what attributes and methods were supported by an object. There were
some informal conventions, such as defining `__members__' and
`__methods__' attributes that were lists of names, but often the author
of an extension type or a class wouldn't bother to define them.  You
could fall back on inspecting the `__dict__' of an object, but when
class inheritance or an arbitrary `__getattr__()' hook were in use this
could still be inaccurate.

  The one big idea underlying the new class model is that an API for
describing the attributes of an object using _descriptors_ has been
formalized.  Descriptors specify the value of an attribute, stating
whether it's a method or a field.  With the descriptor API, static
methods and class methods become possible, as well as more exotic
constructs.

  Attribute descriptors are objects that live inside class objects, and
have a few attributes of their own:

   * `__name__' is the attribute's name.

   * `__doc__' is the attribute's docstring.

   * `__get__(object)()' is a method that retrieves the attribute value
     from _object_.

   * `__set__(object, value)()' sets the attribute on _object_ to
     _value_.

   * `__delete__(object, value)()' deletes the _value_  attribute of
     _object_.

  For example, when you write `obj.x', the steps that Python actually
performs are:

    descriptor = obj.__class__.x
    descriptor.__get__(obj)

For methods, `descriptor.__get__()' returns a temporary object that's
callable, and wraps up the instance and the method to be called on it.
This is also why static methods and class methods are now possible;
they have descriptors that wrap up just the method, or the method and
the class.  As a brief explanation of these new kinds of methods,
static methods aren't passed the instance, and therefore resemble
regular functions.  Class methods are passed the class of the object,
but not the object itself.  Static and class methods are defined like
this:

    class C(object):
        def f(arg1, arg2):
            ...
        f = staticmethod(f)

        def g(cls, arg1, arg2):
            ...
        g = classmethod(g)

The `staticmethod()' function takes the function `f()', and returns it
wrapped up in a descriptor so it can be stored in the class object.
You might expect there to be special syntax for creating such methods
(`def static f', `defstatic f()', or something like that) but no such
syntax has been defined yet; that's been left for future versions of
Python.

  More new features, such as slots and properties, are also implemented
as new kinds of descriptors, and it's not difficult to write a
descriptor class that does something novel.  For example, it would be
possible to write a descriptor class that made it possible to write
Eiffel-style preconditions and postconditions for a method.  A class
that used this feature might be defined like this:

    from eiffel import eiffelmethod

    class C(object):
        def f(self, arg1, arg2):
            # The actual function
            ...
        def pre_f(self):
            # Check preconditions
            ...
        def post_f(self):
            # Check postconditions
            ...

        f = eiffelmethod(f, pre_f, post_f)

Note that a person using the new `eiffelmethod()' doesn't have to
understand anything about descriptors.  This is why I think the new
features don't increase the basic complexity of the language. There
will be a few wizards who need to know about it in order to write
`eiffelmethod()' or the ZODB or whatever, but most users will just
write code on top of the resulting libraries and ignore the
implementation details.


File: python-whatsnew-3.2.2.info,  Node: Multiple Inheritance The Diamond Rule,  Next: Attribute Access,  Prev: Descriptors,  Up: PEPs 252 and 253 Type and Class Changes

9.2.3 Multiple Inheritance: The Diamond Rule
--------------------------------------------

Multiple inheritance has also been made more useful through changing
the rules under which names are resolved.  Consider this set of classes
(diagram taken from PEP 253(1) by Guido van Rossum):

          class A:
            ^ ^  def save(self): ...
           /   \
          /     \
         /       \
        /         \
    class B     class C:
        ^         ^  def save(self): ...
         \       /
          \     /
           \   /
            \ /
          class D

The lookup rule for classic classes is simple but not very smart; the
base classes are searched depth-first, going from left to right.  A
reference to `D.save()' will search the classes `D', `B', and then `A',
where `save()' would be found and returned.  `C.save()' would never be
found at all.  This is bad, because if `C''s `save()' method is saving
some internal state specific to `C', not calling it will result in that
state never getting saved.

  New-style classes follow a different algorithm that's a bit more
complicated to explain, but does the right thing in this situation.
(Note that Python 2.3 changes this algorithm to one that produces the
same results in most cases, but produces more useful results for really
complicated inheritance graphs.)

  1. List all the base classes, following the classic lookup rule and
     include a class multiple times if it's visited repeatedly.  In the
     above example, the list of visited classes is [`D', `B', `A', `C',
     `A'].

  2. Scan the list for duplicated classes.  If any are found, remove
     all but one occurrence, leaving the _last_ one in the list.  In
     the above example, the list becomes [`D', `B', `C', `A'] after
     dropping duplicates.

  Following this rule, referring to `D.save()' will return `C.save()',
which is the behaviour we're after.  This lookup rule is the same as
the one followed by Common Lisp.  A new built-in function, `super()',
provides a way to get at a class's superclasses without having to
reimplement Python's algorithm. The most commonly used form will be
`super(class, obj)()', which returns  a bound superclass object (not
the actual class object).  This form will be used in methods to call a
method in the superclass; for example, `D''s `save()' method would look
like this:

    class D (B,C):
        def save (self):
            # Call superclass .save()
            super(D, self).save()
            # Save D's private information here
            ...

`super()' can also return unbound superclass objects when called as
`super(class)()' or `super(class1, class2)()', but this probably won't
often be useful.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0253


File: python-whatsnew-3.2.2.info,  Node: Attribute Access,  Next: Related Links,  Prev: Multiple Inheritance The Diamond Rule,  Up: PEPs 252 and 253 Type and Class Changes

9.2.4 Attribute Access
----------------------

A fair number of sophisticated Python classes define hooks for
attribute access using `__getattr__()'; most commonly this is done for
convenience, to make code more readable by automatically mapping an
attribute access such as `obj.parent' into a method call such as
`obj.get_parent'.  Python 2.2 adds some new ways of controlling
attribute access.

  First, `__getattr__(attr_name)()' is still supported by new-style
classes, and nothing about it has changed.  As before, it will be
called when an attempt is made to access `obj.foo' and no attribute
named `foo' is found in the instance's dictionary.

  New-style classes also support a new method,
`__getattribute__(attr_name)()'.  The difference between the two
methods is that `__getattribute__()' is _always_ called whenever any
attribute is accessed, while the old `__getattr__()' is only called if
`foo' isn't found in the instance's dictionary.

  However, Python 2.2's support for _properties_ will often be a
simpler way to trap attribute references.  Writing a `__getattr__()'
method is complicated because to avoid recursion you can't use regular
attribute accesses inside them, and instead have to mess around with
the contents of `__dict__'. `__getattr__()' methods also end up being
called by Python when it checks for other methods such as `__repr__()'
or `__coerce__()', and so have to be written with this in mind.
Finally, calling a function on every attribute access results in a
sizable performance loss.

  `property' is a new built-in type that packages up three functions
that get, set, or delete an attribute, and a docstring.  For example,
if you want to define a `size' attribute that's computed, but also
settable, you could write:

    class C(object):
        def get_size (self):
            result = ... computation ...
            return result
        def set_size (self, size):
            ... compute something based on the size
            and set internal state appropriately ...

        # Define a property.  The 'delete this attribute'
        # method is defined as None, so the attribute
        # can't be deleted.
        size = property(get_size, set_size,
                        None,
                        "Storage size of this instance")

That is certainly clearer and easier to write than a pair of
`__getattr__()'/`__setattr__()' methods that check for the `size'
attribute and handle it specially while retrieving all other attributes
from the instance's `__dict__'.  Accesses to `size' are also the only
ones which have to perform the work of calling a function, so
references to other attributes run at their usual speed.

  Finally, it's possible to constrain the list of attributes that can be
referenced on an object using the new `__slots__' class attribute.
Python objects are usually very dynamic; at any time it's possible to
define a new attribute on an instance by just doing `obj.new_attr=1'.
A new-style class can define a class attribute named `__slots__' to
limit the legal attributes  to a particular set of names.  An example
will make this clear:

    >>> class C(object):
    ...     __slots__ = ('template', 'name')
    ...
    >>> obj = C()
    >>> print obj.template
    None
    >>> obj.template = 'Test'
    >>> print obj.template
    Test
    >>> obj.newattr = None
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    AttributeError: 'C' object has no attribute 'newattr'

Note how you get an `AttributeError' on the attempt to assign to an
attribute not listed in `__slots__'.


File: python-whatsnew-3.2.2.info,  Node: Related Links,  Prev: Attribute Access,  Up: PEPs 252 and 253 Type and Class Changes

9.2.5 Related Links
-------------------

This section has just been a quick overview of the new features, giving
enough of an explanation to start you programming, but many details
have been simplified or ignored.  Where should you go to get a more
complete picture?

  <http://www.python.org/2.2/descrintro.html> is a lengthy tutorial
introduction to the descriptor features, written by Guido van Rossum.
If my description has whetted your appetite, go read this tutorial
next, because it goes into much more detail about the new features
while still remaining quite easy to read.

  Next, there are two relevant PEPs, PEP 252(1) and PEP 253(2).  PEP
252(3) is titled "Making Types Look More Like Classes", and covers the
descriptor API.  PEP 253(4) is titled "Subtyping Built-in Types", and
describes the changes to type objects that make it possible to subtype
built-in objects.  PEP 253(5) is the more complicated PEP of the two,
and at a few points the necessary explanations of types and meta-types
may cause your head to explode.  Both PEPs were written and implemented
by Guido van Rossum, with substantial assistance from the rest of the
Zope Corp. team.

  Finally, there's the ultimate authority: the source code.  Most of
the machinery for the type handling is in `Objects/typeobject.c', but
you should only resort to it after all other avenues have been
exhausted, including posting a question to python-list or python-dev.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0252

  (2) http://www.python.org/dev/peps/pep-0253

  (3) http://www.python.org/dev/peps/pep-0252

  (4) http://www.python.org/dev/peps/pep-0253

  (5) http://www.python.org/dev/peps/pep-0253


File: python-whatsnew-3.2.2.info,  Node: PEP 234 Iterators,  Next: PEP 255 Simple Generators<2>,  Prev: PEPs 252 and 253 Type and Class Changes,  Up: What's New in Python 2 2

9.3 PEP 234: Iterators
======================

Another significant addition to 2.2 is an iteration interface at both
the C and Python levels.  Objects can define how they can be looped
over by callers.

  In Python versions up to 2.1, the usual way to make `for item in obj'
work is to define a `__getitem__()' method that looks something like
this:

    def __getitem__(self, index):
        return <next item>

`__getitem__()' is more properly used to define an indexing operation
on an object so that you can write `obj[5]' to retrieve the sixth
element.  It's a bit misleading when you're using this only to support
`for' loops.  Consider some file-like object that wants to be looped
over; the _index_ parameter is essentially meaningless, as the class
probably assumes that a series of `__getitem__()' calls will be made
with _index_ incrementing by one each time.  In other words, the
presence of the `__getitem__()' method doesn't mean that using
`file[5]'  to randomly access the sixth element will work, though it
really should.

  In Python 2.2, iteration can be implemented separately, and
`__getitem__()' methods can be limited to classes that really do
support random access.  The basic idea of iterators is  simple.  A new
built-in function, `iter(obj)()' or `iter(C, sentinel)', is used to get
an iterator. `iter(obj)()' returns an iterator for the object _obj_,
while `iter(C, sentinel)' returns an iterator that will invoke the
callable object _C_ until it returns _sentinel_ to signal that the
iterator is done.

  Python classes can define an `__iter__()' method, which should create
and return a new iterator for the object; if the object is its own
iterator, this method can just return `self'.  In particular, iterators
will usually be their own iterators.  Extension types implemented in C
can implement a `tp_iter' function in order to return an iterator, and
extension types that want to behave as iterators can define a
`tp_iternext' function.

  So, after all this, what do iterators actually do?  They have one
required method, `next()', which takes no arguments and returns the
next value.  When there are no more values to be returned, calling
`next()' should raise the `StopIteration' exception.

    >>> L = [1,2,3]
    >>> i = iter(L)
    >>> print i
    <iterator object at 0x8116870>
    >>> i.next()
    1
    >>> i.next()
    2
    >>> i.next()
    3
    >>> i.next()
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    StopIteration
    >>>

In 2.2, Python's `for' statement no longer expects a sequence; it
expects something for which `iter()' will return an iterator. For
backward compatibility and convenience, an iterator is automatically
constructed for sequences that don't implement `__iter__()' or a
`tp_iter' slot, so `for i in [1,2,3]' will still work.  Wherever the
Python interpreter loops over a sequence, it's been changed to use the
iterator protocol.  This means you can do things like this:

    >>> L = [1,2,3]
    >>> i = iter(L)
    >>> a,b,c = i
    >>> a,b,c
    (1, 2, 3)

Iterator support has been added to some of Python's basic types.
Calling `iter()' on a dictionary will return an iterator which loops
over its keys:

    >>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
    ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
    >>> for key in m: print key, m[key]
    ...
    Mar 3
    Feb 2
    Aug 8
    Sep 9
    May 5
    Jun 6
    Jul 7
    Jan 1
    Apr 4
    Nov 11
    Dec 12
    Oct 10

That's just the default behaviour.  If you want to iterate over keys,
values, or key/value pairs, you can explicitly call the `iterkeys()',
`itervalues()', or `iteritems()' methods to get an appropriate iterator.
In a minor related change, the `in' operator now works on dictionaries,
so `key in dict' is now equivalent to `dict.has_key(key)'.

  Files also provide an iterator, which calls the `readline()' method
until there are no more lines in the file.  This means you can now read
each line of a file using code like this:

    for line in file:
        # do something for each line
        ...

Note that you can only go forward in an iterator; there's no way to get
the previous element, reset the iterator, or make a copy of it. An
iterator object could provide such additional capabilities, but the
iterator protocol only requires a `next()' method.

See also
........

PEP 234(1) - Iterators
     Written by Ka-Ping Yee and GvR; implemented  by the Python Labs
     crew, mostly by GvR and Tim Peters.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0234


File: python-whatsnew-3.2.2.info,  Node: PEP 255 Simple Generators<2>,  Next: PEP 237 Unifying Long Integers and Integers<2>,  Prev: PEP 234 Iterators,  Up: What's New in Python 2 2

9.4 PEP 255: Simple Generators
==============================

Generators are another new feature, one that interacts with the
introduction of iterators.

  You're doubtless familiar with how function calls work in Python or
C.  When you call a function, it gets a private namespace where its
local variables are created.  When the function reaches a `return'
statement, the local variables are destroyed and the resulting value is
returned to the caller.  A later call to the same function will get a
fresh new set of local variables.  But, what if the local variables
weren't thrown away on exiting a function?  What if you could later
resume the function where it left off?  This is what generators
provide; they can be thought of as resumable functions.

  Here's the simplest example of a generator function:

    def generate_ints(N):
        for i in range(N):
            yield i

A new keyword, `yield', was introduced for generators.  Any function
containing a `yield' statement is a generator function; this is
detected by Python's bytecode compiler which compiles the function
specially as a result.  Because a new keyword was introduced,
generators must be explicitly enabled in a module by including a `from
__future__ import generators' statement near the top of the module's
source code.  In Python 2.3 this statement will become unnecessary.

  When you call a generator function, it doesn't return a single value;
instead it returns a generator object that supports the iterator
protocol.  On executing the `yield' statement, the generator outputs
the value of `i', similar to a `return' statement.  The big difference
between `yield' and a `return' statement is that on reaching a `yield'
the generator's state of execution is suspended and local variables are
preserved.  On the next call to the generator's `next()' method, the
function will resume executing immediately after the `yield' statement.
(For complicated reasons, the `yield' statement isn't allowed inside
the `try' block of a `try'...`finally' statement; read PEP 255(1) for a
full explanation of the interaction between `yield' and exceptions.)

  Here's a sample usage of the `generate_ints()' generator:

    >>> gen = generate_ints(3)
    >>> gen
    <generator object at 0x8117f90>
    >>> gen.next()
    0
    >>> gen.next()
    1
    >>> gen.next()
    2
    >>> gen.next()
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "<stdin>", line 2, in generate_ints
    StopIteration

You could equally write `for i in generate_ints(5)', or `a,b,c =
generate_ints(3)'.

  Inside a generator function, the `return' statement can only be used
without a value, and signals the end of the procession of values;
afterwards the generator cannot return any further values. `return'
with a value, such as `return 5', is a syntax error inside a generator
function.  The end of the generator's results can also be indicated by
raising `StopIteration' manually, or by just letting the flow of
execution fall off the bottom of the function.

  You could achieve the effect of generators manually by writing your
own class and storing all the local variables of the generator as
instance variables.  For example, returning a list of integers could be
done by setting `self.count' to 0, and having the `next()' method
increment `self.count' and return it.  However, for a moderately
complicated generator, writing a corresponding class would be much
messier. `Lib/test/test_generators.py' contains a number of more
interesting examples.  The simplest one implements an in-order
traversal of a tree using generators recursively.

    # A recursive generator that generates Tree leaves in in-order.
    def inorder(t):
        if t:
            for x in inorder(t.left):
                yield x
            yield t.label
            for x in inorder(t.right):
                yield x

Two other examples in `Lib/test/test_generators.py' produce solutions
for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so
that no queen threatens another) and the Knight's Tour (a route that
takes a knight to every square of an $NxN$ chessboard without visiting
any square twice).

  The idea of generators comes from other programming languages,
especially Icon (<http://www.cs.arizona.edu/icon/>), where the idea of
generators is central.  In Icon, every expression and function call
behaves like a generator.  One example from "An Overview of the Icon
Programming Language" at
<http://www.cs.arizona.edu/icon/docs/ipd266.htm> gives an idea of what
this looks like:

    sentence := "Store it in the neighboring harbor"
    if (i := find("or", sentence)) > 5 then write(i)

In Icon the `find()' function returns the indexes at which the substring
"or" is found: 3, 23, 33.  In the `if' statement, `i' is first assigned
a value of 3, but 3 is less than 5, so the comparison fails, and Icon
retries it with the second value of 23.  23 is greater than 5, so the
comparison now succeeds, and the code prints the value 23 to the screen.

  Python doesn't go nearly as far as Icon in adopting generators as a
central concept.  Generators are considered a new part of the core
Python language, but learning or using them isn't compulsory; if they
don't solve any problems that you have, feel free to ignore them. One
novel feature of Python's interface as compared to Icon's is that a
generator's state is represented as a concrete object (the iterator)
that can be passed around to other functions or stored in a data
structure.

See also
........

PEP 255(2) - Simple Generators
     Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.
     Implemented mostly by Neil Schemenauer and Tim Peters, with other
     fixes from the Python Labs crew.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0255

  (2) http://www.python.org/dev/peps/pep-0255


File: python-whatsnew-3.2.2.info,  Node: PEP 237 Unifying Long Integers and Integers<2>,  Next: PEP 238 Changing the Division Operator,  Prev: PEP 255 Simple Generators<2>,  Up: What's New in Python 2 2

9.5 PEP 237: Unifying Long Integers and Integers
================================================

In recent versions, the distinction between regular integers, which are
32-bit values on most machines, and long integers, which can be of
arbitrary size, was becoming an annoyance.  For example, on platforms
that support files larger than `2**32' bytes, the `tell()' method of
file objects has to return a long integer. However, there were various
bits of Python that expected plain integers and would raise an error if
a long integer was provided instead.  For example, in Python 1.5, only
regular integers could be used as a slice index, and `'abc'[1L:]' would
raise a `TypeError' exception with the message 'slice index must be
int'.

  Python 2.2 will shift values from short to long integers as required.
The 'L' suffix is no longer needed to indicate a long integer literal,
as now the compiler will choose the appropriate type.  (Using the 'L'
suffix will be discouraged in future 2.x versions of Python, triggering
a warning in Python 2.4, and probably dropped in Python 3.0.)  Many
operations that used to raise an `OverflowError' will now return a long
integer as their result.  For example:

    >>> 1234567890123
    1234567890123L
    >>> 2 ** 64
    18446744073709551616L

In most cases, integers and long integers will now be treated
identically.  You can still distinguish them with the `type()' built-in
function, but that's rarely needed.

See also
........

PEP 237(1) - Unifying Long Integers and Integers
     Written by Moshe Zadka and Guido van Rossum.  Implemented mostly
     by Guido van Rossum.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0237


File: python-whatsnew-3.2.2.info,  Node: PEP 238 Changing the Division Operator,  Next: Unicode Changes,  Prev: PEP 237 Unifying Long Integers and Integers<2>,  Up: What's New in Python 2 2

9.6 PEP 238: Changing the Division Operator
===========================================

The most controversial change in Python 2.2 heralds the start of an
effort to fix an old design flaw that's been in Python from the
beginning. Currently Python's division operator, `/', behaves like C's
division operator when presented with two integer arguments: it returns
an integer result that's truncated down when there would be a
fractional part.  For example, `3/2' is 1, not 1.5, and `(-1)/2' is -1,
not -0.5.  This means that the results of division can vary
unexpectedly depending on the type of the two operands and because
Python is dynamically typed, it can be difficult to determine the
possible types of the operands.

  (The controversy is over whether this is _really_ a design flaw, and
whether it's worth breaking existing code to fix this.  It's caused
endless discussions on python-dev, and in July 2001 erupted into an
storm of acidly sarcastic postings on `comp.lang.python'. I won't argue
for either side here and will stick to describing what's  implemented
in 2.2.  Read PEP 238(1) for a summary of arguments and
counter-arguments.)

  Because this change might break code, it's being introduced very
gradually.  Python 2.2 begins the transition, but the switch won't be
complete until Python 3.0.

  First, I'll borrow some terminology from PEP 238(2).  "True division"
is the division that most non-programmers are familiar with: 3/2 is
1.5, 1/4 is 0.25, and so forth.  "Floor division" is what Python's `/'
operator currently does when given integer operands; the result is the
floor of the value returned by true division.  "Classic division" is
the current mixed behaviour of `/'; it returns the result of floor
division when the operands are integers, and returns the result of true
division when one of the operands is a floating-point number.

  Here are the changes 2.2 introduces:

   * A new operator, `//', is the floor division operator. (Yes, we
     know it looks like C++'s comment symbol.)  `//' _always_ performs
     floor division no matter what the types of its operands are, so `1
     // 2' is 0 and `1.0 // 2.0' is also 0.0.

     `//' is always available in Python 2.2; you don't need to enable
     it using a `__future__' statement.

   * By including a `from __future__ import division' in a module, the
     `/' operator will be changed to return the result of true
     division, so `1/2' is 0.5.  Without the `__future__' statement,
     `/' still means classic division.  The default meaning of `/' will
     not change until Python 3.0.

   * Classes can define methods called `__truediv__()' and
     `__floordiv__()' to overload the two division operators.  At the C
     level, there are also slots in the `PyNumberMethods' structure so
     extension types can define the two operators.

   * Python 2.2 supports some command-line arguments for testing
     whether code will works with the changed division semantics.
     Running python with `-Q warn' will cause a warning to be issued
     whenever division is applied to two integers.  You can use this to
     find code that's affected by the change and fix it.  By default,
     Python 2.2 will simply perform classic division without a warning;
     the warning will be turned on by default in Python 2.3.

See also
........

PEP 238(3) - Changing the Division Operator
     Written by Moshe Zadka and  Guido van Rossum.  Implemented by
     Guido van Rossum..

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0238

  (2) http://www.python.org/dev/peps/pep-0238

  (3) http://www.python.org/dev/peps/pep-0238


File: python-whatsnew-3.2.2.info,  Node: Unicode Changes,  Next: PEP 227 Nested Scopes,  Prev: PEP 238 Changing the Division Operator,  Up: What's New in Python 2 2

9.7 Unicode Changes
===================

Python's Unicode support has been enhanced a bit in 2.2.  Unicode
strings are usually stored as UCS-2, as 16-bit unsigned integers.
Python 2.2 can also be compiled to use UCS-4, 32-bit unsigned integers,
as its internal encoding by supplying `--enable-unicode=ucs4' to the
configure script.   (It's also possible to specify `--disable-unicode'
to completely disable Unicode support.)

  When built to use UCS-4 (a "wide Python"), the interpreter can
natively handle Unicode characters from U+000000 to U+110000, so the
range of legal values for the `unichr()' function is expanded
accordingly.  Using an interpreter compiled to use UCS-2 (a "narrow
Python"), values greater than 65535 will still cause `unichr()' to
raise a `ValueError' exception. This is all described in PEP 261(1),
"Support for 'wide' Unicode characters"; consult it for further details.

  Another change is simpler to explain. Since their introduction,
Unicode strings have supported an `encode()' method to convert the
string to a selected encoding such as UTF-8 or Latin-1.  A symmetric
`decode([*encoding*])()' method has been added to 8-bit strings (though
not to Unicode strings) in 2.2.  `decode()' assumes that the string is
in the specified encoding and decodes it, returning whatever is
returned by the codec.

  Using this new feature, codecs have been added for tasks not directly
related to Unicode.  For example, codecs have been added for
uu-encoding, MIME's base64 encoding, and compression with the `zlib'
module:

    >>> s = """Here is a lengthy piece of redundant, overly verbose,
    ... and repetitive text.
    ... """
    >>> data = s.encode('zlib')
    >>> data
    'x\x9c\r\xc9\xc1\r\x80 \x10\x04\xc0?Ul...'
    >>> data.decode('zlib')
    'Here is a lengthy piece of redundant, overly verbose,\nand repetitive text.\n'
    >>> print s.encode('uu')
    begin 666 <data>
    M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+"!O=F5R;'D@
    >=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X="X*

    end
    >>> "sheesh".encode('rot-13')
    'furrfu'

To convert a class instance to Unicode, a `__unicode__()' method can be
defined by a class, analogous to `__str__()'.

  `encode()', `decode()', and `__unicode__()' were implemented by
Marc-André Lemburg.  The changes to support using UCS-4 internally were
implemented by Fredrik Lundh and Martin von Löwis.

See also
........

PEP 261(2) - Support for 'wide' Unicode characters
     Written by Paul Prescod.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0261

  (2) http://www.python.org/dev/peps/pep-0261


File: python-whatsnew-3.2.2.info,  Node: PEP 227 Nested Scopes,  Next: New and Improved Modules<3>,  Prev: Unicode Changes,  Up: What's New in Python 2 2

9.8 PEP 227: Nested Scopes
==========================

In Python 2.1, statically nested scopes were added as an optional
feature, to be enabled by a `from __future__ import nested_scopes'
directive.  In 2.2 nested scopes no longer need to be specially
enabled, and are now always present.  The rest of this section is a
copy of the description of nested scopes from my "What's New in Python
2.1" document; if you read it when 2.1 came out, you can skip the rest
of this section.

  The largest change introduced in Python 2.1, and made complete in
2.2, is to Python's scoping rules.  In Python 2.0, at any given time
there are at most three namespaces used to look up variable names:
local, module-level, and the built-in namespace.  This often surprised
people because it didn't match their intuitive expectations.  For
example, a nested recursive function definition doesn't work:

    def f():
        ...
        def g(value):
            ...
            return g(value-1) + 1
        ...

The function `g()' will always raise a `NameError' exception, because
the binding of the name `g' isn't in either its local namespace or in
the module-level namespace.  This isn't much of a problem in practice
(how often do you recursively define interior functions like this?),
but this also made using the `lambda' statement clumsier, and this was
a problem in practice.  In code which uses `lambda' you can often find
local variables being copied by passing them as the default values of
arguments.

    def find(self, name):
        "Return list of any entries equal to 'name'"
        L = filter(lambda x, name=name: x == name,
                   self.list_attribute)
        return L

The readability of Python code written in a strongly functional style
suffers greatly as a result.

  The most significant change to Python 2.2 is that static scoping has
been added to the language to fix this problem.  As a first effect, the
`name=name' default argument is now unnecessary in the above example.
Put simply, when a given variable name is not assigned a value within a
function (by an assignment, or the `def', `class', or `import'
statements), references to the variable will be looked up in the local
namespace of the enclosing scope.  A more detailed explanation of the
rules, and a dissection of the implementation, can be found in the PEP.

  This change may cause some compatibility problems for code where the
same variable name is used both at the module level and as a local
variable within a function that contains further function definitions.
This seems rather unlikely though, since such code would have been
pretty confusing to read in the first place.

  One side effect of the change is that the `from module import *' and
`exec' statements have been made illegal inside a function scope under
certain conditions.  The Python reference manual has said all along
that `from module import *' is only legal at the top level of a module,
but the CPython interpreter has never enforced this before.  As part of
the implementation of nested scopes, the compiler which turns Python
source into bytecodes has to generate different code to access
variables in a containing scope.  `from module import *' and `exec'
make it impossible for the compiler to figure this out, because they
add names to the local namespace that are unknowable at compile time.
Therefore, if a function contains function definitions or `lambda'
expressions with free variables, the compiler will flag this by raising
a `SyntaxError' exception.

  To make the preceding explanation a bit clearer, here's an example:

    x = 1
    def f():
        # The next line is a syntax error
        exec 'x=2'
        def g():
            return x

Line 4 containing the `exec' statement is a syntax error, since `exec'
would define a new local variable named `x' whose value should be
accessed by `g()'.

  This shouldn't be much of a limitation, since `exec' is rarely used in
most Python code (and when it is used, it's often a sign of a poor
design anyway).

See also
........

PEP 227(1) - Statically Nested Scopes
     Written and implemented by Jeremy Hylton.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0227


File: python-whatsnew-3.2.2.info,  Node: New and Improved Modules<3>,  Next: Interpreter Changes and Fixes,  Prev: PEP 227 Nested Scopes,  Up: What's New in Python 2 2

9.9 New and Improved Modules
============================

   * The `xmlrpclib' module was contributed to the standard library by
     Fredrik Lundh, providing support for writing XML-RPC clients.
     XML-RPC is a simple remote procedure call protocol built on top of
     HTTP and XML. For example, the following snippet retrieves a list
     of RSS channels from the O'Reilly Network, and then  lists the
     recent headlines for one channel:

         import xmlrpclib
         s = xmlrpclib.Server(
               'http://www.oreillynet.com/meerkat/xml-rpc/server.php')
         channels = s.meerkat.getChannels()
         # channels is a list of dictionaries, like this:
         # [{'id': 4, 'title': 'Freshmeat Daily News'}
         #  {'id': 190, 'title': '32Bits Online'},
         #  {'id': 4549, 'title': '3DGamers'}, ... ]

         # Get the items for one channel
         items = s.meerkat.getItems( {'channel': 4} )

         # 'items' is another list of dictionaries, like this:
         # [{'link': 'http://freshmeat.net/releases/52719/',
         #   'description': 'A utility which converts HTML to XSL FO.',
         #   'title': 'html2fo 0.3 (Default)'}, ... ]

     The `SimpleXMLRPCServer' module makes it easy to create
     straightforward XML-RPC servers.  See <http://www.xmlrpc.com/> for
     more information about XML-RPC.

   * The new `hmac' module implements the HMAC algorithm described by RFC
     2104(1). (Contributed by Gerhard Häring.)

   * Several functions that originally returned lengthy tuples now
     return pseudo- sequences that still behave like tuples but also
     have mnemonic attributes such as memberst_mtime or `tm_year'. The
     enhanced functions include `stat()', `fstat()', `statvfs()', and
     `fstatvfs()' in the `os' module, and `localtime()', `gmtime()',
     and `strptime()' in the `time' module.

     For example, to obtain a file's size using the old tuples, you'd
     end up writing something like `file_size =
     os.stat(filename)[stat.ST_SIZE]', but now this can be written more
     clearly as `file_size = os.stat(filename).st_size'.

     The original patch for this feature was contributed by Nick
     Mathewson.

   * The Python profiler has been extensively reworked and various
     errors in its output have been corrected.  (Contributed by Fred L.
     Drake, Jr. and Tim Peters.)

   * The `socket' module can be compiled to support IPv6; specify the
     `--enable-ipv6' option to Python's configure script.  (Contributed
     by Jun-ichiro "itojun" Hagino.)

   * Two new format characters were added to the `struct' module for
     64-bit integers on platforms that support the C `long long' type.
     `q' is for a signed 64-bit integer, and `Q' is for an unsigned
     one.  The value is returned in Python's long integer type.
     (Contributed by Tim Peters.)

   * In the interpreter's interactive mode, there's a new built-in
     function `help()' that uses the `pydoc' module introduced in
     Python 2.1 to provide interactive help. `help(object)' displays
     any available help text about _object_.  `help()' with no argument
     puts you in an online help utility, where you can enter the names
     of functions, classes, or modules to read their help text.
     (Contributed by Guido van Rossum, using Ka-Ping Yee's `pydoc'
     module.)

   * Various bugfixes and performance improvements have been made to
     the SRE engine underlying the `re' module.  For example, the
     `re.sub()' and `re.split()' functions have been rewritten in C.
     Another contributed patch speeds up certain Unicode character
     ranges by a factor of two, and a new `finditer()'  method that
     returns an iterator over all the non-overlapping matches in  a
     given string.  (SRE is maintained by Fredrik Lundh.  The
     BIGCHARSET patch was contributed by Martin von Löwis.)

   * The `smtplib' module now supports RFC 2487(2), "Secure SMTP over
     TLS", so it's now possible to encrypt the SMTP traffic between a
     Python program and the mail transport agent being handed a
     message.  `smtplib' also supports SMTP authentication.
     (Contributed by Gerhard Häring.)

   * The `imaplib' module, maintained by Piers Lauder, has support for
     several new extensions: the NAMESPACE extension defined in RFC
     2342(3), SORT, GETACL and SETACL.  (Contributed by Anthony Baxter
     and Michel Pelletier.)

   * The `rfc822' module's parsing of email addresses is now compliant
     with RFC 2822(4), an update to RFC 822(5).  (The module's name is
     _not_ going to be changed to `rfc2822'.)  A new package, `email',
     has also been added for parsing and generating e-mail messages.
     (Contributed by Barry Warsaw, and arising out of his work on
     Mailman.)

   * The `difflib' module now contains a new `Differ' class for
     producing human-readable lists of changes (a "delta") between two
     sequences of lines of text.  There are also two generator
     functions, `ndiff()' and `restore()', which respectively return a
     delta from two sequences, or one of the original sequences from a
     delta. (Grunt work contributed by David Goodger, from ndiff.py
     code by Tim Peters who then did the generatorization.)

   * New constants `ascii_letters', `ascii_lowercase', and
     `ascii_uppercase' were added to the `string' module.  There were
     several modules in the standard library that used `string.letters'
     to mean the ranges A-Za-z, but that assumption is incorrect when
     locales are in use, because `string.letters' varies depending on
     the set of legal characters defined by the current locale.  The
     buggy modules have all been fixed to use `ascii_letters' instead.
     (Reported by an unknown person; fixed by Fred L. Drake, Jr.)

   * The `mimetypes' module now makes it easier to use alternative
     MIME-type databases by the addition of a `MimeTypes' class, which
     takes a list of filenames to be parsed.  (Contributed by Fred L.
     Drake, Jr.)

   * A `Timer' class was added to the `threading' module that allows
     scheduling an activity to happen at some future time.
     (Contributed by Itamar Shtull-Trauring.)

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2104.html

  (2) http://tools.ietf.org/html/rfc2487.html

  (3) http://tools.ietf.org/html/rfc2342.html

  (4) http://tools.ietf.org/html/rfc2822.html

  (5) http://tools.ietf.org/html/rfc822.html


File: python-whatsnew-3.2.2.info,  Node: Interpreter Changes and Fixes,  Next: Other Changes and Fixes<3>,  Prev: New and Improved Modules<3>,  Up: What's New in Python 2 2

9.10 Interpreter Changes and Fixes
==================================

Some of the changes only affect people who deal with the Python
interpreter at the C level because they're writing Python extension
modules, embedding the interpreter, or just hacking on the interpreter
itself. If you only write Python code, none of the changes described
here will affect you very much.

   * Profiling and tracing functions can now be implemented in C, which
     can operate at much higher speeds than Python-based functions and
     should reduce the overhead of profiling and tracing.  This  will
     be of interest to authors of development environments for Python.
     Two new C functions were added to Python's API,
     `PyEval_SetProfile()' and `PyEval_SetTrace()'. The existing
     `sys.setprofile()' and `sys.settrace()' functions still exist, and
     have simply been changed to use the new C-level interface.
     (Contributed by Fred L.  Drake, Jr.)

   * Another low-level API, primarily of interest to implementors of
     Python debuggers and development tools, was added.
     `PyInterpreterState_Head()' and `PyInterpreterState_Next()' let a
     caller walk through all the existing interpreter objects;
     `PyInterpreterState_ThreadHead()' and `PyThreadState_Next()' allow
     looping over all the thread states for a given interpreter.
     (Contributed by David Beazley.)

   * The C-level interface to the garbage collector has been changed to
     make it easier to write extension types that support garbage
     collection and to debug misuses of the functions. Various
     functions have slightly different semantics, so a bunch of
     functions had to be renamed.  Extensions that use the old API will
     still compile but will _not_ participate in garbage collection, so
     updating them for 2.2 should be considered fairly high priority.

     To upgrade an extension module to the new API, perform the
     following steps:

   * Rename `Py_TPFLAGS_GC()' to `PyTPFLAGS_HAVE_GC()'.

   *
    Use `PyObject_GC_New()' or `PyObject_GC_NewVar()' to allocate
          objects, and `PyObject_GC_Del()' to deallocate them.

   *
    Rename `PyObject_GC_Init()' to `PyObject_GC_Track()' and
          `PyObject_GC_Fini()' to `PyObject_GC_UnTrack()'.

   * Remove `PyGC_HEAD_SIZE()' from object size calculations.

   * Remove calls to `PyObject_AS_GC()' and `PyObject_FROM_GC()'.

   * A new `et' format sequence was added to `PyArg_ParseTuple()'; `et'
     takes both a parameter and an encoding name, and converts the
     parameter to the given encoding if the parameter turns out to be a
     Unicode string, or leaves it alone if it's an 8-bit string,
     assuming it to already be in the desired encoding.  This differs
     from the `es' format character, which assumes that 8-bit strings
     are in Python's default ASCII encoding and converts them to the
     specified new encoding. (Contributed by M.-A. Lemburg, and used
     for the MBCS support on Windows described in the following
     section.)

   * A different argument parsing function, `PyArg_UnpackTuple()', has
     been added that's simpler and presumably faster.  Instead of
     specifying a format string, the caller simply gives the minimum
     and maximum number of arguments expected, and a set of pointers to
     `PyObject*' variables that will be filled in with argument values.

   * Two new flags `METH_NOARGS' and `METH_O' are available in method
     definition tables to simplify implementation of methods with no
     arguments or a single untyped argument. Calling such methods is
     more efficient than calling a corresponding method that uses
     `METH_VARARGS'.  Also, the old `METH_OLDARGS' style of writing C
     methods is  now officially deprecated.

   * Two new wrapper functions, `PyOS_snprintf()' and `PyOS_vsnprintf()'
     were added to provide  cross-platform implementations for the
     relatively new `snprintf()' and `vsnprintf()' C lib APIs. In
     contrast to the standard `sprintf()' and `vsprintf()' functions,
     the Python versions check the bounds of the buffer used to protect
     against buffer overruns. (Contributed by M.-A. Lemburg.)

   * The `_PyTuple_Resize()' function has lost an unused parameter, so
     now it takes 2 parameters instead of 3.  The third argument was
     never used, and can simply be discarded when porting code from
     earlier versions to Python 2.2.


File: python-whatsnew-3.2.2.info,  Node: Other Changes and Fixes<3>,  Next: Acknowledgements<6>,  Prev: Interpreter Changes and Fixes,  Up: What's New in Python 2 2

9.11 Other Changes and Fixes
============================

As usual there were a bunch of other improvements and bugfixes scattered
throughout the source tree.  A search through the CVS change logs finds
there were 527 patches applied and 683 bugs fixed between Python 2.1
and 2.2; 2.2.1 applied 139 patches and fixed 143 bugs; 2.2.2 applied
106 patches and fixed 82 bugs.  These figures are likely to be
underestimates.

  Some of the more notable changes are:

   * The code for the MacOS port for Python, maintained by Jack Jansen,
     is now kept in the main Python CVS tree, and many changes have
     been made to support MacOS X.

     The most significant change is the ability to build Python as a
     framework, enabled by supplying the `--enable-framework' option to
     the configure script when compiling Python.  According to Jack
     Jansen, "This installs a self- contained Python installation plus
     the OS X framework "glue" into
     `/Library/Frameworks/Python.framework' (or another location of
     choice).  For now there is little immediate added benefit to this
     (actually, there is the disadvantage that you have to change your
     PATH to be able to find Python), but it is the basis for creating
     a full-blown Python application, porting the MacPython IDE,
     possibly using Python as a standard OSA scripting language and
     much more."

     Most of the MacPython toolbox modules, which interface to MacOS
     APIs such as windowing, QuickTime, scripting, etc. have been
     ported to OS X, but they've been left commented out in `setup.py'.
     People who want to experiment with these modules can uncomment
     them manually.

   * Keyword arguments passed to built-in functions that don't take
     them now cause a `TypeError' exception to be raised, with the
     message "_function_ takes no keyword arguments".

   * Weak references, added in Python 2.1 as an extension module, are
     now part of the core because they're used in the implementation of
     new-style classes.  The `ReferenceError' exception has therefore
     moved from the `weakref' module to become a built-in exception.

   * A new script, `Tools/scripts/cleanfuture.py' by Tim Peters,
     automatically removes obsolete `__future__' statements from Python
     source code.

   * An additional _flags_ argument has been added to the built-in
     function `compile()', so the behaviour of `__future__' statements
     can now be correctly observed in simulated shells, such as those
     presented by IDLE and other development environments.  This is
     described in PEP 264(1). (Contributed by Michael Hudson.)

   * The new license introduced with Python 1.6 wasn't GPL-compatible.
     This is fixed by some minor textual changes to the 2.2 license, so
     it's now legal to embed Python inside a GPLed program again.  Note
     that Python itself is not GPLed, but instead is under a license
     that's essentially equivalent to the BSD license, same as it
     always was.  The license changes were also applied to the Python
     2.0.1 and 2.1.1 releases.

   * When presented with a Unicode filename on Windows, Python will now
     convert it to an MBCS encoded string, as used by the Microsoft
     file APIs.  As MBCS is explicitly used by the file APIs, Python's
     choice of ASCII as the default encoding turns out to be an
     annoyance.  On Unix, the locale's character set is used if
     `locale.nl_langinfo(CODESET)()' is available.  (Windows support was
     contributed by Mark Hammond with assistance from Marc-André
     Lemburg. Unix support was added by Martin von Löwis.)

   * Large file support is now enabled on Windows.  (Contributed by Tim
     Peters.)

   * The `Tools/scripts/ftpmirror.py' script now parses a `.netrc'
     file, if you have one. (Contributed by Mike Romberg.)

   * Some features of the object returned by the `xrange()' function
     are now deprecated, and trigger warnings when they're accessed;
     they'll disappear in Python 2.3. `xrange' objects tried to pretend
     they were full sequence types by supporting slicing, sequence
     multiplication, and the `in' operator, but these features were
     rarely used and therefore buggy.  The `tolist()' method and the
     `start', `stop', and `step' attributes are also being deprecated.
     At the C level, the fourth argument to the `PyRange_New()'
     function, `repeat', has also been deprecated.

   * There were a bunch of patches to the dictionary implementation,
     mostly to fix potential core dumps if a dictionary contains
     objects that sneakily changed their hash value, or mutated the
     dictionary they were contained in. For a while python-dev fell
     into a gentle rhythm of Michael Hudson finding a case that dumped
     core, Tim Peters fixing the bug, Michael finding another case, and
     round and round it went.

   * On Windows, Python can now be compiled with Borland C thanks to a
     number of patches contributed by Stephen Hansen, though the result
     isn't fully functional yet.  (But this _is_ progress...)

   * Another Windows enhancement: Wise Solutions generously offered
     PythonLabs use of their InstallerMaster 8.1 system.  Earlier
     PythonLabs Windows installers used Wise 5.0a, which was beginning
     to show its age.  (Packaged up by Tim Peters.)

   * Files ending in `.pyw' can now be imported on Windows. `.pyw' is a
     Windows-only thing, used to indicate that a script needs to be run
     using PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS
     console from popping up to display the output.  This patch makes
     it possible to import such scripts, in case they're also usable as
     modules.  (Implemented by David Bolen.)

   * On platforms where Python uses the C `dlopen()' function  to load
     extension modules, it's now possible to set the flags used  by
     `dlopen()' using the `sys.getdlopenflags()' and
     `sys.setdlopenflags()' functions.  (Contributed by Bram Stolk.)

   * The `pow()' built-in function no longer supports 3 arguments when
     floating-point numbers are supplied. `pow(x, y, z)' returns
     `(x**y) % z', but this is never useful for floating point numbers,
     and the final result varies unpredictably depending on the
     platform.  A call such as `pow(2.0, 8.0, 7.0)' will now raise a
     `TypeError' exception.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0264


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<6>,  Prev: Other Changes and Fixes<3>,  Up: What's New in Python 2 2

9.12 Acknowledgements
=====================

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Fred Bremmer, Keith Briggs, Andrew Dalke, Fred L. Drake, Jr.,
Carel Fellinger, David Goodger, Mark Hammond, Stephen Hansen, Michael
Hudson, Jack Jansen, Marc-André Lemburg, Martin von Löwis, Fredrik
Lundh, Michael McLay, Nick Mathewson, Paul Moore, Gustavo Niemeyer, Don
O'Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom Reinhardt, Neil
Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 1,  Next: What's New in Python 2 0,  Prev: What's New in Python 2 2,  Up: Top

10 What's New in Python 2.1
***************************

     Author: A.M. Kuchling

* Menu:

* Introduction: Introduction<2>.
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>.
* PEP 236; __future__ Directives: PEP 236 __future__ Directives.
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons.
* PEP 230; Warning Framework: PEP 230 Warning Framework.
* PEP 229; New Build System: PEP 229 New Build System.
* PEP 205; Weak References: PEP 205 Weak References.
* PEP 232; Function Attributes: PEP 232 Function Attributes.
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms.
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook.
* PEP 208; New Coercion Model: PEP 208 New Coercion Model.
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages.
* New and Improved Modules: New and Improved Modules<4>.
* Other Changes and Fixes: Other Changes and Fixes<4>.
* Acknowledgements: Acknowledgements<7>.


File: python-whatsnew-3.2.2.info,  Node: Introduction<2>,  Next: PEP 227 Nested Scopes<2>,  Up: What's New in Python 2 1

10.1 Introduction
=================

This article explains the new features in Python 2.1.  While there
aren't as many changes in 2.1 as there were in Python 2.0, there are
still some pleasant surprises in store.  2.1 is the first release to be
steered through the use of Python Enhancement Proposals, or PEPs, so
most of the sizable changes have accompanying PEPs that provide more
complete documentation and a design rationale for the change.  This
article doesn't attempt to document the new features completely, but
simply provides an overview of the new features for Python programmers.
Refer to the Python 2.1 documentation, or to the specific PEP, for more
details about any new feature that particularly interests you.

  One recent goal of the Python development team has been to accelerate
the pace of new releases, with a new release coming every 6 to 9
months. 2.1 is the first release to come out at this faster pace, with
the first alpha appearing in January, 3 months after the final version
of 2.0 was released.

  The final release of Python 2.1 was made on April 17, 2001.


File: python-whatsnew-3.2.2.info,  Node: PEP 227 Nested Scopes<2>,  Next: PEP 236 __future__ Directives,  Prev: Introduction<2>,  Up: What's New in Python 2 1

10.2 PEP 227: Nested Scopes
===========================

The largest change in Python 2.1 is to Python's scoping rules.  In
Python 2.0, at any given time there are at most three namespaces used
to look up variable names: local, module-level, and the built-in
namespace.  This often surprised people because it didn't match their
intuitive expectations.  For example, a nested recursive function
definition doesn't work:

    def f():
        ...
        def g(value):
            ...
            return g(value-1) + 1
        ...

The function `g()' will always raise a `NameError' exception, because
the binding of the name `g' isn't in either its local namespace or in
the module-level namespace.  This isn't much of a problem in practice
(how often do you recursively define interior functions like this?),
but this also made using the `lambda' statement clumsier, and this was
a problem in practice.  In code which uses `lambda' you can often find
local variables being copied by passing them as the default values of
arguments.

    def find(self, name):
        "Return list of any entries equal to 'name'"
        L = filter(lambda x, name=name: x == name,
                   self.list_attribute)
        return L

The readability of Python code written in a strongly functional style
suffers greatly as a result.

  The most significant change to Python 2.1 is that static scoping has
been added to the language to fix this problem.  As a first effect, the
`name=name' default argument is now unnecessary in the above example.
Put simply, when a given variable name is not assigned a value within a
function (by an assignment, or the `def', `class', or `import'
statements), references to the variable will be looked up in the local
namespace of the enclosing scope.  A more detailed explanation of the
rules, and a dissection of the implementation, can be found in the PEP.

  This change may cause some compatibility problems for code where the
same variable name is used both at the module level and as a local
variable within a function that contains further function definitions.
This seems rather unlikely though, since such code would have been
pretty confusing to read in the first place.

  One side effect of the change is that the `from module import *' and
`exec' statements have been made illegal inside a function scope under
certain conditions.  The Python reference manual has said all along
that `from module import *' is only legal at the top level of a module,
but the CPython interpreter has never enforced this before.  As part of
the implementation of nested scopes, the compiler which turns Python
source into bytecodes has to generate different code to access
variables in a containing scope.  `from module import *' and `exec'
make it impossible for the compiler to figure this out, because they
add names to the local namespace that are unknowable at compile time.
Therefore, if a function contains function definitions or `lambda'
expressions with free variables, the compiler will flag this by raising
a `SyntaxError' exception.

  To make the preceding explanation a bit clearer, here's an example:

    x = 1
    def f():
        # The next line is a syntax error
        exec 'x=2'
        def g():
            return x

Line 4 containing the `exec' statement is a syntax error, since `exec'
would define a new local variable named `x' whose value should be
accessed by `g()'.

  This shouldn't be much of a limitation, since `exec' is rarely used in
most Python code (and when it is used, it's often a sign of a poor
design anyway).

  Compatibility concerns have led to nested scopes being introduced
gradually; in Python 2.1, they aren't enabled by default, but can be
turned on within a module by using a future statement as described in
PEP 236.  (See the following section for further discussion of PEP
236.)  In Python 2.2, nested scopes will become the default and there
will be no way to turn them off, but users will have had all of 2.1's
lifetime to fix any breakage resulting from their introduction.

See also
........

PEP 227(1) - Statically Nested Scopes
     Written and implemented by Jeremy Hylton.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0227


File: python-whatsnew-3.2.2.info,  Node: PEP 236 __future__ Directives,  Next: PEP 207 Rich Comparisons,  Prev: PEP 227 Nested Scopes<2>,  Up: What's New in Python 2 1

10.3 PEP 236: __future__ Directives
===================================

The reaction to nested scopes was widespread concern about the dangers
of breaking code with the 2.1 release, and it was strong enough to make
the Pythoneers take a more conservative approach.  This approach
consists of introducing a convention for enabling optional
functionality in release N that will become compulsory in release N+1.

  The syntax uses a `from...import' statement using the reserved module
name `__future__'.  Nested scopes can be enabled by the following
statement:

    from __future__ import nested_scopes

While it looks like a normal `import' statement, it's not; there are
strict rules on where such a future statement can be put. They can only
be at the top of a module, and must precede any Python code or regular
`import' statements.  This is because such statements can affect how
the Python bytecode compiler parses code and generates bytecode, so
they must precede any statement that will result in bytecodes being
produced.

See also
........

PEP 236(1) - Back to the `__future__'
     Written by Tim Peters, and primarily implemented by Jeremy Hylton.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0236


File: python-whatsnew-3.2.2.info,  Node: PEP 207 Rich Comparisons,  Next: PEP 230 Warning Framework,  Prev: PEP 236 __future__ Directives,  Up: What's New in Python 2 1

10.4 PEP 207: Rich Comparisons
==============================

In earlier versions, Python's support for implementing comparisons on
user- defined classes and extension types was quite simple. Classes
could implement a `__cmp__()' method that was given two instances of a
class, and could only return 0 if they were equal or +1 or -1 if they
weren't; the method couldn't raise an exception or return anything
other than a Boolean value.  Users of Numeric Python often found this
model too weak and restrictive, because in the number-crunching
programs that numeric Python is used for, it would be more useful to be
able to perform elementwise comparisons of two matrices, returning a
matrix containing the results of a given comparison for each element.
If the two matrices are of different sizes, then the compare has to be
able to raise an exception to signal the error.

  In Python 2.1, rich comparisons were added in order to support this
need.  Python classes can now individually overload each of the `<',
`<=', `>', `>=', `==', and `!=' operations.  The new magic method names
are:

Operation       Method name
------------------------------------- 
`<'             `__lt__()'
`<='            `__le__()'
`>'             `__gt__()'
`>='            `__ge__()'
`=='            `__eq__()'
`!='            `__ne__()'

  (The magic methods are named after the corresponding Fortran
operators `.LT.'.  `.LE.', &c.  Numeric programmers are almost
certainly quite familiar with these names and will find them easy to
remember.)

  Each of these magic methods is of the form `method(self, other)',
where `self' will be the object on the left-hand side of the operator,
while `other' will be the object on the right-hand side.  For example,
the expression `A < B' will cause `A.__lt__(B)' to be called.

  Each of these magic methods can return anything at all: a Boolean, a
matrix, a list, or any other Python object.  Alternatively they can
raise an exception if the comparison is impossible, inconsistent, or
otherwise meaningless.

  The built-in `cmp(A,B)()' function can use the rich comparison
machinery, and now accepts an optional argument specifying which
comparison operation to use; this is given as one of the strings `"<"',
`"<="', `">"', `">="', `"=="', or `"!="'.  If called without the
optional third argument, `cmp()' will only return -1, 0, or +1 as in
previous versions of Python; otherwise it will call the appropriate
method and can return any Python object.

  There are also corresponding changes of interest to C programmers;
there's a new slot `tp_richcmp' in type objects and an API for
performing a given rich comparison.  I won't cover the C API here, but
will refer you to PEP 207, or to 2.1's C API documentation, for the
full list of related functions.

See also
........

PEP 207(1) - Rich Comparisions
     Written by Guido van Rossum, heavily based on earlier work by
     David Ascher, and implemented by Guido van Rossum.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0207


File: python-whatsnew-3.2.2.info,  Node: PEP 230 Warning Framework,  Next: PEP 229 New Build System,  Prev: PEP 207 Rich Comparisons,  Up: What's New in Python 2 1

10.5 PEP 230: Warning Framework
===============================

Over its 10 years of existence, Python has accumulated a certain number
of obsolete modules and features along the way.  It's difficult to know
when a feature is safe to remove, since there's no way of knowing how
much code uses it -- perhaps no programs depend on the feature, or
perhaps many do.  To enable removing old features in a more structured
way, a warning framework was added.  When the Python developers want to
get rid of a feature, it will first trigger a warning in the next
version of Python.  The following Python version can then drop the
feature, and users will have had a full release cycle to remove uses of
the old feature.

  Python 2.1 adds the warning framework to be used in this scheme.  It
adds a `warnings' module that provide functions to issue warnings, and
to filter out warnings that you don't want to be displayed. Third-party
modules can also use this framework to deprecate old features that they
no longer wish to support.

  For example, in Python 2.1 the `regex' module is deprecated, so
importing it causes a warning to be printed:

    >>> import regex
    __main__:1: DeprecationWarning: the regex module
             is deprecated; please use the re module
    >>>

Warnings can be issued by calling the `warnings.warn()' function:

    warnings.warn("feature X no longer supported")

The first parameter is the warning message; an additional optional
parameters can be used to specify a particular warning category.

  Filters can be added to disable certain warnings; a regular
expression pattern can be applied to the message or to the module name
in order to suppress a warning.  For example, you may have a program
that uses the `regex' module and not want to spare the time to convert
it to use the `re' module right now.  The warning can be suppressed by
calling

    import warnings
    warnings.filterwarnings(action = 'ignore',
                            message='.*regex module is deprecated',
                            category=DeprecationWarning,
                            module = '__main__')

This adds a filter that will apply only to warnings of the class
`DeprecationWarning' triggered in the `__main__' module, and applies a
regular expression to only match the message about the `regex' module
being deprecated, and will cause such warnings to be ignored.  Warnings
can also be printed only once, printed every time the offending code is
executed, or turned into exceptions that will cause the program to stop
(unless the exceptions are caught in the usual way, of course).

  Functions were also added to Python's C API for issuing warnings;
refer to PEP 230 or to Python's API documentation for the details.

See also
........

PEP 5(1) - Guidelines for Language Evolution
     Written by Paul Prescod, to specify procedures to be followed when
     removing old features from Python.  The policy described in this
     PEP hasn't been officially adopted, but the eventual policy
     probably won't be too different from Prescod's proposal.

PEP 230(2) - Warning Framework
     Written and implemented by Guido van Rossum.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0005

  (2) http://www.python.org/dev/peps/pep-0230


File: python-whatsnew-3.2.2.info,  Node: PEP 229 New Build System,  Next: PEP 205 Weak References,  Prev: PEP 230 Warning Framework,  Up: What's New in Python 2 1

10.6 PEP 229: New Build System
==============================

When compiling Python, the user had to go in and edit the
`Modules/Setup' file in order to enable various additional modules; the
default set is relatively small and limited to modules that compile on
most Unix platforms.  This means that on Unix platforms with many more
features, most notably Linux, Python installations often don't contain
all useful modules they could.

  Python 2.0 added the Distutils, a set of modules for distributing and
installing extensions.  In Python 2.1, the Distutils are used to
compile much of the standard library of extension modules,
autodetecting which ones are supported on the current machine.  It's
hoped that this will make Python installations easier and more
featureful.

  Instead of having to edit the `Modules/Setup' file in order to enable
modules, a `setup.py' script in the top directory of the Python source
distribution is run at build time, and attempts to discover which
modules can be enabled by examining the modules and header files on the
system.  If a module is configured in `Modules/Setup', the `setup.py'
script won't attempt to compile that module and will defer to the
`Modules/Setup' file's contents.  This provides a way to specific any
strange command-line flags or libraries that are required for a
specific platform.

  In another far-reaching change to the build mechanism, Neil
Schemenauer restructured things so Python now uses a single makefile
that isn't recursive, instead of makefiles in the top directory and in
each of the `Python/', `Parser/', `Objects/', and `Modules/'
subdirectories.  This makes building Python faster and also makes
hacking the Makefiles clearer and simpler.

See also
........

PEP 229(1) - Using Distutils to Build Python
     Written and implemented by A.M. Kuchling.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0229


File: python-whatsnew-3.2.2.info,  Node: PEP 205 Weak References,  Next: PEP 232 Function Attributes,  Prev: PEP 229 New Build System,  Up: What's New in Python 2 1

10.7 PEP 205: Weak References
=============================

Weak references, available through the `weakref' module, are a minor but
useful new data type in the Python programmer's toolbox.

  Storing a reference to an object (say, in a dictionary or a list) has
the side effect of keeping that object alive forever.  There are a few
specific cases where this behaviour is undesirable, object caches being
the most common one, and another being circular references in data
structures such as trees.

  For example, consider a memoizing function that caches the results of
another function `f(x)()' by storing the function's argument and its
result in a dictionary:

    _cache = {}
    def memoize(x):
        if _cache.has_key(x):
            return _cache[x]

        retval = f(x)

        # Cache the returned object
        _cache[x] = retval

        return retval

This version works for simple things such as integers, but it has a
side effect; the `_cache' dictionary holds a reference to the return
values, so they'll never be deallocated until the Python process exits
and cleans up This isn't very noticeable for integers, but if `f()'
returns an object, or a data structure that takes up a lot of memory,
this can be a problem.

  Weak references provide a way to implement a cache that won't keep
objects alive beyond their time.  If an object is only accessible
through weak references, the object will be deallocated and the weak
references will now indicate that the object it referred to no longer
exists.  A weak reference to an object _obj_ is created by calling `wr
= weakref.ref(obj)'.  The object being referred to is returned by
calling the weak reference as if it were a function: `wr()'.  It will
return the referenced object, or `None' if the object no longer exists.

  This makes it possible to write a `memoize()' function whose cache
doesn't keep objects alive, by storing weak references in the cache.

    _cache = {}
    def memoize(x):
        if _cache.has_key(x):
            obj = _cache[x]()
            # If weak reference object still exists,
            # return it
            if obj is not None: return obj

        retval = f(x)

        # Cache a weak reference
        _cache[x] = weakref.ref(retval)

        return retval

The `weakref' module also allows creating proxy objects which behave
like weak references -- an object referenced only by proxy objects is
deallocated - but instead of requiring an explicit call to retrieve the
object, the proxy transparently forwards all operations to the object
as long as the object still exists.  If the object is deallocated,
attempting to use a proxy will cause a `weakref.ReferenceError'
exception to be raised.

    proxy = weakref.proxy(obj)
    proxy.attr   # Equivalent to obj.attr
    proxy.meth() # Equivalent to obj.meth()
    del obj
    proxy.attr   # raises weakref.ReferenceError


See also
........

PEP 205(1) - Weak References
     Written and implemented by Fred L. Drake, Jr.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0205


File: python-whatsnew-3.2.2.info,  Node: PEP 232 Function Attributes,  Next: PEP 235 Importing Modules on Case-Insensitive Platforms,  Prev: PEP 205 Weak References,  Up: What's New in Python 2 1

10.8 PEP 232: Function Attributes
=================================

In Python 2.1, functions can now have arbitrary information attached to
them.  People were often using docstrings to hold information about
functions and methods, because the `__doc__' attribute was the only way
of attaching any information to a function.  For example, in the Zope
Web application server, functions are marked as safe for public access
by having a docstring, and in John Aycock's SPARK parsing framework,
docstrings hold parts of the BNF grammar to be parsed.  This
overloading is unfortunate, since docstrings are really intended to
hold a function's documentation; for example, it means you can't
properly document functions intended for private use in Zope.

  Arbitrary attributes can now be set and retrieved on functions using
the regular Python syntax:

    def f(): pass

    f.publish = 1
    f.secure = 1
    f.grammar = "A ::= B (C D)*"

The dictionary containing attributes can be accessed as the function's
`__dict__'. Unlike the `__dict__' attribute of class instances, in
functions you can actually assign a new dictionary to `__dict__', though
the new value is restricted to a regular Python dictionary; you _can't_
be tricky and set it to a `UserDict' instance, or any other random
object that behaves like a mapping.

See also
........

PEP 232(1) - Function Attributes
     Written and implemented by Barry Warsaw.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0232


File: python-whatsnew-3.2.2.info,  Node: PEP 235 Importing Modules on Case-Insensitive Platforms,  Next: PEP 217 Interactive Display Hook,  Prev: PEP 232 Function Attributes,  Up: What's New in Python 2 1

10.9 PEP 235: Importing Modules on Case-Insensitive Platforms
=============================================================

Some operating systems have filesystems that are case-insensitive,
MacOS and Windows being the primary examples; on these systems, it's
impossible to distinguish the filenames `FILE.PY' and `file.py', even
though they do store the file's name  in its original case (they're
case-preserving, too).

  In Python 2.1, the `import' statement will work to simulate case-
sensitivity on case-insensitive platforms.  Python will now search for
the first case-sensitive match by default, raising an `ImportError' if
no such file is found, so `import file' will not import a module named
`FILE.PY'.  Case- insensitive matching can be requested by setting the `PYTHONCASEOK'
environment variable before starting the Python interpreter.


File: python-whatsnew-3.2.2.info,  Node: PEP 217 Interactive Display Hook,  Next: PEP 208 New Coercion Model,  Prev: PEP 235 Importing Modules on Case-Insensitive Platforms,  Up: What's New in Python 2 1

10.10 PEP 217: Interactive Display Hook
=======================================

When using the Python interpreter interactively, the output of commands
is displayed using the built-in `repr()' function. In Python 2.1, the
variable `sys.displayhook()' can be set to a callable object which will
be called instead of `repr()'. For example, you can set it to a special
pretty- printing function:

    >>> # Create a recursive data structure
    ... L = [1,2,3]
    >>> L.append(L)
    >>> L # Show Python's default output
    [1, 2, 3, [...]]
    >>> # Use pprint.pprint() as the display function
    ... import sys, pprint
    >>> sys.displayhook = pprint.pprint
    >>> L
    [1, 2, 3,  <Recursion on list with id=135143996>]
    >>>


See also
........

PEP 217(1) - Display Hook for Interactive Use
     Written and implemented by Moshe Zadka.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0217


File: python-whatsnew-3.2.2.info,  Node: PEP 208 New Coercion Model,  Next: PEP 241 Metadata in Python Packages,  Prev: PEP 217 Interactive Display Hook,  Up: What's New in Python 2 1

10.11 PEP 208: New Coercion Model
=================================

How numeric coercion is done at the C level was significantly modified.
This will only affect the authors of C extensions to Python, allowing
them more flexibility in writing extension types that support numeric
operations.

  Extension types can now set the type flag `Py_TPFLAGS_CHECKTYPES' in
their `PyTypeObject' structure to indicate that they support the new
coercion model.  In such extension types, the numeric slot functions
can no longer assume that they'll be passed two arguments of the same
type; instead they may be passed two arguments of differing types, and
can then perform their own internal coercion.  If the slot function is
passed a type it can't handle, it can indicate the failure by returning
a reference to the `Py_NotImplemented' singleton value.  The numeric
functions of the other type will then be tried, and perhaps they can
handle the operation; if the other type also returns
`Py_NotImplemented', then a `TypeError' will be raised.  Numeric
methods written in Python can also return `Py_NotImplemented', causing
the interpreter to act as if the method did not exist (perhaps raising
a `TypeError', perhaps trying another object's numeric methods).

See also
........

PEP 208(1) - Reworking the Coercion Model
     Written and implemented by Neil Schemenauer, heavily based upon
     earlier work by Marc-André Lemburg.  Read this to understand the
     fine points of how numeric operations will now be processed at the
     C level.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0208


File: python-whatsnew-3.2.2.info,  Node: PEP 241 Metadata in Python Packages,  Next: New and Improved Modules<4>,  Prev: PEP 208 New Coercion Model,  Up: What's New in Python 2 1

10.12 PEP 241: Metadata in Python Packages
==========================================

A common complaint from Python users is that there's no single catalog
of all the Python modules in existence.  T. Middleton's Vaults of
Parnassus at <http://www.vex.net/parnassus/> are the largest catalog of
Python modules, but registering software at the Vaults is optional, and
many people don't bother.

  As a first small step toward fixing the problem, Python software
packaged using the Distutils *sdist* command will include a file named
`PKG-INFO' containing information about the package such as its name,
version, and author (metadata, in cataloguing terminology).  PEP 241
contains the full list of fields that can be present in the `PKG-INFO'
file.  As people began to package their software using Python 2.1, more
and more packages will include metadata, making it possible to build
automated cataloguing systems and experiment with them.  With the
result experience, perhaps it'll be possible to design a really good
catalog and then build support for it into Python 2.2.  For example,
the Distutils *sdist* and *bdist_** commands could support a `upload'
option that would automatically upload your package to a catalog server.

  You can start creating packages containing `PKG-INFO' even if you're
not using Python 2.1, since a new release of the Distutils will be made
for users of earlier Python versions.  Version 1.0.2 of the Distutils
includes the changes described in PEP 241, as well as various bugfixes
and enhancements.  It will be available from  the Distutils SIG at
<http://www.python.org/sigs/distutils-sig/>.

See also
........

PEP 241(1) - Metadata for Python Software Packages
     Written and implemented by A.M. Kuchling.

PEP 243(2) - Module Repository Upload Mechanism
     Written by Sean Reifschneider, this draft PEP describes a proposed
     mechanism for uploading  Python packages to a central server.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0241

  (2) http://www.python.org/dev/peps/pep-0243


File: python-whatsnew-3.2.2.info,  Node: New and Improved Modules<4>,  Next: Other Changes and Fixes<4>,  Prev: PEP 241 Metadata in Python Packages,  Up: What's New in Python 2 1

10.13 New and Improved Modules
==============================

   * Ka-Ping Yee contributed two new modules: `inspect.py', a module for
     getting information about live Python code, and `pydoc.py', a
     module for interactively converting docstrings to HTML or text.
     As a bonus, `Tools/scripts/pydoc', which is now automatically
     installed, uses `pydoc.py' to display documentation given a Python
     module, package, or class name.  For example, `pydoc xml.dom'
     displays the following:

         Python Library Documentation: package xml.dom in xml

         NAME
             xml.dom - W3C Document Object Model implementation for Python.

         FILE
             /usr/local/lib/python2.1/xml/dom/__init__.pyc

         DESCRIPTION
             The Python mapping of the Document Object Model is documented in the
             Python Library Reference in the section on the xml.dom package.

             This package contains the following modules:
               ...

     `pydoc' also includes a Tk-based interactive help browser.
     `pydoc' quickly becomes addictive; try it out!

   * Two different modules for unit testing were added to the standard
     library.  The `doctest' module, contributed by Tim Peters,
     provides a testing framework based on running embedded examples in
     docstrings and comparing the results against the expected output.
     PyUnit, contributed by Steve Purcell, is a unit testing framework
     inspired by JUnit, which was in turn an adaptation of Kent Beck's
     Smalltalk testing framework.  See <http://pyunit.sourceforge.net/>
     for more information about PyUnit.

   * The `difflib' module contains a class, `SequenceMatcher', which
     compares two sequences and computes the changes required to
     transform one sequence into the other.  For example, this module
     can be used to write a tool similar to the Unix *diff* program,
     and in fact the sample program `Tools/scripts/ndiff.py'
     demonstrates how to write such a script.

   * `curses.panel', a wrapper for the panel library, part of ncurses
     and of SYSV curses, was contributed by Thomas Gellekum.  The panel
     library provides windows with the additional feature of depth.
     Windows can be moved higher or lower in the depth ordering, and
     the panel library figures out where panels overlap and which
     sections are visible.

   * The PyXML package has gone through a few releases since Python
     2.0, and Python 2.1 includes an updated version of the `xml'
     package.  Some of the noteworthy changes include support for Expat
     1.2 and later versions, the ability for Expat parsers to handle
     files in any encoding supported by Python, and various bugfixes
     for SAX, DOM, and the `minidom' module.

   * Ping also contributed another hook for handling uncaught
     exceptions.  `sys.excepthook()' can be set to a callable object.
     When an exception isn't caught by any `try'...`except' blocks, the
     exception will be passed to `sys.excepthook()', which can then do
     whatever it likes.  At the Ninth Python Conference, Ping
     demonstrated an application for this hook: printing an extended
     traceback that not only lists the stack frames, but also lists the
     function arguments and the local variables for each frame.

   * Various functions in the `time' module, such as `asctime()' and
     `localtime()', require a floating point argument containing the
     time in seconds since the epoch.  The most common use of these
     functions is to work with the current time, so the floating point
     argument has been made optional; when a value isn't provided, the
     current time will be used.  For example, log file entries usually
     need a string containing the current time; in Python 2.1,
     `time.asctime()' can be used, instead of the lengthier
     `time.asctime(time.localtime(time.time()))' that was previously
     required.

     This change was proposed and implemented by Thomas Wouters.

   * The `ftplib' module now defaults to retrieving files in passive
     mode, because passive mode is more likely to work from behind a
     firewall.  This request came from the Debian bug tracking system,
     since other Debian packages use `ftplib' to retrieve files and
     then don't work from behind a firewall.  It's deemed unlikely that
     this will cause problems for anyone, because Netscape defaults to
     passive mode and few people complain, but if passive mode is
     unsuitable for your application or network setup, call
     `set_pasv(0)()' on FTP objects to disable passive mode.

   * Support for raw socket access has been added to the `socket'
     module, contributed by Grant Edwards.

   * The `pstats' module now contains a simple interactive statistics
     browser for displaying timing profiles for Python programs,
     invoked when the module is run as a script.  Contributed by  Eric
     S. Raymond.

   * A new implementation-dependent function,
     `sys._getframe([depth])()', has been added to return a given frame
     object from the current call stack.  `sys._getframe()' returns the
     frame at the top of the call stack;  if the optional integer
     argument _depth_ is supplied, the function returns the frame that
     is _depth_ calls below the top of the stack.  For example,
     `sys._getframe(1)' returns the caller's frame object.

     This function is only present in CPython, not in Jython or the .NET
     implementation.  Use it for debugging, and resist the temptation
     to put it into production code.


File: python-whatsnew-3.2.2.info,  Node: Other Changes and Fixes<4>,  Next: Acknowledgements<7>,  Prev: New and Improved Modules<4>,  Up: What's New in Python 2 1

10.14 Other Changes and Fixes
=============================

There were relatively few smaller changes made in Python 2.1 due to the
shorter release cycle.  A search through the CVS change logs turns up
117 patches applied, and 136 bugs fixed; both figures are likely to be
underestimates.  Some of the more notable changes are:

   * A specialized object allocator is now optionally available, that
     should be faster than the system `malloc()' and have less memory
     overhead.  The allocator uses C's `malloc()' function to get large
     pools of memory, and then fulfills smaller memory requests from
     these pools.  It can be enabled by providing the `--with-pymalloc'
     option to the *configure* script; see `Objects/obmalloc.c' for the
     implementation details.

     Authors of C extension modules should test their code with the
     object allocator enabled, because some incorrect code may break,
     causing core dumps at runtime.  There are a bunch of memory
     allocation functions in Python's C API that have previously been
     just aliases for the C library's `malloc()' and `free()', meaning
     that if you accidentally called mismatched functions, the error
     wouldn't be noticeable.  When the object allocator is enabled,
     these functions aren't aliases of `malloc()' and `free()' any
     more, and calling the wrong function to free memory will get you a
     core dump.  For example, if memory was allocated using
     `PyMem_New()', it has to be freed using `PyMem_Del()', not
     `free()'.  A few modules included with Python fell afoul of this
     and had to be fixed; doubtless there are more third-party modules
     that will have the same problem.

     The object allocator was contributed by Vladimir Marangozov.

   * The speed of line-oriented file I/O has been improved because
     people often complain about its lack of speed, and because it's
     often been used as a naïve benchmark.  The `readline()' method of
     file objects has therefore been rewritten to be much faster.  The
     exact amount of the speedup will vary from platform to platform
     depending on how slow the C library's `getc()' was, but is around
     66%, and potentially much faster on some particular operating
     systems.  Tim Peters did much of the benchmarking and coding for
     this change, motivated by a discussion in comp.lang.python.

     A new module and method for file objects was also added,
     contributed by Jeff Epler. The new method, `xreadlines()', is
     similar to the existing `xrange()' built-in.  `xreadlines()'
     returns an opaque sequence object that only supports being
     iterated over, reading a line on every iteration but not reading
     the entire file into memory as the existing `readlines()' method
     does. You'd use it like this:

         for line in sys.stdin.xreadlines():
             # ... do something for each line ...
             ...

     For a fuller discussion of the line I/O changes, see the
     python-dev summary for January 1-15, 2001 at
     <http://www.python.org/dev/summary/2001-01-1/>.

   * A new method, `popitem()', was added to dictionaries to enable
     destructively iterating through the contents of a dictionary; this
     can be faster for large dictionaries because there's no need to
     construct a list containing all the keys or values. `D.popitem()'
     removes a random `(key, value)' pair from the dictionary `D' and
     returns it as a 2-tuple.  This was implemented mostly by Tim
     Peters and Guido van Rossum, after a suggestion and preliminary
     patch by Moshe Zadka.

   * Modules can now control which names are imported when `from module
     import *' is used, by defining an `__all__' attribute containing a
     list of names that will be imported.  One common complaint is that
     if the module imports other modules such as `sys' or `string',
     `from module import *' will add them to the importing module's
     namespace.  To fix this, simply list the public names in `__all__':

         # List public names
         __all__ = ['Database', 'open']

     A stricter version of this patch was first suggested and
     implemented by Ben Wolfson, but after some python-dev discussion,
     a weaker final version was checked in.

   * Applying `repr()' to strings previously used octal escapes for
     non-printable characters; for example, a newline was `'\012''.
     This was a vestigial trace of Python's C ancestry, but today octal
     is of very little practical use.  Ka-Ping Yee suggested using hex
     escapes instead of octal ones, and using the `\n', `\t', `\r'
     escapes for the appropriate characters, and implemented this new
     formatting.

   * Syntax errors detected at compile-time can now raise exceptions
     containing the filename and line number of the error, a pleasant
     side effect of the compiler reorganization done by Jeremy Hylton.

   * C extensions which import other modules have been changed to use
     `PyImport_ImportModule()', which means that they will use any
     import hooks that have been installed.  This is also encouraged
     for third-party extensions that need to import some other module
     from C code.

   * The size of the Unicode character database was shrunk by another
     340K thanks to Fredrik Lundh.

   * Some new ports were contributed: MacOS X (by Steven Majewski),
     Cygwin (by Jason Tishler); RISCOS (by Dietmar Schwertberger);
     Unixware 7  (by Billy G.  Allie).

  And there's the usual list of minor bugfixes, minor memory leaks,
docstring edits, and other tweaks, too lengthy to be worth itemizing;
see the CVS logs for the full details if you want them.


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<7>,  Prev: Other Changes and Fixes<4>,  Up: What's New in Python 2 1

10.15 Acknowledgements
======================

The author would like to thank the following people for offering
suggestions on various drafts of this article: Graeme Cross, David
Goodger, Jay Graves, Michael Hudson, Marc-André Lemburg, Fredrik Lundh,
Neil Schemenauer, Thomas Wouters.


File: python-whatsnew-3.2.2.info,  Node: What's New in Python 2 0,  Next: Index,  Prev: What's New in Python 2 1,  Up: Top

11 What's New in Python 2.0
***************************

     Author: A.M. Kuchling and Moshe Zadka

* Menu:

* Introduction: Introduction<3>.
* What About Python 1.6?: What About Python 1 6?.
* New Development Process::
* Unicode: Unicode<2>.
* List Comprehensions::
* Augmented Assignment::
* String Methods::
* Garbage Collection of Cycles::
* Other Core Changes::
* Porting to 2.0: Porting to 2 0.
* Extending/Embedding Changes::
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install.
* XML Modules::
* Module changes::
* New modules::
* IDLE Improvements::
* Deleted and Deprecated Modules::
* Acknowledgements: Acknowledgements<8>.


File: python-whatsnew-3.2.2.info,  Node: Introduction<3>,  Next: What About Python 1 6?,  Up: What's New in Python 2 0

11.1 Introduction
=================

A new release of Python, version 2.0, was released on October 16, 2000.
This article covers the exciting new features in 2.0, highlights some
other useful changes, and points out a few incompatible changes that
may require rewriting code.

  Python's development never completely stops between releases, and a
steady flow of bug fixes and improvements are always being submitted. A
host of minor fixes, a few optimizations, additional docstrings, and
better error messages went into 2.0; to list them all would be
impossible, but they're certainly significant.  Consult the
publicly-available CVS logs if you want to see the full list.  This
progress is due to the five developers working for  PythonLabs are now
getting paid to spend their days fixing bugs, and also due to the
improved communication resulting  from moving to SourceForge.


File: python-whatsnew-3.2.2.info,  Node: What About Python 1 6?,  Next: New Development Process,  Prev: Introduction<3>,  Up: What's New in Python 2 0

11.2 What About Python 1.6?
===========================

Python 1.6 can be thought of as the Contractual Obligations Python
release.  After the core development team left CNRI in May 2000, CNRI
requested that a 1.6 release be created, containing all the work on
Python that had been performed at CNRI.  Python 1.6 therefore
represents the state of the CVS tree as of May 2000, with the most
significant new feature being Unicode support.  Development continued
after May, of course, so the 1.6 tree received a few fixes to ensure
that it's forward-compatible with Python 2.0.  1.6 is therefore part of
Python's evolution, and not a side branch.

  So, should you take much interest in Python 1.6?  Probably not.  The
1.6final and 2.0beta1 releases were made on the same day (September 5,
2000), the plan being to finalize Python 2.0 within a month or so.  If
you have applications to maintain, there seems little point in breaking
things by moving to 1.6, fixing them, and then having another round of
breakage within a month by moving to 2.0; you're better off just going
straight to 2.0.  Most of the really interesting features described in
this document are only in 2.0, because a lot of work was done between
May and September.


File: python-whatsnew-3.2.2.info,  Node: New Development Process,  Next: Unicode<2>,  Prev: What About Python 1 6?,  Up: What's New in Python 2 0

11.3 New Development Process
============================

The most important change in Python 2.0 may not be to the code at all,
but to how Python is developed: in May 2000 the Python developers began
using the tools made available by SourceForge for storing  source code,
tracking bug reports, and managing the queue of patch submissions.  To
report bugs or submit patches for Python 2.0, use the bug tracking and
patch manager tools available from Python's project page, located at
<http://sourceforge.net/projects/python/>.

  The most important of the services now hosted at SourceForge is the
Python CVS tree, the version-controlled repository containing the
source code for Python.  Previously, there were roughly 7 or so people
who had write access to the CVS tree, and all patches had to be
inspected and checked in by one of the people on this short list.
Obviously, this wasn't very scalable.  By moving the CVS tree to
SourceForge, it became possible to grant write access to more people;
as of September 2000 there were 27 people able to check in changes, a
fourfold increase.  This makes possible large-scale changes that
wouldn't be attempted if they'd have to be filtered through the small
group of core developers.  For example, one day Peter Schneider-Kamp
took it into his head to drop K&R C compatibility and convert the C
source for Python to ANSI C. After getting approval on the python-dev
mailing list, he launched into a flurry of checkins that lasted about a
week, other developers joined in to help, and the job was done.  If
there were only 5 people with write access, probably that task would
have been viewed as "nice, but not worth the time and effort needed"
and it would never have gotten done.

  The shift to using SourceForge's services has resulted in a
remarkable increase in the speed of development.  Patches now get
submitted, commented on, revised by people other than the original
submitter, and bounced back and forth between people until the patch is
deemed worth checking in.  Bugs are tracked in one central location and
can be assigned to a specific person for fixing, and we can count the
number of open bugs to measure progress.  This didn't come without a
cost: developers now have more e-mail to deal with, more mailing lists
to follow, and special tools had to be written for the new environment.
For example, SourceForge sends default patch and bug notification
e-mail messages that are completely unhelpful, so Ka-Ping Yee wrote an
HTML screen-scraper that sends more useful messages.

  The ease of adding code caused a few initial growing pains, such as
code was checked in before it was ready or without getting clear
agreement from the developer group.  The approval process that has
emerged is somewhat similar to that used by the Apache group.
Developers can vote +1, +0, -0, or -1 on a patch; +1 and -1 denote
acceptance or rejection, while +0 and -0 mean the developer is mostly
indifferent to the change, though with a slight positive or negative
slant.  The most significant change from the Apache model is that the
voting is essentially advisory, letting Guido van Rossum, who has
Benevolent Dictator For Life status, know what the general opinion is.
He can still ignore the result of a vote, and approve or reject a
change even if the community disagrees with him.

  Producing an actual patch is the last step in adding a new feature,
and is usually easy compared to the earlier task of coming up with a
good design.  Discussions of new features can often explode into
lengthy mailing list threads, making the discussion hard to follow, and
no one can read every posting to python-dev.  Therefore, a relatively
formal process has been set up to write Python Enhancement Proposals
(PEPs), modelled on the Internet RFC process.  PEPs are draft documents
that describe a proposed new feature, and are continually revised until
the community reaches a consensus, either accepting or rejecting the
proposal.  Quoting from the introduction to PEP 1, "PEP Purpose and
Guidelines":

     PEP stands for Python Enhancement Proposal.  A PEP is a design
     document providing information to the Python community, or
     describing a new feature for Python.  The PEP should provide a
     concise technical specification of the feature and a rationale for
     the feature.

     We intend PEPs to be the primary mechanisms for proposing new
     features, for collecting community input on an issue, and for
     documenting the design decisions that have gone into Python.  The
     PEP author is responsible for building consensus within the
     community and documenting dissenting opinions.

  Read the rest of PEP 1 for the details of the PEP editorial process,
style, and format.  PEPs are kept in the Python CVS tree on
SourceForge, though they're not part of the Python 2.0 distribution,
and are also available in HTML form from <http://www.python.org/peps/>.
As of September 2000, there are 25 PEPS, ranging from PEP 201,
"Lockstep Iteration", to PEP 225, "Elementwise/Objectwise Operators".


File: python-whatsnew-3.2.2.info,  Node: Unicode<2>,  Next: List Comprehensions,  Prev: New Development Process,  Up: What's New in Python 2 0

11.4 Unicode
============

The largest new feature in Python 2.0 is a new fundamental data type:
Unicode strings.  Unicode uses 16-bit numbers to represent characters
instead of the 8-bit number used by ASCII, meaning that 65,536 distinct
characters can be supported.

  The final interface for Unicode support was arrived at through
countless often- stormy discussions on the python-dev mailing list, and
mostly implemented by Marc-André Lemburg, based on a Unicode string
type implementation by Fredrik Lundh.  A detailed explanation of the
interface was written up as PEP 100(1), "Python Unicode Integration".
This article will simply cover the most significant points about the
Unicode interfaces.

  In Python source code, Unicode strings are written as `u"string"'.
Arbitrary Unicode characters can be written using a new escape
sequence, `\uHHHH', where _HHHH_ is a 4-digit hexadecimal number from
0000 to FFFF.  The existing `\xHHHH' escape sequence can also be used,
and octal escapes can be used for characters up to U+01FF, which is
represented by `\777'.

  Unicode strings, just like regular strings, are an immutable sequence
type.  They can be indexed and sliced, but not modified in place.
Unicode strings have an `encode( [encoding] )' method that returns an
8-bit string in the desired encoding.  Encodings are named by strings,
such as `'ascii'', `'utf-8'', `'iso-8859-1'', or whatever.  A codec API
is defined for implementing and registering new encodings that are then
available throughout a Python program.  If an encoding isn't specified,
the default encoding is usually 7-bit ASCII, though it can be changed
for your Python installation by calling the
`sys.setdefaultencoding(encoding)()' function in a customised version of
`site.py'.

  Combining 8-bit and Unicode strings always coerces to Unicode, using
the default ASCII encoding; the result of `'a' + u'bc'' is `u'abc''.

  New built-in functions have been added, and existing built-ins
modified to support Unicode:

   * `unichr(ch)' returns a Unicode string 1 character long, containing
     the character _ch_.

   * `ord(u)', where _u_ is a 1-character regular or Unicode string,
     returns the number of the character as an integer.

   * `unicode(string [, encoding]  [, errors] )' creates a Unicode
     string from an 8-bit string.  `encoding' is a string naming the
     encoding to use. The `errors' parameter specifies the treatment of
     characters that are invalid for the current encoding; passing
     `'strict'' as the value causes an exception to be raised on any
     encoding error, while `'ignore'' causes errors to be silently
     ignored and `'replace'' uses U+FFFD, the official replacement
     character, in case of any problems.

   * The `exec' statement, and various built-ins such as `eval()',
     `getattr()', and `setattr()' will also accept Unicode strings as
     well as regular strings.  (It's possible that the process of
     fixing this missed some built-ins; if you find a built-in function
     that accepts strings but doesn't accept Unicode strings at all,
     please report it as a bug.)

  A new module, `unicodedata', provides an interface to Unicode
character properties.  For example, `unicodedata.category(u'A')'
returns the 2-character string 'Lu', the 'L' denoting it's a letter,
and 'u' meaning that it's uppercase.
`unicodedata.bidirectional(u'\u0660')' returns 'AN', meaning that
U+0660 is an Arabic number.

  The `codecs' module contains functions to look up existing encodings
and register new ones.  Unless you want to implement a new encoding,
you'll most often use the `codecs.lookup(encoding)()' function, which
returns a 4-element tuple: `(encode_func, decode_func, stream_reader,
stream_writer)'.

   * _encode_func_ is a function that takes a Unicode string, and
     returns a 2-tuple `(string, length)'.  _string_ is an 8-bit string
     containing a portion (perhaps all) of the Unicode string converted
     into the given encoding, and _length_ tells you how much of the
     Unicode string was converted.

   * _decode_func_ is the opposite of _encode_func_, taking an 8-bit
     string and returning a 2-tuple `(ustring, length)', consisting of
     the resulting Unicode string _ustring_ and the integer _length_
     telling how much of the 8-bit string was consumed.

   * _stream_reader_ is a class that supports decoding input from a
     stream.  _stream_reader(file_obj)_ returns an object that supports
     the `read()', `readline()', and `readlines()' methods.  These
     methods will all translate from the given encoding and return
     Unicode strings.

   * _stream_writer_, similarly, is a class that supports encoding
     output to a stream.  _stream_writer(file_obj)_ returns an object
     that supports the `write()' and `writelines()' methods.  These
     methods expect Unicode strings, translating them to the given
     encoding on output.

  For example, the following code writes a Unicode string into a file,
encoding it as UTF-8:

    import codecs

    unistr = u'\u0660\u2000ab ...'

    (UTF8_encode, UTF8_decode,
     UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')

    output = UTF8_streamwriter( open( '/tmp/output', 'wb') )
    output.write( unistr )
    output.close()

The following code would then read UTF-8 input from the file:

    input = UTF8_streamreader( open( '/tmp/output', 'rb') )
    print repr(input.read())
    input.close()

Unicode-aware regular expressions are available through the `re' module,
which has a new underlying implementation called SRE written by Fredrik
Lundh of Secret Labs AB.

  A `-U' command line option was added which causes the Python compiler
to interpret all string literals as Unicode string literals. This is
intended to be used in testing and future-proofing your Python code,
since some future version of Python may drop support for 8-bit strings
and provide only Unicode strings.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0100


File: python-whatsnew-3.2.2.info,  Node: List Comprehensions,  Next: Augmented Assignment,  Prev: Unicode<2>,  Up: What's New in Python 2 0

11.5 List Comprehensions
========================

Lists are a workhorse data type in Python, and many programs manipulate
a list at some point.  Two common operations on lists are to loop over
them, and either pick out the elements that meet a certain criterion,
or apply some function to each element.  For example, given a list of
strings, you might want to pull out all the strings containing a given
substring, or strip off trailing whitespace from each line.

  The existing `map()' and `filter()' functions can be used for this
purpose, but they require a function as one of their arguments.  This
is fine if there's an existing built-in function that can be passed
directly, but if there isn't, you have to create a little function to
do the required work, and Python's scoping rules make the result ugly
if the little function needs additional information.  Take the first
example in the previous paragraph, finding all the strings in the list
containing a given substring.  You could write the following to do it:

    # Given the list L, make a list of all strings
    # containing the substring S.
    sublist = filter( lambda s, substring=S:
                         string.find(s, substring) != -1,
                      L)

Because of Python's scoping rules, a default argument is used so that
the anonymous function created by the `lambda' statement knows what
substring is being searched for.  List comprehensions make this cleaner:

    sublist = [ s for s in L if string.find(s, S) != -1 ]

List comprehensions have the form:

    [ expression for expr in sequence1
                 for expr2 in sequence2 ...
                 for exprN in sequenceN
                 if condition ]

The `for'...`in' clauses contain the sequences to be iterated over.
The sequences do not have to be the same length, because they are _not_
iterated over in parallel, but from left to right; this is explained
more clearly in the following paragraphs.  The elements of the
generated list will be the successive values of _expression_.  The
final `if' clause is optional; if present, _expression_ is only
evaluated and added to the result if _condition_ is true.

  To make the semantics very clear, a list comprehension is equivalent
to the following Python code:

    for expr1 in sequence1:
        for expr2 in sequence2:
        ...
            for exprN in sequenceN:
                 if (condition):
                      # Append the value of
                      # the expression to the
                      # resulting list.

This means that when there are multiple `for'...`in' clauses, the
resulting list will be equal to the product of the lengths of all the
sequences.  If you have two lists of length 3, the output list is 9
elements long:

    seq1 = 'abc'
    seq2 = (1,2,3)
    >>> [ (x,y) for x in seq1 for y in seq2]
    [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1),
    ('c', 2), ('c', 3)]

To avoid introducing an ambiguity into Python's grammar, if
_expression_ is creating a tuple, it must be surrounded with
parentheses.  The first list comprehension below is a syntax error,
while the second one is correct:

    # Syntax error
    [ x,y for x in seq1 for y in seq2]
    # Correct
    [ (x,y) for x in seq1 for y in seq2]

The idea of list comprehensions originally comes from the functional
programming language Haskell (<http://www.haskell.org>).  Greg Ewing
argued most effectively for adding them to Python and wrote the initial
list comprehension patch, which was then discussed for a seemingly
endless time on the python-dev mailing list and kept up-to-date by Skip
Montanaro.


File: python-whatsnew-3.2.2.info,  Node: Augmented Assignment,  Next: String Methods,  Prev: List Comprehensions,  Up: What's New in Python 2 0

11.6 Augmented Assignment
=========================

Augmented assignment operators, another long-requested feature, have
been added to Python 2.0.  Augmented assignment operators include `+=',
`-=', `*=', and so forth.  For example, the statement `a += 2'
increments the value of the variable  `a' by 2, equivalent to the
slightly lengthier `a = a + 2'.

  The full list of supported assignment operators is `+=', `-=', `*=',
`/=', `%=', `**=', `&=', `|=', `^=', `>>=', and `<<='.  Python classes
can override the augmented assignment operators by defining methods
named `__iadd__()', `__isub__()', etc.  For example, the following
`Number' class stores a number and supports using += to create a new
instance with an incremented value.

    class Number:
        def __init__(self, value):
            self.value = value
        def __iadd__(self, increment):
            return Number( self.value + increment)

    n = Number(5)
    n += 3
    print n.value

The `__iadd__()' special method is called with the value of the
increment, and should return a new instance with an appropriately
modified value; this return value is bound as the new value of the
variable on the left-hand side.

  Augmented assignment operators were first introduced in the C
programming language, and most C-derived languages, such as *awk*, C++,
Java, Perl, and PHP also support them.  The augmented assignment patch
was implemented by Thomas Wouters.


File: python-whatsnew-3.2.2.info,  Node: String Methods,  Next: Garbage Collection of Cycles,  Prev: Augmented Assignment,  Up: What's New in Python 2 0

11.7 String Methods
===================

Until now string-manipulation functionality was in the `string' module,
which was usually a front-end for the `strop' module written in C.  The
addition of Unicode posed a difficulty for the `strop' module, because
the functions would all need to be rewritten in order to accept either
8-bit or Unicode strings.  For functions such as `string.replace()',
which takes 3 string arguments, that means eight possible permutations,
and correspondingly complicated code.

  Instead, Python 2.0 pushes the problem onto the string type, making
string manipulation functionality available through methods on both
8-bit strings and Unicode strings.

    >>> 'andrew'.capitalize()
    'Andrew'
    >>> 'hostname'.replace('os', 'linux')
    'hlinuxtname'
    >>> 'moshe'.find('sh')
    2

One thing that hasn't changed, a noteworthy April Fools' joke
notwithstanding, is that Python strings are immutable. Thus, the string
methods return new strings, and do not modify the string on which they
operate.

  The old `string' module is still around for backwards compatibility,
but it mostly acts as a front-end to the new string methods.

  Two methods which have no parallel in pre-2.0 versions, although they
did exist in JPython for quite some time, are `startswith()' and
`endswith()'.  `s.startswith(t)' is equivalent to `s[:len(t)] == t',
while `s.endswith(t)' is equivalent to `s[-len(t):] == t'.

  One other method which deserves special mention is `join()'.  The
`join()' method of a string receives one parameter, a sequence of
strings, and is equivalent to the `string.join()' function from the old
`string' module, with the arguments reversed. In other words,
`s.join(seq)' is equivalent to the old `string.join(seq, s)'.


File: python-whatsnew-3.2.2.info,  Node: Garbage Collection of Cycles,  Next: Other Core Changes,  Prev: String Methods,  Up: What's New in Python 2 0

11.8 Garbage Collection of Cycles
=================================

The C implementation of Python uses reference counting to implement
garbage collection.  Every Python object maintains a count of the
number of references pointing to itself, and adjusts the count as
references are created or destroyed.  Once the reference count reaches
zero, the object is no longer accessible, since you need to have a
reference to an object to access it, and if the count is zero, no
references exist any longer.

  Reference counting has some pleasant properties: it's easy to
understand and implement, and the resulting implementation is portable,
fairly fast, and reacts well with other libraries that implement their
own memory handling schemes.  The major problem with reference counting
is that it sometimes doesn't realise that objects are no longer
accessible, resulting in a memory leak.  This happens when there are
cycles of references.

  Consider the simplest possible cycle,  a class instance which has a
reference to itself:

    instance = SomeClass()
    instance.myself = instance

After the above two lines of code have been executed, the reference
count of `instance' is 2; one reference is from the variable named
`'instance'', and the other is from the `myself' attribute of the
instance.

  If the next line of code is `del instance', what happens?  The
reference count of `instance' is decreased by 1, so it has a reference
count of 1; the reference in the `myself' attribute still exists.  Yet
the instance is no longer accessible through Python code, and it could
be deleted.  Several objects can participate in a cycle if they have
references to each other, causing all of the objects to be leaked.

  Python 2.0 fixes this problem by periodically executing a cycle
detection algorithm which looks for inaccessible cycles and deletes the
objects involved.  A new `gc' module provides functions to perform a
garbage collection, obtain debugging statistics, and tuning the
collector's parameters.

  Running the cycle detection algorithm takes some time, and therefore
will result in some additional overhead.  It is hoped that after we've
gotten experience with the cycle collection from using 2.0, Python 2.1
will be able to minimize the overhead with careful tuning.  It's not
yet obvious how much performance is lost, because benchmarking this is
tricky and depends crucially on how often the program creates and
destroys objects.  The detection of cycles can be disabled when Python
is compiled, if you can't afford even a tiny speed penalty or suspect
that the cycle collection is buggy, by specifying the
`--without-cycle-gc' switch when running the *configure* script.

  Several people tackled this problem and contributed to a solution.
An early implementation of the cycle detection approach was written by
Toby Kelsey.  The current algorithm was suggested by Eric Tiedemann
during a visit to CNRI, and Guido van Rossum and Neil Schemenauer wrote
two different implementations, which were later integrated by Neil.
Lots of other people offered suggestions along the way; the March 2000
archives of the python-dev mailing list contain most of the relevant
discussion, especially in the threads titled "Reference cycle
collection for Python" and "Finalization again".


File: python-whatsnew-3.2.2.info,  Node: Other Core Changes,  Next: Porting to 2 0,  Prev: Garbage Collection of Cycles,  Up: What's New in Python 2 0

11.9 Other Core Changes
=======================

Various minor changes have been made to Python's syntax and built-in
functions.  None of the changes are very far-reaching, but they're
handy conveniences.

* Menu:

* Minor Language Changes::
* Changes to Built-in Functions::


File: python-whatsnew-3.2.2.info,  Node: Minor Language Changes,  Next: Changes to Built-in Functions,  Up: Other Core Changes

11.9.1 Minor Language Changes
-----------------------------

A new syntax makes it more convenient to call a given function with a
tuple of arguments and/or a dictionary of keyword arguments. In Python
1.5 and earlier, you'd use the `apply()' built-in function: `apply(f,
args, kw)' calls the function `f()' with the argument tuple _args_ and
the keyword arguments in the dictionary _kw_.  `apply()'  is the same
in 2.0, but thanks to a patch from Greg Ewing, `f(*args, **kw)' as a
shorter and clearer way to achieve the same effect.  This syntax is
symmetrical with the syntax for defining functions:

    def f(*args, **kw):
        # args is a tuple of positional args,
        # kw is a dictionary of keyword args
        ...

The `print' statement can now have its output directed to a file-like
object by following the `print' with  `>> file', similar to the
redirection operator in Unix shells. Previously you'd either have to
use the `write()' method of the file-like object, which lacks the
convenience and simplicity of `print', or you could assign a new value
to `sys.stdout' and then restore the old value.  For sending output to
standard error, it's much easier to write this:

    print >> sys.stderr, "Warning: action field not supplied"

Modules can now be renamed on importing them, using the syntax `import
module as name' or `from module import name as othername'.  The patch
was submitted by Thomas Wouters.

  A new format style is available when using the `%' operator; '%r'
will insert the `repr()' of its argument.  This was also added from
symmetry considerations, this time for symmetry with the existing '%s'
format style, which inserts the `str()' of its argument.  For example,
`'%r %s' % ('abc', 'abc')' returns a string containing `'abc' abc'.

  Previously there was no way to implement a class that overrode
Python's built-in `in' operator and implemented a custom version.  `obj
in seq' returns true if _obj_ is present in the sequence _seq_; Python
computes this by simply trying every index of the sequence until either
_obj_ is found or an `IndexError' is encountered.  Moshe Zadka
contributed a patch which adds a `__contains__()' magic method for
providing a custom implementation for `in'. Additionally, new built-in
objects written in C can define what `in' means for them via a new slot
in the sequence protocol.

  Earlier versions of Python used a recursive algorithm for deleting
objects.  Deeply nested data structures could cause the interpreter to
fill up the C stack and crash; Christian Tismer rewrote the deletion
logic to fix this problem.  On a related note, comparing recursive
objects recursed infinitely and crashed; Jeremy Hylton rewrote the code
to no longer crash, producing a useful result instead.  For example,
after this code:

    a = []
    b = []
    a.append(a)
    b.append(b)

The comparison `a==b' returns true, because the two recursive data
structures are isomorphic. See the thread "trashcan and PR#7" in the
April 2000 archives of the python-dev mailing list for the discussion
leading up to this implementation, and some useful relevant links.
Note that comparisons can now also raise exceptions. In earlier
versions of Python, a comparison operation such as `cmp(a,b)' would
always produce an answer, even if a user-defined `__cmp__()' method
encountered an error, since the resulting exception would simply be
silently swallowed.

  Work has been done on porting Python to 64-bit Windows on the Itanium
processor, mostly by Trent Mick of ActiveState.  (Confusingly,
`sys.platform' is still `'win32'' on Win64 because it seems that for
ease of porting, MS Visual C++ treats code as 32 bit on Itanium.)
PythonWin also supports Windows CE; see the Python CE page at
<http://pythonce.sourceforge.net/> for more information.

  Another new platform is Darwin/MacOS X; initial support for it is in
Python 2.0.  Dynamic loading works, if you specify "configure
-with-dyld -with-suffix=.x".  Consult the README in the Python source
distribution for more instructions.

  An attempt has been made to alleviate one of Python's warts, the
often-confusing `NameError' exception when code refers to a local
variable before the variable has been assigned a value.  For example,
the following code raises an exception on the `print' statement in both
1.5.2 and 2.0; in 1.5.2 a `NameError' exception is raised, while 2.0
raises a new `UnboundLocalError' exception. `UnboundLocalError' is a
subclass of `NameError', so any existing code that expects `NameError'
to be raised should still work.

    def f():
        print "i=",i
        i = i + 1
    f()

Two new exceptions, `TabError' and `IndentationError', have been
introduced.  They're both subclasses of `SyntaxError', and are raised
when Python code is found to be improperly indented.


File: python-whatsnew-3.2.2.info,  Node: Changes to Built-in Functions,  Prev: Minor Language Changes,  Up: Other Core Changes

11.9.2 Changes to Built-in Functions
------------------------------------

A new built-in, `zip(seq1, seq2, ...)()', has been added.  `zip()'
returns a list of tuples where each tuple contains the i-th element
from each of the argument sequences.  The difference between `zip()'
and `map(None, seq1, seq2)' is that `map()' pads the sequences with
`None' if the sequences aren't all of the same length, while `zip()'
truncates the returned list to the length of the shortest argument
sequence.

  The `int()' and `long()' functions now accept an optional "base"
parameter when the first argument is a string. `int('123', 10)' returns
123, while `int('123', 16)' returns 291.  `int(123, 16)' raises a
`TypeError' exception with the message "can't convert non-string with
explicit base".

  A new variable holding more detailed version information has been
added to the `sys' module.  `sys.version_info' is a tuple `(major,
minor, micro, level, serial)' For example, in a hypothetical
2.0.1beta1, `sys.version_info' would be `(2, 0, 1, 'beta', 1)'. _level_
is a string such as `"alpha"', `"beta"', or `"final"' for a final
release.

  Dictionaries have an odd new method, `setdefault(key, default)()',
which behaves similarly to the existing `get()' method.  However, if
the key is missing, `setdefault()' both returns the value of _default_
as `get()' would do, and also inserts it into the dictionary as the
value for _key_.  Thus, the following lines of code:

    if dict.has_key( key ): return dict[key]
    else:
        dict[key] = []
        return dict[key]

can be reduced to a single `return dict.setdefault(key, [])' statement.

  The interpreter sets a maximum recursion depth in order to catch
runaway recursion before filling the C stack and causing a core dump or
GPF..  Previously this limit was fixed when you compiled Python, but in
2.0 the maximum recursion depth can be read and modified using
`sys.getrecursionlimit()' and `sys.setrecursionlimit()'. The default
value is 1000, and a rough maximum value for a given platform can be
found by running a new script, `Misc/find_recursionlimit.py'.


File: python-whatsnew-3.2.2.info,  Node: Porting to 2 0,  Next: Extending/Embedding Changes,  Prev: Other Core Changes,  Up: What's New in Python 2 0

11.10 Porting to 2.0
====================

New Python releases try hard to be compatible with previous releases,
and the record has been pretty good.  However, some changes are
considered useful enough, usually because they fix initial design
decisions that turned out to be actively mistaken, that breaking
backward compatibility can't always be avoided.  This section lists the
changes in Python 2.0 that may cause old Python code to break.

  The change which will probably break the most code is tightening up
the arguments accepted by some methods.  Some methods would take
multiple arguments and treat them as a tuple, particularly various list
methods such as `append()' and `insert()'. In earlier versions of
Python, if `L' is a list, `L.append( 1,2 )' appends the tuple `(1,2)'
to the list.  In Python 2.0 this causes a `TypeError' exception to be
raised, with the message: 'append requires exactly 1 argument; 2
given'.  The fix is to simply add an extra set of parentheses to pass
both values as a tuple:  `L.append( (1,2) )'.

  The earlier versions of these methods were more forgiving because
they used an old function in Python's C interface to parse their
arguments; 2.0 modernizes them to use `PyArg_ParseTuple()', the current
argument parsing function, which provides more helpful error messages
and treats multi-argument calls as errors.  If you absolutely must use
2.0 but can't fix your code, you can edit `Objects/listobject.c' and
define the preprocessor symbol `NO_STRICT_LIST_APPEND' to preserve the
old behaviour; this isn't recommended.

  Some of the functions in the `socket' module are still forgiving in
this way.  For example, `socket.connect( ('hostname', 25) )()' is the
correct form, passing a tuple representing an IP address, but
`socket.connect( 'hostname', 25 )()' also works. `socket.connect_ex()'
and `socket.bind()' are similarly easy-going.  2.0alpha1 tightened
these functions up, but because the documentation actually used the
erroneous multiple argument form, many people wrote code which would
break with the stricter checking.  GvR backed out the changes in the
face of public reaction, so for the `socket' module, the documentation
was fixed and the multiple argument form is simply marked as
deprecated; it _will_ be tightened up again in a future Python version.

  The `\x' escape in string literals now takes exactly 2 hex digits.
Previously it would consume all the hex digits following the 'x' and
take the lowest 8 bits of the result, so `\x123456' was equivalent to
`\x56'.

  The `AttributeError' and `NameError' exceptions have a more friendly
error message, whose text will be something like `'Spam' instance has no
attribute 'eggs'' or `name 'eggs' is not defined'.  Previously the error
message was just the missing attribute name `eggs', and code written to
take advantage of this fact will break in 2.0.

  Some work has been done to make integers and long integers a bit more
interchangeable.  In 1.5.2, large-file support was added for Solaris,
to allow reading files larger than 2 GiB; this made the `tell()' method
of file objects return a long integer instead of a regular integer.
Some code would subtract two file offsets and attempt to use the result
to multiply a sequence or slice a string, but this raised a
`TypeError'.  In 2.0, long integers can be used to multiply or slice a
sequence, and it'll behave as you'd intuitively expect it to; `3L *
'abc'' produces 'abcabcabc', and `(0,1,2,3)[2L:4L]' produces (2,3).
Long integers can also be used in various contexts where previously
only integers were accepted, such as in the `seek()' method of file
objects, and in the formats supported by the `%' operator (`%d', `%i',
`%x', etc.).  For example, `"%d" % 2L**64' will produce the string
`18446744073709551616'.

  The subtlest long integer change of all is that the `str()' of a long
integer no longer has a trailing 'L' character, though `repr()' still
includes it.  The 'L' annoyed many people who wanted to print long
integers that looked just like regular integers, since they had to go
out of their way to chop off the character.  This is no longer a
problem in 2.0, but code which does `str(longval)[:-1]' and assumes the
'L' is there, will now lose the final digit.

  Taking the `repr()' of a float now uses a different formatting
precision than `str()'.  `repr()' uses `%.17g' format string for C's
`sprintf()', while `str()' uses `%.12g' as before.  The effect is that
`repr()' may occasionally show more decimal places than  `str()', for
certain numbers.  For example, the number 8.1 can't be represented
exactly in binary, so `repr(8.1)' is `'8.0999999999999996'', while
str(8.1) is `'8.1''.

  The `-X' command-line option, which turned all standard exceptions
into strings instead of classes, has been removed; the standard
exceptions will now always be classes.  The `exceptions' module
containing the standard exceptions was translated from Python to a
built-in C module, written by Barry Warsaw and Fredrik Lundh.


File: python-whatsnew-3.2.2.info,  Node: Extending/Embedding Changes,  Next: Distutils Making Modules Easy to Install,  Prev: Porting to 2 0,  Up: What's New in Python 2 0

11.11 Extending/Embedding Changes
=================================

Some of the changes are under the covers, and will only be apparent to
people writing C extension modules or embedding a Python interpreter in
a larger application.  If you aren't dealing with Python's C API, you
can safely skip this section.

  The version number of the Python C API was incremented, so C
extensions compiled for 1.5.2 must be recompiled in order to work with
2.0.  On Windows, it's not possible for Python 2.0 to import a third
party extension built for Python 1.5.x due to how Windows DLLs work, so
Python will raise an exception and the import will fail.

  Users of Jim Fulton's ExtensionClass module will be pleased to find
out that hooks have been added so that ExtensionClasses are now
supported by `isinstance()' and `issubclass()'. This means you no
longer have to remember to write code such as `if type(obj) ==
myExtensionClass', but can use the more natural `if isinstance(obj,
myExtensionClass)'.

  The `Python/importdl.c' file, which was a mass of #ifdefs to support
dynamic loading on many different platforms, was cleaned up and
reorganised by Greg Stein.  `importdl.c' is now quite small, and
platform-specific code has been moved into a bunch of
`Python/dynload_*.c' files.  Another cleanup: there were also a number
of `my*.h' files in the Include/ directory that held various
portability hacks; they've been merged into a single file,
`Include/pyport.h'.

  Vladimir Marangozov's long-awaited malloc restructuring was
completed, to make it easy to have the Python interpreter use a custom
allocator instead of C's standard `malloc()'.  For documentation, read
the comments in `Include/pymem.h' and `Include/objimpl.h'.  For the
lengthy discussions during which the interface was hammered out, see
the Web archives of the 'patches' and 'python-dev' lists at python.org.

  Recent versions of the GUSI development environment for MacOS support
POSIX threads.  Therefore, Python's POSIX threading support now works
on the Macintosh.  Threading support using the user-space GNU `pth'
library was also contributed.

  Threading support on Windows was enhanced, too.  Windows supports
thread locks that use kernel objects only in case of contention; in the
common case when there's no contention, they use simpler functions
which are an order of magnitude faster.  A threaded version of Python
1.5.2 on NT is twice as slow as an unthreaded version; with the 2.0
changes, the difference is only 10%.  These improvements were
contributed by Yakov Markovitch.

  Python 2.0's source now uses only ANSI C prototypes, so compiling
Python now requires an ANSI C compiler, and can no longer be done using
a compiler that only supports K&R C.

  Previously the Python virtual machine used 16-bit numbers in its
bytecode, limiting the size of source files.  In particular, this
affected the maximum size of literal lists and dictionaries in Python
source; occasionally people who are generating Python code would run
into this limit.  A patch by Charles G.  Waldman raises the limit from
`2^16' to `2^{32}'.

  Three new convenience functions intended for adding constants to a
module's dictionary at module initialization time were added:
`PyModule_AddObject()', `PyModule_AddIntConstant()', and
`PyModule_AddStringConstant()'.  Each of these functions takes a module
object, a null-terminated C string containing the name to be added, and
a third argument for the value to be assigned to the name.  This third
argument is, respectively, a Python object, a C long, or a C string.

  A wrapper API was added for Unix-style signal handlers.
`PyOS_getsig()' gets a signal handler and `PyOS_setsig()' will set a
new handler.


File: python-whatsnew-3.2.2.info,  Node: Distutils Making Modules Easy to Install,  Next: XML Modules,  Prev: Extending/Embedding Changes,  Up: What's New in Python 2 0

11.12 Distutils: Making Modules Easy to Install
===============================================

Before Python 2.0, installing modules was a tedious affair - there was
no way to figure out automatically where Python is installed, or what
compiler options to use for extension modules.  Software authors had to
go through an arduous ritual of editing Makefiles and configuration
files, which only really work on Unix and leave Windows and MacOS
unsupported.  Python users faced wildly differing installation
instructions which varied between different extension packages, which
made administering a Python installation something of  a chore.

  The SIG for distribution utilities, shepherded by Greg Ward, has
created the Distutils, a system to make package installation much
easier.  They form the `distutils' package, a new part of Python's
standard library. In the best case, installing a Python module from
source will require the same steps: first you simply mean unpack the
tarball or zip archive, and the run "`python setup.py install'".  The
platform will be automatically detected, the compiler will be
recognized, C extension modules will be compiled, and the distribution
installed into the proper directory.  Optional command-line arguments
provide more control over the installation process, the distutils
package offers many places to override defaults - separating the build
from the install, building or installing in non-default directories,
and more.

  In order to use the Distutils, you need to write a `setup.py' script.
For the simple case, when the software contains only .py files, a
minimal `setup.py' can be just a few lines long:

    from distutils.core import setup
    setup (name = "foo", version = "1.0",
           py_modules = ["module1", "module2"])

The `setup.py' file isn't much more complicated if the software consists
of a few packages:

    from distutils.core import setup
    setup (name = "foo", version = "1.0",
           packages = ["package", "package.subpackage"])

A C extension can be the most complicated case; here's an example taken
from the PyXML package:

    from distutils.core import setup, Extension

    expat_extension = Extension('xml.parsers.pyexpat',
         define_macros = [('XML_NS', None)],
         include_dirs = [ 'extensions/expat/xmltok',
                          'extensions/expat/xmlparse' ],
         sources = [ 'extensions/pyexpat.c',
                     'extensions/expat/xmltok/xmltok.c',
                     'extensions/expat/xmltok/xmlrole.c', ]
           )
    setup (name = "PyXML", version = "0.5.4",
           ext_modules =[ expat_extension ] )

The Distutils can also take care of creating source and binary
distributions.  The "sdist" command, run by "`python setup.py sdist'',
builds a source distribution such as `foo-1.0.tar.gz'. Adding new
commands isn't difficult, "bdist_rpm" and "bdist_wininst" commands have
already been contributed to create an RPM distribution and a Windows
installer for the software, respectively.  Commands to create other
distribution formats such as Debian packages and Solaris `.pkg' files
are in various stages of development.

  All this is documented in a new manual, _Distributing Python
Modules_, that joins the basic set of Python documentation.


File: python-whatsnew-3.2.2.info,  Node: XML Modules,  Next: Module changes,  Prev: Distutils Making Modules Easy to Install,  Up: What's New in Python 2 0

11.13 XML Modules
=================

Python 1.5.2 included a simple XML parser in the form of the `xmllib'
module, contributed by Sjoerd Mullender.  Since 1.5.2's release, two
different interfaces for processing XML have become common: SAX2
(version 2 of the Simple API for XML) provides an event-driven
interface with some similarities to `xmllib', and the DOM (Document
Object Model) provides a tree-based interface, transforming an XML
document into a tree of nodes that can be traversed and modified.
Python 2.0 includes a SAX2 interface and a stripped- down DOM interface
as part of the `xml' package. Here we will give a brief overview of
these new interfaces; consult the Python documentation or the source
code for complete details. The Python XML SIG is also working on
improved documentation.

* Menu:

* SAX2 Support::
* DOM Support::
* Relationship to PyXML::


File: python-whatsnew-3.2.2.info,  Node: SAX2 Support,  Next: DOM Support,  Up: XML Modules

11.13.1 SAX2 Support
--------------------

SAX defines an event-driven interface for parsing XML.  To use SAX, you
must write a SAX handler class.  Handler classes inherit from various
classes provided by SAX, and override various methods that will then be
called by the XML parser.  For example, the `startElement()' and
`endElement()' methods are called for every starting and end tag
encountered by the parser, the `characters()' method is called for
every chunk of character data, and so forth.

  The advantage of the event-driven approach is that the whole document
doesn't have to be resident in memory at any one time, which matters if
you are processing really huge documents.  However, writing the SAX
handler class can get very complicated if you're trying to modify the
document structure in some elaborate way.

  For example, this little example program defines a handler that
prints a message for every starting and ending tag, and then parses the
file `hamlet.xml' using it:

    from xml import sax

    class SimpleHandler(sax.ContentHandler):
        def startElement(self, name, attrs):
            print 'Start of element:', name, attrs.keys()

        def endElement(self, name):
            print 'End of element:', name

    # Create a parser object
    parser = sax.make_parser()

    # Tell it what handler to use
    handler = SimpleHandler()
    parser.setContentHandler( handler )

    # Parse a file!
    parser.parse( 'hamlet.xml' )

For more information, consult the Python documentation, or the XML
HOWTO at <http://pyxml.sourceforge.net/topics/howto/xml-howto.html>.


File: python-whatsnew-3.2.2.info,  Node: DOM Support,  Next: Relationship to PyXML,  Prev: SAX2 Support,  Up: XML Modules

11.13.2 DOM Support
-------------------

The Document Object Model is a tree-based representation for an XML
document.  A top-level `Document' instance is the root of the tree, and
has a single child which is the top-level `Element' instance. This
`Element' has children nodes representing character data and any
sub-elements, which may have further children of their own, and so
forth.  Using the DOM you can traverse the resulting tree any way you
like, access element and attribute values, insert and delete nodes, and
convert the tree back into XML.

  The DOM is useful for modifying XML documents, because you can create
a DOM tree, modify it by adding new nodes or rearranging subtrees, and
then produce a new XML document as output.  You can also construct a
DOM tree manually and convert it to XML, which can be a more flexible
way of producing XML output than simply writing `<tag1>'...`</tag1>' to
a file.

  The DOM implementation included with Python lives in the
`xml.dom.minidom' module.  It's a lightweight implementation of the
Level 1 DOM with support for XML namespaces.  The  `parse()' and
`parseString()' convenience functions are provided for generating a DOM
tree:

    from xml.dom import minidom
    doc = minidom.parse('hamlet.xml')

`doc' is a `Document' instance.  `Document', like all the other DOM
classes such as `Element' and `Text', is a subclass of the `Node' base
class.  All the nodes in a DOM tree therefore support certain common
methods, such as `toxml()' which returns a string containing the XML
representation of the node and its children.  Each class also has
special methods of its own; for example, `Element' and `Document'
instances have a method to find all child elements with a given tag
name.  Continuing from the previous 2-line example:

    perslist = doc.getElementsByTagName( 'PERSONA' )
    print perslist[0].toxml()
    print perslist[1].toxml()

For the _Hamlet_ XML file, the above few lines output:

    <PERSONA>CLAUDIUS, king of Denmark. </PERSONA>
    <PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA>

The root element of the document is available as `doc.documentElement',
and its children can be easily modified by deleting, adding, or
removing nodes:

    root = doc.documentElement

    # Remove the first child
    root.removeChild( root.childNodes[0] )

    # Move the new first child to the end
    root.appendChild( root.childNodes[0] )

    # Insert the new first child (originally,
    # the third child) before the 20th child.
    root.insertBefore( root.childNodes[0], root.childNodes[20] )

Again, I will refer you to the Python documentation for a complete
listing of the different `Node' classes and their various methods.


File: python-whatsnew-3.2.2.info,  Node: Relationship to PyXML,  Prev: DOM Support,  Up: XML Modules

11.13.3 Relationship to PyXML
-----------------------------

The XML Special Interest Group has been working on XML-related Python
code for a while.  Its code distribution, called PyXML, is available
from the SIG's Web pages at <http://www.python.org/sigs/xml-sig/>. The
PyXML distribution also used the package name `xml'.  If you've written
programs that used PyXML, you're probably wondering about its
compatibility with the 2.0 `xml' package.

  The answer is that Python 2.0's `xml' package isn't compatible with
PyXML, but can be made compatible by installing a recent version PyXML.
Many applications can get by with the XML support that is included with
Python 2.0, but more complicated applications will require that the
full PyXML package will be installed.  When installed, PyXML versions
0.6.0 or greater will replace the `xml' package shipped with Python,
and will be a strict superset of the standard package, adding a bunch
of additional features.  Some of the additional features in PyXML
include:

   * 4DOM, a full DOM implementation from FourThought, Inc.

   * The xmlproc validating parser, written by Lars Marius Garshol.

   * The `sgmlop' parser accelerator module, written by Fredrik Lundh.


File: python-whatsnew-3.2.2.info,  Node: Module changes,  Next: New modules,  Prev: XML Modules,  Up: What's New in Python 2 0

11.14 Module changes
====================

Lots of improvements and bugfixes were made to Python's extensive
standard library; some of the affected modules include `readline',
`ConfigParser', `cgi', `calendar', `posix', `readline', `xmllib',
`aifc', `chunk, wave', `random', `shelve', and `nntplib'.  Consult the
CVS logs for the exact patch-by-patch details.

  Brian Gallew contributed OpenSSL support for the `socket' module.
OpenSSL is an implementation of the Secure Socket Layer, which encrypts
the data being sent over a socket.  When compiling Python, you can edit
`Modules/Setup' to include SSL support, which adds an additional
function to the `socket' module: `socket.ssl(socket, keyfile,
certfile)()', which takes a socket object and returns an SSL socket.
The `httplib' and `urllib' modules were also changed to support
`https://' URLs, though no one has implemented FTP or SMTP over SSL.

  The `httplib' module has been rewritten by Greg Stein to support
HTTP/1.1.  Backward compatibility with the 1.5 version of `httplib' is
provided, though using HTTP/1.1 features such as pipelining will
require rewriting code to use a different set of interfaces.

  The `Tkinter' module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and
support for the older 7.x versions has been dropped.  The Tkinter
module now supports displaying Unicode strings in Tk widgets. Also,
Fredrik Lundh contributed an optimization which makes operations like
`create_line' and `create_polygon' much faster, especially when using
lots of coordinates.

  The `curses' module has been greatly extended, starting from Oliver
Andrich's enhanced version, to provide many additional functions from
ncurses and SYSV curses, such as colour, alternative character set
support, pads, and mouse support.  This means the module is no longer
compatible with operating systems that only have BSD curses, but there
don't seem to be any currently maintained OSes that fall into this
category.

  As mentioned in the earlier discussion of 2.0's Unicode support, the
underlying implementation of the regular expressions provided by the
`re' module has been changed.  SRE, a new regular expression engine
written by Fredrik Lundh and partially funded by Hewlett Packard,
supports matching against both 8-bit strings and Unicode strings.


File: python-whatsnew-3.2.2.info,  Node: New modules,  Next: IDLE Improvements,  Prev: Module changes,  Up: What's New in Python 2 0

11.15 New modules
=================

A number of new modules were added.  We'll simply list them with brief
descriptions; consult the 2.0 documentation for the details of a
particular module.

   * `atexit':  For registering functions to be called before the Python
     interpreter exits. Code that currently sets `sys.exitfunc'
     directly should be changed to  use the `atexit' module instead,
     importing `atexit' and calling `atexit.register()' with  the
     function to be called on exit.  (Contributed by Skip Montanaro.)

   * `codecs', `encodings', `unicodedata':  Added as part of the new
     Unicode support.

   * `filecmp': Supersedes the old `cmp', `cmpcache' and `dircmp'
     modules, which have now become deprecated. (Contributed by Gordon
     MacMillan and Moshe Zadka.)

   * `gettext': This module provides internationalization (I18N) and
     localization (L10N) support for Python programs by providing an
     interface to the GNU gettext message catalog library. (Integrated
     by Barry Warsaw, from separate contributions by Martin  von Löwis,
     Peter Funk, and James Henstridge.)

   * `linuxaudiodev': Support for the `/dev/audio' device on Linux, a
     twin to the existing `sunaudiodev' module. (Contributed by Peter
     Bosch, with fixes by Jeremy Hylton.)

   * `mmap': An interface to memory-mapped files on both Windows and
     Unix.  A file's contents can be mapped directly into memory, at
     which point it behaves like a mutable string, so its contents can
     be read and modified.  They can even be passed to functions that
     expect ordinary strings, such as the `re' module. (Contributed by
     Sam Rushing, with some extensions by A.M. Kuchling.)

   * `pyexpat': An interface to the Expat XML parser. (Contributed by
     Paul Prescod.)

   * `robotparser': Parse a `robots.txt' file, which is used for writing
     Web spiders that politely avoid certain areas of a Web site.  The
     parser accepts the contents of a `robots.txt' file, builds a set
     of rules from it, and can then answer questions about the
     fetchability of a given URL.  (Contributed by Skip Montanaro.)

   * `tabnanny': A module/script to  check Python source code for
     ambiguous indentation. (Contributed by Tim Peters.)

   * `UserString': A base class useful for deriving objects that behave
     like strings.

   * `webbrowser': A module that provides a platform independent way to
     launch a web browser on a specific URL. For each platform, various
     browsers are tried in a specific order. The user can alter which
     browser is launched by setting the _BROWSER_ environment variable.
     (Originally inspired by Eric S. Raymond's patch to `urllib' which
     added similar functionality, but the final module comes from code
     originally  implemented by Fred Drake as
     `Tools/idle/BrowserControl.py', and adapted for the standard
     library by Fred.)

   * `_winreg': An interface to the Windows registry.  `_winreg' is an
     adaptation of functions that have been part of PythonWin since
     1995, but has now been added to the core  distribution, and
     enhanced to support Unicode.  `_winreg' was written by Bill Tutt
     and Mark Hammond.

   * `zipfile': A module for reading and writing ZIP-format archives.
     These are archives produced by *PKZIP* on DOS/Windows or *zip* on
     Unix, not to be confused with *gzip*-format files (which are
     supported by the `gzip' module) (Contributed by James C. Ahlstrom.)

   * `imputil': A module that provides a simpler way for writing
     customised import hooks, in comparison to the existing `ihooks'
     module.  (Implemented by Greg Stein, with much discussion on
     python-dev along the way.)


File: python-whatsnew-3.2.2.info,  Node: IDLE Improvements,  Next: Deleted and Deprecated Modules,  Prev: New modules,  Up: What's New in Python 2 0

11.16 IDLE Improvements
=======================

IDLE is the official Python cross-platform IDE, written using Tkinter.
Python 2.0 includes IDLE 0.6, which adds a number of new features and
improvements.  A partial list:

   * UI improvements and optimizations, especially in the area of syntax
     highlighting and auto-indentation.

   * The class browser now shows more information, such as the top
     level functions in a module.

   * Tab width is now a user settable option. When opening an existing
     Python file, IDLE automatically detects the indentation
     conventions, and adapts.

   * There is now support for calling browsers on various platforms,
     used to open the Python documentation in a browser.

   * IDLE now has a command line, which is largely similar to  the
     vanilla Python interpreter.

   * Call tips were added in many places.

   * IDLE can now be installed as a package.

   * In the editor window, there is now a line/column bar at the bottom.

   * Three new keystroke commands: Check module (Alt-F5), Import module
     (F5) and Run script (Ctrl-F5).


File: python-whatsnew-3.2.2.info,  Node: Deleted and Deprecated Modules,  Next: Acknowledgements<8>,  Prev: IDLE Improvements,  Up: What's New in Python 2 0

11.17 Deleted and Deprecated Modules
====================================

A few modules have been dropped because they're obsolete, or because
there are now better ways to do the same thing.  The `stdwin' module is
gone; it was for a platform-independent windowing toolkit that's no
longer developed.

  A number of modules have been moved to the `lib-old' subdirectory:
`cmp', `cmpcache', `dircmp', `dump',  `find', `grep', `packmail',
`poly', `util', `whatsound', `zmod'.  If you have code which relies on
a module  that's been moved to `lib-old', you can simply add that
directory to `sys.path'   to get them back, but you're encouraged to
update any code that uses these modules.


File: python-whatsnew-3.2.2.info,  Node: Acknowledgements<8>,  Prev: Deleted and Deprecated Modules,  Up: What's New in Python 2 0

11.18 Acknowledgements
======================

The authors would like to thank the following people for offering
suggestions on various drafts of this article: David Bolen, Mark
Hammond, Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert,
Aahz Maruch, Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido
van Rossum, Neil Schemenauer, and Russ Schmidt.


File: python-whatsnew-3.2.2.info,  Node: Index,  Prev: What's New in Python 2 0,  Up: Top

Index
*****

 [index ]
* Menu:

* APPDATA:                               PEP 370 Per-user site-packages Directory.
                                                              (line  25)
* CC:                                    New Improved and Deprecated Modules<4>.
                                                              (line  58)
* CFLAGS:                                New Improved and Deprecated Modules<4>.
                                                              (line  58)
* CPP:                                   New Improved and Deprecated Modules<4>.
                                                              (line  58)
* CPPFLAGS:                              New Improved and Deprecated Modules<4>.
                                                              (line  59)
* environment variable; APPDATA:         PEP 370 Per-user site-packages Directory.
                                                              (line  25)
* environment variable; CC:              New Improved and Deprecated Modules<4>.
                                                              (line  58)
* environment variable; CFLAGS:          New Improved and Deprecated Modules<4>.
                                                              (line  58)
* environment variable; CPP:             New Improved and Deprecated Modules<4>.
                                                              (line  58)
* environment variable; CPPFLAGS:        New Improved and Deprecated Modules<4>.
                                                              (line  59)
* environment variable; LDCXXSHARED:     Build and C API Changes<4>.
                                                              (line 153)
* environment variable; LDFLAGS:         New Improved and Deprecated Modules<4>.
                                                              (line  58)
* environment variable; PYTHONCASEOK:    PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                              (line  16)
* environment variable; PYTHONDONTWRITEBYTECODE <1>: New and Improved Modules<2>.
                                                              (line 618)
* environment variable; PYTHONDONTWRITEBYTECODE: Interpreter Changes<2>.
                                                              (line  15)
* environment variable; PYTHONINSPECT:   Other Changes and Fixes<2>.
                                                              (line  13)
* environment variable; PYTHONIOENCODING: Interpreter Changes<2>.
                                                              (line  22)
* environment variable; PYTHONNOUSERSITE: PEP 370 Per-user site-packages Directory.
                                                              (line  30)
* environment variable; PYTHONUSERBASE:  PEP 370 Per-user site-packages Directory.
                                                              (line  23)
* environment variable; PYTHONWARNINGS <1>: Other Language Changes.
                                                              (line 154)
* environment variable; PYTHONWARNINGS <2>: Interpreter Changes.
                                                              (line   6)
* environment variable; PYTHONWARNINGS:  The Future for Python 2 x.
                                                              (line  40)
* environment variable; USER_BASE:       New and Improved Modules.
                                                              (line 454)
* LDCXXSHARED:                           Build and C API Changes<4>.
                                                              (line 153)
* LDFLAGS:                               New Improved and Deprecated Modules<4>.
                                                              (line  58)
* Python Enhancement Proposals; PEP 0004: Library Changes.    (line  12)
* Python Enhancement Proposals; PEP 0008: Library Changes.    (line  26)
* Python Enhancement Proposals; PEP 0011: Library Changes.    (line  14)
* Python Enhancement Proposals; PEP 0237: Integers.           (line   6)
* Python Enhancement Proposals; PEP 0238: Integers.           (line  10)
* Python Enhancement Proposals; PEP 0274: New Syntax.         (line  38)
* Python Enhancement Proposals; PEP 0328: Removed Syntax.     (line  28)
* Python Enhancement Proposals; PEP 0352: Changes To Exceptions.
                                                              (line   9)
* Python Enhancement Proposals; PEP 100: Unicode<2>.          (line  15)
* Python Enhancement Proposals; PEP 205: PEP 205 Weak References.
                                                              (line  83)
* Python Enhancement Proposals; PEP 207: PEP 207 Rich Comparisons.
                                                              (line  65)
* Python Enhancement Proposals; PEP 208: PEP 208 New Coercion Model.
                                                              (line  29)
* Python Enhancement Proposals; PEP 217: PEP 217 Interactive Display Hook.
                                                              (line  28)
* Python Enhancement Proposals; PEP 218 <1>: PEP 218 A Standard Set Datatype.
                                                              (line  81)
* Python Enhancement Proposals; PEP 218 <2>: Other Language Changes<6>.
                                                              (line  11)
* Python Enhancement Proposals; PEP 218: PEP 218 Built-In Set Objects.
                                                              (line  50)
* Python Enhancement Proposals; PEP 227 <1>: PEP 227 Nested Scopes<2>.
                                                              (line  95)
* Python Enhancement Proposals; PEP 227: PEP 227 Nested Scopes.
                                                              (line  95)
* Python Enhancement Proposals; PEP 229: PEP 229 New Build System.
                                                              (line  40)
* Python Enhancement Proposals; PEP 230: PEP 230 Warning Framework.
                                                              (line  71)
* Python Enhancement Proposals; PEP 232: PEP 232 Function Attributes.
                                                              (line  36)
* Python Enhancement Proposals; PEP 234: PEP 234 Iterators.   (line 123)
* Python Enhancement Proposals; PEP 236: PEP 236 __future__ Directives.
                                                              (line  29)
* Python Enhancement Proposals; PEP 237 <1>: PEP 237 Unifying Long Integers and Integers.
                                                              (line  22)
* Python Enhancement Proposals; PEP 237 <2>: PEP 237 Unifying Long Integers and Integers<2>.
                                                              (line  37)
* Python Enhancement Proposals; PEP 237: Other Language Changes<6>.
                                                              (line  18)
* Python Enhancement Proposals; PEP 238: PEP 238 Changing the Division Operator.
                                                              (line  22)
* Python Enhancement Proposals; PEP 241: PEP 241 Metadata in Python Packages.
                                                              (line  35)
* Python Enhancement Proposals; PEP 243: PEP 241 Metadata in Python Packages.
                                                              (line  38)
* Python Enhancement Proposals; PEP 249: The sqlite3 package. (line 108)
* Python Enhancement Proposals; PEP 252: Related Links.       (line  17)
* Python Enhancement Proposals; PEP 253 <1>: Related Links.   (line  19)
* Python Enhancement Proposals; PEP 253 <2>: Old and New Classes.
                                                              (line  27)
* Python Enhancement Proposals; PEP 253 <3>: Related Links.   (line  17)
* Python Enhancement Proposals; PEP 253 <4>: Multiple Inheritance The Diamond Rule.
                                                              (line   8)
* Python Enhancement Proposals; PEP 253: Related Links.       (line  21)
* Python Enhancement Proposals; PEP 255 <1>: PEP 255 Simple Generators<2>.
                                                              (line  42)
* Python Enhancement Proposals; PEP 255 <2>: PEP 255 Simple Generators.
                                                              (line  44)
* Python Enhancement Proposals; PEP 255: PEP 255 Simple Generators<2>.
                                                              (line 127)
* Python Enhancement Proposals; PEP 261: Unicode Changes.     (line  61)
* Python Enhancement Proposals; PEP 263 <1>: Other Language Changes<5>.
                                                              (line  97)
* Python Enhancement Proposals; PEP 263: PEP 263 Source Code Encodings.
                                                              (line  29)
* Python Enhancement Proposals; PEP 264: Other Changes and Fixes<3>.
                                                              (line  55)
* Python Enhancement Proposals; PEP 273: PEP 273 Importing Modules from ZIP Archives.
                                                              (line  43)
* Python Enhancement Proposals; PEP 277: PEP 277 Unicode file name support for Windows NT.
                                                              (line  32)
* Python Enhancement Proposals; PEP 278: PEP 278 Universal Newline Support.
                                                              (line  33)
* Python Enhancement Proposals; PEP 279: PEP 279 enumerate.   (line  28)
* Python Enhancement Proposals; PEP 282: PEP 282 The logging Package.
                                                              (line 108)
* Python Enhancement Proposals; PEP 285: PEP 285 A Boolean Type.
                                                              (line  69)
* Python Enhancement Proposals; PEP 288: PEP 342 New Generator Features.
                                                              (line 142)
* Python Enhancement Proposals; PEP 289 <1>: PEP 289 Generator Expressions.
                                                              (line  56)
* Python Enhancement Proposals; PEP 289: Other Language Changes<6>.
                                                              (line  15)
* Python Enhancement Proposals; PEP 292: PEP 292 Simpler String Substitutions.
                                                              (line  46)
* Python Enhancement Proposals; PEP 293: PEP 293 Codec Error Handling Callbacks.
                                                              (line  33)
* Python Enhancement Proposals; PEP 3000: Python 3 0.         (line  43)
* Python Enhancement Proposals; PEP 301: PEP 301 Package Index and Metadata for Distutils.
                                                              (line  45)
* Python Enhancement Proposals; PEP 302 <1>: PEP 302 New Import Hooks.
                                                              (line  62)
* Python Enhancement Proposals; PEP 302 <2>: PEP 273 Importing Modules from ZIP Archives.
                                                              (line  45)
* Python Enhancement Proposals; PEP 302 <3>: New Improved and Deprecated Modules<2>.
                                                              (line 106)
* Python Enhancement Proposals; PEP 302: PEP 302 New Import Hooks.
                                                              (line  13)
* Python Enhancement Proposals; PEP 305: PEP 305 Comma-separated Files.
                                                              (line  42)
* Python Enhancement Proposals; PEP 307: PEP 307 Pickle Enhancements.
                                                              (line   8)
* Python Enhancement Proposals; PEP 308: PEP 308 Conditional Expressions.
                                                              (line  72)
* Python Enhancement Proposals; PEP 309: PEP 309 Partial Function Application.
                                                              (line  74)
* Python Enhancement Proposals; PEP 3100: Python 3 0.         (line  44)
* Python Enhancement Proposals; PEP 3101 <1>: PEP 3101 A New Approach To String Formatting.
                                                              (line   6)
* Python Enhancement Proposals; PEP 3101 <2>: PEP 3101 Advanced String Formatting.
                                                              (line 133)
* Python Enhancement Proposals; PEP 3101: PEP 3101 A New Approach To String Formatting.
                                                              (line  11)
* Python Enhancement Proposals; PEP 3102: New Syntax.         (line  13)
* Python Enhancement Proposals; PEP 3104: New Syntax.         (line  24)
* Python Enhancement Proposals; PEP 3105 <1>: Print Is A Function.
                                                              (line   8)
* Python Enhancement Proposals; PEP 3105: PEP 3105 print As a Function.
                                                              (line  35)
* Python Enhancement Proposals; PEP 3106: PEP 3106 Dictionary Views.
                                                              (line  58)
* Python Enhancement Proposals; PEP 3107: New Syntax.         (line   6)
* Python Enhancement Proposals; PEP 3108: Library Changes.    (line  16)
* Python Enhancement Proposals; PEP 3109 <1>: Changes To Exceptions.
                                                              (line  29)
* Python Enhancement Proposals; PEP 3109: Changed Syntax.     (line   6)
* Python Enhancement Proposals; PEP 3110 <1>: PEP 3110 Exception-Handling Changes.
                                                              (line  48)
* Python Enhancement Proposals; PEP 3110 <2>: Changed Syntax. (line  15)
* Python Enhancement Proposals; PEP 3110: Changes To Exceptions.
                                                              (line  35)
* Python Enhancement Proposals; PEP 3111: Builtins.           (line  12)
* Python Enhancement Proposals; PEP 3112: PEP 3112 Byte Literals.
                                                              (line  72)
* Python Enhancement Proposals; PEP 3113: Removed Syntax.     (line   6)
* Python Enhancement Proposals; PEP 3114: Operators And Special Methods.
                                                              (line  19)
* Python Enhancement Proposals; PEP 3115: Changed Syntax.     (line  17)
* Python Enhancement Proposals; PEP 3116 <1>: PEP 3116 New I/O Library.
                                                              (line  67)
* Python Enhancement Proposals; PEP 3116: Optimizations<2>.   (line   8)
* Python Enhancement Proposals; PEP 3118 <1>: PEP 3118 Revised Buffer Protocol.
                                                              (line  47)
* Python Enhancement Proposals; PEP 3118: Build and C API Changes<3>.
                                                              (line  12)
* Python Enhancement Proposals; PEP 3119: PEP 3119 Abstract Base Classes.
                                                              (line 137)
* Python Enhancement Proposals; PEP 3120: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                              (line  95)
* Python Enhancement Proposals; PEP 3121: Build and C API Changes<3>.
                                                              (line  14)
* Python Enhancement Proposals; PEP 3123: Build and C API Changes<3>.
                                                              (line  16)
* Python Enhancement Proposals; PEP 3127: PEP 3127 Integer Literal Support and Syntax.
                                                              (line  48)
* Python Enhancement Proposals; PEP 3129: PEP 3129 Class Decorators.
                                                              (line  25)
* Python Enhancement Proposals; PEP 3131: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                              (line  97)
* Python Enhancement Proposals; PEP 3132: New Syntax.         (line  28)
* Python Enhancement Proposals; PEP 3134 <1>: Changed Syntax. (line   6)
* Python Enhancement Proposals; PEP 3134: Changes To Exceptions.
                                                              (line  60)
* Python Enhancement Proposals; PEP 3135: Builtins.           (line   6)
* Python Enhancement Proposals; PEP 3137: PEP 3137 The memoryview Object.
                                                              (line  50)
* Python Enhancement Proposals; PEP 3138: Text Vs Data Instead Of Unicode Vs 8-bit.
                                                              (line  91)
* Python Enhancement Proposals; PEP 314: PEP 314 Metadata for Python Software Packages v1 1.
                                                              (line  43)
* Python Enhancement Proposals; PEP 3141: PEP 3141 A Type Hierarchy for Numbers.
                                                              (line  43)
* Python Enhancement Proposals; PEP 3147: PEP 3147 PYC Repository Directories.
                                                              (line  72)
* Python Enhancement Proposals; PEP 3148: PEP 3148 The concurrent futures module.
                                                              (line  51)
* Python Enhancement Proposals; PEP 3149: PEP 3149 ABI Version Tagged so Files.
                                                              (line  34)
* Python Enhancement Proposals; PEP 318 <1>: PEP 318 Decorators for Functions and Methods.
                                                              (line 100)
* Python Enhancement Proposals; PEP 318 <2>: Other Language Changes<6>.
                                                              (line   9)
* Python Enhancement Proposals; PEP 318: PEP 318 Decorators for Functions and Methods.
                                                              (line 124)
* Python Enhancement Proposals; PEP 322 <1>: PEP 322 Reverse Iteration.
                                                              (line  35)
* Python Enhancement Proposals; PEP 322: Other Language Changes<6>.
                                                              (line  12)
* Python Enhancement Proposals; PEP 324: PEP 324 New subprocess Module.
                                                              (line  87)
* Python Enhancement Proposals; PEP 325: PEP 342 New Generator Features.
                                                              (line 143)
* Python Enhancement Proposals; PEP 327: The Context type.    (line  56)
* Python Enhancement Proposals; PEP 328 <1>: PEP 328 Absolute and Relative Imports.
                                                              (line  82)
* Python Enhancement Proposals; PEP 328 <2>: Other Language Changes<6>.
                                                              (line  21)
* Python Enhancement Proposals; PEP 328: PEP 328 Multi-line Imports.
                                                              (line  35)
* Python Enhancement Proposals; PEP 331: PEP 331 Locale-Independent Float/String Conversions.
                                                              (line  37)
* Python Enhancement Proposals; PEP 333: The wsgiref package. (line   8)
* Python Enhancement Proposals; PEP 3333: PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                              (line  50)
* Python Enhancement Proposals; PEP 338: PEP 338 Executing Modules as Scripts.
                                                              (line  21)
* Python Enhancement Proposals; PEP 339: Build and C API Changes<6>.
                                                              (line  45)
* Python Enhancement Proposals; PEP 341: PEP 341 Unified try/except/finally.
                                                              (line  43)
* Python Enhancement Proposals; PEP 342 <1>: Porting to Python 2 5.
                                                              (line  15)
* Python Enhancement Proposals; PEP 342: PEP 342 New Generator Features.
                                                              (line  41)
* Python Enhancement Proposals; PEP 343 <1>: The contextlib module.
                                                              (line  62)
* Python Enhancement Proposals; PEP 343: The contextlib module<2>.
                                                              (line  62)
* Python Enhancement Proposals; PEP 347: Build and C API Changes<6>.
                                                              (line  10)
* Python Enhancement Proposals; PEP 352 <1>: PEP 352 Exceptions as New-Style Classes.
                                                              (line  57)
* Python Enhancement Proposals; PEP 352: Deprecations and Removals.
                                                              (line   9)
* Python Enhancement Proposals; PEP 353 <1>: PEP 353 Using ssize_t as the index type.
                                                              (line  49)
* Python Enhancement Proposals; PEP 353: Build and C API Changes<6>.
                                                              (line  20)
* Python Enhancement Proposals; PEP 356: What's New in Python 2 5.
                                                              (line   9)
* Python Enhancement Proposals; PEP 357: PEP 357 The '__index__' method.
                                                              (line  39)
* Python Enhancement Proposals; PEP 361: What's New in Python 2 6.
                                                              (line  13)
* Python Enhancement Proposals; PEP 370: PEP 370 Per-user site-packages Directory.
                                                              (line  35)
* Python Enhancement Proposals; PEP 371: PEP 371 The multiprocessing Package.
                                                              (line 146)
* Python Enhancement Proposals; PEP 372 <1>: PEP 372 Adding an Ordered Dictionary to collections.
                                                              (line  95)
* Python Enhancement Proposals; PEP 372: PEP 372 Ordered Dictionaries.
                                                              (line  31)
* Python Enhancement Proposals; PEP 373: What's New in Python 2 7.
                                                              (line  14)
* Python Enhancement Proposals; PEP 378 <1>: PEP 378 Format Specifier for Thousands Separator<2>.
                                                              (line  37)
* Python Enhancement Proposals; PEP 378: PEP 378 Format Specifier for Thousands Separator.
                                                              (line  30)
* Python Enhancement Proposals; PEP 384: PEP 384 Defining a Stable ABI.
                                                              (line  24)
* Python Enhancement Proposals; PEP 385: Code Repository.     (line  13)
* Python Enhancement Proposals; PEP 389 <1>: PEP 389 The argparse Module for Parsing Command Lines.
                                                              (line  96)
* Python Enhancement Proposals; PEP 389: PEP 389 Argparse Command Line Parsing Module.
                                                              (line  92)
* Python Enhancement Proposals; PEP 391 <1>: PEP 391 Dictionary-Based Configuration For Logging.
                                                              (line  92)
* Python Enhancement Proposals; PEP 391: PEP 391 Dictionary Based Configuration for Logging.
                                                              (line  52)
* Python Enhancement Proposals; PEP 392: What's New In Python 3 2.
                                                              (line  19)
* Python Enhancement Proposals; PEP 5:   PEP 230 Warning Framework.
                                                              (line  65)
* PYTHONCASEOK:                          PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                              (line  16)
* PYTHONDONTWRITEBYTECODE <1>:           Interpreter Changes<2>.
                                                              (line  15)
* PYTHONDONTWRITEBYTECODE:               New and Improved Modules<2>.
                                                              (line 618)
* PYTHONINSPECT:                         Other Changes and Fixes<2>.
                                                              (line  13)
* PYTHONIOENCODING:                      Interpreter Changes<2>.
                                                              (line  22)
* PYTHONNOUSERSITE:                      PEP 370 Per-user site-packages Directory.
                                                              (line  30)
* PYTHONUSERBASE:                        PEP 370 Per-user site-packages Directory.
                                                              (line  23)
* PYTHONWARNINGS <1>:                    Other Language Changes.
                                                              (line 154)
* PYTHONWARNINGS <2>:                    The Future for Python 2 x.
                                                              (line  40)
* PYTHONWARNINGS:                        Interpreter Changes. (line   6)
* RFC; RFC 2033:                         New and Improved Modules<2>.
                                                              (line 563)
* RFC; RFC 2047 <1>:                     PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                              (line  21)
* RFC; RFC 2047:                         email.               (line  27)
* RFC; RFC 2104:                         New and Improved Modules<3>.
                                                              (line  34)
* RFC; RFC 2342:                         New and Improved Modules<3>.
                                                              (line  91)
* RFC; RFC 2487:                         New and Improved Modules<3>.
                                                              (line  84)
* RFC; RFC 2616:                         PEP 3333 Python Web Server Gateway Interface v1 0 1.
                                                              (line  19)
* RFC; RFC 2732 <1>:                     urllib parse.        (line  10)
* RFC; RFC 2732:                         New and Improved Modules.
                                                              (line 618)
* RFC; RFC 2818:                         ssl.                 (line  16)
* RFC; RFC 2822:                         New and Improved Modules<3>.
                                                              (line  96)
* RFC; RFC 3207:                         New and Improved Modules<2>.
                                                              (line 568)
* RFC; RFC 3986 <1>:                     Porting to Python 2 7.
                                                              (line  76)
* RFC; RFC 3986:                         New and Improved Modules.
                                                              (line 597)
* RFC; RFC 4122:                         New Improved and Removed Modules.
                                                              (line 409)
* RFC; RFC 822:                          New and Improved Modules<3>.
                                                              (line  96)
* USER_BASE:                             New and Improved Modules.
                                                              (line 454)



Tag Table:
Node: Top435
Ref: whatsnew/index doc718
Ref: 0718
Node: What's New In Python 3 215615
Ref: whatsnew/3 2 what-s-new-in-python15739
Ref: 115739
Ref: whatsnew/3 2 doc15739
Ref: 215739
Ref: whatsnew/3 2 whatsnew-index15739
Ref: 315739
Ref: whatsnew/3 2 what-s-new-in-python-3-215739
Ref: 415739
Ref: What's New In Python 3 2-Footnote-117068
Ref: What's New In Python 3 2-Footnote-217123
Node: PEP 384 Defining a Stable ABI17170
Ref: whatsnew/3 2 pep-384-defining-a-stable-abi17328
Ref: 517328
Ref: PEP 384 Defining a Stable ABI-Footnote-118411
Node: PEP 389 Argparse Command Line Parsing Module18458
Ref: whatsnew/3 2 pep-389-argparse-command-line-parsing-module18675
Ref: 618675
Ref: PEP 389 Argparse Command Line Parsing Module-Footnote-122702
Node: PEP 391 Dictionary Based Configuration for Logging22749
Ref: whatsnew/3 2 pep-391-dictionary-based-configuration-for-logging22975
Ref: 722975
Ref: PEP 391 Dictionary Based Configuration for Logging-Footnote-125203
Node: PEP 3148 The concurrent futures module25250
Ref: whatsnew/3 2 pep-3148-the-concurrent-futures-module25467
Ref: 825467
Ref: PEP 3148 The concurrent futures module-Footnote-128044
Node: PEP 3147 PYC Repository Directories28091
Ref: whatsnew/3 2 pep-3147-pyc-repository-directories28294
Ref: 928294
Ref: PEP 3147 PYC Repository Directories-Footnote-131250
Node: PEP 3149 ABI Version Tagged so Files31297
Ref: whatsnew/3 2 pep-3149-abi-version-tagged-so-files31513
Ref: a31513
Ref: PEP 3149 ABI Version Tagged so Files-Footnote-132726
Node: PEP 3333 Python Web Server Gateway Interface v1 0 132773
Ref: whatsnew/3 2 pep-3333-python-web-server-gateway-interface-v1-0-132976
Ref: b32976
Ref: PEP 3333 Python Web Server Gateway Interface v1 0 1-Footnote-135269
Ref: PEP 3333 Python Web Server Gateway Interface v1 0 1-Footnote-235316
Ref: PEP 3333 Python Web Server Gateway Interface v1 0 1-Footnote-335363
Node: Other Language Changes35410
Ref: whatsnew/3 2 other-language-changes35612
Ref: c35612
Ref: Other Language Changes-Footnote-144546
Ref: Other Language Changes-Footnote-244586
Ref: Other Language Changes-Footnote-344626
Ref: Other Language Changes-Footnote-444669
Ref: Other Language Changes-Footnote-544709
Ref: Other Language Changes-Footnote-644749
Ref: Other Language Changes-Footnote-744789
Ref: Other Language Changes-Footnote-844829
Ref: Other Language Changes-Footnote-944869
Ref: Other Language Changes-Footnote-1044909
Ref: Other Language Changes-Footnote-1144951
Ref: Other Language Changes-Footnote-1244994
Ref: Other Language Changes-Footnote-1345035
Ref: Other Language Changes-Footnote-1445076
Ref: Other Language Changes-Footnote-1545118
Ref: Other Language Changes-Footnote-1645160
Node: New Improved and Deprecated Modules45201
Ref: whatsnew/3 2 new-improved-and-deprecated-modules45367
Ref: d45367
Node: email46980
Ref: whatsnew/3 2 email47092
Ref: e47092
Ref: email-Footnote-148904
Ref: email-Footnote-248951
Ref: email-Footnote-348991
Node: elementtree49032
Ref: whatsnew/3 2 elementtree49162
Ref: f49162
Ref: elementtree-Footnote-150533
Ref: elementtree-Footnote-250588
Node: functools50628
Ref: whatsnew/3 2 functools50762
Ref: 1050762
Ref: functools-Footnote-154122
Ref: functools-Footnote-254172
Ref: functools-Footnote-354222
Ref: functools-Footnote-454263
Ref: functools-Footnote-554304
Ref: functools-Footnote-654344
Ref: functools-Footnote-754384
Ref: functools-Footnote-854424
Node: itertools54474
Ref: whatsnew/3 2 itertools54608
Ref: 1154608
Node: collections55243
Ref: whatsnew/3 2 collections55377
Ref: 1255377
Ref: collections-Footnote-157365
Ref: collections-Footnote-257423
Node: threading57468
Ref: whatsnew/3 2 threading57610
Ref: 1357610
Ref: threading-Footnote-160314
Ref: threading-Footnote-260373
Ref: threading-Footnote-360451
Ref: threading-Footnote-460517
Node: datetime and time60557
Ref: whatsnew/3 2 datetime-and-time60692
Ref: 1460692
Ref: datetime and time-Footnote-163318
Ref: datetime and time-Footnote-263361
Ref: datetime and time-Footnote-363401
Ref: datetime and time-Footnote-463441
Ref: datetime and time-Footnote-563481
Ref: datetime and time-Footnote-663524
Ref: datetime and time-Footnote-763564
Node: math63605
Ref: whatsnew/3 2 math63734
Ref: 1563734
Ref: math-Footnote-165356
Node: abc65407
Ref: whatsnew/3 2 abc65521
Ref: 1665521
Ref: abc-Footnote-166078
Node: io66118
Ref: whatsnew/3 2 io66235
Ref: 1766235
Ref: io-Footnote-167334
Node: reprlib67374
Ref: whatsnew/3 2 reprlib67495
Ref: 1867495
Ref: reprlib-Footnote-168393
Ref: reprlib-Footnote-268433
Node: logging68473
Ref: whatsnew/3 2 logging68595
Ref: 1968595
Node: csv70314
Ref: whatsnew/3 2 csv70439
Ref: 1a70439
Ref: csv-Footnote-171246
Ref: csv-Footnote-271286
Node: contextlib71329
Ref: whatsnew/3 2 contextlib71468
Ref: 1b71468
Ref: contextlib-Footnote-173627
Node: decimal and fractions73667
Ref: whatsnew/3 2 decimal-and-fractions73806
Ref: 1c73806
Ref: decimal and fractions-Footnote-176033
Ref: decimal and fractions-Footnote-276073
Ref: decimal and fractions-Footnote-376113
Ref: decimal and fractions-Footnote-476153
Ref: decimal and fractions-Footnote-576193
Ref: decimal and fractions-Footnote-676233
Node: ftp76273
Ref: whatsnew/3 2 ftp76407
Ref: 1d76407
Ref: ftp-Footnote-177681
Ref: ftp-Footnote-277721
Ref: ftp-Footnote-377761
Ref: ftp-Footnote-477801
Node: popen77841
Ref: whatsnew/3 2 popen77960
Ref: 1e77960
Ref: popen-Footnote-178236
Ref: popen-Footnote-278276
Node: select78317
Ref: whatsnew/3 2 select78449
Ref: 1f78449
Ref: select-Footnote-178845
Node: gzip and zipfile78885
Ref: whatsnew/3 2 gzip-and-zipfile79019
Ref: 2079019
Ref: gzip and zipfile-Footnote-180459
Ref: gzip and zipfile-Footnote-280499
Ref: gzip and zipfile-Footnote-380539
Ref: gzip and zipfile-Footnote-480582
Ref: gzip and zipfile-Footnote-580622
Ref: gzip and zipfile-Footnote-680662
Node: tarfile80702
Ref: whatsnew/3 2 tarfile80837
Ref: 2180837
Ref: tarfile-Footnote-182338
Node: hashlib82378
Ref: whatsnew/3 2 hashlib82500
Ref: 2282500
Ref: hashlib-Footnote-183235
Node: ast83275
Ref: whatsnew/3 2 ast83392
Ref: 2383392
Node: os84263
Ref: whatsnew/3 2 os84379
Ref: 2484379
Node: shutil85059
Ref: whatsnew/3 2 shutil85179
Ref: 2585179
Node: sqlite387364
Ref: whatsnew/3 2 sqlite387486
Ref: 2687486
Ref: sqlite3-Footnote-188097
Node: html88137
Ref: whatsnew/3 2 html88259
Ref: 2788259
Node: socket88521
Ref: whatsnew/3 2 socket88639
Ref: 2888639
Ref: socket-Footnote-189237
Ref: socket-Footnote-289277
Node: ssl89317
Ref: whatsnew/3 2 ssl89435
Ref: 2989435
Ref: ssl-Footnote-191425
Ref: ssl-Footnote-291472
Ref: ssl-Footnote-391544
Ref: ssl-Footnote-491584
Ref: ssl-Footnote-591624
Ref: ssl-Footnote-691664
Ref: ssl-Footnote-791704
Ref: ssl-Footnote-891744
Ref: ssl-Footnote-991784
Node: nntp91824
Ref: whatsnew/3 2 nntp91948
Ref: 2a91948
Ref: nntp-Footnote-192492
Ref: nntp-Footnote-292532
Node: certificates92572
Ref: whatsnew/3 2 certificates92700
Ref: 2b92700
Ref: certificates-Footnote-193065
Node: imaplib93105
Ref: whatsnew/3 2 imaplib93240
Ref: 2c93240
Ref: imaplib-Footnote-193500
Node: http client93540
Ref: whatsnew/3 2 http-client93671
Ref: 2d93671
Ref: http client-Footnote-195009
Node: unittest95050
Ref: whatsnew/3 2 unittest95180
Ref: 2e95180
Ref: unittest-Footnote-199163
Ref: unittest-Footnote-299204
Ref: unittest-Footnote-399244
Node: random99284
Ref: whatsnew/3 2 random99409
Ref: 2f99409
Ref: random-Footnote-1100007
Node: poplib100047
Ref: whatsnew/3 2 poplib100172
Ref: 30100172
Ref: poplib-Footnote-1100503
Node: asyncore100543
Ref: whatsnew/3 2 asyncore100670
Ref: 31100670
Ref: asyncore-Footnote-1101102
Node: tempfile101142
Ref: whatsnew/3 2 tempfile101270
Ref: 32101270
Ref: tempfile-Footnote-1101652
Node: inspect101692
Ref: whatsnew/3 2 inspect101817
Ref: 33101817
Ref: inspect-Footnote-1103086
Node: pydoc103127
Ref: whatsnew/3 2 pydoc103247
Ref: 34103247
Ref: pydoc-Footnote-1103547
Node: dis103587
Ref: whatsnew/3 2 dis103703
Ref: 35103703
Ref: dis-Footnote-1105766
Node: dbm105806
Ref: whatsnew/3 2 dbm105923
Ref: 36105923
Ref: dbm-Footnote-1106101
Node: ctypes106141
Ref: whatsnew/3 2 ctypes106259
Ref: 37106259
Node: site106357
Ref: whatsnew/3 2 site106481
Ref: 38106481
Ref: site-Footnote-1107646
Node: sysconfig107686
Ref: whatsnew/3 2 sysconfig107807
Ref: 39107807
Node: pdb109945
Ref: whatsnew/3 2 pdb110074
Ref: 3a110074
Node: configparser110910
Ref: whatsnew/3 2 configparser111042
Ref: 3b111042
Node: urllib parse113747
Ref: whatsnew/3 2 urllib-parse113883
Ref: 3c113883
Ref: urllib parse-Footnote-1115792
Ref: urllib parse-Footnote-2115833
Ref: urllib parse-Footnote-3115880
Ref: urllib parse-Footnote-4115920
Ref: urllib parse-Footnote-5115960
Node: mailbox116000
Ref: whatsnew/3 2 mailbox116134
Ref: 3d116134
Ref: mailbox-Footnote-1117604
Node: turtledemo117644
Ref: whatsnew/3 2 turtledemo117757
Ref: 3e117757
Ref: turtledemo-Footnote-1118169
Node: Multi-threading118210
Ref: whatsnew/3 2 multi-threading118367
Ref: 3f118367
Ref: Multi-threading-Footnote-1119957
Ref: Multi-threading-Footnote-2120033
Ref: Multi-threading-Footnote-3120073
Ref: Multi-threading-Footnote-4120115
Node: Optimizations120155
Ref: whatsnew/3 2 optimizations120284
Ref: 40120284
Ref: Optimizations-Footnote-1123557
Ref: Optimizations-Footnote-2123597
Ref: Optimizations-Footnote-3123637
Ref: Optimizations-Footnote-4123677
Ref: Optimizations-Footnote-5123721
Ref: Optimizations-Footnote-6123761
Ref: Optimizations-Footnote-7123801
Ref: Optimizations-Footnote-8123842
Ref: Optimizations-Footnote-9123882
Ref: Optimizations-Footnote-10123922
Ref: Optimizations-Footnote-11123963
Ref: Optimizations-Footnote-12124004
Ref: Optimizations-Footnote-13124045
Ref: Optimizations-Footnote-14124089
Ref: Optimizations-Footnote-15124130
Ref: Optimizations-Footnote-16124172
Node: Unicode124213
Ref: whatsnew/3 2 unicode124333
Ref: 41124333
Ref: Unicode-Footnote-1124880
Ref: Unicode-Footnote-2124929
Ref: Unicode-Footnote-3124971
Node: Codecs125041
Ref: whatsnew/3 2 codecs125161
Ref: 42125161
Ref: Codecs-Footnote-1126026
Node: Documentation126069
Ref: whatsnew/3 2 documentation126186
Ref: 43126186
Ref: Documentation-Footnote-1127725
Ref: Documentation-Footnote-2127787
Ref: Documentation-Footnote-3127860
Ref: Documentation-Footnote-4127900
Node: IDLE127940
Ref: whatsnew/3 2 idle128066
Ref: 44128066
Ref: IDLE-Footnote-1128449
Ref: IDLE-Footnote-2128489
Node: Code Repository128529
Ref: whatsnew/3 2 code-repository128665
Ref: 45128665
Ref: Code Repository-Footnote-1129267
Ref: Code Repository-Footnote-2129304
Ref: Code Repository-Footnote-3129351
Ref: Code Repository-Footnote-4129376
Node: Build and C API Changes129419
Ref: whatsnew/3 2 build-and-c-api-changes129572
Ref: 46129572
Ref: Build and C API Changes-Footnote-1133542
Ref: Build and C API Changes-Footnote-2133583
Ref: Build and C API Changes-Footnote-3133623
Ref: Build and C API Changes-Footnote-4133663
Ref: Build and C API Changes-Footnote-5133703
Ref: Build and C API Changes-Footnote-6133743
Ref: Build and C API Changes-Footnote-7133783
Ref: Build and C API Changes-Footnote-8133823
Ref: Build and C API Changes-Footnote-9133863
Ref: Build and C API Changes-Footnote-10133903
Ref: Build and C API Changes-Footnote-11133944
Ref: Build and C API Changes-Footnote-12133985
Ref: Build and C API Changes-Footnote-13134026
Ref: Build and C API Changes-Footnote-14134082
Ref: Build and C API Changes-Footnote-15134155
Node: Porting to Python 3 2134210
Ref: whatsnew/3 2 porting-to-python-3-2134339
Ref: 47134339
Ref: Porting to Python 3 2-Footnote-1140674
Ref: Porting to Python 3 2-Footnote-2140714
Ref: Porting to Python 3 2-Footnote-3140754
Ref: Porting to Python 3 2-Footnote-4140797
Ref: Porting to Python 3 2-Footnote-5140838
Ref: Porting to Python 3 2-Footnote-6140879
Ref: Porting to Python 3 2-Footnote-7140920
Node: What's New In Python 3 1140960
Ref: whatsnew/3 1 doc141105
Ref: 48141105
Ref: whatsnew/3 1 what-s-new-in-python-3-1141105
Ref: 49141105
Node: PEP 372 Ordered Dictionaries141782
Ref: whatsnew/3 1 pep-372-ordered-dictionaries141943
Ref: 4a141943
Ref: PEP 372 Ordered Dictionaries-Footnote-1143454
Ref: PEP 372 Ordered Dictionaries-Footnote-2143480
Node: PEP 378 Format Specifier for Thousands Separator143527
Ref: whatsnew/3 1 pep-378-format-specifier-for-thousands-separator143722
Ref: 4b143722
Ref: PEP 378 Format Specifier for Thousands Separator-Footnote-1144890
Node: Other Language Changes<2>144937
Ref: whatsnew/3 1 other-language-changes145142
Ref: 4c145142
Ref: Other Language Changes<2>-Footnote-1149764
Ref: Other Language Changes<2>-Footnote-2149807
Ref: Other Language Changes<2>-Footnote-3149847
Ref: Other Language Changes<2>-Footnote-4149887
Ref: Other Language Changes<2>-Footnote-5149927
Ref: Other Language Changes<2>-Footnote-6149970
Ref: Other Language Changes<2>-Footnote-7150010
Node: New Improved and Deprecated Modules<2>150050
Ref: whatsnew/3 1 new-improved-and-deprecated-modules150223
Ref: 4d150223
Ref: New Improved and Deprecated Modules<2>-Footnote-1158305
Ref: New Improved and Deprecated Modules<2>-Footnote-2158348
Ref: New Improved and Deprecated Modules<2>-Footnote-3158388
Ref: New Improved and Deprecated Modules<2>-Footnote-4158428
Ref: New Improved and Deprecated Modules<2>-Footnote-5158468
Ref: New Improved and Deprecated Modules<2>-Footnote-6158508
Ref: New Improved and Deprecated Modules<2>-Footnote-7158555
Ref: New Improved and Deprecated Modules<2>-Footnote-8158595
Ref: New Improved and Deprecated Modules<2>-Footnote-9158635
Ref: New Improved and Deprecated Modules<2>-Footnote-10158675
Ref: New Improved and Deprecated Modules<2>-Footnote-11158716
Ref: New Improved and Deprecated Modules<2>-Footnote-12158757
Ref: New Improved and Deprecated Modules<2>-Footnote-13158798
Node: Optimizations<2>158839
Ref: whatsnew/3 1 optimizations158994
Ref: 4e158994
Ref: Optimizations<2>-Footnote-1161136
Ref: Optimizations<2>-Footnote-2161183
Ref: Optimizations<2>-Footnote-3161223
Ref: Optimizations<2>-Footnote-4161263
Ref: Optimizations<2>-Footnote-5161303
Ref: Optimizations<2>-Footnote-6161327
Ref: Optimizations<2>-Footnote-7161367
Node: IDLE<2>161407
Ref: whatsnew/3 1 idle161550
Ref: 4f161550
Ref: IDLE<2>-Footnote-1161760
Node: Build and C API Changes<2>161800
Ref: whatsnew/3 1 build-and-c-api-changes161948
Ref: 50161948
Ref: Build and C API Changes<2>-Footnote-1164071
Ref: Build and C API Changes<2>-Footnote-2164111
Ref: Build and C API Changes<2>-Footnote-3164151
Ref: Build and C API Changes<2>-Footnote-4164191
Ref: Build and C API Changes<2>-Footnote-5164231
Node: Porting to Python 3 1164271
Ref: whatsnew/3 1 porting-to-python-3-1164403
Ref: 51164403
Node: What's New In Python 3 0165510
Ref: whatsnew/3 0 doc165655
Ref: 52165655
Ref: whatsnew/3 0 what-s-new-in-python-3-0165655
Ref: 53165655
Node: Common Stumbling Blocks167874
Ref: whatsnew/3 0 common-stumbling-blocks168008
Ref: 54168008
Node: Print Is A Function168370
Ref: whatsnew/3 0 print-is-a-function168509
Ref: 55168509
Ref: Print Is A Function-Footnote-1170094
Node: Views And Iterators Instead Of Lists170141
Ref: whatsnew/3 0 views-and-iterators-instead-of-lists170309
Ref: 56170309
Node: Ordering Comparisons171495
Ref: whatsnew/3 0 ordering-comparisons171652
Ref: 57171652
Node: Integers172966
Ref: whatsnew/3 0 integers173127
Ref: 58173127
Ref: Integers-Footnote-1174247
Ref: Integers-Footnote-2174294
Node: Text Vs Data Instead Of Unicode Vs 8-bit174341
Ref: whatsnew/3 0 text-vs-data-instead-of-unicode-vs-8-bit174473
Ref: 59174473
Ref: Text Vs Data Instead Of Unicode Vs 8-bit-Footnote-1180199
Ref: Text Vs Data Instead Of Unicode Vs 8-bit-Footnote-2180246
Ref: Text Vs Data Instead Of Unicode Vs 8-bit-Footnote-3180293
Node: Overview Of Syntax Changes180340
Ref: whatsnew/3 0 overview-of-syntax-changes180520
Ref: 5a180520
Node: New Syntax180726
Ref: whatsnew/3 0 new-syntax180837
Ref: 5b180837
Ref: New Syntax-Footnote-1183249
Ref: New Syntax-Footnote-2183296
Ref: New Syntax-Footnote-3183343
Ref: New Syntax-Footnote-4183390
Ref: New Syntax-Footnote-5183437
Node: Changed Syntax183484
Ref: whatsnew/3 0 changed-syntax183618
Ref: 5c183618
Ref: Changed Syntax-Footnote-1185190
Ref: Changed Syntax-Footnote-2185237
Ref: Changed Syntax-Footnote-3185284
Ref: Changed Syntax-Footnote-4185331
Node: Removed Syntax185378
Ref: whatsnew/3 0 removed-syntax185493
Ref: 5d185493
Ref: Removed Syntax-Footnote-1186557
Ref: Removed Syntax-Footnote-2186604
Node: Changes Already Present In Python 2 6186651
Ref: whatsnew/3 0 changes-already-present-in-python-2-6186823
Ref: 5e186823
Node: Library Changes190481
Ref: whatsnew/3 0 library-changes190671
Ref: 70190671
Ref: Library Changes-Footnote-1195770
Ref: Library Changes-Footnote-2195817
Ref: Library Changes-Footnote-3195864
Ref: Library Changes-Footnote-4195911
Ref: Library Changes-Footnote-5195958
Ref: Library Changes-Footnote-6196005
Node: PEP 3101 A New Approach To String Formatting196052
Ref: whatsnew/3 0 pep-3101-a-new-approach-to-string-formatting196226
Ref: 71196226
Ref: PEP 3101 A New Approach To String Formatting-Footnote-1196626
Node: Changes To Exceptions196673
Ref: whatsnew/3 0 changes-to-exceptions196859
Ref: 72196859
Ref: Changes To Exceptions-Footnote-1200185
Ref: Changes To Exceptions-Footnote-2200232
Ref: Changes To Exceptions-Footnote-3200279
Ref: Changes To Exceptions-Footnote-4200326
Ref: Changes To Exceptions-Footnote-5200373
Node: Miscellaneous Other Changes200420
Ref: whatsnew/3 0 miscellaneous-other-changes200588
Ref: 73200588
Node: Operators And Special Methods200710
Ref: whatsnew/3 0 operators-and-special-methods200835
Ref: 74200835
Ref: Operators And Special Methods-Footnote-1202252
Node: Builtins202299
Ref: whatsnew/3 0 builtins202424
Ref: 75202424
Ref: Builtins-Footnote-1204591
Ref: Builtins-Footnote-2204638
Node: Build and C API Changes<3>204685
Ref: whatsnew/3 0 build-and-c-api-changes204843
Ref: 76204843
Ref: Build and C API Changes<3>-Footnote-1205803
Ref: Build and C API Changes<3>-Footnote-2205850
Ref: Build and C API Changes<3>-Footnote-3205897
Node: Performance205944
Ref: whatsnew/3 0 performance206096
Ref: 77206096
Node: Porting To Python 3 0206409
Ref: whatsnew/3 0 porting-to-python-3-0206526
Ref: 78206526
Node: What's New in Python 2 7208029
Ref: whatsnew/2 7 doc208174
Ref: 79208174
Ref: whatsnew/2 7 what-s-new-in-python-2-7208174
Ref: 7a208174
Ref: What's New in Python 2 7-Footnote-1210564
Node: The Future for Python 2 x210611
Ref: whatsnew/2 7 whatsnew27-python31210740
Ref: 7b210740
Ref: whatsnew/2 7 the-future-for-python-2-x210740
Ref: 7c210740
Ref: The Future for Python 2 x-Footnote-1212838
Node: Python 3 1 Features212878
Ref: whatsnew/2 7 python-3-1-features213067
Ref: 7d213067
Node: PEP 372 Adding an Ordered Dictionary to collections214844
Ref: whatsnew/2 7 pep-0372215059
Ref: 7e215059
Ref: whatsnew/2 7 pep-372-adding-an-ordered-dictionary-to-collections215059
Ref: 81215059
Ref: PEP 372 Adding an Ordered Dictionary to collections-Footnote-1218502
Ref: PEP 372 Adding an Ordered Dictionary to collections-Footnote-2218528
Node: PEP 378 Format Specifier for Thousands Separator<2>218575
Ref: whatsnew/2 7 pep-0378218824
Ref: 7f218824
Ref: whatsnew/2 7 pep-378-format-specifier-for-thousands-separator218824
Ref: 82218824
Ref: PEP 378 Format Specifier for Thousands Separator<2>-Footnote-1220284
Node: PEP 389 The argparse Module for Parsing Command Lines220331
Ref: whatsnew/2 7 pep-389-the-argparse-module-for-parsing-command-lines220579
Ref: 83220579
Ref: PEP 389 The argparse Module for Parsing Command Lines-Footnote-1224334
Ref: PEP 389 The argparse Module for Parsing Command Lines-Footnote-2224390
Ref: PEP 389 The argparse Module for Parsing Command Lines-Footnote-3224470
Node: PEP 391 Dictionary-Based Configuration For Logging224517
Ref: whatsnew/2 7 pep-391-dictionary-based-configuration-for-logging224739
Ref: 84224739
Ref: PEP 391 Dictionary-Based Configuration For Logging-Footnote-1228380
Node: PEP 3106 Dictionary Views228427
Ref: whatsnew/2 7 pep-3106-dictionary-views228626
Ref: 85228626
Ref: PEP 3106 Dictionary Views-Footnote-1230606
Ref: PEP 3106 Dictionary Views-Footnote-2230653
Node: PEP 3137 The memoryview Object230693
Ref: whatsnew/2 7 pep-3137-the-memoryview-object230867
Ref: 86230867
Ref: PEP 3137 The memoryview Object-Footnote-1232463
Ref: PEP 3137 The memoryview Object-Footnote-2232510
Node: Other Language Changes<3>232550
Ref: whatsnew/2 7 other-language-changes232723
Ref: 87232723
Ref: Other Language Changes<3>-Footnote-1242263
Ref: Other Language Changes<3>-Footnote-2242303
Ref: Other Language Changes<3>-Footnote-3242343
Ref: Other Language Changes<3>-Footnote-4242383
Ref: Other Language Changes<3>-Footnote-5242423
Ref: Other Language Changes<3>-Footnote-6242463
Ref: Other Language Changes<3>-Footnote-7242503
Ref: Other Language Changes<3>-Footnote-8242543
Ref: Other Language Changes<3>-Footnote-9242583
Ref: Other Language Changes<3>-Footnote-10242623
Ref: Other Language Changes<3>-Footnote-11242664
Ref: Other Language Changes<3>-Footnote-12242705
Ref: Other Language Changes<3>-Footnote-13242746
Ref: Other Language Changes<3>-Footnote-14242787
Ref: Other Language Changes<3>-Footnote-15242831
Ref: Other Language Changes<3>-Footnote-16242872
Ref: Other Language Changes<3>-Footnote-17242913
Ref: Other Language Changes<3>-Footnote-18242954
Ref: Other Language Changes<3>-Footnote-19242998
Ref: Other Language Changes<3>-Footnote-20243039
Ref: Other Language Changes<3>-Footnote-21243080
Ref: Other Language Changes<3>-Footnote-22243121
Ref: Other Language Changes<3>-Footnote-23243162
Ref: Other Language Changes<3>-Footnote-24243203
Node: Interpreter Changes243244
Ref: whatsnew/2 7 interpreter-changes243365
Ref: 88243365
Ref: whatsnew/2 7 new-27-interpreter243365
Ref: 89243365
Ref: Interpreter Changes-Footnote-1243989
Node: Optimizations<3>244029
Ref: whatsnew/2 7 optimizations244150
Ref: 8a244150
Ref: Optimizations<3>-Footnote-1248901
Ref: Optimizations<3>-Footnote-2248941
Ref: Optimizations<3>-Footnote-3248981
Ref: Optimizations<3>-Footnote-4249021
Ref: Optimizations<3>-Footnote-5249061
Ref: Optimizations<3>-Footnote-6249101
Ref: Optimizations<3>-Footnote-7249144
Ref: Optimizations<3>-Footnote-8249184
Ref: Optimizations<3>-Footnote-9249224
Ref: Optimizations<3>-Footnote-10249264
Ref: Optimizations<3>-Footnote-11249305
Ref: Optimizations<3>-Footnote-12249346
Ref: Optimizations<3>-Footnote-13249387
Node: New and Improved Modules249428
Ref: whatsnew/2 7 new-and-improved-modules249597
Ref: 8b249597
Ref: New and Improved Modules-Footnote-1282459
Ref: New and Improved Modules-Footnote-2282499
Ref: New and Improved Modules-Footnote-3282539
Ref: New and Improved Modules-Footnote-4282590
Ref: New and Improved Modules-Footnote-5282630
Ref: New and Improved Modules-Footnote-6282670
Ref: New and Improved Modules-Footnote-7282713
Ref: New and Improved Modules-Footnote-8282753
Ref: New and Improved Modules-Footnote-9282793
Ref: New and Improved Modules-Footnote-10282833
Ref: New and Improved Modules-Footnote-11282874
Ref: New and Improved Modules-Footnote-12282915
Ref: New and Improved Modules-Footnote-13282956
Ref: New and Improved Modules-Footnote-14282994
Ref: New and Improved Modules-Footnote-15283035
Ref: New and Improved Modules-Footnote-16283076
Ref: New and Improved Modules-Footnote-17283117
Ref: New and Improved Modules-Footnote-18283158
Ref: New and Improved Modules-Footnote-19283199
Ref: New and Improved Modules-Footnote-20283240
Ref: New and Improved Modules-Footnote-21283281
Ref: New and Improved Modules-Footnote-22283322
Ref: New and Improved Modules-Footnote-23283363
Ref: New and Improved Modules-Footnote-24283404
Ref: New and Improved Modules-Footnote-25283445
Ref: New and Improved Modules-Footnote-26283486
Ref: New and Improved Modules-Footnote-27283530
Ref: New and Improved Modules-Footnote-28283571
Ref: New and Improved Modules-Footnote-29283612
Ref: New and Improved Modules-Footnote-30283653
Ref: New and Improved Modules-Footnote-31283694
Ref: New and Improved Modules-Footnote-32283735
Ref: New and Improved Modules-Footnote-33283776
Ref: New and Improved Modules-Footnote-34283817
Ref: New and Improved Modules-Footnote-35283858
Ref: New and Improved Modules-Footnote-36283899
Ref: New and Improved Modules-Footnote-37283940
Ref: New and Improved Modules-Footnote-38283981
Ref: New and Improved Modules-Footnote-39284022
Ref: New and Improved Modules-Footnote-40284063
Ref: New and Improved Modules-Footnote-41284104
Ref: New and Improved Modules-Footnote-42284145
Ref: New and Improved Modules-Footnote-43284186
Ref: New and Improved Modules-Footnote-44284227
Ref: New and Improved Modules-Footnote-45284268
Ref: New and Improved Modules-Footnote-46284309
Ref: New and Improved Modules-Footnote-47284350
Ref: New and Improved Modules-Footnote-48284391
Ref: New and Improved Modules-Footnote-49284435
Ref: New and Improved Modules-Footnote-50284476
Ref: New and Improved Modules-Footnote-51284517
Ref: New and Improved Modules-Footnote-52284558
Ref: New and Improved Modules-Footnote-53284599
Ref: New and Improved Modules-Footnote-54284640
Ref: New and Improved Modules-Footnote-55284681
Ref: New and Improved Modules-Footnote-56284722
Ref: New and Improved Modules-Footnote-57284763
Ref: New and Improved Modules-Footnote-58284804
Ref: New and Improved Modules-Footnote-59284845
Ref: New and Improved Modules-Footnote-60284886
Ref: New and Improved Modules-Footnote-61284927
Ref: New and Improved Modules-Footnote-62284968
Ref: New and Improved Modules-Footnote-63285009
Ref: New and Improved Modules-Footnote-64285050
Ref: New and Improved Modules-Footnote-65285091
Ref: New and Improved Modules-Footnote-66285132
Ref: New and Improved Modules-Footnote-67285173
Ref: New and Improved Modules-Footnote-68285214
Ref: New and Improved Modules-Footnote-69285255
Ref: New and Improved Modules-Footnote-70285298
Ref: New and Improved Modules-Footnote-71285339
Ref: New and Improved Modules-Footnote-72285380
Ref: New and Improved Modules-Footnote-73285453
Ref: New and Improved Modules-Footnote-74285494
Ref: New and Improved Modules-Footnote-75285535
Ref: New and Improved Modules-Footnote-76285576
Ref: New and Improved Modules-Footnote-77285617
Ref: New and Improved Modules-Footnote-78285658
Ref: New and Improved Modules-Footnote-79285702
Ref: New and Improved Modules-Footnote-80285743
Ref: New and Improved Modules-Footnote-81285784
Ref: New and Improved Modules-Footnote-82285825
Ref: New and Improved Modules-Footnote-83285866
Ref: New and Improved Modules-Footnote-84285907
Ref: New and Improved Modules-Footnote-85285948
Ref: New and Improved Modules-Footnote-86285992
Ref: New and Improved Modules-Footnote-87286036
Ref: New and Improved Modules-Footnote-88286077
Ref: New and Improved Modules-Footnote-89286125
Ref: New and Improved Modules-Footnote-90286173
Ref: New and Improved Modules-Footnote-91286214
Ref: New and Improved Modules-Footnote-92286255
Ref: New and Improved Modules-Footnote-93286296
Ref: New and Improved Modules-Footnote-94286337
Ref: New and Improved Modules-Footnote-95286378
Ref: New and Improved Modules-Footnote-96286419
Ref: New and Improved Modules-Footnote-97286460
Node: New module importlib286501
Ref: whatsnew/2 7 importlib-section286626
Ref: 80286626
Ref: whatsnew/2 7 new-module-importlib286626
Ref: 8c286626
Node: New module sysconfig288067
Ref: whatsnew/2 7 new-module-sysconfig288226
Ref: 8d288226
Node: ttk Themed Widgets for Tk289460
Ref: whatsnew/2 7 ttk-themed-widgets-for-tk289622
Ref: 8e289622
Ref: ttk Themed Widgets for Tk-Footnote-1290651
Ref: ttk Themed Widgets for Tk-Footnote-2290691
Node: Updated module unittest290731
Ref: whatsnew/2 7 unittest-section290903
Ref: 8f290903
Ref: whatsnew/2 7 updated-module-unittest290903
Ref: 90290903
Ref: Updated module unittest-Footnote-1299096
Ref: Updated module unittest-Footnote-2299121
Ref: Updated module unittest-Footnote-3299166
Ref: Updated module unittest-Footnote-4299206
Ref: Updated module unittest-Footnote-5299246
Ref: Updated module unittest-Footnote-6299289
Ref: Updated module unittest-Footnote-7299329
Ref: Updated module unittest-Footnote-8299369
Ref: Updated module unittest-Footnote-9299409
Ref: Updated module unittest-Footnote-10299449
Ref: Updated module unittest-Footnote-11299490
Ref: Updated module unittest-Footnote-12299531
Ref: Updated module unittest-Footnote-13299572
Ref: Updated module unittest-Footnote-14299613
Node: Updated module ElementTree 1 3299654
Ref: whatsnew/2 7 updated-module-elementtree-1-3299792
Ref: 91299792
Ref: whatsnew/2 7 elementtree-section299792
Ref: 92299792
Ref: Updated module ElementTree 1 3-Footnote-1303549
Node: Build and C API Changes<4>303589
Ref: whatsnew/2 7 build-and-c-api-changes303756
Ref: 93303756
Ref: Build and C API Changes<4>-Footnote-1312048
Ref: Build and C API Changes<4>-Footnote-2312116
Ref: Build and C API Changes<4>-Footnote-3312156
Ref: Build and C API Changes<4>-Footnote-4312196
Ref: Build and C API Changes<4>-Footnote-5312236
Ref: Build and C API Changes<4>-Footnote-6312276
Ref: Build and C API Changes<4>-Footnote-7312316
Ref: Build and C API Changes<4>-Footnote-8312356
Ref: Build and C API Changes<4>-Footnote-9312423
Ref: Build and C API Changes<4>-Footnote-10312463
Ref: Build and C API Changes<4>-Footnote-11312504
Ref: Build and C API Changes<4>-Footnote-12312545
Ref: Build and C API Changes<4>-Footnote-13312586
Ref: Build and C API Changes<4>-Footnote-14312630
Ref: Build and C API Changes<4>-Footnote-15312674
Ref: Build and C API Changes<4>-Footnote-16312715
Ref: Build and C API Changes<4>-Footnote-17312756
Ref: Build and C API Changes<4>-Footnote-18312797
Ref: Build and C API Changes<4>-Footnote-19312838
Ref: Build and C API Changes<4>-Footnote-20312879
Ref: Build and C API Changes<4>-Footnote-21312923
Ref: Build and C API Changes<4>-Footnote-22312964
Node: Capsules313005
Ref: whatsnew/2 7 capsules313129
Ref: 94313129
Ref: whatsnew/2 7 whatsnew27-capsules313129
Ref: 95313129
Ref: Capsules-Footnote-1314989
Node: Port-Specific Changes Windows315029
Ref: whatsnew/2 7 port-specific-changes-windows315192
Ref: 96315192
Ref: Port-Specific Changes Windows-Footnote-1316789
Ref: Port-Specific Changes Windows-Footnote-2316829
Ref: Port-Specific Changes Windows-Footnote-3316869
Ref: Port-Specific Changes Windows-Footnote-4316909
Ref: Port-Specific Changes Windows-Footnote-5316952
Ref: Port-Specific Changes Windows-Footnote-6316992
Node: Port-Specific Changes Mac OS X317032
Ref: whatsnew/2 7 port-specific-changes-mac-os-x317216
Ref: 97317216
Ref: Port-Specific Changes Mac OS X-Footnote-1317584
Node: Port-Specific Changes FreeBSD317624
Ref: whatsnew/2 7 port-specific-changes-freebsd317770
Ref: 98317770
Ref: Port-Specific Changes FreeBSD-Footnote-1318102
Node: Other Changes and Fixes318142
Ref: whatsnew/2 7 other-changes-and-fixes318306
Ref: 99318306
Ref: Other Changes and Fixes-Footnote-1320402
Ref: Other Changes and Fixes-Footnote-2320442
Ref: Other Changes and Fixes-Footnote-3320485
Ref: Other Changes and Fixes-Footnote-4320525
Ref: Other Changes and Fixes-Footnote-5320565
Node: Porting to Python 2 7320605
Ref: whatsnew/2 7 porting-to-python-2-7320759
Ref: 9a320759
Ref: Porting to Python 2 7-Footnote-1325980
Ref: Porting to Python 2 7-Footnote-2326020
Ref: Porting to Python 2 7-Footnote-3326060
Ref: Porting to Python 2 7-Footnote-4326100
Ref: Porting to Python 2 7-Footnote-5326140
Ref: Porting to Python 2 7-Footnote-6326180
Ref: Porting to Python 2 7-Footnote-7326220
Ref: Porting to Python 2 7-Footnote-8326260
Ref: Porting to Python 2 7-Footnote-9326300
Ref: Porting to Python 2 7-Footnote-10326340
Ref: Porting to Python 2 7-Footnote-11326381
Ref: Porting to Python 2 7-Footnote-12326422
Ref: Porting to Python 2 7-Footnote-13326463
Ref: Porting to Python 2 7-Footnote-14326511
Node: Acknowledgements326552
Ref: whatsnew/2 7 acknowledgements326674
Ref: 9b326674
Ref: whatsnew/2 7 acks27326674
Ref: 9c326674
Node: What's New in Python 2 6326941
Ref: whatsnew/2 6 whats-new-in-2-6327086
Ref: 5f327086
Ref: whatsnew/2 6 what-s-new-in-python-2-6327086
Ref: 9d327086
Ref: whatsnew/2 6 doc327086
Ref: 9e327086
Ref: What's New in Python 2 6-Footnote-1330155
Node: Python 3 0330202
Ref: whatsnew/2 6 python-3-0330331
Ref: 9f330331
Ref: Python 3 0-Footnote-1332380
Ref: Python 3 0-Footnote-2332427
Node: Changes to the Development Process332474
Ref: whatsnew/2 6 changes-to-the-development-process332640
Ref: a0332640
Node: New Issue Tracker Roundup333150
Ref: whatsnew/2 6 new-issue-tracker-roundup333324
Ref: a1333324
Ref: New Issue Tracker Roundup-Footnote-1335324
Ref: New Issue Tracker Roundup-Footnote-2335371
Ref: New Issue Tracker Roundup-Footnote-3335403
Ref: New Issue Tracker Roundup-Footnote-4335442
Ref: New Issue Tracker Roundup-Footnote-5335475
Node: New Documentation Format reStructuredText Using Sphinx335515
Ref: whatsnew/2 6 new-documentation-format-restructuredtext-using-sphinx335689
Ref: a2335689
Ref: New Documentation Format reStructuredText Using Sphinx-Footnote-1337791
Ref: New Documentation Format reStructuredText Using Sphinx-Footnote-2337836
Ref: New Documentation Format reStructuredText Using Sphinx-Footnote-3337868
Node: PEP 343 The 'with' statement337898
Ref: whatsnew/2 6 pep-0343338106
Ref: 60338106
Ref: whatsnew/2 6 pep-343-the-with-statement338106
Ref: a3338106
Node: Writing Context Managers341176
Ref: whatsnew/2 6 writing-context-managers341310
Ref: a4341310
Ref: whatsnew/2 6 new-26-context-managers341310
Ref: 61341310
Node: The contextlib module345587
Ref: whatsnew/2 6 the-contextlib-module345721
Ref: a5345721
Ref: whatsnew/2 6 new-module-contextlib345721
Ref: 62345721
Ref: The contextlib module-Footnote-1348040
Node: PEP 366 Explicit Relative Imports From a Main Module348087
Ref: whatsnew/2 6 pep-366-explicit-relative-imports-from-a-main-module348301
Ref: a6348301
Ref: whatsnew/2 6 pep-0366348301
Ref: 63348301
Node: PEP 370 Per-user site-packages Directory348999
Ref: whatsnew/2 6 pep-370-per-user-site-packages-directory349220
Ref: a7349220
Ref: whatsnew/2 6 pep-0370349220
Ref: 64349220
Ref: PEP 370 Per-user site-packages Directory-Footnote-1350607
Node: PEP 371 The multiprocessing Package350654
Ref: whatsnew/2 6 pep-371-the-multiprocessing-package350858
Ref: a8350858
Ref: whatsnew/2 6 pep-0371350858
Ref: 65350858
Ref: PEP 371 The multiprocessing Package-Footnote-1355781
Node: PEP 3101 Advanced String Formatting355828
Ref: whatsnew/2 6 pep-3101356020
Ref: 66356020
Ref: whatsnew/2 6 pep-3101-advanced-string-formatting356020
Ref: a9356020
Ref: PEP 3101 Advanced String Formatting-Footnote-1361105
Node: PEP 3105 print As a Function361152
Ref: whatsnew/2 6 pep-3105-print-as-a-function361344
Ref: aa361344
Ref: whatsnew/2 6 pep-3105361344
Ref: 67361344
Ref: PEP 3105 print As a Function-Footnote-1362448
Node: PEP 3110 Exception-Handling Changes362495
Ref: whatsnew/2 6 pep-3110362674
Ref: 68362674
Ref: whatsnew/2 6 pep-3110-exception-handling-changes362674
Ref: ab362674
Ref: PEP 3110 Exception-Handling Changes-Footnote-1364191
Node: PEP 3112 Byte Literals364238
Ref: whatsnew/2 6 pep-3112364413
Ref: 69364413
Ref: whatsnew/2 6 pep-3112-byte-literals364413
Ref: ac364413
Ref: PEP 3112 Byte Literals-Footnote-1367168
Node: PEP 3116 New I/O Library367215
Ref: whatsnew/2 6 pep-3116-new-i-o-library367387
Ref: ad367387
Ref: whatsnew/2 6 pep-3116367387
Ref: 6a367387
Ref: PEP 3116 New I/O Library-Footnote-1370801
Node: PEP 3118 Revised Buffer Protocol370848
Ref: whatsnew/2 6 pep-3118371028
Ref: 6b371028
Ref: whatsnew/2 6 pep-3118-revised-buffer-protocol371028
Ref: ae371028
Ref: PEP 3118 Revised Buffer Protocol-Footnote-1373100
Node: PEP 3119 Abstract Base Classes373147
Ref: whatsnew/2 6 pep-3119-abstract-base-classes373346
Ref: af373346
Ref: whatsnew/2 6 pep-3119373346
Ref: 6c373346
Ref: PEP 3119 Abstract Base Classes-Footnote-1378462
Node: PEP 3127 Integer Literal Support and Syntax378509
Ref: whatsnew/2 6 pep-3127378701
Ref: 6d378701
Ref: whatsnew/2 6 pep-3127-integer-literal-support-and-syntax378701
Ref: b0378701
Ref: PEP 3127 Integer Literal Support and Syntax-Footnote-1379975
Node: PEP 3129 Class Decorators380022
Ref: whatsnew/2 6 pep-3129-class-decorators380221
Ref: b1380221
Ref: whatsnew/2 6 pep-3129380221
Ref: 6e380221
Ref: PEP 3129 Class Decorators-Footnote-1380605
Node: PEP 3141 A Type Hierarchy for Numbers380652
Ref: whatsnew/2 6 pep-3141-a-type-hierarchy-for-numbers380833
Ref: b2380833
Ref: whatsnew/2 6 pep-3141380833
Ref: 6f380833
Ref: PEP 3141 A Type Hierarchy for Numbers-Footnote-1382859
Ref: PEP 3141 A Type Hierarchy for Numbers-Footnote-2382906
Ref: PEP 3141 A Type Hierarchy for Numbers-Footnote-3383001
Node: The fractions Module383084
Ref: whatsnew/2 6 the-fractions-module383193
Ref: b3383193
Node: Other Language Changes<4>384739
Ref: whatsnew/2 6 other-language-changes384922
Ref: b4384922
Ref: Other Language Changes<4>-Footnote-1393243
Ref: Other Language Changes<4>-Footnote-2393286
Ref: Other Language Changes<4>-Footnote-3393326
Ref: Other Language Changes<4>-Footnote-4393369
Ref: Other Language Changes<4>-Footnote-5393409
Ref: Other Language Changes<4>-Footnote-6393449
Ref: Other Language Changes<4>-Footnote-7393489
Ref: Other Language Changes<4>-Footnote-8393529
Ref: Other Language Changes<4>-Footnote-9393569
Ref: Other Language Changes<4>-Footnote-10393609
Ref: Other Language Changes<4>-Footnote-11393650
Ref: Other Language Changes<4>-Footnote-12393691
Ref: Other Language Changes<4>-Footnote-13393735
Ref: Other Language Changes<4>-Footnote-14393779
Ref: Other Language Changes<4>-Footnote-15393823
Ref: Other Language Changes<4>-Footnote-16393867
Node: Optimizations<4>393911
Ref: whatsnew/2 6 optimizations394035
Ref: b5394035
Ref: Optimizations<4>-Footnote-1396830
Ref: Optimizations<4>-Footnote-2396873
Ref: Optimizations<4>-Footnote-3396916
Ref: Optimizations<4>-Footnote-4396956
Node: Interpreter Changes<2>396996
Ref: whatsnew/2 6 new-26-interpreter397120
Ref: b6397120
Ref: whatsnew/2 6 interpreter-changes397120
Ref: b7397120
Node: New and Improved Modules<2>398608
Ref: whatsnew/2 6 new-and-improved-modules398779
Ref: b8398779
Ref: New and Improved Modules<2>-Footnote-1439186
Ref: New and Improved Modules<2>-Footnote-2439229
Ref: New and Improved Modules<2>-Footnote-3439280
Ref: New and Improved Modules<2>-Footnote-4439320
Ref: New and Improved Modules<2>-Footnote-5439362
Ref: New and Improved Modules<2>-Footnote-6439402
Ref: New and Improved Modules<2>-Footnote-7439445
Ref: New and Improved Modules<2>-Footnote-8439485
Ref: New and Improved Modules<2>-Footnote-9439542
Ref: New and Improved Modules<2>-Footnote-10439585
Ref: New and Improved Modules<2>-Footnote-11439629
Ref: New and Improved Modules<2>-Footnote-12439673
Ref: New and Improved Modules<2>-Footnote-13439714
Ref: New and Improved Modules<2>-Footnote-14439755
Ref: New and Improved Modules<2>-Footnote-15439798
Ref: New and Improved Modules<2>-Footnote-16439839
Ref: New and Improved Modules<2>-Footnote-17439883
Ref: New and Improved Modules<2>-Footnote-18439924
Ref: New and Improved Modules<2>-Footnote-19439968
Ref: New and Improved Modules<2>-Footnote-20440012
Ref: New and Improved Modules<2>-Footnote-21440056
Ref: New and Improved Modules<2>-Footnote-22440099
Ref: New and Improved Modules<2>-Footnote-23440143
Ref: New and Improved Modules<2>-Footnote-24440187
Ref: New and Improved Modules<2>-Footnote-25440228
Ref: New and Improved Modules<2>-Footnote-26440269
Ref: New and Improved Modules<2>-Footnote-27440313
Ref: New and Improved Modules<2>-Footnote-28440357
Ref: New and Improved Modules<2>-Footnote-29440400
Ref: New and Improved Modules<2>-Footnote-30440441
Ref: New and Improved Modules<2>-Footnote-31440482
Ref: New and Improved Modules<2>-Footnote-32440523
Ref: New and Improved Modules<2>-Footnote-33440564
Ref: New and Improved Modules<2>-Footnote-34440605
Ref: New and Improved Modules<2>-Footnote-35440646
Ref: New and Improved Modules<2>-Footnote-36440687
Ref: New and Improved Modules<2>-Footnote-37440735
Ref: New and Improved Modules<2>-Footnote-38440778
Ref: New and Improved Modules<2>-Footnote-39440826
Ref: New and Improved Modules<2>-Footnote-40440869
Ref: New and Improved Modules<2>-Footnote-41440910
Ref: New and Improved Modules<2>-Footnote-42440953
Ref: New and Improved Modules<2>-Footnote-43440997
Ref: New and Improved Modules<2>-Footnote-44441038
Ref: New and Improved Modules<2>-Footnote-45441079
Ref: New and Improved Modules<2>-Footnote-46441120
Ref: New and Improved Modules<2>-Footnote-47441164
Ref: New and Improved Modules<2>-Footnote-48441205
Ref: New and Improved Modules<2>-Footnote-49441246
Ref: New and Improved Modules<2>-Footnote-50441290
Ref: New and Improved Modules<2>-Footnote-51441331
Ref: New and Improved Modules<2>-Footnote-52441375
Ref: New and Improved Modules<2>-Footnote-53441416
Ref: New and Improved Modules<2>-Footnote-54441460
Ref: New and Improved Modules<2>-Footnote-55441501
Ref: New and Improved Modules<2>-Footnote-56441545
Ref: New and Improved Modules<2>-Footnote-57441586
Ref: New and Improved Modules<2>-Footnote-58441630
Ref: New and Improved Modules<2>-Footnote-59441674
Ref: New and Improved Modules<2>-Footnote-60441715
Ref: New and Improved Modules<2>-Footnote-61441756
Ref: New and Improved Modules<2>-Footnote-62441799
Ref: New and Improved Modules<2>-Footnote-63441843
Node: The ast module441887
Ref: whatsnew/2 6 the-ast-module442015
Ref: b9442015
Node: The future_builtins module444581
Ref: whatsnew/2 6 the-future-builtins-module444760
Ref: ba444760
Node: The json module JavaScript Object Notation445775
Ref: whatsnew/2 6 the-json-module-javascript-object-notation445982
Ref: bb445982
Node: The plistlib module A Property-List Parser446948
Ref: whatsnew/2 6 the-plistlib-module-a-property-list-parser447148
Ref: bc447148
Node: ctypes Enhancements448484
Ref: whatsnew/2 6 ctypes-enhancements448662
Ref: bd448662
Ref: ctypes Enhancements-Footnote-1450316
Ref: ctypes Enhancements-Footnote-2450359
Node: Improved SSL Support450399
Ref: whatsnew/2 6 improved-ssl-support450526
Ref: be450526
Ref: Improved SSL Support-Footnote-1451426
Node: Deprecations and Removals451457
Ref: whatsnew/2 6 deprecations-and-removals451629
Ref: bf451629
Ref: Deprecations and Removals-Footnote-1453254
Node: Build and C API Changes<5>453301
Ref: whatsnew/2 6 build-and-c-api-changes453467
Ref: c0453467
Ref: Build and C API Changes<5>-Footnote-1459232
Ref: Build and C API Changes<5>-Footnote-2459272
Ref: Build and C API Changes<5>-Footnote-3459315
Ref: Build and C API Changes<5>-Footnote-4459355
Ref: Build and C API Changes<5>-Footnote-5459395
Node: Port-Specific Changes Windows<2>459438
Ref: whatsnew/2 6 port-specific-changes-windows459590
Ref: c1459590
Ref: Port-Specific Changes Windows<2>-Footnote-1461860
Ref: Port-Specific Changes Windows<2>-Footnote-2461902
Ref: Port-Specific Changes Windows<2>-Footnote-3461945
Node: Port-Specific Changes Mac OS X<2>461985
Ref: whatsnew/2 6 port-specific-changes-mac-os-x462172
Ref: c2462172
Ref: Port-Specific Changes Mac OS X<2>-Footnote-1463267
Node: Port-Specific Changes IRIX463310
Ref: whatsnew/2 6 port-specific-changes-irix463456
Ref: c3463456
Node: Porting to Python 2 6463857
Ref: whatsnew/2 6 porting-to-python-2-6464017
Ref: c4464017
Ref: Porting to Python 2 6-Footnote-1467134
Ref: Porting to Python 2 6-Footnote-2467177
Ref: Porting to Python 2 6-Footnote-3467220
Node: Acknowledgements<2>467263
Ref: whatsnew/2 6 acknowledgements467388
Ref: c5467388
Ref: whatsnew/2 6 acks467388
Ref: c6467388
Node: What's New in Python 2 5467725
Ref: whatsnew/2 5 doc467870
Ref: c7467870
Ref: whatsnew/2 5 what-s-new-in-python-2-5467870
Ref: c8467870
Ref: What's New in Python 2 5-Footnote-1471404
Node: PEP 308 Conditional Expressions471451
Ref: whatsnew/2 5 pep-308-conditional-expressions471603
Ref: ce471603
Ref: whatsnew/2 5 pep-308471603
Ref: c9471603
Ref: PEP 308 Conditional Expressions-Footnote-1475025
Ref: PEP 308 Conditional Expressions-Footnote-2475072
Node: PEP 309 Partial Function Application475119
Ref: whatsnew/2 5 pep-309475330
Ref: cf475330
Ref: whatsnew/2 5 pep-309-partial-function-application475330
Ref: d0475330
Ref: PEP 309 Partial Function Application-Footnote-1478085
Node: PEP 314 Metadata for Python Software Packages v1 1478132
Ref: whatsnew/2 5 pep-314478349
Ref: d1478349
Ref: whatsnew/2 5 pep-314-metadata-for-python-software-packages-v1-1478349
Ref: d2478349
Ref: PEP 314 Metadata for Python Software Packages v1 1-Footnote-1480130
Node: PEP 328 Absolute and Relative Imports480177
Ref: whatsnew/2 5 pep-328-absolute-and-relative-imports480394
Ref: d3480394
Ref: whatsnew/2 5 pep-328480394
Ref: cc480394
Ref: PEP 328 Absolute and Relative Imports-Footnote-1484044
Node: PEP 338 Executing Modules as Scripts484091
Ref: whatsnew/2 5 pep-338484292
Ref: d4484292
Ref: whatsnew/2 5 pep-338-executing-modules-as-scripts484292
Ref: d5484292
Ref: PEP 338 Executing Modules as Scripts-Footnote-1485123
Node: PEP 341 Unified try/except/finally485170
Ref: whatsnew/2 5 pep-341485364
Ref: cd485364
Ref: whatsnew/2 5 pep-341-unified-try-except-finally485364
Ref: d6485364
Ref: PEP 341 Unified try/except/finally-Footnote-1487035
Node: PEP 342 New Generator Features487082
Ref: whatsnew/2 5 pep-342487271
Ref: cb487271
Ref: whatsnew/2 5 pep-342-new-generator-features487271
Ref: d7487271
Ref: PEP 342 New Generator Features-Footnote-1493491
Ref: PEP 342 New Generator Features-Footnote-2493538
Ref: PEP 342 New Generator Features-Footnote-3493585
Ref: PEP 342 New Generator Features-Footnote-4493632
Node: PEP 343 The 'with' statement<2>493679
Ref: whatsnew/2 5 pep-343493873
Ref: ca493873
Ref: whatsnew/2 5 pep-343-the-with-statement493873
Ref: d8493873
Node: Writing Context Managers<2>496724
Ref: whatsnew/2 5 new-25-context-managers496867
Ref: d9496867
Ref: whatsnew/2 5 writing-context-managers496867
Ref: da496867
Node: The contextlib module<2>501045
Ref: whatsnew/2 5 the-contextlib-module501188
Ref: db501188
Ref: whatsnew/2 5 contextlibmod501188
Ref: dc501188
Ref: The contextlib module<2>-Footnote-1503498
Node: PEP 352 Exceptions as New-Style Classes503545
Ref: whatsnew/2 5 pep-352503748
Ref: dd503748
Ref: whatsnew/2 5 pep-352-exceptions-as-new-style-classes503748
Ref: de503748
Ref: PEP 352 Exceptions as New-Style Classes-Footnote-1506056
Node: PEP 353 Using ssize_t as the index type506103
Ref: whatsnew/2 5 pep-353506305
Ref: df506305
Ref: whatsnew/2 5 pep-353-using-ssize-t-as-the-index-type506305
Ref: e0506305
Ref: PEP 353 Using ssize_t as the index type-Footnote-1509074
Ref: PEP 353 Using ssize_t as the index type-Footnote-2509121
Node: PEP 357 The '__index__' method509168
Ref: whatsnew/2 5 pep-357-the-index-method509356
Ref: e1509356
Ref: whatsnew/2 5 pep-357509356
Ref: e2509356
Ref: PEP 357 The '__index__' method-Footnote-1510991
Node: Other Language Changes<5>511038
Ref: whatsnew/2 5 other-language-changes511219
Ref: e3511219
Ref: whatsnew/2 5 other-lang511219
Ref: e4511219
Ref: Other Language Changes<5>-Footnote-1517807
Node: Interactive Interpreter Changes517854
Ref: whatsnew/2 5 interactive-interpreter-changes517987
Ref: e5517987
Ref: whatsnew/2 5 interactive517987
Ref: e6517987
Node: Optimizations<5>518706
Ref: whatsnew/2 5 optimizations518839
Ref: e7518839
Ref: whatsnew/2 5 opts518839
Ref: e8518839
Node: New Improved and Removed Modules522524
Ref: whatsnew/2 5 new-improved-and-removed-modules522701
Ref: e9522701
Ref: whatsnew/2 5 modules522701
Ref: ea522701
Ref: New Improved and Removed Modules-Footnote-1545683
Ref: New Improved and Removed Modules-Footnote-2545730
Node: The ctypes package545777
Ref: whatsnew/2 5 module-ctypes545911
Ref: eb545911
Ref: whatsnew/2 5 the-ctypes-package545911
Ref: ec545911
Node: The ElementTree package548950
Ref: whatsnew/2 5 module-etree549112
Ref: ed549112
Ref: whatsnew/2 5 the-elementtree-package549112
Ref: ee549112
Node: The hashlib package553201
Ref: whatsnew/2 5 the-hashlib-package553364
Ref: ef553364
Ref: whatsnew/2 5 module-hashlib553364
Ref: f0553364
Node: The sqlite3 package554865
Ref: whatsnew/2 5 module-sqlite555024
Ref: f1555024
Ref: whatsnew/2 5 the-sqlite3-package555024
Ref: f2555024
Ref: The sqlite3 package-Footnote-1558905
Ref: The sqlite3 package-Footnote-2558952
Node: The wsgiref package558999
Ref: whatsnew/2 5 the-wsgiref-package559130
Ref: f3559130
Ref: whatsnew/2 5 module-wsgiref559130
Ref: f4559130
Ref: The wsgiref package-Footnote-1560023
Ref: The wsgiref package-Footnote-2560070
Node: Build and C API Changes<6>560117
Ref: whatsnew/2 5 build-and-c-api-changes560290
Ref: f5560290
Ref: whatsnew/2 5 build-api560290
Ref: f6560290
Ref: Build and C API Changes<6>-Footnote-1567038
Ref: Build and C API Changes<6>-Footnote-2567085
Ref: Build and C API Changes<6>-Footnote-3567132
Node: Port-Specific Changes567179
Ref: whatsnew/2 5 port-specific-changes567278
Ref: f7567278
Ref: whatsnew/2 5 ports567278
Ref: f8567278
Ref: Port-Specific Changes-Footnote-1567930
Node: Porting to Python 2 5567970
Ref: whatsnew/2 5 porting568130
Ref: f9568130
Ref: whatsnew/2 5 porting-to-python-2-5568130
Ref: fa568130
Ref: Porting to Python 2 5-Footnote-1570792
Node: Acknowledgements<3>570839
Ref: whatsnew/2 5 acknowledgements570964
Ref: fb570964
Node: What's New in Python 2 4571453
Ref: whatsnew/2 4 doc571598
Ref: fc571598
Ref: whatsnew/2 4 what-s-new-in-python-2-4571598
Ref: fd571598
Node: PEP 218 Built-In Set Objects573701
Ref: whatsnew/2 4 pep-218-built-in-set-objects573857
Ref: fe573857
Ref: PEP 218 Built-In Set Objects-Footnote-1576024
Node: PEP 237 Unifying Long Integers and Integers576071
Ref: whatsnew/2 4 pep-237-unifying-long-integers-and-integers576265
Ref: ff576265
Ref: PEP 237 Unifying Long Integers and Integers-Footnote-1577286
Node: PEP 289 Generator Expressions577333
Ref: whatsnew/2 4 pep-289-generator-expressions577535
Ref: 100577535
Ref: PEP 289 Generator Expressions-Footnote-1579773
Node: PEP 292 Simpler String Substitutions579820
Ref: whatsnew/2 4 pep-292-simpler-string-substitutions580023
Ref: 101580023
Ref: PEP 292 Simpler String Substitutions-Footnote-1581741
Node: PEP 318 Decorators for Functions and Methods581788
Ref: whatsnew/2 4 pep-318-decorators-for-functions-and-methods581987
Ref: 102581987
Ref: PEP 318 Decorators for Functions and Methods-Footnote-1586356
Ref: PEP 318 Decorators for Functions and Methods-Footnote-2586403
Node: PEP 322 Reverse Iteration586450
Ref: whatsnew/2 4 pep-322-reverse-iteration586642
Ref: 103586642
Ref: PEP 322 Reverse Iteration-Footnote-1587554
Node: PEP 324 New subprocess Module587601
Ref: whatsnew/2 4 pep-324-new-subprocess-module587774
Ref: 104587774
Ref: PEP 324 New subprocess Module-Footnote-1591405
Node: PEP 327 Decimal Data Type591452
Ref: whatsnew/2 4 pep-327-decimal-data-type591626
Ref: 105591626
Node: Why is Decimal needed?592188
Ref: whatsnew/2 4 why-is-decimal-needed592312
Ref: 106592312
Node: The Decimal type594872
Ref: whatsnew/2 4 the-decimal-type595021
Ref: 107595021
Node: The Context type598055
Ref: whatsnew/2 4 the-context-type598173
Ref: 108598173
Ref: The Context type-Footnote-1600695
Node: PEP 328 Multi-line Imports600742
Ref: whatsnew/2 4 pep-328-multi-line-imports600938
Ref: 109600938
Ref: PEP 328 Multi-line Imports-Footnote-1602399
Node: PEP 331 Locale-Independent Float/String Conversions602446
Ref: whatsnew/2 4 pep-331-locale-independent-float-string-conversions602642
Ref: 10a602642
Ref: PEP 331 Locale-Independent Float/String Conversions-Footnote-1604335
Node: Other Language Changes<6>604382
Ref: whatsnew/2 4 other-language-changes604590
Ref: 10b604590
Ref: Other Language Changes<6>-Footnote-1611332
Ref: Other Language Changes<6>-Footnote-2611379
Ref: Other Language Changes<6>-Footnote-3611426
Ref: Other Language Changes<6>-Footnote-4611473
Ref: Other Language Changes<6>-Footnote-5611520
Ref: Other Language Changes<6>-Footnote-6611567
Node: Optimizations<6>611614
Ref: whatsnew/2 4 optimizations611707
Ref: 10c611707
Node: New Improved and Deprecated Modules<3>614328
Ref: whatsnew/2 4 new-improved-and-deprecated-modules614511
Ref: 10d614511
Node: cookielib630919
Ref: whatsnew/2 4 cookielib631034
Ref: 10e631034
Node: doctest631929
Ref: whatsnew/2 4 doctest632044
Ref: 10f632044
Node: Build and C API Changes<7>634625
Ref: whatsnew/2 4 build-and-c-api-changes634804
Ref: 110634804
Node: Port-Specific Changes<2>637296
Ref: whatsnew/2 4 port-specific-changes637398
Ref: 111637398
Node: Porting to Python 2 4637571
Ref: whatsnew/2 4 porting-to-python-2-4637731
Ref: 112637731
Node: Acknowledgements<4>639550
Ref: whatsnew/2 4 acknowledgements639675
Ref: 113639675
Ref: whatsnew/2 4 acks639675
Ref: 114639675
Node: What's New in Python 2 3640003
Ref: whatsnew/2 3 what-s-new-in-python-2-3640148
Ref: 115640148
Ref: whatsnew/2 3 doc640148
Ref: 116640148
Node: PEP 218 A Standard Set Datatype643124
Ref: whatsnew/2 3 pep-218-a-standard-set-datatype643265
Ref: 117643265
Ref: PEP 218 A Standard Set Datatype-Footnote-1645642
Node: PEP 255 Simple Generators645689
Ref: whatsnew/2 3 section-generators645868
Ref: 118645868
Ref: whatsnew/2 3 pep-255-simple-generators645868
Ref: 119645868
Ref: PEP 255 Simple Generators-Footnote-1651780
Ref: PEP 255 Simple Generators-Footnote-2651827
Node: PEP 263 Source Code Encodings651874
Ref: whatsnew/2 3 section-encodings652065
Ref: 11a652065
Ref: whatsnew/2 3 pep-263-source-code-encodings652065
Ref: 11b652065
Ref: PEP 263 Source Code Encodings-Footnote-1653258
Node: PEP 273 Importing Modules from ZIP Archives653305
Ref: whatsnew/2 3 pep-273-importing-modules-from-zip-archives653519
Ref: 11c653519
Ref: PEP 273 Importing Modules from ZIP Archives-Footnote-1655481
Ref: PEP 273 Importing Modules from ZIP Archives-Footnote-2655528
Ref: PEP 273 Importing Modules from ZIP Archives-Footnote-3655575
Node: PEP 277 Unicode file name support for Windows NT655622
Ref: whatsnew/2 3 pep-277-unicode-file-name-support-for-windows-nt655840
Ref: 11e655840
Ref: PEP 277 Unicode file name support for Windows NT-Footnote-1657260
Node: PEP 278 Universal Newline Support657307
Ref: whatsnew/2 3 pep-278-universal-newline-support657499
Ref: 11f657499
Ref: PEP 278 Universal Newline Support-Footnote-1658958
Node: PEP 279 enumerate659005
Ref: whatsnew/2 3 pep-279-enumerate659176
Ref: 120659176
Ref: whatsnew/2 3 section-enumerate659176
Ref: 121659176
Ref: PEP 279 enumerate-Footnote-1659984
Node: PEP 282 The logging Package660031
Ref: whatsnew/2 3 pep-282-the-logging-package660191
Ref: 122660191
Ref: PEP 282 The logging Package-Footnote-1664679
Ref: PEP 282 The logging Package-Footnote-2664726
Node: PEP 285 A Boolean Type664773
Ref: whatsnew/2 3 pep-285-a-boolean-type664954
Ref: 123664954
Ref: whatsnew/2 3 section-bool664954
Ref: 124664954
Ref: PEP 285 A Boolean Type-Footnote-1667203
Ref: PEP 285 A Boolean Type-Footnote-2667250
Node: PEP 293 Codec Error Handling Callbacks667297
Ref: whatsnew/2 3 pep-293-codec-error-handling-callbacks667499
Ref: 125667499
Ref: PEP 293 Codec Error Handling Callbacks-Footnote-1668991
Node: PEP 301 Package Index and Metadata for Distutils669038
Ref: whatsnew/2 3 pep-301-package-index-and-metadata-for-distutils669242
Ref: 126669242
Ref: whatsnew/2 3 section-pep301669242
Ref: 127669242
Ref: PEP 301 Package Index and Metadata for Distutils-Footnote-1670856
Ref: PEP 301 Package Index and Metadata for Distutils-Footnote-2670891
Node: PEP 302 New Import Hooks670938
Ref: whatsnew/2 3 section-pep302671133
Ref: 11d671133
Ref: whatsnew/2 3 pep-302-new-import-hooks671133
Ref: 128671133
Ref: PEP 302 New Import Hooks-Footnote-1673643
Ref: PEP 302 New Import Hooks-Footnote-2673690
Ref: PEP 302 New Import Hooks-Footnote-3673737
Node: PEP 305 Comma-separated Files673784
Ref: whatsnew/2 3 pep-305-comma-separated-files673958
Ref: 129673958
Ref: whatsnew/2 3 section-pep305673958
Ref: 12a673958
Ref: PEP 305 Comma-separated Files-Footnote-1675393
Node: PEP 307 Pickle Enhancements675440
Ref: whatsnew/2 3 section-pep307675605
Ref: 12b675605
Ref: whatsnew/2 3 pep-307-pickle-enhancements675605
Ref: 12c675605
Ref: PEP 307 Pickle Enhancements-Footnote-1677494
Ref: PEP 307 Pickle Enhancements-Footnote-2677541
Ref: PEP 307 Pickle Enhancements-Footnote-3677588
Node: Extended Slices677635
Ref: whatsnew/2 3 section-slices677796
Ref: 12d677796
Ref: whatsnew/2 3 extended-slices677796
Ref: 12e677796
Node: Other Language Changes<7>681041
Ref: whatsnew/2 3 other-language-changes681213
Ref: 12f681213
Ref: Other Language Changes<7>-Footnote-1688633
Ref: Other Language Changes<7>-Footnote-2688702
Node: String Changes688744
Ref: whatsnew/2 3 string-changes688860
Ref: 130688860
Node: Optimizations<7>691166
Ref: whatsnew/2 3 optimizations691282
Ref: 131691282
Node: New Improved and Deprecated Modules<4>692699
Ref: whatsnew/2 3 new-improved-and-deprecated-modules692895
Ref: 133692895
Ref: New Improved and Deprecated Modules<4>-Footnote-1716239
Node: Date/Time Type716277
Ref: whatsnew/2 3 date-time-type716409
Ref: 134716409
Node: The optparse Module718526
Ref: whatsnew/2 3 the-optparse-module718658
Ref: 135718658
Node: Pymalloc A Specialized Object Allocator720653
Ref: whatsnew/2 3 section-pymalloc720850
Ref: 136720850
Ref: whatsnew/2 3 pymalloc-a-specialized-object-allocator720850
Ref: 137720850
Node: Build and C API Changes<8>724554
Ref: whatsnew/2 3 build-and-c-api-changes724739
Ref: 138724739
Node: Port-Specific Changes<3>727964
Ref: whatsnew/2 3 port-specific-changes728066
Ref: 139728066
Node: Other Changes and Fixes<2>729275
Ref: whatsnew/2 3 section-other729442
Ref: 132729442
Ref: whatsnew/2 3 other-changes-and-fixes729442
Ref: 13a729442
Node: Porting to Python 2 3731816
Ref: whatsnew/2 3 porting-to-python-2-3731976
Ref: 13b731976
Node: Acknowledgements<5>734655
Ref: whatsnew/2 3 acknowledgements734780
Ref: 13c734780
Ref: whatsnew/2 3 acks734780
Ref: 13d734780
Node: What's New in Python 2 2735395
Ref: whatsnew/2 2 what-s-new-in-python-2-2735540
Ref: 13e735540
Ref: whatsnew/2 2 doc735540
Ref: 13f735540
Node: Introduction736271
Ref: whatsnew/2 2 introduction736407
Ref: 140736407
Ref: Introduction-Footnote-1737370
Ref: Introduction-Footnote-2737420
Node: PEPs 252 and 253 Type and Class Changes737470
Ref: whatsnew/2 2 peps-252-and-253-type-and-class-changes737632
Ref: 141737632
Node: Old and New Classes741008
Ref: whatsnew/2 2 old-and-new-classes741138
Ref: 143741138
Ref: Old and New Classes-Footnote-1743409
Node: Descriptors743456
Ref: whatsnew/2 2 descriptors743632
Ref: 144743632
Node: Multiple Inheritance The Diamond Rule747370
Ref: whatsnew/2 2 multiple-inheritance-the-diamond-rule747543
Ref: 145747543
Ref: Multiple Inheritance The Diamond Rule-Footnote-1750277
Node: Attribute Access750324
Ref: whatsnew/2 2 attribute-access750499
Ref: 146750499
Node: Related Links754082
Ref: whatsnew/2 2 sect-rellinks754211
Ref: 142754211
Ref: whatsnew/2 2 related-links754211
Ref: 147754211
Ref: Related Links-Footnote-1755684
Ref: Related Links-Footnote-2755731
Ref: Related Links-Footnote-3755778
Ref: Related Links-Footnote-4755825
Ref: Related Links-Footnote-5755872
Node: PEP 234 Iterators755919
Ref: whatsnew/2 2 pep-234-iterators756097
Ref: 148756097
Ref: PEP 234 Iterators-Footnote-1760678
Node: PEP 255 Simple Generators<2>760725
Ref: whatsnew/2 2 pep-255-simple-generators760910
Ref: 149760910
Ref: PEP 255 Simple Generators<2>-Footnote-1766707
Ref: PEP 255 Simple Generators<2>-Footnote-2766754
Node: PEP 237 Unifying Long Integers and Integers<2>766801
Ref: whatsnew/2 2 pep-237-unifying-long-integers-and-integers767007
Ref: 14a767007
Ref: PEP 237 Unifying Long Integers and Integers<2>-Footnote-1768665
Node: PEP 238 Changing the Division Operator768712
Ref: whatsnew/2 2 pep-238-changing-the-division-operator768905
Ref: 14b768905
Ref: PEP 238 Changing the Division Operator-Footnote-1772412
Ref: PEP 238 Changing the Division Operator-Footnote-2772459
Ref: PEP 238 Changing the Division Operator-Footnote-3772506
Node: Unicode Changes772553
Ref: whatsnew/2 2 unicode-changes772721
Ref: 14c772721
Ref: Unicode Changes-Footnote-1775245
Ref: Unicode Changes-Footnote-2775292
Node: PEP 227 Nested Scopes775339
Ref: whatsnew/2 2 pep-227-nested-scopes775496
Ref: 14d775496
Ref: PEP 227 Nested Scopes-Footnote-1779673
Node: New and Improved Modules<3>779720
Ref: whatsnew/2 2 new-and-improved-modules779891
Ref: 14e779891
Ref: New and Improved Modules<3>-Footnote-1786133
Ref: New and Improved Modules<3>-Footnote-2786180
Ref: New and Improved Modules<3>-Footnote-3786227
Ref: New and Improved Modules<3>-Footnote-4786274
Ref: New and Improved Modules<3>-Footnote-5786321
Node: Interpreter Changes and Fixes786367
Ref: whatsnew/2 2 interpreter-changes-and-fixes786543
Ref: 14f786543
Node: Other Changes and Fixes<3>790980
Ref: whatsnew/2 2 other-changes-and-fixes791148
Ref: 150791148
Ref: Other Changes and Fixes<3>-Footnote-1797583
Node: Acknowledgements<6>797630
Ref: whatsnew/2 2 acknowledgements797760
Ref: 151797760
Node: What's New in Python 2 1798353
Ref: whatsnew/2 1 what-s-new-in-python-2-1798498
Ref: 152798498
Ref: whatsnew/2 1 doc798498
Ref: 153798498
Node: Introduction<2>799501
Ref: whatsnew/2 1 introduction799625
Ref: 154799625
Node: PEP 227 Nested Scopes<2>800717
Ref: whatsnew/2 1 pep-227-nested-scopes800879
Ref: 155800879
Ref: PEP 227 Nested Scopes<2>-Footnote-1805072
Node: PEP 236 __future__ Directives805119
Ref: whatsnew/2 1 pep-236-future-directives805290
Ref: 156805290
Ref: PEP 236 __future__ Directives-Footnote-1806487
Node: PEP 207 Rich Comparisons806534
Ref: whatsnew/2 1 pep-207-rich-comparisons806706
Ref: 157806706
Ref: PEP 207 Rich Comparisons-Footnote-1809698
Node: PEP 230 Warning Framework809745
Ref: whatsnew/2 1 pep-230-warning-framework809912
Ref: 158809912
Ref: PEP 230 Warning Framework-Footnote-1813107
Ref: PEP 230 Warning Framework-Footnote-2813154
Node: PEP 229 New Build System813201
Ref: whatsnew/2 1 pep-229-new-build-system813367
Ref: 159813367
Ref: PEP 229 New Build System-Footnote-1815237
Node: PEP 205 Weak References815284
Ref: whatsnew/2 1 pep-205-weak-references815452
Ref: 15a815452
Ref: PEP 205 Weak References-Footnote-1818477
Node: PEP 232 Function Attributes818524
Ref: whatsnew/2 1 pep-232-function-attributes818723
Ref: 15b818723
Ref: PEP 232 Function Attributes-Footnote-1820179
Node: PEP 235 Importing Modules on Case-Insensitive Platforms820226
Ref: whatsnew/2 1 pep-235-importing-modules-on-case-insensitive-platforms820434
Ref: 15c820434
Node: PEP 217 Interactive Display Hook821286
Ref: whatsnew/2 1 pep-217-interactive-display-hook821493
Ref: 15d821493
Ref: PEP 217 Interactive Display Hook-Footnote-1822375
Node: PEP 208 New Coercion Model822422
Ref: whatsnew/2 1 pep-208-new-coercion-model822609
Ref: 15e822609
Ref: PEP 208 New Coercion Model-Footnote-1824183
Node: PEP 241 Metadata in Python Packages824230
Ref: whatsnew/2 1 pep-241-metadata-in-python-packages824412
Ref: 15f824412
Ref: PEP 241 Metadata in Python Packages-Footnote-1826382
Ref: PEP 241 Metadata in Python Packages-Footnote-2826429
Node: New and Improved Modules<4>826476
Ref: whatsnew/2 1 new-and-improved-modules826658
Ref: 160826658
Node: Other Changes and Fixes<4>832257
Ref: whatsnew/2 1 other-changes-and-fixes832423
Ref: 161832423
Node: Acknowledgements<7>838138
Ref: whatsnew/2 1 acknowledgements838268
Ref: 162838268
Node: What's New in Python 2 0838555
Ref: whatsnew/2 0 what-s-new-in-python-2-0838681
Ref: 163838681
Ref: whatsnew/2 0 doc838681
Ref: 164838681
Node: Introduction<3>839352
Ref: whatsnew/2 0 introduction839474
Ref: 165839474
Node: What About Python 1 6?840353
Ref: whatsnew/2 0 what-about-python-1-6840507
Ref: 166840507
Node: New Development Process841741
Ref: whatsnew/2 0 new-development-process841890
Ref: 167841890
Node: Unicode<2>846954
Ref: whatsnew/2 0 unicode847100
Ref: 168847100
Ref: Unicode<2>-Footnote-1853075
Node: List Comprehensions853122
Ref: whatsnew/2 0 list-comprehensions853265
Ref: 169853265
Node: Augmented Assignment856902
Ref: whatsnew/2 0 augmented-assignment857049
Ref: 16a857049
Node: String Methods858484
Ref: whatsnew/2 0 string-methods858640
Ref: 16b858640
Node: Garbage Collection of Cycles860403
Ref: whatsnew/2 0 garbage-collection-of-cycles860557
Ref: 16c860557
Node: Other Core Changes863849
Ref: whatsnew/2 0 other-core-changes864003
Ref: 16d864003
Node: Minor Language Changes864280
Ref: whatsnew/2 0 minor-language-changes864410
Ref: 16e864410
Node: Changes to Built-in Functions869215
Ref: whatsnew/2 0 changes-to-built-in-functions869345
Ref: 16f869345
Node: Porting to 2 0871458
Ref: whatsnew/2 0 porting-to-2-0871611
Ref: 170871611
Node: Extending/Embedding Changes876621
Ref: whatsnew/2 0 extending-embedding-changes876796
Ref: 171876796
Node: Distutils Making Modules Easy to Install880512
Ref: whatsnew/2 0 distutils-making-modules-easy-to-install880684
Ref: 172880684
Node: XML Modules883965
Ref: whatsnew/2 0 xml-modules884124
Ref: 173884124
Node: SAX2 Support884997
Ref: whatsnew/2 0 sax2-support885092
Ref: 174885092
Node: DOM Support886694
Ref: whatsnew/2 0 dom-support886819
Ref: 175886819
Node: Relationship to PyXML889548
Ref: whatsnew/2 0 relationship-to-pyxml889652
Ref: 176889652
Node: Module changes890869
Ref: whatsnew/2 0 module-changes890999
Ref: 177890999
Node: New modules893303
Ref: whatsnew/2 0 new-modules893439
Ref: 178893439
Node: IDLE Improvements897182
Ref: whatsnew/2 0 idle-improvements897334
Ref: 179897334
Node: Deleted and Deprecated Modules898435
Ref: whatsnew/2 0 deleted-and-deprecated-modules898595
Ref: 17a898595
Node: Acknowledgements<8>899281
Ref: whatsnew/2 0 acknowledgements899415
Ref: 17b899415
Node: Index899782

End Tag Table


Local Variables:
coding: utf-8
End:
