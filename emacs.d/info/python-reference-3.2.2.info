This is python-reference-3.2.2.info, produced by makeinfo version 4.13
from python-reference-3.2.2.texi.

Generated by Sphinx 1.1.2.
INFO-DIR-SECTION Python v3 2 2
START-INFO-DIR-ENTRY
* Language Reference: (python-reference-3.2.2.info). describes syntax and language elements
END-INFO-DIR-ENTRY

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation


File: python-reference-3.2.2.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Python Language Reference
*****************************

     Python 3.2.2, February 11, 2012

     Guido van Rossum\\Fred L. Drake, Jr., editor

     Copyright (C) 1990-2012, Python Software Foundation

     Release: 3.2

     Date: February 10, 2012

  This reference manual describes the syntax and "core semantics" of the
language. It is terse, but attempts to be exact and complete. The
semantics of non-essential built-in object types and of the built-in
functions and modules are described in _library-index_. For an informal
introduction to the language, see _tutorial-index_. For C or C++
programmers, two additional manuals exist: _extending-index_ describes
the high-level picture of how to write a Python extension module, and
the _c-api-index_ describes the interfaces available to C/C++
programmers in detail.

* Menu:

* Introduction::
* Lexical analysis::
* Data model::
* Execution model::
* Expressions::
* Simple statements::
* Compound statements::
* Top-level components::
* Full Grammar specification::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Alternate Implementations::
* Notation::

Lexical analysis

* Line structure::
* Other tokens::
* Identifiers and keywords::
* Literals::
* Operators::
* Delimiters::

Line structure

* Logical lines::
* Physical lines::
* Comments::
* Encoding declarations::
* Explicit line joining::
* Implicit line joining::
* Blank lines::
* Indentation::
* Whitespace between tokens::

Identifiers and keywords

* Keywords::
* Reserved classes of identifiers::

Literals

* String and Bytes literals::
* String literal concatenation::
* Numeric literals::
* Integer literals::
* Floating point literals::
* Imaginary literals::

Data model

* Objects, values and types: Objects values and types.
* The standard type hierarchy::
* Special method names::

Special method names

* Basic customization::
* Customizing attribute access::
* Customizing class creation::
* Customizing instance and subclass checks::
* Emulating callable objects::
* Emulating container types::
* Emulating numeric types::
* With Statement Context Managers::
* Special method lookup::

Customizing attribute access

* Implementing Descriptors::
* Invoking Descriptors::
* __slots__::

__slots__

* Notes on using __slots__::

Execution model

* Naming and binding::
* Exceptions::

Naming and binding

* Interaction with dynamic features::

Expressions

* Arithmetic conversions::
* Atoms::
* Primaries::
* The power operator::
* Unary arithmetic and bitwise operations::
* Binary arithmetic operations::
* Shifting operations::
* Binary bitwise operations::
* Comparisons::
* Boolean operations::
* Conditional expressions::
* Lambdas::
* Expression lists::
* Evaluation order::
* Summary::

Atoms

* Identifiers (Names): Identifiers Names.
* Literals: Literals<2>.
* Parenthesized forms::
* Displays for lists, sets and dictionaries: Displays for lists sets and dictionaries.
* List displays::
* Set displays::
* Dictionary displays::
* Generator expressions::
* Yield expressions::

Primaries

* Attribute references::
* Subscriptions::
* Slicings::
* Calls::

Simple statements

* Expression statements::
* Assignment statements::
* The assert statement::
* The pass statement::
* The del statement::
* The return statement::
* The yield statement::
* The raise statement::
* The break statement::
* The continue statement::
* The import statement::
* The global statement::
* The nonlocal statement::

Assignment statements

* Augmented assignment statements::

The import statement

* Future statements::

Compound statements

* The if statement::
* The while statement::
* The for statement::
* The try statement::
* The with statement::
* Function definitions::
* Class definitions::

Top-level components

* Complete Python programs::
* File input::
* Interactive input::
* Expression input::


File: python-reference-3.2.2.info,  Node: Introduction,  Next: Lexical analysis,  Prev: Top,  Up: Top

1 Introduction
**************

This reference manual describes the Python programming language. It is
not intended as a tutorial.

  While I am trying to be as precise as possible, I chose to use
English rather than formal specifications for everything except syntax
and lexical analysis.  This should make the document more
understandable to the average reader, but will leave room for
ambiguities. Consequently, if you were coming from Mars and tried to
re-implement Python from this document alone, you might have to guess
things and in fact you would probably end up implementing quite a
different language. On the other hand, if you are using Python and
wonder what the precise rules about a particular area of the language
are, you should definitely be able to find them here. If you would like
to see a more formal definition of the language, maybe you could
volunteer your time -- or invent a cloning machine :-).

  It is dangerous to add too many implementation details to a language
reference document -- the implementation may change, and other
implementations of the same language may work differently.  On the
other hand, CPython is the one Python implementation in widespread use
(although alternate implementations continue to gain support), and its
particular quirks are sometimes worth being mentioned, especially where
the implementation imposes additional limitations.  Therefore, you'll
find short "implementation notes" sprinkled throughout the text.

  Every Python implementation comes with a number of built-in and
standard modules.  These are documented in _library-index_.  A few
built-in modules are mentioned when they interact in a significant way
with the language definition.

* Menu:

* Alternate Implementations::
* Notation::


File: python-reference-3.2.2.info,  Node: Alternate Implementations,  Next: Notation,  Up: Introduction

1.1 Alternate Implementations
=============================

Though there is one Python implementation which is by far the most
popular, there are some alternate implementations which are of
particular interest to different audiences.

  Known implementations include:

CPython
     This is the original and most-maintained implementation of Python,
     written in C.  New language features generally appear here first.

Jython
     Python implemented in Java.  This implementation can be used as a
     scripting language for Java applications, or can be used to create
     applications using the Java class libraries.  It is also often
     used to create tests for Java libraries.  More information can be
     found at the Jython website(1).

Python for .NET
     This implementation actually uses the CPython implementation, but
     is a managed .NET application and makes .NET libraries available.
     It was created by Brian Lloyd.  For more information, see the
     Python for .NET home page(2).

IronPython
     An alternate Python for .NET.  Unlike Python.NET, this is a
     complete Python implementation that generates IL, and compiles
     Python code directly to .NET assemblies.  It was created by Jim
     Hugunin, the original creator of Jython.  For more information,
     see the IronPython website(3).

PyPy
     An implementation of Python written completely in Python. It
     supports several advanced features not found in other
     implementations like stackless support and a Just in Time
     compiler. One of the goals of the project is to encourage
     experimentation with the language itself by making it easier to
     modify the interpreter (since it is written in Python).
     Additional information is available on the PyPy project's home
     page(4).

  Each of these implementations varies in some way from the language as
documented in this manual, or introduces specific information beyond
what's covered in the standard Python documentation.  Please refer to
the implementation-specific documentation to determine what else you
need to know about the specific implementation you're using.

  ---------- Footnotes ----------

  (1) http://www.jython.org/

  (2) http://pythonnet.sourceforge.net

  (3) http://www.ironpython.com/

  (4) http://pypy.org/


File: python-reference-3.2.2.info,  Node: Notation,  Prev: Alternate Implementations,  Up: Introduction

1.2 Notation
============

The descriptions of lexical analysis and syntax use a modified BNF
grammar notation.  This uses the following style of definition:

    name      ::= lc_letter (lc_letter | "_")*
    lc_letter ::= "a"..."z"

The first line says that a `name' is an `lc_letter' followed by a
sequence of zero or more `lc_letter's and underscores.  An `lc_letter'
in turn is any of the single characters `'a'' through `'z''.  (This
rule is actually adhered to for the names defined in lexical and
grammar rules in this document.)

  Each rule begins with a name (which is the name defined by the rule)
and `::='.  A vertical bar (`|') is used to separate alternatives; it
is the least binding operator in this notation.  A star (`*') means
zero or more repetitions of the preceding item; likewise, a plus (`+')
means one or more repetitions, and a phrase enclosed in square brackets
(`[ ]') means zero or one occurrences (in other words, the enclosed
phrase is optional).  The `*' and `+' operators bind as tightly as
possible; parentheses are used for grouping.  Literal strings are
enclosed in quotes.  White space is only meaningful to separate tokens.
Rules are normally contained on a single line; rules with many
alternatives may be formatted alternatively with each line after the
first beginning with a vertical bar.

  In lexical definitions (as the example above), two more conventions
are used: Two literal characters separated by three dots mean a choice
of any single character in the given (inclusive) range of ASCII
characters.  A phrase between angular brackets (`<...>') gives an
informal description of the symbol defined; e.g., this could be used to
describe the notion of 'control character' if needed.

  Even though the notation used is almost the same, there is a big
difference between the meaning of lexical and syntactic definitions: a
lexical definition operates on the individual characters of the input
source, while a syntax definition operates on the stream of tokens
generated by the lexical analysis.  All uses of BNF in the next chapter
("Lexical Analysis") are lexical definitions; uses in subsequent
chapters are syntactic definitions.


File: python-reference-3.2.2.info,  Node: Lexical analysis,  Next: Data model,  Prev: Introduction,  Up: Top

2 Lexical analysis
******************

A Python program is read by a _parser_.  Input to the parser is a
stream of _tokens_, generated by the _lexical analyzer_.  This chapter
describes how the lexical analyzer breaks a file into tokens.

  Python reads program text as Unicode code points; the encoding of a
source file can be given by an encoding declaration and defaults to
UTF-8, see PEP 3120(1) for details.  If the source file cannot be
decoded, a `SyntaxError' is raised.

* Menu:

* Line structure::
* Other tokens::
* Identifiers and keywords::
* Literals::
* Operators::
* Delimiters::

Line structure

* Logical lines::
* Physical lines::
* Comments::
* Encoding declarations::
* Explicit line joining::
* Implicit line joining::
* Blank lines::
* Indentation::
* Whitespace between tokens::

Identifiers and keywords

* Keywords::
* Reserved classes of identifiers::

Literals

* String and Bytes literals::
* String literal concatenation::
* Numeric literals::
* Integer literals::
* Floating point literals::
* Imaginary literals::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3120


File: python-reference-3.2.2.info,  Node: Line structure,  Next: Other tokens,  Up: Lexical analysis

2.1 Line structure
==================

A Python program is divided into a number of _logical lines_.

* Menu:

* Logical lines::
* Physical lines::
* Comments::
* Encoding declarations::
* Explicit line joining::
* Implicit line joining::
* Blank lines::
* Indentation::
* Whitespace between tokens::


File: python-reference-3.2.2.info,  Node: Logical lines,  Next: Physical lines,  Up: Line structure

2.1.1 Logical lines
-------------------

The end of a logical line is represented by the token NEWLINE.
Statements cannot cross logical line boundaries except where NEWLINE is
allowed by the syntax (e.g., between statements in compound
statements). A logical line is constructed from one or more _physical
lines_ by following the explicit or implicit _line joining_ rules.


File: python-reference-3.2.2.info,  Node: Physical lines,  Next: Comments,  Prev: Logical lines,  Up: Line structure

2.1.2 Physical lines
--------------------

A physical line is a sequence of characters terminated by an end-of-line
sequence.  In source files, any of the standard platform line
termination sequences can be used - the Unix form using ASCII LF
(linefeed), the Windows form using the ASCII sequence CR LF (return
followed by linefeed), or the old Macintosh form using the ASCII CR
(return) character.  All of these forms can be used equally, regardless
of platform.

  When embedding Python, source code strings should be passed to Python
APIs using the standard C conventions for newline characters (the `\n'
character, representing ASCII LF, is the line terminator).


File: python-reference-3.2.2.info,  Node: Comments,  Next: Encoding declarations,  Prev: Physical lines,  Up: Line structure

2.1.3 Comments
--------------

A comment starts with a hash character (`#') that is not part of a
string literal, and ends at the end of the physical line.  A comment
signifies the end of the logical line unless the implicit line joining
rules are invoked. Comments are ignored by the syntax; they are not
tokens.


File: python-reference-3.2.2.info,  Node: Encoding declarations,  Next: Explicit line joining,  Prev: Comments,  Up: Line structure

2.1.4 Encoding declarations
---------------------------

If a comment in the first or second line of the Python script matches
the regular expression `coding[=:]\s*([-\w.]+)', this comment is
processed as an encoding declaration; the first group of this
expression names the encoding of the source code file. The recommended
forms of this expression are

    # -*- coding: <encoding-name> -*-

which is recognized also by GNU Emacs, and

    # vim:fileencoding=<encoding-name>

which is recognized by Bram Moolenaar's VIM.

  If no encoding declaration is found, the default encoding is UTF-8.
In addition, if the first bytes of the file are the UTF-8 byte-order
mark (`b'\xef\xbb\xbf''), the declared file encoding is UTF-8 (this is
supported, among others, by Microsoft's *notepad*).

  If an encoding is declared, the encoding name must be recognized by
Python. The encoding is used for all lexical analysis, including string
literals, comments and identifiers. The encoding declaration must
appear on a line of its own.


File: python-reference-3.2.2.info,  Node: Explicit line joining,  Next: Implicit line joining,  Prev: Encoding declarations,  Up: Line structure

2.1.5 Explicit line joining
---------------------------

Two or more physical lines may be joined into logical lines using
backslash characters (`\'), as follows: when a physical line ends in a
backslash that is not part of a string literal or comment, it is joined
with the following forming a single logical line, deleting the
backslash and the following end-of-line character.  For example:

    if 1900 < year < 2100 and 1 <= month <= 12 \
       and 1 <= day <= 31 and 0 <= hour < 24 \
       and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date
            return 1

A line ending in a backslash cannot carry a comment.  A backslash does
not continue a comment.  A backslash does not continue a token except
for string literals (i.e., tokens other than string literals cannot be
split across physical lines using a backslash).  A backslash is illegal
elsewhere on a line outside a string literal.


File: python-reference-3.2.2.info,  Node: Implicit line joining,  Next: Blank lines,  Prev: Explicit line joining,  Up: Line structure

2.1.6 Implicit line joining
---------------------------

Expressions in parentheses, square brackets or curly braces can be
split over more than one physical line without using backslashes. For
example:

    month_names = ['Januari', 'Februari', 'Maart',      # These are the
                   'April',   'Mei',      'Juni',       # Dutch names
                   'Juli',    'Augustus', 'September',  # for the months
                   'Oktober', 'November', 'December']   # of the year

Implicitly continued lines can carry comments.  The indentation of the
continuation lines is not important.  Blank continuation lines are
allowed.  There is no NEWLINE token between implicit continuation
lines.  Implicitly continued lines can also occur within triple-quoted
strings (see below); in that case they cannot carry comments.


File: python-reference-3.2.2.info,  Node: Blank lines,  Next: Indentation,  Prev: Implicit line joining,  Up: Line structure

2.1.7 Blank lines
-----------------

A logical line that contains only spaces, tabs, formfeeds and possibly a
comment, is ignored (i.e., no NEWLINE token is generated).  During
interactive input of statements, handling of a blank line may differ
depending on the implementation of the read-eval-print loop.  In the
standard interactive interpreter, an entirely blank logical line (i.e.
one containing not even whitespace or a comment) terminates a
multi-line statement.


File: python-reference-3.2.2.info,  Node: Indentation,  Next: Whitespace between tokens,  Prev: Blank lines,  Up: Line structure

2.1.8 Indentation
-----------------

Leading whitespace (spaces and tabs) at the beginning of a logical line
is used to compute the indentation level of the line, which in turn is
used to determine the grouping of statements.

  Tabs are replaced (from left to right) by one to eight spaces such
that the total number of characters up to and including the replacement
is a multiple of eight (this is intended to be the same rule as used by
Unix).  The total number of spaces preceding the first non-blank
character then determines the line's indentation.  Indentation cannot
be split over multiple physical lines using backslashes; the whitespace
up to the first backslash determines the indentation.

  Indentation is rejected as inconsistent if a source file mixes tabs
and spaces in a way that makes the meaning dependent on the worth of a
tab in spaces; a `TabError' is raised in that case.

  *Cross-platform compatibility note:* because of the nature of text
editors on non-UNIX platforms, it is unwise to use a mixture of spaces
and tabs for the indentation in a single source file.  It should also
be noted that different platforms may explicitly limit the maximum
indentation level.

  A formfeed character may be present at the start of the line; it will
be ignored for the indentation calculations above.  Formfeed characters
occurring elsewhere in the leading whitespace have an undefined effect
(for instance, they may reset the space count to zero).

  The indentation levels of consecutive lines are used to generate
INDENT and DEDENT tokens, using a stack, as follows.

  Before the first line of the file is read, a single zero is pushed on
the stack; this will never be popped off again.  The numbers pushed on
the stack will always be strictly increasing from bottom to top.  At
the beginning of each logical line, the line's indentation level is
compared to the top of the stack.  If it is equal, nothing happens. If
it is larger, it is pushed on the stack, and one INDENT token is
generated.  If it is smaller, it _must_ be one of the numbers occurring
on the stack; all numbers on the stack that are larger are popped off,
and for each number popped off a DEDENT token is generated.  At the end
of the file, a DEDENT token is generated for each number remaining on
the stack that is larger than zero.

  Here is an example of a correctly (though confusingly) indented piece
of Python code:

    def perm(l):
            # Compute the list of all permutations of l
        if len(l) <= 1:
                      return [l]
        r = []
        for i in range(len(l)):
                 s = l[:i] + l[i+1:]
                 p = perm(s)
                 for x in p:
                  r.append(l[i:i+1] + x)
        return r

The following example shows various indentation errors:

     def perm(l):                       # error: first line indented
    for i in range(len(l)):             # error: not indented
        s = l[:i] + l[i+1:]
            p = perm(l[:i] + l[i+1:])   # error: unexpected indent
            for x in p:
                    r.append(l[i:i+1] + x)
                return r                # error: inconsistent dedent

(Actually, the first three errors are detected by the parser; only the
last error is found by the lexical analyzer -- the indentation of
`return r' does not match a level popped off the stack.)


File: python-reference-3.2.2.info,  Node: Whitespace between tokens,  Prev: Indentation,  Up: Line structure

2.1.9 Whitespace between tokens
-------------------------------

Except at the beginning of a logical line or in string literals, the
whitespace characters space, tab and formfeed can be used
interchangeably to separate tokens.  Whitespace is needed between two
tokens only if their concatenation could otherwise be interpreted as a
different token (e.g., ab is one token, but a b is two tokens).


File: python-reference-3.2.2.info,  Node: Other tokens,  Next: Identifiers and keywords,  Prev: Line structure,  Up: Lexical analysis

2.2 Other tokens
================

Besides NEWLINE, INDENT and DEDENT, the following categories of tokens
exist: _identifiers_, _keywords_, _literals_, _operators_, and
_delimiters_. Whitespace characters (other than line terminators,
discussed earlier) are not tokens, but serve to delimit tokens. Where
ambiguity exists, a token comprises the longest possible string that
forms a legal token, when read from left to right.


File: python-reference-3.2.2.info,  Node: Identifiers and keywords,  Next: Literals,  Prev: Other tokens,  Up: Lexical analysis

2.3 Identifiers and keywords
============================

Identifiers (also referred to as _names_) are described by the
following lexical definitions.

  The syntax of identifiers in Python is based on the Unicode standard
annex UAX-31, with elaboration and changes as defined below; see also PEP
3131(1) for further details.

  Within the ASCII range (U+0001..U+007F), the valid characters for
identifiers are the same as in Python 2.x: the uppercase and lowercase
letters `A' through `Z', the underscore `_' and, except for the first
character, the digits `0' through `9'.

  Python 3.0 introduces additional characters from outside the ASCII
range (see PEP 3131(2)).  For these characters, the classification uses
the version of the Unicode Character Database as included in the
`unicodedata' module.

  Identifiers are unlimited in length.  Case is significant.

    identifier   ::= xid_start xid_continue*
    id_start     ::= <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
    id_continue  ::= <all characters in id_start, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
    xid_start    ::= <all characters in id_start whose NFKC normalization is in "id_start xid_continue*">
    xid_continue ::= <all characters in id_continue whose NFKC normalization is in "id_continue*">

The Unicode category codes mentioned above stand for:

   * _Lu_ - uppercase letters

   * _Ll_ - lowercase letters

   * _Lt_ - titlecase letters

   * _Lm_ - modifier letters

   * _Lo_ - other letters

   * _Nl_ - letter numbers

   * _Mn_ - nonspacing marks

   * _Mc_ - spacing combining marks

   * _Nd_ - decimal numbers

   * _Pc_ - connector punctuations

   * _Other_ID_Start_ - explicit list of characters in PropList.txt(3)
     to support backwards compatibility

   * _Other_ID_Continue_ - likewise

  All identifiers are converted into the normal form NFKC while
parsing; comparison of identifiers is based on NFKC.

  A non-normative HTML file listing all valid identifier characters for
Unicode 4.1 can be found at
<http://www.dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html>.

* Menu:

* Keywords::
* Reserved classes of identifiers::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3131

  (2) http://www.python.org/dev/peps/pep-3131

  (3) http://unicode.org/Public/UNIDATA/PropList.txt


File: python-reference-3.2.2.info,  Node: Keywords,  Next: Reserved classes of identifiers,  Up: Identifiers and keywords

2.3.1 Keywords
--------------

The following identifiers are used as reserved words, or _keywords_ of
the language, and cannot be used as ordinary identifiers.  They must be
spelled exactly as written here:

    False      class      finally    is         return
    None       continue   for        lambda     try
    True       def        from       nonlocal   while
    and        del        global     not        with
    as         elif       if         or         yield
    assert     else       import     pass
    break      except     in         raise



File: python-reference-3.2.2.info,  Node: Reserved classes of identifiers,  Prev: Keywords,  Up: Identifiers and keywords

2.3.2 Reserved classes of identifiers
-------------------------------------

Certain classes of identifiers (besides keywords) have special
meanings.  These classes are identified by the patterns of leading and
trailing underscore characters:

`_*'
     Not imported by `from module import *'.  The special identifier
     `_' is used in the interactive interpreter to store the result of
     the last evaluation; it is stored in the `builtins' module.  When
     not in interactive mode, `_' has no special meaning and is not
     defined. See section *note The import statement: 30.

          Note: The name `_' is often used in conjunction with
          internationalization; refer to the documentation for the
          `gettext' module for more information on this convention.

`__*__'
     System-defined names. These names are defined by the interpreter
     and its implementation (including the standard library).  Current
     system names are discussed in the *note Special method names: 31.
     section and elsewhere.  More will likely be defined in future
     versions of Python.  _Any_ use of `__*__' names, in any context,
     that does not follow explicitly documented use, is subject to
     breakage without warning.

`__*'
     Class-private names.  Names in this category, when used within the
     context of a class definition, are re-written to use a mangled
     form to help avoid name clashes between "private" attributes of
     base and derived classes. See section *note Identifiers (Names):
     32.


File: python-reference-3.2.2.info,  Node: Literals,  Next: Operators,  Prev: Identifiers and keywords,  Up: Lexical analysis

2.4 Literals
============

Literals are notations for constant values of some built-in types.

* Menu:

* String and Bytes literals::
* String literal concatenation::
* Numeric literals::
* Integer literals::
* Floating point literals::
* Imaginary literals::


File: python-reference-3.2.2.info,  Node: String and Bytes literals,  Next: String literal concatenation,  Up: Literals

2.4.1 String and Bytes literals
-------------------------------

String literals are described by the following lexical definitions:

    stringliteral   ::= [stringprefix](shortstring | longstring)
    stringprefix    ::= "r" | "R"
    shortstring     ::= "'" shortstringitem* "'" | '"' shortstringitem* '"'
    longstring      ::= "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
    shortstringitem ::= shortstringchar | stringescapeseq
    longstringitem  ::= longstringchar | stringescapeseq
    shortstringchar ::= <any source character except "\" or newline or the quote>
    longstringchar  ::= <any source character except "\">
    stringescapeseq ::= "\" <any source character>


    bytesliteral   ::= bytesprefix(shortbytes | longbytes)
    bytesprefix    ::= "b" | "B" | "br" | "Br" | "bR" | "BR"
    shortbytes     ::= "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
    longbytes      ::= "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
    shortbytesitem ::= shortbyteschar | bytesescapeseq
    longbytesitem  ::= longbyteschar | bytesescapeseq
    shortbyteschar ::= <any ASCII character except "\" or newline or the quote>
    longbyteschar  ::= <any ASCII character except "\">
    bytesescapeseq ::= "\" <any ASCII character>

One syntactic restriction not indicated by these productions is that
whitespace is not allowed between the *note stringprefix: 38. or *note
bytesprefix: 41. and the rest of the literal. The source character set
is defined by the encoding declaration; it is UTF-8 if no encoding
declaration is given in the source file; see section *note Encoding
declarations: 18.

  In plain English: Both types of literals can be enclosed in matching
single quotes (`'') or double quotes (`"').  They can also be enclosed
in matching groups of three single or double quotes (these are
generally referred to as _triple-quoted strings_).  The backslash (`\')
character is used to escape characters that otherwise have a special
meaning, such as newline, backslash itself, or the quote character.

  Bytes literals are always prefixed with `'b'' or `'B''; they produce
an instance of the `bytes' type instead of the `str' type.  They may
only contain ASCII characters; bytes with a numeric value of 128 or
greater must be expressed with escapes.

  Both string and bytes literals may optionally be prefixed with a
letter `'r'' or `'R''; such strings are called _raw strings_ and treat
backslashes as literal characters.  As a result, in string literals,
`'\U'' and `'\u'' escapes in raw strings are not treated specially.

  In triple-quoted strings, unescaped newlines and quotes are allowed
(and are retained), except that three unescaped quotes in a row
terminate the string.  (A "quote" is the character used to open the
string, i.e. either `'' or `"'.)

  Unless an `'r'' or `'R'' prefix is present, escape sequences in
strings are interpreted according to rules similar to those used by
Standard C.  The recognized escape sequences are:

Escape Sequence       Meaning                               Notes
------------------------------------------------------------------------ 
`\newline'            Backslash and newline ignored         
`\\'                  Backslash (`\')                       
`\''                  Single quote (`'')                    
`\"'                  Double quote (`"')                    
`\a'                  ASCII Bell (BEL)                      
`\b'                  ASCII Backspace (BS)                  
`\f'                  ASCII Formfeed (FF)                   
`\n'                  ASCII Linefeed (LF)                   
`\r'                  ASCII Carriage Return (CR)            
`\t'                  ASCII Horizontal Tab (TAB)            
`\v'                  ASCII Vertical Tab (VT)               
`\ooo'                Character with octal value _ooo_      (1,3)
`\xhh'                Character with hex value _hh_         (2,3)

  Escape sequences only recognized in string literals are:

Escape Sequence       Meaning                               Notes
------------------------------------------------------------------------ 
`\N{name}'            Character named _name_ in the         
                      Unicode database                      
`\uxxxx'              Character with 16-bit hex value       (4)
                      _xxxx_                                
`\Uxxxxxxxx'          Character with 32-bit hex value       (5)
                      _xxxxxxxx_                            

  Notes:

  1. As in Standard C, up to three octal digits are accepted.

  2. Unlike in Standard C, exactly two hex digits are required.

  3. In a bytes literal, hexadecimal and octal escapes denote the byte
     with the given value. In a string literal, these escapes denote a
     Unicode character with the given value.

  4. Individual code units which form parts of a surrogate pair can be
     encoded using this escape sequence.  Exactly four hex digits are
     required.

  5. Any Unicode character can be encoded this way, but characters
     outside the Basic Multilingual Plane (BMP) will be encoded using a
     surrogate pair if Python is compiled to use 16-bit code units (the
     default).  Exactly eight hex digits are required.

  Unlike Standard C, all unrecognized escape sequences are left in the
string unchanged, i.e., _the backslash is left in the string_.  (This
behavior is useful when debugging: if an escape sequence is mistyped,
the resulting output is more easily recognized as broken.)  It is also
important to note that the escape sequences only recognized in string
literals fall into the category of unrecognized escapes for bytes
literals.

  Even in a raw string, string quotes can be escaped with a backslash,
but the backslash remains in the string; for example, `r"\""' is a
valid string literal consisting of two characters: a backslash and a
double quote; `r"\"' is not a valid string literal (even a raw string
cannot end in an odd number of backslashes).  Specifically, _a raw
string cannot end in a single backslash_ (since the backslash would
escape the following quote character).  Note also that a single
backslash followed by a newline is interpreted as those two characters
as part of the string, _not_ as a line continuation.


File: python-reference-3.2.2.info,  Node: String literal concatenation,  Next: Numeric literals,  Prev: String and Bytes literals,  Up: Literals

2.4.2 String literal concatenation
----------------------------------

Multiple adjacent string or bytes literals (delimited by whitespace),
possibly using different quoting conventions, are allowed, and their
meaning is the same as their concatenation.  Thus, `"hello" 'world'' is
equivalent to `"helloworld"'.  This feature can be used to reduce the
number of backslashes needed, to split long strings conveniently across
long lines, or even to add comments to parts of strings, for example:

    re.compile("[A-Za-z_]"       # letter or underscore
               "[A-Za-z0-9_]*"   # letter, digit or underscore
              )

Note that this feature is defined at the syntactical level, but
implemented at compile time.  The '+' operator must be used to
concatenate string expressions at run time.  Also note that literal
concatenation can use different quoting styles for each component (even
mixing raw strings and triple quoted strings).


File: python-reference-3.2.2.info,  Node: Numeric literals,  Next: Integer literals,  Prev: String literal concatenation,  Up: Literals

2.4.3 Numeric literals
----------------------

There are three types of numeric literals: integers, floating point
numbers, and imaginary numbers.  There are no complex literals (complex
numbers can be formed by adding a real number and an imaginary number).

  Note that numeric literals do not include a sign; a phrase like `-1'
is actually an expression composed of the unary operator '`-'' and the
literal `1'.


File: python-reference-3.2.2.info,  Node: Integer literals,  Next: Floating point literals,  Prev: Numeric literals,  Up: Literals

2.4.4 Integer literals
----------------------

Integer literals are described by the following lexical definitions:

    integer        ::= decimalinteger | octinteger | hexinteger | bininteger
    decimalinteger ::= nonzerodigit digit* | "0"+
    nonzerodigit   ::= "1"..."9"
    digit          ::= "0"..."9"
    octinteger     ::= "0" ("o" | "O") octdigit+
    hexinteger     ::= "0" ("x" | "X") hexdigit+
    bininteger     ::= "0" ("b" | "B") bindigit+
    octdigit       ::= "0"..."7"
    hexdigit       ::= digit | "a"..."f" | "A"..."F"
    bindigit       ::= "0" | "1"

There is no limit for the length of integer literals apart from what
can be stored in available memory.

  Note that leading zeros in a non-zero decimal number are not allowed.
This is for disambiguation with C-style octal literals, which Python
used before version 3.0.

  Some examples of integer literals:

    7     2147483647                        0o177    0b100110111
    3     79228162514264337593543950336     0o377    0x100000000
          79228162514264337593543950336              0xdeadbeef



File: python-reference-3.2.2.info,  Node: Floating point literals,  Next: Imaginary literals,  Prev: Integer literals,  Up: Literals

2.4.5 Floating point literals
-----------------------------

Floating point literals are described by the following lexical
definitions:

    floatnumber   ::= pointfloat | exponentfloat
    pointfloat    ::= [intpart] fraction | intpart "."
    exponentfloat ::= (intpart | pointfloat) exponent
    intpart       ::= digit+
    fraction      ::= "." digit+
    exponent      ::= ("e" | "E") ["+" | "-"] digit+

Note that the integer and exponent parts are always interpreted using
radix 10.  For example, `077e010' is legal, and denotes the same number
as `77e10'. The allowed range of floating point literals is
implementation-dependent. Some examples of floating point literals:

    3.14    10.    .001    1e100    3.14e-10    0e0

Note that numeric literals do not include a sign; a phrase like `-1' is
actually an expression composed of the unary operator `-' and the
literal `1'.


File: python-reference-3.2.2.info,  Node: Imaginary literals,  Prev: Floating point literals,  Up: Literals

2.4.6 Imaginary literals
------------------------

Imaginary literals are described by the following lexical definitions:

    imagnumber ::= (floatnumber | intpart) ("j" | "J")

An imaginary literal yields a complex number with a real part of 0.0.
Complex numbers are represented as a pair of floating point numbers and
have the same restrictions on their range.  To create a complex number
with a nonzero real part, add a floating point number to it, e.g.,
`(3+4j)'.  Some examples of imaginary literals:

    3.14j   10.j    10j     .001j   1e100j  3.14e-10j



File: python-reference-3.2.2.info,  Node: Operators,  Next: Delimiters,  Prev: Literals,  Up: Lexical analysis

2.5 Operators
=============

The following tokens are operators:

    +       -       *       **      /       //      %
    <<      >>      &       |       ^       ~
    <       >       <=      >=      ==      !=



File: python-reference-3.2.2.info,  Node: Delimiters,  Prev: Operators,  Up: Lexical analysis

2.6 Delimiters
==============

The following tokens serve as delimiters in the grammar:

    (       )       [       ]       {       }
    ,       :       .       ;       @       =
    +=      -=      *=      /=      //=     %=
    &=      |=      ^=      >>=     <<=     **=

The period can also occur in floating-point and imaginary literals.  A
sequence of three periods has a special meaning as an ellipsis literal.
The second half of the list, the augmented assignment operators, serve
lexically as delimiters, but also perform an operation.

  The following printing ASCII characters have special meaning as part
of other tokens or are otherwise significant to the lexical analyzer:

    '       "       #       \

The following printing ASCII characters are not used in Python.  Their
occurrence outside string literals and comments is an unconditional
error:

    $       ?       `



File: python-reference-3.2.2.info,  Node: Data model,  Next: Execution model,  Prev: Lexical analysis,  Up: Top

3 Data model
************

* Menu:

* Objects, values and types: Objects values and types.
* The standard type hierarchy::
* Special method names::


File: python-reference-3.2.2.info,  Node: Objects values and types,  Next: The standard type hierarchy,  Up: Data model

3.1 Objects, values and types
=============================

_Objects_ are Python's abstraction for data.  All data in a Python
program is represented by objects or by relations between objects. (In
a sense, and in conformance to Von Neumann's model of a "stored program
computer," code is also represented by objects.)

  Every object has an identity, a type and a value.  An object's
_identity_ never changes once it has been created; you may think of it
as the object's address in memory.  The '*note is: 6d.' operator
compares the identity of two objects; the `id()' function returns an
integer representing its identity (currently implemented as its
address). An object's _type_ is also unchangeable. (1) An object's type
determines the operations that the object supports (e.g., "does it have
a length?") and also defines the possible values for objects of that
type.  The `type()' function returns an object's type (which is an
object itself).  The _value_ of some objects can change.  Objects whose
value can change are said to be _mutable_; objects whose value is
unchangeable once they are created are called _immutable_. (The value
of an immutable container object that contains a reference to a mutable
object can change when the latter's value is changed; however the
container is still considered immutable, because the collection of
objects it contains cannot be changed.  So, immutability is not
strictly the same as having an unchangeable value, it is more subtle.)
An object's mutability is determined by its type; for instance,
numbers, strings and tuples are immutable, while dictionaries and lists
are mutable.

  Objects are never explicitly destroyed; however, when they become
unreachable they may be garbage-collected.  An implementation is
allowed to postpone garbage collection or omit it altogether -- it is a
matter of implementation quality how garbage collection is implemented,
as long as no objects are collected that are still reachable.

*CPython implementation detail:* CPython currently uses a
reference-counting scheme with (optional) delayed detection of
cyclically linked garbage, which collects most objects as soon as they
become unreachable, but is not guaranteed to collect garbage containing
circular references.  See the documentation of the `gc' module for
information on controlling the collection of cyclic garbage.  Other
implementations act differently and CPython may change.  Do not depend
on immediate finalization of objects when they become unreachable (ex:
always close files).

  Note that the use of the implementation's tracing or debugging
facilities may keep objects alive that would normally be collectable.
Also note that catching an exception with a '*note try: 6e...*note
except: 6f.' statement may keep objects alive.

  Some objects contain references to "external" resources such as open
files or windows.  It is understood that these resources are freed when
the object is garbage-collected, but since garbage collection is not
guaranteed to happen, such objects also provide an explicit way to
release the external resource, usually a `close()' method. Programs are
strongly recommended to explicitly close such objects.  The '*note try:
6e...*note finally: 70.' statement and the '*note with: 71.' statement
provide convenient ways to do this.

  Some objects contain references to other objects; these are called
_containers_.  Examples of containers are tuples, lists and
dictionaries.  The references are part of a container's value.  In most
cases, when we talk about the value of a container, we imply the
values, not the identities of the contained objects; however, when we
talk about the mutability of a container, only the identities of the
immediately contained objects are implied.  So, if an immutable
container (like a tuple) contains a reference to a mutable object, its
value changes if that mutable object is changed.

  Types affect almost all aspects of object behavior.  Even the
importance of object identity is affected in some sense: for immutable
types, operations that compute new values may actually return a
reference to any existing object with the same type and value, while
for mutable objects this is not allowed.  E.g., after `a = 1; b = 1',
`a' and `b' may or may not refer to the same object with the value one,
depending on the implementation, but after `c = []; d = []', `c' and
`d' are guaranteed to refer to two different, unique, newly created
empty lists. (Note that `c = d = []' assigns the same object to both
`c' and `d'.)

  ---------- Footnotes ----------

  (1) It _is_ possible in some cases to change an object's type, under
certain controlled conditions. It generally isn't a good idea though,
since it can lead to some very strange behaviour if it is handled
incorrectly.


File: python-reference-3.2.2.info,  Node: The standard type hierarchy,  Next: Special method names,  Prev: Objects values and types,  Up: Data model

3.2 The standard type hierarchy
===============================

Below is a list of the types that are built into Python.  Extension
modules (written in C, Java, or other languages, depending on the
implementation) can define additional types.  Future versions of Python
may add types to the type hierarchy (e.g., rational numbers,
efficiently stored arrays of integers, etc.), although such additions
will often be provided via the standard library instead.

  Some of the type descriptions below contain a paragraph listing
'special attributes.'  These are attributes that provide access to the
implementation and are not intended for general use.  Their definition
may change in the future.

None
     This type has a single value.  There is a single object with this
     value. This object is accessed through the built-in name `None'.
     It is used to signify the absence of a value in many situations,
     e.g., it is returned from functions that don't explicitly return
     anything. Its truth value is false.

NotImplemented
     This type has a single value.  There is a single object with this
     value. This object is accessed through the built-in name
     `NotImplemented'. Numeric methods and rich comparison methods may
     return this value if they do not implement the operation for the
     operands provided.  (The interpreter will then try the reflected
     operation, or some other fallback, depending on the operator.)  Its
     truth value is true.

Ellipsis
     This type has a single value.  There is a single object with this
     value. This object is accessed through the literal `...' or the
     built-in name `Ellipsis'.  Its truth value is true.

`numbers.Number'
     These are created by numeric literals and returned as results by
     arithmetic operators and arithmetic built-in functions.  Numeric
     objects are immutable; once created their value never changes.
     Python numbers are of course strongly related to mathematical
     numbers, but subject to the limitations of numerical
     representation in computers.

     Python distinguishes between integers, floating point numbers, and
     complex numbers:

    `numbers.Integral'
          These represent elements from the mathematical set of
          integers (positive and negative).

          There are two types of integers:

          Integers (`int')

               These represent numbers in an unlimited range, subject
               to available (virtual) memory only.  For the purpose of
               shift and mask operations, a binary representation is
               assumed, and negative numbers are represented in a
               variant of 2's complement which gives the illusion of an
               infinite string of sign bits extending to the left.

         Booleans (`bool')
               These represent the truth values False and True.  The
               two objects representing the values False and True are
               the only Boolean objects. The Boolean type is a subtype
               of the integer type, and Boolean values behave like the
               values 0 and 1, respectively, in almost all contexts,
               the exception being that when converted to a string, the
               strings `"False"' or `"True"' are returned, respectively.

          The rules for integer representation are intended to give the
          most meaningful interpretation of shift and mask operations
          involving negative integers.

    `numbers.Real' (`float')
          These represent machine-level double precision floating point
          numbers. You are at the mercy of the underlying machine
          architecture (and C or Java implementation) for the accepted
          range and handling of overflow. Python does not support
          single-precision floating point numbers; the savings in
          processor and memory usage that are usually the reason for
          using these is dwarfed by the overhead of using objects in
          Python, so there is no reason to complicate the language with
          two kinds of floating point numbers.

    `numbers.Complex' (`complex')
          These represent complex numbers as a pair of machine-level
          double precision floating point numbers.  The same caveats
          apply as for floating point numbers.  The real and imaginary
          parts of a complex number `z' can be retrieved through the
          read-only attributes `z.real' and `z.imag'.

Sequences
     These represent finite ordered sets indexed by non-negative
     numbers. The built-in function `len()' returns the number of items
     of a sequence. When the length of a sequence is _n_, the index set
     contains the numbers 0, 1, ..., _n_-1.  Item _i_ of sequence _a_
     is selected by `a[i]'.

     Sequences also support slicing: `a[i:j]' selects all items with
     index _k_ such that _i_ `<=' _k_ `<' _j_.  When used as an
     expression, a slice is a sequence of the same type.  This implies
     that the index set is renumbered so that it starts at 0.

     Some sequences also support "extended slicing" with a third "step"
     parameter: `a[i:j:k]' selects all items of _a_ with index _x_
     where `x = i + n*k', _n_ `>=' `0' and _i_ `<=' _x_ `<' _j_.

     Sequences are distinguished according to their mutability:

    Immutable sequences
          An object of an immutable sequence type cannot change once it
          is created.  (If the object contains references to other
          objects, these other objects may be mutable and may be
          changed; however, the collection of objects directly
          referenced by an immutable object cannot change.)

          The following types are immutable sequences:

         Strings
               The items of a string object are Unicode code units.  A
               Unicode code unit is represented by a string object of
               one item and can hold either a 16-bit or 32-bit value
               representing a Unicode ordinal (the maximum value for
               the ordinal is given in `sys.maxunicode', and depends on
               how Python is configured at compile time).  Surrogate
               pairs may be present in the Unicode object, and will be
               reported as two separate items.  The built-in functions
               `chr()' and `ord()' convert between code units and
               nonnegative integers representing the Unicode ordinals
               as defined in the Unicode Standard 3.0. Conversion from
               and to other encodings are possible through the string
               method `encode()'.

         Tuples
               The items of a tuple are arbitrary Python objects.
               Tuples of two or more items are formed by
               comma-separated lists of expressions.  A tuple of one
               item (a 'singleton') can be formed by affixing a comma
               to an expression (an expression by itself does not
               create a tuple, since parentheses must be usable for
               grouping of expressions).  An empty tuple can be formed
               by an empty pair of parentheses.

         Bytes
               A bytes object is an immutable array.  The items are
               8-bit bytes, represented by integers in the range 0 <= x
               < 256.  Bytes literals (like `b'abc'' and the built-in
               function `bytes()' can be used to construct bytes
               objects.  Also, bytes objects can be decoded to strings
               via the `decode()' method.

    Mutable sequences
          Mutable sequences can be changed after they are created.  The
          subscription and slicing notations can be used as the target
          of assignment and *note del: 74.  (delete) statements.

          There are currently two intrinsic mutable sequence types:

         Lists
               The items of a list are arbitrary Python objects.  Lists
               are formed by placing a comma-separated list of
               expressions in square brackets. (Note that there are no
               special cases needed to form lists of length 0 or 1.)

         Byte Arrays
               A bytearray object is a mutable array. They are created
               by the built-in `bytearray()' constructor.  Aside from
               being mutable (and hence unhashable), byte arrays
               otherwise provide the same interface and functionality
               as immutable bytes objects.

          The extension module `array' provides an additional example
          of a mutable sequence type, as does the `collections' module.

Set types
     These represent unordered, finite sets of unique, immutable
     objects. As such, they cannot be indexed by any subscript.
     However, they can be iterated over, and the built-in function
     `len()' returns the number of items in a set. Common uses for sets
     are fast membership testing, removing duplicates from a sequence,
     and computing mathematical operations such as intersection, union,
     difference, and symmetric difference.

     For set elements, the same immutability rules apply as for
     dictionary keys. Note that numeric types obey the normal rules for
     numeric comparison: if two numbers compare equal (e.g., `1' and
     `1.0'), only one of them can be contained in a set.

     There are currently two intrinsic set types:

    Sets
          These represent a mutable set. They are created by the
          built-in `set()' constructor and can be modified afterwards
          by several methods, such as `add()'.

    Frozen sets
          These represent an immutable set.  They are created by the
          built-in `frozenset()' constructor.  As a frozenset is
          immutable and _hashable_, it can be used again as an element
          of another set, or as a dictionary key.

Mappings
     These represent finite sets of objects indexed by arbitrary index
     sets. The subscript notation `a[k]' selects the item indexed by
     `k' from the mapping `a'; this can be used in expressions and as
     the target of assignments or *note del: 74. statements. The
     built-in function `len()' returns the number of items in a mapping.

     There is currently a single intrinsic mapping type:

    Dictionaries
          These represent finite sets of objects indexed by nearly
          arbitrary values.  The only types of values not acceptable as
          keys are values containing lists or dictionaries or other
          mutable types that are compared by value rather than by
          object identity, the reason being that the efficient
          implementation of dictionaries requires a key's hash value to
          remain constant. Numeric types used for keys obey the normal
          rules for numeric comparison: if two numbers compare equal
          (e.g., `1' and `1.0') then they can be used interchangeably
          to index the same dictionary entry.

          Dictionaries are mutable; they can be created by the `{...}'
          notation (see section *note Dictionary displays: 75.).

          The extension modules `dbm.ndbm' and `dbm.gnu' provide
          additional examples of mapping types, as does the
          `collections' module.

Callable types
     These are the types to which the function call operation (see
     section *note Calls: 76.) can be applied:

    User-defined functions
          A user-defined function object is created by a function
          definition (see section *note Function definitions: 77.).  It
          should be called with an argument list containing the same
          number of items as the function's formal parameter list.

          Special attributes:

          Attribute                     Meaning                             
          ---------------------------------------------------------------------------------- 
          `__doc__'                     The function's documentation        Writable
                                        string, or `None' if unavailable    
          `__name__'                    The function's name                 Writable
          `__module__'                  The name of the module the          Writable
                                        function was defined in, or `None'  
                                        if unavailable.                     
          `__defaults__'                A tuple containing default          Writable
                                        argument values for those           
                                        arguments that have defaults, or    
                                        `None' if no arguments have a       
                                        default value                       
          `__code__'                    The code object representing the    Writable
                                        compiled function body.             
          `__globals__'                 A reference to the dictionary that  Read-only
                                        holds the function's global         
                                        variables -- the global namespace   
                                        of the module in which the function 
                                        was defined.                        
          `__dict__'                    The namespace supporting arbitrary  Writable
                                        function attributes.                
          `__closure__'                 `None' or a tuple of cells that     Read-only
                                        contain bindings for the            
                                        function's free variables.          
          `__annotations__'             A dict containing annotations of    Writable
                                        parameters.  The keys of the dict   
                                        are the parameter names, or         
                                        `'return'' for the return           
                                        annotation, if provided.            
          `__kwdefaults__'              A dict containing defaults for      Writable
                                        keyword-only parameters.            

          Most of the attributes labelled "Writable" check the type of
          the assigned value.

          Function objects also support getting and setting arbitrary
          attributes, which can be used, for example, to attach
          metadata to functions.  Regular attribute dot-notation is
          used to get and set such attributes. _Note that the current
          implementation only supports function attributes on
          user-defined functions.  Function attributes on built-in
          functions may be supported in the future._

          Additional information about a function's definition can be
          retrieved from its code object; see the description of
          internal types below.

    Instance methods
          An instance method object combines a class, a class instance
          and any callable object (normally a user-defined function).

          Special read-only attributes: `__self__' is the class
          instance object, `__func__' is the function object; `__doc__'
          is the method's documentation (same as `__func__.__doc__');
          `__name__' is the method name (same as `__func__.__name__');
          `__module__' is the name of the module the method was defined
          in, or `None' if unavailable.

          Methods also support accessing (but not setting) the
          arbitrary function attributes on the underlying function
          object.

          User-defined method objects may be created when getting an
          attribute of a class (perhaps via an instance of that class),
          if that attribute is a user-defined function object or a
          class method object.

          When an instance method object is created by retrieving a
          user-defined function object from a class via one of its
          instances, its `__self__' attribute is the instance, and the
          method object is said to be bound.  The new method's
          `__func__' attribute is the original function object.

          When a user-defined method object is created by retrieving
          another method object from a class or instance, the behaviour
          is the same as for a function object, except that the
          `__func__' attribute of the new instance is not the original
          method object but its `__func__' attribute.

          When an instance method object is created by retrieving a
          class method object from a class or instance, its `__self__'
          attribute is the class itself, and its `__func__' attribute
          is the function object underlying the class method.

          When an instance method object is called, the underlying
          function (`__func__') is called, inserting the class instance
          (`__self__') in front of the argument list.  For instance,
          when `C' is a class which contains a definition for a function
          `f()', and `x' is an instance of `C', calling `x.f(1)' is
          equivalent to calling `C.f(x, 1)'.

          When an instance method object is derived from a class method
          object, the "class instance" stored in `__self__' will
          actually be the class itself, so that calling either `x.f(1)'
          or `C.f(1)' is equivalent to calling `f(C,1)' where `f' is
          the underlying function.

          Note that the transformation from function object to instance
          method object happens each time the attribute is retrieved
          from the instance.  In some cases, a fruitful optimization is
          to assign the attribute to a local variable and call that
          local variable. Also notice that this transformation only
          happens for user-defined functions; other callable objects
          (and all non-callable objects) are retrieved without
          transformation.  It is also important to note that
          user-defined functions which are attributes of a class
          instance are not converted to bound methods; this _only_
          happens when the function is an attribute of the class.

    Generator functions
          A function or method which uses the *note yield: 78.
          statement (see section *note The yield statement: 78.) is
          called a _generator function_.  Such a function, when called,
          always returns an iterator object which can be used to
          execute the body of the function:  calling the iterator's
          `__next__()' method will cause the function to execute until
          it provides a value using the *note yield: 78. statement.
          When the function executes a *note return: 79. statement or
          falls off the end, a `StopIteration' exception is raised and
          the iterator will have reached the end of the set of values
          to be returned.

    Built-in functions
          A built-in function object is a wrapper around a C function.
          Examples of built-in functions are `len()' and `math.sin()'
          (`math' is a standard built-in module). The number and type
          of the arguments are determined by the C function. Special
          read-only attributes: `__doc__' is the function's
          documentation string, or `None' if unavailable; `__name__' is
          the function's name; `__self__' is set to `None' (but see the
          next item); `__module__' is the name of the module the
          function was defined in or `None' if unavailable.

    Built-in methods
          This is really a different disguise of a built-in function,
          this time containing an object passed to the C function as an
          implicit extra argument.  An example of a built-in method is
          `alist.append()', assuming _alist_ is a list object. In this
          case, the special read-only attribute `__self__' is set to
          the object denoted by _alist_.

    Classes
          Classes are callable.  These objects normally act as
          factories for new instances of themselves, but variations are
          possible for class types that override *note __new__(): 7a.
          The arguments of the call are passed to *note __new__(): 7a.
          and, in the typical case, to *note __init__(): 7b. to
          initialize the new instance.

    Class Instances
          Instances of arbitrary classes can be made callable by
          defining a *note __call__(): 7c. method in their class.

Modules
     Modules are imported by the *note import: 30. statement (see
     section *note The import statement: 30.). A module object has a
     namespace implemented by a dictionary object (this is the
     dictionary referenced by the __globals__ attribute of functions
     defined in the module).  Attribute references are translated to
     lookups in this dictionary, e.g., `m.x' is equivalent to
     `m.__dict__["x"]'. A module object does not contain the code
     object used to initialize the module (since it isn't needed once
     the initialization is done).

     Attribute assignment updates the module's namespace dictionary,
     e.g., `m.x = 1' is equivalent to `m.__dict__["x"] = 1'.

     Special read-only attribute: `__dict__' is the module's namespace
     as a dictionary object.

     *CPython implementation detail:* Because of the way CPython clears
     module dictionaries, the module dictionary will be cleared when
     the module falls out of scope even if the dictionary still has
     live references.  To avoid this, copy the dictionary or keep the
     module around while using its dictionary directly.

     Predefined (writable) attributes: `__name__' is the module's name;
     `__doc__' is the module's documentation string, or `None' if
     unavailable; `__file__' is the pathname of the file from which the
     module was loaded, if it was loaded from a file. The `__file__'
     attribute is not present for C modules that are statically linked
     into the interpreter; for extension modules loaded dynamically
     from a shared library, it is the pathname of the shared library
     file.

Custom classes
     Custom class types are typically created by class definitions (see
     section *note Class definitions: 7d.).  A class has a namespace
     implemented by a dictionary object.  Class attribute references
     are translated to lookups in this dictionary, e.g., `C.x' is
     translated to `C.__dict__["x"]' (although there are a number of
     hooks which allow for other means of locating attributes). When
     the attribute name is not found there, the attribute search
     continues in the base classes.  This search of the base classes
     uses the C3 method resolution order which behaves correctly even
     in the presence of 'diamond' inheritance structures where there
     are multiple inheritance paths leading back to a common ancestor.
     Additional details on the C3 MRO used by Python can be found in the
     documentation accompanying the 2.3 release at
     <http://www.python.org/download/releases/2.3/mro/>.

     When a class attribute reference (for class `C', say) would yield a
     class method object, it is transformed into an instance method
     object whose `__self__' attributes is `C'.  When it would yield a
     static method object, it is transformed into the object wrapped by
     the static method object. See section *note Implementing
     Descriptors: 7e. for another way in which attributes retrieved
     from a class may differ from those actually contained in its
     `__dict__'.

     Class attribute assignments update the class's dictionary, never
     the dictionary of a base class.

     A class object can be called (see above) to yield a class instance
     (see below).

     Special attributes: `__name__' is the class name; `__module__' is
     the module name in which the class was defined; `__dict__' is the
     dictionary containing the class's namespace; `__bases__' is a tuple
     (possibly empty or a singleton) containing the base classes, in
     the order of their occurrence in the base class list; `__doc__' is
     the class's documentation string, or None if undefined.

Class instances
     A class instance is created by calling a class object (see above).
     A class instance has a namespace implemented as a dictionary which
     is the first place in which attribute references are searched.
     When an attribute is not found there, and the instance's class has
     an attribute by that name, the search continues with the class
     attributes.  If a class attribute is found that is a user-defined
     function object, it is transformed into an instance method object
     whose `__self__' attribute is the instance.  Static method and
     class method objects are also transformed; see above under
     "Classes".  See section *note Implementing Descriptors: 7e. for
     another way in which attributes of a class retrieved via its
     instances may differ from the objects actually stored in the
     class's `__dict__'.  If no class attribute is found, and the
     object's class has a *note __getattr__(): 7f. method, that is
     called to satisfy the lookup.

     Attribute assignments and deletions update the instance's
     dictionary, never a class's dictionary.  If the class has a *note
     __setattr__(): 80. or *note __delattr__(): 81. method, this is
     called instead of updating the instance dictionary directly.

     Class instances can pretend to be numbers, sequences, or mappings
     if they have methods with certain special names.  See section
     *note Special method names: 31.

     Special attributes: `__dict__' is the attribute dictionary;
     `__class__' is the instance's class.

I/O objects (also known as file objects)
     A _file object_ represents an open file.  Various shortcuts are
     available to create file objects: the `open()' built-in function,
     and also `os.popen()', `os.fdopen()', and the `makefile()' method
     of socket objects (and perhaps by other functions or methods
     provided by extension modules).

     The objects `sys.stdin', `sys.stdout' and `sys.stderr' are
     initialized to file objects corresponding to the interpreter's
     standard input, output and error streams; they are all open in
     text mode and therefore follow the interface defined by the
     `io.TextIOBase' abstract class.

Internal types
     A few types used internally by the interpreter are exposed to the
     user. Their definitions may change with future versions of the
     interpreter, but they are mentioned here for completeness.

    Code objects
          Code objects represent _byte-compiled_ executable Python
          code, or _bytecode_.  The difference between a code object
          and a function object is that the function object contains an
          explicit reference to the function's globals (the module in
          which it was defined), while a code object contains no
          context; also the default argument values are stored in the
          function object, not in the code object (because they
          represent values calculated at run-time).  Unlike function
          objects, code objects are immutable and contain no references
          (directly or indirectly) to mutable objects.

          Special read-only attributes: `co_name' gives the function
          name; `co_argcount' is the number of positional arguments
          (including arguments with default values); `co_nlocals' is
          the number of local variables used by the function (including
          arguments); `co_varnames' is a tuple containing the names of
          the local variables (starting with the argument names);
          `co_cellvars' is a tuple containing the names of local
          variables that are referenced by nested functions;
          `co_freevars' is a tuple containing the names of free
          variables; `co_code' is a string representing the sequence of
          bytecode instructions; `co_consts' is a tuple containing the
          literals used by the bytecode; `co_names' is a tuple
          containing the names used by the bytecode; `co_filename' is
          the filename from which the code was compiled;
          `co_firstlineno' is the first line number of the function;
          `co_lnotab' is a string encoding the mapping from bytecode
          offsets to line numbers (for details see the source code of
          the interpreter); `co_stacksize' is the required stack size
          (including local variables); `co_flags' is an integer
          encoding a number of flags for the interpreter.

          The following flag bits are defined for `co_flags': bit
          `0x04' is set if the function uses the `*arguments' syntax to
          accept an arbitrary number of positional arguments; bit
          `0x08' is set if the function uses the `**keywords' syntax to
          accept arbitrary keyword arguments; bit `0x20' is set if the
          function is a generator.

          Future feature declarations (`from __future__ import
          division') also use bits in `co_flags' to indicate whether a
          code object was compiled with a particular feature enabled:
          bit `0x2000' is set if the function was compiled with future
          division enabled; bits `0x10' and `0x1000' were used in
          earlier versions of Python.

          Other bits in `co_flags' are reserved for internal use.

          If a code object represents a function, the first item in
          `co_consts' is the documentation string of the function, or
          `None' if undefined.

    Frame objects
          Frame objects represent execution frames.  They may occur in
          traceback objects (see below).

          Special read-only attributes: `f_back' is to the previous
          stack frame (towards the caller), or `None' if this is the
          bottom stack frame; `f_code' is the code object being
          executed in this frame; `f_locals' is the dictionary used to
          look up local variables; `f_globals' is used for global
          variables; `f_builtins' is used for built-in (intrinsic)
          names; `f_lasti' gives the precise instruction (this is an
          index into the bytecode string of the code object).

          Special writable attributes: `f_trace', if not `None', is a
          function called at the start of each source code line (this
          is used by the debugger); `f_lineno' is the current line
          number of the frame -- writing to this from within a trace
          function jumps to the given line (only for the bottom-most
          frame).  A debugger can implement a Jump command (aka Set
          Next Statement) by writing to f_lineno.

    Traceback objects
          Traceback objects represent a stack trace of an exception.  A
          traceback object is created when an exception occurs.  When
          the search for an exception handler unwinds the execution
          stack, at each unwound level a traceback object is inserted
          in front of the current traceback.  When an exception handler
          is entered, the stack trace is made available to the program.
          (See section *note The try statement: 6e.) It is accessible
          as the third item of the tuple returned by `sys.exc_info()'.
          When the program contains no suitable handler, the stack
          trace is written (nicely formatted) to the standard error
          stream; if the interpreter is interactive, it is also made
          available to the user as `sys.last_traceback'.

          Special read-only attributes: `tb_next' is the next level in
          the stack trace (towards the frame where the exception
          occurred), or `None' if there is no next level; `tb_frame'
          points to the execution frame of the current level;
          `tb_lineno' gives the line number where the exception
          occurred; `tb_lasti' indicates the precise instruction.  The
          line number and last instruction in the traceback may differ
          from the line number of its frame object if the exception
          occurred in a *note try: 6e. statement with no matching except
          clause or with a finally clause.

    Slice objects
          Slice objects are used to represent slices for *note
          __getitem__(): 83.  methods.  They are also created by the
          built-in `slice()' function.

          Special read-only attributes: `start' is the lower bound;
          `stop' is the upper bound; `step' is the step value; each is
          `None' if omitted.  These attributes can have any type.

          Slice objects support one method:

           -- Method: slice.indices (self, length)
               This method takes a single integer argument _length_ and
               computes information about the slice that the slice
               object would describe if applied to a sequence of
               _length_ items.  It returns a tuple of three integers;
               respectively these are the _start_ and _stop_ indices
               and the _step_ or stride length of the slice. Missing or
               out-of-bounds indices are handled in a manner consistent
               with regular slices.

    Static method objects
          Static method objects provide a way of defeating the
          transformation of function objects to method objects
          described above. A static method object is a wrapper around
          any other object, usually a user-defined method object. When
          a static method object is retrieved from a class or a class
          instance, the object actually returned is the wrapped object,
          which is not subject to any further transformation. Static
          method objects are not themselves callable, although the
          objects they wrap usually are. Static method objects are
          created by the built-in `staticmethod()' constructor.

    Class method objects
          A class method object, like a static method object, is a
          wrapper around another object that alters the way in which
          that object is retrieved from classes and class instances.
          The behaviour of class method objects upon such retrieval is
          described above, under "User-defined methods". Class method
          objects are created by the built-in `classmethod()'
          constructor.


File: python-reference-3.2.2.info,  Node: Special method names,  Prev: The standard type hierarchy,  Up: Data model

3.3 Special method names
========================

A class can implement certain operations that are invoked by special
syntax (such as arithmetic operations or subscripting and slicing) by
defining methods with special names. This is Python's approach to
_operator overloading_, allowing classes to define their own behavior
with respect to language operators.  For instance, if a class defines a
method named *note __getitem__(): 83, and `x' is an instance of this
class, then `x[i]' is roughly equivalent to `type(x).__getitem__(x,
i)'.  Except where mentioned, attempts to execute an operation raise an
exception when no appropriate method is defined (typically
`AttributeError' or `TypeError').

  When implementing a class that emulates any built-in type, it is
important that the emulation only be implemented to the degree that it
makes sense for the object being modelled.  For example, some sequences
may work well with retrieval of individual elements, but extracting a
slice may not make sense.  (One example of this is the `NodeList'
interface in the W3C's Document Object Model.)

* Menu:

* Basic customization::
* Customizing attribute access::
* Customizing class creation::
* Customizing instance and subclass checks::
* Emulating callable objects::
* Emulating container types::
* Emulating numeric types::
* With Statement Context Managers::
* Special method lookup::


File: python-reference-3.2.2.info,  Node: Basic customization,  Next: Customizing attribute access,  Up: Special method names

3.3.1 Basic customization
-------------------------

 -- Method: object.__new__ (cls[, ...])
     Called to create a new instance of class _cls_.  *note __new__():
     7a. is a static method (special-cased so you need not declare it
     as such) that takes the class of which an instance was requested
     as its first argument.  The remaining arguments are those passed
     to the object constructor expression (the call to the class).  The
     return value of *note __new__(): 7a. should be the new object
     instance (usually an instance of _cls_).

     Typical implementations create a new instance of the class by
     invoking the superclass's *note __new__(): 7a. method using
     `super(currentclass, cls).__new__(cls[, ...])' with appropriate
     arguments and then modifying the newly-created instance as
     necessary before returning it.

     If *note __new__(): 7a. returns an instance of _cls_, then the new
     instance's *note __init__(): 7b. method will be invoked like
     `__init__(self[, ...])', where _self_ is the new instance and the
     remaining arguments are the same as were passed to *note
     __new__(): 7a.

     If *note __new__(): 7a. does not return an instance of _cls_, then
     the new instance's *note __init__(): 7b. method will not be
     invoked.

     *note __new__(): 7a. is intended mainly to allow subclasses of
     immutable types (like int, str, or tuple) to customize instance
     creation.  It is also commonly overridden in custom metaclasses in
     order to customize class creation.

 -- Method: object.__init__ (self[, ...])
     Called when the instance is created.  The arguments are those
     passed to the class constructor expression.  If a base class has
     an *note __init__(): 7b. method, the derived class's *note
     __init__(): 7b. method, if any, must explicitly call it to ensure
     proper initialization of the base class part of the instance; for
     example: `BaseClass.__init__(self, [args...])'.  As a special
     constraint on constructors, no value may be returned; doing so
     will cause a `TypeError' to be raised at runtime.

 -- Method: object.__del__ (self)
     Called when the instance is about to be destroyed.  This is also
     called a destructor.  If a base class has a *note __del__(): 88.
     method, the derived class's *note __del__(): 88. method, if any,
     must explicitly call it to ensure proper deletion of the base
     class part of the instance.  Note that it is possible (though not
     recommended!) for the *note __del__(): 88. method to postpone
     destruction of the instance by creating a new reference to it.  It
     may then be called at a later time when this new reference is
     deleted.  It is not guaranteed that *note __del__(): 88. methods
     are called for objects that still exist when the interpreter exits.

          Note: `del x' doesn't directly call `x.__del__()' -- the
          former decrements the reference count for `x' by one, and the
          latter is only called when `x''s reference count reaches
          zero.  Some common situations that may prevent the reference
          count of an object from going to zero include: circular
          references between objects (e.g., a doubly-linked list or a
          tree data structure with parent and child pointers); a
          reference to the object on the stack frame of a function that
          caught an exception (the traceback stored in
          `sys.exc_info()[2]' keeps the stack frame alive); or a
          reference to the object on the stack frame that raised an
          unhandled exception in interactive mode (the traceback stored
          in `sys.last_traceback' keeps the stack frame alive).  The
          first situation can only be remedied by explicitly breaking
          the cycles; the latter two situations can be resolved by
          storing `None' in `sys.last_traceback'.  Circular references
          which are garbage are detected when the option cycle detector
          is enabled (it's on by default), but can only be cleaned up if
          there are no Python- level *note __del__(): 88. methods
          involved. Refer to the documentation for the `gc' module for
          more information about how *note __del__(): 88. methods are
          handled by the cycle detector, particularly the description
          of the `garbage' value.

          Warning: Due to the precarious circumstances under which
          *note __del__(): 88. methods are invoked, exceptions that
          occur during their execution are ignored, and a warning is
          printed to `sys.stderr' instead.  Also, when *note __del__():
          88. is invoked in response to a module being deleted (e.g.,
          when execution of the program is done), other globals
          referenced by the *note __del__(): 88. method may already have
          been deleted or in the process of being torn down (e.g. the
          import machinery shutting down).  For this reason, *note
          __del__(): 88. methods should do the absolute minimum needed
          to maintain external invariants.  Starting with version 1.5,
          Python guarantees that globals whose name begins with a
          single underscore are deleted from their module before other
          globals are deleted; if no other references to such globals
          exist, this may help in assuring that imported modules are
          still available at the time when the *note __del__(): 88.
          method is called.

 -- Method: object.__repr__ (self)
     Called by the `repr()' built-in function to compute the "official"
     string representation of an object.  If at all possible, this
     should look like a valid Python expression that could be used to
     recreate an object with the same value (given an appropriate
     environment).  If this is not possible, a string of the form
     `<...some useful description...>' should be returned.  The return
     value must be a string object. If a class defines *note
     __repr__(): 89.  but not *note __str__(): 8a, then *note
     __repr__(): 89. is also used when an "informal" string
     representation of instances of that class is required.

     This is typically used for debugging, so it is important that the
     representation is information-rich and unambiguous.

 -- Method: object.__str__ (self)
     Called by the `str()' built-in function and by the `print()'
     function to compute the "informal" string representation of an
     object.  This differs from *note __repr__(): 89. in that it does
     not have to be a valid Python expression: a more convenient or
     concise representation may be used instead.  The return value must
     be a string object.


 -- Method: object.__format__ (self, format_spec)
     Called by the `format()' built-in function (and by extension, the
     `format()' method of class `str') to produce a "formatted" string
     representation of an object. The `format_spec' argument is a
     string that contains a description of the formatting options
     desired.  The interpretation of the `format_spec' argument is up
     to the type implementing *note __format__(): 8b, however most
     classes will either delegate formatting to one of the built-in
     types, or use a similar formatting option syntax.

     See _formatspec_ for a description of the standard formatting
     syntax.

     The return value must be a string object.
  
 -- Method: object.__lt__ (self, other)
 -- Method: object.__le__ (self, other)
 -- Method: object.__eq__ (self, other)
 -- Method: object.__ne__ (self, other)
 -- Method: object.__gt__ (self, other)
 -- Method: object.__ge__ (self, other)
     These are the so-called "rich comparison" methods. The
     correspondence between operator symbols and method names is as
     follows: `x<y' calls `x.__lt__(y)', `x<=y' calls `x.__le__(y)',
     `x==y' calls `x.__eq__(y)', `x!=y' calls `x.__ne__(y)', `x>y'
     calls `x.__gt__(y)', and `x>=y' calls `x.__ge__(y)'.

     A rich comparison method may return the singleton `NotImplemented'
     if it does not implement the operation for a given pair of
     arguments. By convention, `False' and `True' are returned for a
     successful comparison. However, these methods can return any
     value, so if the comparison operator is used in a Boolean context
     (e.g., in the condition of an `if' statement), Python will call
     `bool()' on the value to determine if the result is true or false.

     There are no implied relationships among the comparison operators.
     The truth of `x==y' does not imply that `x!=y' is false.
     Accordingly, when defining *note __eq__(): 8f, one should also
     define *note __ne__(): 90. so that the operators will behave as
     expected.  See the paragraph on *note __hash__(): 93. for some
     important notes on creating _hashable_ objects which support
     custom comparison operations and are usable as dictionary keys.

     There are no swapped-argument versions of these methods (to be
     used when the left argument does not support the operation but the
     right argument does); rather, *note __lt__(): 8d. and *note
     __gt__(): 91. are each other's reflection, *note __le__(): 8e. and
     *note __ge__(): 92. are each other's reflection, and *note
     __eq__(): 8f. and *note __ne__(): 90. are their own reflection.

     Arguments to rich comparison methods are never coerced.

     To automatically generate ordering operations from a single root
     operation, see `functools.total_ordering()'.

 -- Method: object.__hash__ (self)
     Called by built-in function `hash()' and for operations on members
     of hashed collections including `set', `frozenset', and `dict'.
     *note __hash__(): 93. should return an integer.  The only required
     property is that objects which compare equal have the same hash
     value; it is advised to somehow mix together (e.g. using exclusive
     or) the hash values for the components of the object that also
     play a part in comparison of objects.

     If a class does not define an *note __eq__(): 8f. method it should
     not define a *note __hash__(): 93. operation either; if it defines
     *note __eq__(): 8f. but not *note __hash__(): 93, its instances
     will not be usable as items in hashable collections.  If a class
     defines mutable objects and implements an *note __eq__(): 8f.
     method, it should not implement *note __hash__(): 93, since the
     implementation of hashable collections requires that a key's hash
     value is immutable (if the object's hash value changes, it will be
     in the wrong hash bucket).

     User-defined classes have *note __eq__(): 8f. and *note
     __hash__(): 93. methods by default; with them, all objects compare
     unequal (except with themselves) and `x.__hash__()' returns
     `id(x)'.

     Classes which inherit a *note __hash__(): 93. method from a parent
     class but change the meaning of *note __eq__(): 8f. such that the
     hash value returned is no longer appropriate (e.g. by switching to
     a value-based concept of equality instead of the default identity
     based equality) can explicitly flag themselves as being unhashable
     by setting `__hash__ = None' in the class definition. Doing so
     means that not only will instances of the class raise an
     appropriate `TypeError' when a program attempts to retrieve their
     hash value, but they will also be correctly identified as
     unhashable when checking `isinstance(obj, collections.Hashable)'
     (unlike classes which define their own *note __hash__(): 93. to
     explicitly raise `TypeError').

     If a class that overrides *note __eq__(): 8f. needs to retain the
     implementation of *note __hash__(): 93. from a parent class, the
     interpreter must be told this explicitly by setting `__hash__ =
     <ParentClass>.__hash__'. Otherwise the inheritance of *note
     __hash__(): 93. will be blocked, just as if *note __hash__: 93.
     had been explicitly set to `None'.

 -- Method: object.__bool__ (self)
     Called to implement truth value testing and the built-in operation
     `bool()'; should return `False' or `True'.  When this method is not
     defined, *note __len__(): 95. is called, if it is defined, and the
     object is considered true if its result is nonzero.  If a class
     defines neither *note __len__(): 95. nor *note __bool__(): 94, all
     its instances are considered true.


File: python-reference-3.2.2.info,  Node: Customizing attribute access,  Next: Customizing class creation,  Prev: Basic customization,  Up: Special method names

3.3.2 Customizing attribute access
----------------------------------

The following methods can be defined to customize the meaning of
attribute access (use of, assignment to, or deletion of `x.name') for
class instances.

 -- Method: object.__getattr__ (self, name)
     Called when an attribute lookup has not found the attribute in the
     usual places (i.e. it is not an instance attribute nor is it found
     in the class tree for `self').  `name' is the attribute name. This
     method should return the (computed) attribute value or raise an
     `AttributeError' exception.

     Note that if the attribute is found through the normal mechanism,
     *note __getattr__(): 7f. is not called.  (This is an intentional
     asymmetry between *note __getattr__(): 7f. and *note
     __setattr__(): 80.) This is done both for efficiency reasons and
     because otherwise *note __getattr__(): 7f. would have no way to
     access other attributes of the instance.  Note that at least for
     instance variables, you can fake total control by not inserting
     any values in the instance attribute dictionary (but instead
     inserting them in another object).  See the *note
     __getattribute__(): 98. method below for a way to actually get
     total control over attribute access.

 -- Method: object.__getattribute__ (self, name)
     Called unconditionally to implement attribute accesses for
     instances of the class. If the class also defines *note
     __getattr__(): 7f, the latter will not be called unless *note
     __getattribute__(): 98. either calls it explicitly or raises an
     `AttributeError'. This method should return the (computed)
     attribute value or raise an `AttributeError' exception. In order
     to avoid infinite recursion in this method, its implementation
     should always call the base class method with the same name to
     access any attributes it needs, for example,
     `object.__getattribute__(self, name)'.

          Note: This method may still be bypassed when looking up
          special methods as the result of implicit invocation via
          language syntax or built-in functions.  See *note Special
          method lookup: 99.

 -- Method: object.__setattr__ (self, name, value)
     Called when an attribute assignment is attempted.  This is called
     instead of the normal mechanism (i.e. store the value in the
     instance dictionary).  _name_ is the attribute name, _value_ is
     the value to be assigned to it.

     If *note __setattr__(): 80. wants to assign to an instance
     attribute, it should call the base class method with the same
     name, for example, `object.__setattr__(self, name, value)'.

 -- Method: object.__delattr__ (self, name)
     Like *note __setattr__(): 80. but for attribute deletion instead
     of assignment.  This should only be implemented if `del obj.name'
     is meaningful for the object.

 -- Method: object.__dir__ (self)
     Called when `dir()' is called on the object.  A list must be
     returned.

* Menu:

* Implementing Descriptors::
* Invoking Descriptors::
* __slots__::


File: python-reference-3.2.2.info,  Node: Implementing Descriptors,  Next: Invoking Descriptors,  Up: Customizing attribute access

3.3.2.1 Implementing Descriptors
................................

The following methods only apply when an instance of the class
containing the method (a so-called _descriptor_ class) appears in an
_owner_ class (the descriptor must be in either the owner's class
dictionary or in the class dictionary for one of its parents).  In the
examples below, "the attribute" refers to the attribute whose name is
the key of the property in the owner class' `__dict__'.

 -- Method: object.__get__ (self, instance, owner)
     Called to get the attribute of the owner class (class attribute
     access) or of an instance of that class (instance attribute
     access). _owner_ is always the owner class, while _instance_ is
     the instance that the attribute was accessed through, or `None'
     when the attribute is accessed through the _owner_.  This method
     should return the (computed) attribute value or raise an
     `AttributeError' exception.

 -- Method: object.__set__ (self, instance, value)
     Called to set the attribute on an instance _instance_ of the owner
     class to a new value, _value_.

 -- Method: object.__delete__ (self, instance)
     Called to delete the attribute on an instance _instance_ of the
     owner class.


File: python-reference-3.2.2.info,  Node: Invoking Descriptors,  Next: __slots__,  Prev: Implementing Descriptors,  Up: Customizing attribute access

3.3.2.2 Invoking Descriptors
............................

In general, a descriptor is an object attribute with "binding
behavior", one whose attribute access has been overridden by methods in
the descriptor protocol:  *note __get__(): 9c, *note __set__(): 9d, and
*note __delete__(): 9e. If any of those methods are defined for an
object, it is said to be a descriptor.

  The default behavior for attribute access is to get, set, or delete
the attribute from an object's dictionary. For instance, `a.x' has a
lookup chain starting with `a.__dict__['x']', then
`type(a).__dict__['x']', and continuing through the base classes of
`type(a)' excluding metaclasses.

  However, if the looked-up value is an object defining one of the
descriptor methods, then Python may override the default behavior and
invoke the descriptor method instead.  Where this occurs in the
precedence chain depends on which descriptor methods were defined and
how they were called.

  The starting point for descriptor invocation is a binding, `a.x'. How
the arguments are assembled depends on `a':

Direct Call
     The simplest and least common call is when user code directly
     invokes a descriptor method:    `x.__get__(a)'.

Instance Binding
     If binding to an object instance, `a.x' is transformed into the
     call: `type(a).__dict__['x'].__get__(a, type(a))'.

Class Binding
     If binding to a class, `A.x' is transformed into the call:
     `A.__dict__['x'].__get__(None, A)'.

Super Binding
     If `a' is an instance of `super', then the binding `super(B,
     obj).m()' searches `obj.__class__.__mro__' for the base class `A'
     immediately preceding `B' and then invokes the descriptor with the
     call: `A.__dict__['m'].__get__(obj, obj.__class__)'.

  For instance bindings, the precedence of descriptor invocation
depends on the which descriptor methods are defined.  A descriptor can
define any combination of *note __get__(): 9c, *note __set__(): 9d. and
*note __delete__(): 9e.  If it does not define *note __get__(): 9c,
then accessing the attribute will return the descriptor object itself
unless there is a value in the object's instance dictionary.  If the
descriptor defines *note __set__(): 9d. and/or *note __delete__(): 9e,
it is a data descriptor; if it defines neither, it is a non-data
descriptor.  Normally, data descriptors define both *note __get__():
9c. and *note __set__(): 9d, while non-data descriptors have just the
*note __get__(): 9c. method.  Data descriptors with *note __set__():
9d. and *note __get__(): 9c. defined always override a redefinition in
an instance dictionary.  In contrast, non-data descriptors can be
overridden by instances.

  Python methods (including `staticmethod()' and `classmethod()') are
implemented as non-data descriptors.  Accordingly, instances can
redefine and override methods.  This allows individual instances to
acquire behaviors that differ from other instances of the same class.

  The `property()' function is implemented as a data descriptor.
Accordingly, instances cannot override the behavior of a property.


File: python-reference-3.2.2.info,  Node: __slots__,  Prev: Invoking Descriptors,  Up: Customizing attribute access

3.3.2.3 __slots__
.................

By default, instances of classes have a dictionary for attribute
storage.  This wastes space for objects having very few instance
variables.  The space consumption can become acute when creating large
numbers of instances.

  The default can be overridden by defining ___slots___ in a class
definition.  The ___slots___ declaration takes a sequence of instance
variables and reserves just enough space in each instance to hold a
value for each variable.  Space is saved because ___dict___ is not
created for each instance.

 -- Data: object.__slots__
     This class variable can be assigned a string, iterable, or
     sequence of strings with variable names used by instances.  If
     defined in a class, ___slots___ reserves space for the declared
     variables and prevents the automatic creation of ___dict___ and
     ___weakref___ for each instance.

* Menu:

* Notes on using __slots__::


File: python-reference-3.2.2.info,  Node: Notes on using __slots__,  Up: __slots__

3.3.2.4 Notes on using ___slots___
..................................

   * When inheriting from a class without ___slots___, the ___dict___
     attribute of that class will always be accessible, so a
     ___slots___ definition in the subclass is meaningless.

   * Without a ___dict___ variable, instances cannot be assigned new
     variables not listed in the ___slots___ definition.  Attempts to
     assign to an unlisted variable name raises `AttributeError'. If
     dynamic assignment of new variables is desired, then add
     `'__dict__'' to the sequence of strings in the ___slots___
     declaration.

   * Without a ___weakref___ variable for each instance, classes
     defining ___slots___ do not support weak references to its
     instances. If weak reference support is needed, then add
     `'__weakref__'' to the sequence of strings in the ___slots___
     declaration.

   * ___slots___ are implemented at the class level by creating
     descriptors (*note Implementing Descriptors: 7e.) for each
     variable name.  As a result, class attributes cannot be used to
     set default values for instance variables defined by ___slots___;
     otherwise, the class attribute would overwrite the descriptor
     assignment.

   * The action of a ___slots___ declaration is limited to the class
     where it is defined.  As a result, subclasses will have a
     ___dict___ unless they also define ___slots___ (which must only
     contain names of any _additional_ slots).

   * If a class defines a slot also defined in a base class, the
     instance variable defined by the base class slot is inaccessible
     (except by retrieving its descriptor directly from the base
     class). This renders the meaning of the program undefined.  In the
     future, a check may be added to prevent this.

   * Nonempty ___slots___ does not work for classes derived from
     "variable-length" built-in types such as `int', `str' and `tuple'.

   * Any non-string iterable may be assigned to ___slots___. Mappings
     may also be used; however, in the future, special meaning may be
     assigned to the values corresponding to each key.

   * ___class___ assignment works only if both classes have the same
     ___slots___.


File: python-reference-3.2.2.info,  Node: Customizing class creation,  Next: Customizing instance and subclass checks,  Prev: Customizing attribute access,  Up: Special method names

3.3.3 Customizing class creation
--------------------------------

By default, classes are constructed using `type()'. A class definition
is read into a separate namespace and the value of class name is bound
to the result of `type(name, bases, dict)'.

  When the class definition is read, if a callable `metaclass' keyword
argument is passed after the bases in the class definition, the
callable given will be called instead of `type()'.  If other keyword
arguments are passed, they will also be passed to the metaclass.  This
allows classes or functions to be written which monitor or alter the
class creation process:

   * Modifying the class dictionary prior to the class being created.

   * Returning an instance of another class - essentially performing
     the role of a factory function.

  These steps will have to be performed in the metaclass's *note
__new__(): 7a. method - `type.__new__()' can then be called from this
method to create a class with different properties.  This example adds
a new element to the class dictionary before creating the class:

    class metacls(type):
        def __new__(mcs, name, bases, dict):
            dict['foo'] = 'metacls was here'
            return type.__new__(mcs, name, bases, dict)

You can of course also override other class methods (or add new
methods); for example defining a custom *note __call__(): 7c. method in
the metaclass allows custom behavior when the class is called, e.g. not
always creating a new instance.

  If the metaclass has a `__prepare__()' attribute (usually implemented
as a class or static method), it is called before the class body is
evaluated with the name of the class and a tuple of its bases for
arguments.  It should return an object that supports the mapping
interface that will be used to store the namespace of the class.  The
default is a plain dictionary.  This could be used, for example, to
keep track of the order that class attributes are declared in by
returning an ordered dictionary.

  The appropriate metaclass is determined by the following precedence
rules:

   * If the `metaclass' keyword argument is passed with the bases, it
     is used.

   * Otherwise, if there is at least one base class, its metaclass is
     used.

   * Otherwise, the default metaclass (`type') is used.

  The potential uses for metaclasses are boundless. Some ideas that
have been explored including logging, interface checking, automatic
delegation, automatic property creation, proxies, frameworks, and
automatic resource locking/synchronization.

  Here is an example of a metaclass that uses an
`collections.OrderedDict' to remember the order that class members were
defined:

    class OrderedClass(type):

         @classmethod
         def __prepare__(metacls, name, bases, **kwds):
            return collections.OrderedDict()

         def __new__(cls, name, bases, classdict):
            result = type.__new__(cls, name, bases, dict(classdict))
            result.members = tuple(classdict)
            return result

    class A(metaclass=OrderedClass):
        def one(self): pass
        def two(self): pass
        def three(self): pass
        def four(self): pass

    >>> A.members
    ('__module__', 'one', 'two', 'three', 'four')

When the class definition for _A_ gets executed, the process begins with
calling the metaclass's `__prepare__()' method which returns an empty
`collections.OrderedDict'.  That mapping records the methods and
attributes of _A_ as they are defined within the body of the class
statement.  Once those definitions are executed, the ordered dictionary
is fully populated and the metaclass's *note __new__(): 7a. method gets
invoked.  That method builds the new type and it saves the ordered
dictionary keys in an attribute called `members'.


File: python-reference-3.2.2.info,  Node: Customizing instance and subclass checks,  Next: Emulating callable objects,  Prev: Customizing class creation,  Up: Special method names

3.3.4 Customizing instance and subclass checks
----------------------------------------------

The following methods are used to override the default behavior of the
`isinstance()' and `issubclass()' built-in functions.

  In particular, the metaclass `abc.ABCMeta' implements these methods in
order to allow the addition of Abstract Base Classes (ABCs) as "virtual
base classes" to any class or type (including built-in types),
including other ABCs.

 -- Method: class.__instancecheck__ (self, instance)
     Return true if _instance_ should be considered a (direct or
     indirect) instance of _class_. If defined, called to implement
     `isinstance(instance, class)'.

 -- Method: class.__subclasscheck__ (self, subclass)
     Return true if _subclass_ should be considered a (direct or
     indirect) subclass of _class_.  If defined, called to implement
     `issubclass(subclass, class)'.

  Note that these methods are looked up on the type (metaclass) of a
class.  They cannot be defined as class methods in the actual class.
This is consistent with the lookup of special methods that are called
on instances, only in this case the instance is itself a class.

See also
........

PEP 3119(1) - Introducing Abstract Base Classes
     Includes the specification for customizing `isinstance()' and
     `issubclass()' behavior through `__instancecheck__()' and
     `__subclasscheck__()', with motivation for this functionality in
     the context of adding Abstract Base Classes (see the `abc' module)
     to the language.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3119


File: python-reference-3.2.2.info,  Node: Emulating callable objects,  Next: Emulating container types,  Prev: Customizing instance and subclass checks,  Up: Special method names

3.3.5 Emulating callable objects
--------------------------------

 -- Method: object.__call__ (self[, args...])
     Called when the instance is "called" as a function; if this method
     is defined, `x(arg1, arg2, ...)' is a shorthand for
     `x.__call__(arg1, arg2, ...)'.


File: python-reference-3.2.2.info,  Node: Emulating container types,  Next: Emulating numeric types,  Prev: Emulating callable objects,  Up: Special method names

3.3.6 Emulating container types
-------------------------------

The following methods can be defined to implement container objects.
Containers usually are sequences (such as lists or tuples) or mappings
(like dictionaries), but can represent other containers as well.  The
first set of methods is used either to emulate a sequence or to emulate
a mapping; the difference is that for a sequence, the allowable keys
should be the integers _k_ for which `0 <= k < N' where _N_ is the
length of the sequence, or slice objects, which define a range of
items.  It is also recommended that mappings provide the methods
`keys()', `values()', `items()', `get()', `clear()', `setdefault()',
`pop()', `popitem()', `copy()', and `update()' behaving similar to
those for Python's standard dictionary objects.  The `collections'
module provides a `MutableMapping' abstract base class to help create
those methods from a base set of *note __getitem__(): 83, *note
__setitem__(): ae, *note __delitem__(): af, and `keys()'.  Mutable
sequences should provide methods `append()', `count()', `index()',
`extend()', `insert()', `pop()', `remove()', `reverse()' and `sort()',
like Python standard list objects.  Finally, sequence types should
implement addition (meaning concatenation) and multiplication (meaning
repetition) by defining the methods *note __add__(): b0, *note
__radd__(): b1, *note __iadd__(): b2, *note __mul__(): b3, *note
__rmul__(): b4. and *note __imul__(): b5. described below; they should
not define other numerical operators.  It is recommended that both
mappings and sequences implement the *note __contains__(): b6. method
to allow efficient use of the `in' operator; for mappings, `in' should
search the mapping's keys; for sequences, it should search through the
values.  It is further recommended that both mappings and sequences
implement the *note __iter__(): b7. method to allow efficient iteration
through the container; for mappings, *note __iter__(): b7. should be
the same as `keys()'; for sequences, it should iterate through the
values.

 -- Method: object.__len__ (self)
     Called to implement the built-in function `len()'.  Should return
     the length of the object, an integer `>=' 0.  Also, an object that
     doesn't define a *note __bool__(): 94. method and whose *note
     __len__(): 95. method returns zero is considered to be false in a
     Boolean context.

     Note: Slicing is done exclusively with the following three
     methods.  A call like

         a[1:2] = b

     is translated to

         a[slice(1, 2, None)] = b

     and so forth.  Missing slice items are always filled in with
     `None'.

 -- Method: object.__getitem__ (self, key)
     Called to implement evaluation of `self[key]'. For sequence types,
     the accepted keys should be integers and slice objects.  Note that
     the special interpretation of negative indexes (if the class
     wishes to emulate a sequence type) is up to the *note
     __getitem__(): 83. method. If _key_ is of an inappropriate type,
     `TypeError' may be raised; if of a value outside the set of indexes
     for the sequence (after any special interpretation of negative
     values), `IndexError' should be raised. For mapping types, if
     _key_ is missing (not in the container), `KeyError' should be
     raised.

          Note: *note for: b8. loops expect that an `IndexError' will
          be raised for illegal indexes to allow proper detection of
          the end of the sequence.

 -- Method: object.__setitem__ (self, key, value)
     Called to implement assignment to `self[key]'.  Same note as for
     *note __getitem__(): 83.  This should only be implemented for
     mappings if the objects support changes to the values for keys, or
     if new keys can be added, or for sequences if elements can be
     replaced.  The same exceptions should be raised for improper _key_
     values as for the *note __getitem__(): 83. method.

 -- Method: object.__delitem__ (self, key)
     Called to implement deletion of `self[key]'.  Same note as for
     *note __getitem__(): 83.  This should only be implemented for
     mappings if the objects support removal of keys, or for sequences
     if elements can be removed from the sequence.  The same exceptions
     should be raised for improper _key_ values as for the *note
     __getitem__(): 83. method.

 -- Method: object.__iter__ (self)
     This method is called when an iterator is required for a
     container. This method should return a new iterator object that
     can iterate over all the objects in the container.  For mappings,
     it should iterate over the keys of the container, and should also
     be made available as the method `keys()'.

     Iterator objects also need to implement this method; they are
     required to return themselves.  For more information on iterator
     objects, see _typeiter_.

 -- Method: object.__reversed__ (self)
     Called (if present) by the `reversed()' built-in to implement
     reverse iteration.  It should return a new iterator object that
     iterates over all the objects in the container in reverse order.

     If the *note __reversed__(): b9. method is not provided, the
     `reversed()' built-in will fall back to using the sequence
     protocol (*note __len__(): 95. and *note __getitem__(): 83.).
     Objects that support the sequence protocol should only provide
     *note __reversed__(): b9. if they can provide an implementation
     that is more efficient than the one provided by `reversed()'.

  The membership test operators (*note in: ba. and *note not in: bb.)
are normally implemented as an iteration through a sequence.  However,
container objects can supply the following special method with a more
efficient implementation, which also does not require the object be a
sequence.

 -- Method: object.__contains__ (self, item)
     Called to implement membership test operators.  Should return true
     if _item_ is in _self_, false otherwise.  For mapping objects,
     this should consider the keys of the mapping rather than the
     values or the key-item pairs.

     For objects that don't define *note __contains__(): b6, the
     membership test first tries iteration via *note __iter__(): b7,
     then the old sequence iteration protocol via *note __getitem__():
     83, see *note this section in the language reference: bc.


File: python-reference-3.2.2.info,  Node: Emulating numeric types,  Next: With Statement Context Managers,  Prev: Emulating container types,  Up: Special method names

3.3.7 Emulating numeric types
-----------------------------

The following methods can be defined to emulate numeric objects. Methods
corresponding to operations that are not supported by the particular
kind of number implemented (e.g., bitwise operations for non-integral
numbers) should be left undefined.

 -- Method: object.__add__ (self, other)
 -- Method: object.__sub__ (self, other)
 -- Method: object.__mul__ (self, other)
 -- Method: object.__truediv__ (self, other)
 -- Method: object.__floordiv__ (self, other)
 -- Method: object.__mod__ (self, other)
 -- Method: object.__divmod__ (self, other)
 -- Method: object.__pow__ (self, other[, modulo])
 -- Method: object.__lshift__ (self, other)
 -- Method: object.__rshift__ (self, other)
 -- Method: object.__and__ (self, other)
 -- Method: object.__xor__ (self, other)
 -- Method: object.__or__ (self, other)
     These methods are called to implement the binary arithmetic
     operations (`+', `-', `*', `/', `//', `%', `divmod()', `pow()',
     `**', `<<', `>>', `&', `^', `|').  For instance, to evaluate the
     expression `x + y', where _x_ is an instance of a class that has
     an *note __add__(): b0.  method, `x.__add__(y)' is called.  The
     *note __divmod__(): c3. method should be the equivalent to using
     *note __floordiv__(): c1. and *note __mod__(): c2.; it should not
     be related to *note __truediv__(): c0.  Note that *note __pow__():
     c4. should be defined to accept an optional third argument if the
     ternary version of the built-in `pow()' function is to be
     supported.

     If one of those methods does not support the operation with the
     supplied arguments, it should return `NotImplemented'.

 -- Method: object.__radd__ (self, other)
 -- Method: object.__rsub__ (self, other)
 -- Method: object.__rmul__ (self, other)
 -- Method: object.__rtruediv__ (self, other)
 -- Method: object.__rfloordiv__ (self, other)
 -- Method: object.__rmod__ (self, other)
 -- Method: object.__rdivmod__ (self, other)
 -- Method: object.__rpow__ (self, other)
 -- Method: object.__rlshift__ (self, other)
 -- Method: object.__rrshift__ (self, other)
 -- Method: object.__rand__ (self, other)
 -- Method: object.__rxor__ (self, other)
 -- Method: object.__ror__ (self, other)
     These methods are called to implement the binary arithmetic
     operations (`+', `-', `*', `/', `//', `%', `divmod()', `pow()',
     `**', `<<', `>>', `&', `^', `|') with reflected (swapped) operands.
     These functions are only called if the left operand does not
     support the corresponding operation and the operands are of
     different types. (1)  For instance, to evaluate the expression `x
     - y', where _y_ is an instance of a class that has an *note
     __rsub__(): ca. method, `y.__rsub__(x)' is called if
     `x.__sub__(y)' returns _NotImplemented_.

     Note that ternary `pow()' will not try calling *note __rpow__():
     cf. (the coercion rules would become too complicated).

          Note: If the right operand's type is a subclass of the left
          operand's type and that subclass provides the reflected
          method for the operation, this method will be called before
          the left operand's non-reflected method.  This behavior allows
          subclasses to override their ancestors' operations.

 -- Method: object.__iadd__ (self, other)
 -- Method: object.__isub__ (self, other)
 -- Method: object.__imul__ (self, other)
 -- Method: object.__itruediv__ (self, other)
 -- Method: object.__ifloordiv__ (self, other)
 -- Method: object.__imod__ (self, other)
 -- Method: object.__ipow__ (self, other[, modulo])
 -- Method: object.__ilshift__ (self, other)
 -- Method: object.__irshift__ (self, other)
 -- Method: object.__iand__ (self, other)
 -- Method: object.__ixor__ (self, other)
 -- Method: object.__ior__ (self, other)
     These methods are called to implement the augmented arithmetic
     assignments (`+=', `-=', `*=', `/=', `//=', `%=', `**=', `<<=',
     `>>=', `&=', `^=', `|=').  These methods should attempt to do the
     operation in-place (modifying _self_) and return the result (which
     could be, but does not have to be, _self_).  If a specific method
     is not defined, the augmented assignment falls back to the normal
     methods.  For instance, to execute the statement `x += y', where
     _x_ is an instance of a class that has an *note __iadd__(): b2.
     method, `x.__iadd__(y)' is called.  If _x_ is an instance of a
     class that does not define a *note __iadd__(): b2. method,
     `x.__add__(y)' and `y.__radd__(x)' are considered, as with the
     evaluation of `x + y'.

 -- Method: object.__neg__ (self)
 -- Method: object.__pos__ (self)
 -- Method: object.__abs__ (self)
 -- Method: object.__invert__ (self)
     Called to implement the unary arithmetic operations (`-', `+',
     `abs()' and `~').

 -- Method: object.__complex__ (self)
 -- Method: object.__int__ (self)
 -- Method: object.__float__ (self)
 -- Method: object.__round__ (self[, n])
     Called to implement the built-in functions `complex()', `int()',
     `float()' and `round()'.  Should return a value of the appropriate
     type.

 -- Method: object.__index__ (self)
     Called to implement `operator.index()'.  Also called whenever
     Python needs an integer object (such as in slicing, or in the
     built-in `bin()', `hex()' and `oct()' functions). Must return an
     integer.

  ---------- Footnotes ----------

  (1) For operands of the same type, it is assumed that if the
non-reflected method (such as *note __add__(): b0.) fails the operation
is not supported, which is why the reflected method is not called.


File: python-reference-3.2.2.info,  Node: With Statement Context Managers,  Next: Special method lookup,  Prev: Emulating numeric types,  Up: Special method names

3.3.8 With Statement Context Managers
-------------------------------------

A _context manager_ is an object that defines the runtime context to be
established when executing a *note with: 71. statement. The context
manager handles the entry into, and the exit from, the desired runtime
context for the execution of the block of code.  Context managers are
normally invoked using the *note with: 71. statement (described in
section *note The with statement: 71.), but can also be used by
directly invoking their methods.

  Typical uses of context managers include saving and restoring various
kinds of global state, locking and unlocking resources, closing opened
files, etc.

  For more information on context managers, see _typecontextmanager_.

 -- Method: object.__enter__ (self)
     Enter the runtime context related to this object. The *note with:
     71. statement will bind this method's return value to the
     target(s) specified in the *note as: eb. clause of the statement,
     if any.

 -- Method: object.__exit__ (self, exc_type, exc_value, traceback)
     Exit the runtime context related to this object. The parameters
     describe the exception that caused the context to be exited. If
     the context was exited without an exception, all three arguments
     will be `None'.

     If an exception is supplied, and the method wishes to suppress the
     exception (i.e., prevent it from being propagated), it should
     return a true value.  Otherwise, the exception will be processed
     normally upon exit from this method.

     Note that *note __exit__(): ec. methods should not reraise the
     passed-in exception; this is the caller's responsibility.

See also
........

PEP 0343(1) - The "with" statement
     The specification, background, and examples for the Python *note
     with: 71.  statement.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python-reference-3.2.2.info,  Node: Special method lookup,  Prev: With Statement Context Managers,  Up: Special method names

3.3.9 Special method lookup
---------------------------

For custom classes, implicit invocations of special methods are only
guaranteed to work correctly if defined on an object's type, not in the
object's instance dictionary.  That behaviour is the reason why the
following code raises an exception:

    >>> class C:
    ...     pass
    ...
    >>> c = C()
    >>> c.__len__ = lambda: 5
    >>> len(c)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: object of type 'C' has no len()

The rationale behind this behaviour lies with a number of special
methods such as *note __hash__(): 93. and *note __repr__(): 89. that
are implemented by all objects, including type objects. If the implicit
lookup of these methods used the conventional lookup process, they
would fail when invoked on the type object itself:

    >>> 1 .__hash__() == hash(1)
    True
    >>> int.__hash__() == hash(int)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: descriptor '__hash__' of 'int' object needs an argument

Incorrectly attempting to invoke an unbound method of a class in this
way is sometimes referred to as 'metaclass confusion', and is avoided
by bypassing the instance when looking up special methods:

    >>> type(1).__hash__(1) == hash(1)
    True
    >>> type(int).__hash__(int) == hash(int)
    True

In addition to bypassing any instance attributes in the interest of
correctness, implicit special method lookup generally also bypasses the
*note __getattribute__(): 98. method even of the object's metaclass:

    >>> class Meta(type):
    ...    def __getattribute__(*args):
    ...       print("Metaclass getattribute invoked")
    ...       return type.__getattribute__(*args)
    ...
    >>> class C(object, metaclass=Meta):
    ...     def __len__(self):
    ...         return 10
    ...     def __getattribute__(*args):
    ...         print("Class getattribute invoked")
    ...         return object.__getattribute__(*args)
    ...
    >>> c = C()
    >>> c.__len__()                 # Explicit lookup via instance
    Class getattribute invoked
    10
    >>> type(c).__len__(c)          # Explicit lookup via type
    Metaclass getattribute invoked
    10
    >>> len(c)                      # Implicit lookup
    10

Bypassing the *note __getattribute__(): 98. machinery in this fashion
provides significant scope for speed optimisations within the
interpreter, at the cost of some flexibility in the handling of special
methods (the special method _must_ be set on the class object itself in
order to be consistently invoked by the interpreter).


File: python-reference-3.2.2.info,  Node: Execution model,  Next: Expressions,  Prev: Data model,  Up: Top

4 Execution model
*****************

* Menu:

* Naming and binding::
* Exceptions::

Naming and binding

* Interaction with dynamic features::


File: python-reference-3.2.2.info,  Node: Naming and binding,  Next: Exceptions,  Up: Execution model

4.1 Naming and binding
======================

_Names_ refer to objects.  Names are introduced by name binding
operations.  Each occurrence of a name in the program text refers to
the _binding_ of that name established in the innermost function block
containing the use.

  A _block_ is a piece of Python program text that is executed as a
unit.  The following are blocks: a module, a function body, and a class
definition.  Each command typed interactively is a block.  A script
file (a file given as standard input to the interpreter or specified on
the interpreter command line the first argument) is a code block.  A
script command (a command specified on the interpreter command line
with the '*-c*' option) is a code block.  The string argument passed to
the built-in functions `eval()' and `exec()' is a code block.

  A code block is executed in an _execution frame_.  A frame contains
some administrative information (used for debugging) and determines
where and how execution continues after the code block's execution has
completed.

  A _scope_ defines the visibility of a name within a block.  If a local
variable is defined in a block, its scope includes that block.  If the
definition occurs in a function block, the scope extends to any blocks
contained within the defining one, unless a contained block introduces
a different binding for the name.  The scope of names defined in a
class block is limited to the class block; it does not extend to the
code blocks of methods - this includes comprehensions and generator
expressions since they are implemented using a function scope.  This
means that the following will fail:

    class A:
        a = 42
        b = list(a + i for i in range(10))


  When a name is used in a code block, it is resolved using the nearest
enclosing scope.  The set of all such scopes visible to a code block is
called the block's _environment_.

  If a name is bound in a block, it is a local variable of that block,
unless declared as *note nonlocal: f3.  If a name is bound at the
module level, it is a global variable.  (The variables of the module
code block are local and global.)  If a variable is used in a code
block but not defined there, it is a _free variable_.

  When a name is not found at all, a `NameError' exception is raised.
If the name refers to a local variable that has not been bound, a
`UnboundLocalError' exception is raised.  `UnboundLocalError' is a
subclass of `NameError'.

  The following constructs bind names: formal parameters to functions,
*note import: 30. statements, class and function definitions (these
bind the class or function name in the defining block), and targets
that are identifiers if occurring in an assignment, *note for: b8. loop
header, or after *note as: eb. in a *note with: 71. statement or *note
except: 6f. clause.  The *note import: 30. statement of the form `from
... import *' binds all names defined in the imported module, except
those beginning with an underscore.  This form may only be used at the
module level.

  A target occurring in a *note del: 74. statement is also considered
bound for this purpose (though the actual semantics are to unbind the
name).

  Each assignment or import statement occurs within a block defined by
a class or function definition or at the module level (the top-level
code block).

  If a name binding operation occurs anywhere within a code block, all
uses of the name within the block are treated as references to the
current block.  This can lead to errors when a name is used within a
block before it is bound.  This rule is subtle.  Python lacks
declarations and allows name binding operations to occur anywhere
within a code block.  The local variables of a code block can be
determined by scanning the entire text of the block for name binding
operations.

  If the *note global: f4. statement occurs within a block, all uses of
the name specified in the statement refer to the binding of that name
in the top-level namespace.  Names are resolved in the top-level
namespace by searching the global namespace, i.e. the namespace of the
module containing the code block, and the builtins namespace, the
namespace of the module `builtins'.  The global namespace is searched
first.  If the name is not found there, the builtins namespace is
searched.  The global statement must precede all uses of the name.

  The builtins namespace associated with the execution of a code block
is actually found by looking up the name `__builtins__' in its global
namespace; this should be a dictionary or a module (in the latter case
the module's dictionary is used).  By default, when in the `__main__'
module, `__builtins__' is the built-in module `builtins'; when in any
other module, `__builtins__' is an alias for the dictionary of the
`builtins' module itself.  `__builtins__' can be set to a user-created
dictionary to create a weak form of restricted execution.

*CPython implementation detail:* Users should not touch `__builtins__';
it is strictly an implementation detail.  Users wanting to override
values in the builtins namespace should *note import: 30. the
`builtins' module and modify its attributes appropriately.

  The namespace for a module is automatically created the first time a
module is imported.  The main module for a script is always called
`__main__'.

  The *note global: f4. statement has the same scope as a name binding
operation in the same block.  If the nearest enclosing scope for a free
variable contains a global statement, the free variable is treated as a
global.

  A class definition is an executable statement that may use and define
names.  These references follow the normal rules for name resolution.
The namespace of the class definition becomes the attribute dictionary
of the class.  Names defined at the class scope are not visible in
methods.

* Menu:

* Interaction with dynamic features::


File: python-reference-3.2.2.info,  Node: Interaction with dynamic features,  Up: Naming and binding

4.1.1 Interaction with dynamic features
---------------------------------------

There are several cases where Python statements are illegal when used in
conjunction with nested scopes that contain free variables.

  If a variable is referenced in an enclosing scope, it is illegal to
delete the name.  An error will be reported at compile time.

  If the wild card form of import -- `import *' -- is used in a
function and the function contains or is a nested block with free
variables, the compiler will raise a `SyntaxError'.

  The `eval()' and `exec()' functions do not have access to the full
environment for resolving names.  Names may be resolved in the local
and global namespaces of the caller.  Free variables are not resolved
in the nearest enclosing namespace, but in the global namespace.  (1)
The `exec()' and `eval()' functions have optional arguments to override
the global and local namespace.  If only one namespace is specified, it
is used for both.

  ---------- Footnotes ----------

  (1) This limitation occurs because the code that is executed by these
operations is not available at the time the module is compiled.


File: python-reference-3.2.2.info,  Node: Exceptions,  Prev: Naming and binding,  Up: Execution model

4.2 Exceptions
==============

Exceptions are a means of breaking out of the normal flow of control of
a code block in order to handle errors or other exceptional conditions.
An exception is _raised_ at the point where the error is detected; it
may be _handled_ by the surrounding code block or by any code block
that directly or indirectly invoked the code block where the error
occurred.

  The Python interpreter raises an exception when it detects a run-time
error (such as division by zero).  A Python program can also explicitly
raise an exception with the *note raise: f9. statement. Exception
handlers are specified with the *note try: 6e ... *note except: 6f.
statement.  The *note finally: 70.  clause of such a statement can be
used to specify cleanup code which does not handle the exception, but
is executed whether an exception occurred or not in the preceding code.

  Python uses the "termination" model of error handling: an exception
handler can find out what happened and continue execution at an outer
level, but it cannot repair the cause of the error and retry the
failing operation (except by re-entering the offending piece of code
from the top).

  When an exception is not handled at all, the interpreter terminates
execution of the program, or returns to its interactive main loop.  In
either case, it prints a stack backtrace, except when the exception is
`SystemExit'.

  Exceptions are identified by class instances.  The *note except: 6f.
clause is selected depending on the class of the instance: it must
reference the class of the instance or a base class thereof.  The
instance can be received by the handler and can carry additional
information about the exceptional condition.

     Note: Exception messages are not part of the Python API.  Their
     contents may change from one version of Python to the next without
     warning and should not be relied on by code which will run under
     multiple versions of the interpreter.

  See also the description of the *note try: 6e. statement in section
*note The try statement: 6e.  and *note raise: f9. statement in section
*note The raise statement: f9.


File: python-reference-3.2.2.info,  Node: Expressions,  Next: Simple statements,  Prev: Execution model,  Up: Top

5 Expressions
*************

This chapter explains the meaning of the elements of expressions in
Python.

  *Syntax Notes:* In this and the following chapters, extended BNF
notation will be used to describe syntax, not lexical analysis.  When
(one alternative of) a syntax rule has the form

    name ::= othername

and no semantics are given, the semantics of this form of `name' are
the same as for `othername'.

* Menu:

* Arithmetic conversions::
* Atoms::
* Primaries::
* The power operator::
* Unary arithmetic and bitwise operations::
* Binary arithmetic operations::
* Shifting operations::
* Binary bitwise operations::
* Comparisons::
* Boolean operations::
* Conditional expressions::
* Lambdas::
* Expression lists::
* Evaluation order::
* Summary::


File: python-reference-3.2.2.info,  Node: Arithmetic conversions,  Next: Atoms,  Up: Expressions

5.1 Arithmetic conversions
==========================

When a description of an arithmetic operator below uses the phrase "the
numeric arguments are converted to a common type," this means that the
operator implementation for built-in types works that way:

   * If either argument is a complex number, the other is converted to
     complex;

   * otherwise, if either argument is a floating point number, the
     other is converted to floating point;

   * otherwise, both must be integers and no conversion is necessary.

  Some additional rules apply for certain operators (e.g., a string
left argument to the '%' operator).  Extensions must define their own
conversion behavior.


File: python-reference-3.2.2.info,  Node: Atoms,  Next: Primaries,  Prev: Arithmetic conversions,  Up: Expressions

5.2 Atoms
=========

Atoms are the most basic elements of expressions.  The simplest atoms
are identifiers or literals.  Forms enclosed in parentheses, brackets
or braces are also categorized syntactically as atoms.  The syntax for
atoms is:

    atom      ::= identifier | literal | enclosure
    enclosure ::= parenth_form | list_display | dict_display | set_display
                  | generator_expression | yield_atom


* Menu:

* Identifiers (Names): Identifiers Names.
* Literals: Literals<2>.
* Parenthesized forms::
* Displays for lists, sets and dictionaries: Displays for lists sets and dictionaries.
* List displays::
* Set displays::
* Dictionary displays::
* Generator expressions::
* Yield expressions::


File: python-reference-3.2.2.info,  Node: Identifiers Names,  Next: Literals<2>,  Up: Atoms

5.2.1 Identifiers (Names)
-------------------------

An identifier occurring as an atom is a name.  See section *note
Identifiers and keywords: 26.  for lexical definition and section *note
Naming and binding: f1. for documentation of naming and binding.

  When the name is bound to an object, evaluation of the atom yields
that object.  When a name is not bound, an attempt to evaluate it
raises a `NameError' exception.

  *Private name mangling:* When an identifier that textually occurs in
a class definition begins with two or more underscore characters and
does not end in two or more underscores, it is considered a _private
name_ of that class.  Private names are transformed to a longer form
before code is generated for them.  The transformation inserts the
class name in front of the name, with leading underscores removed, and
a single underscore inserted in front of the class name.  For example,
the identifier `__spam' occurring in a class named `Ham' will be
transformed to `_Ham__spam'.  This transformation is independent of the
syntactical context in which the identifier is used.  If the
transformed name is extremely long (longer than 255 characters),
implementation defined truncation may happen.  If the class name
consists only of underscores, no transformation is done.


File: python-reference-3.2.2.info,  Node: Literals<2>,  Next: Parenthesized forms,  Prev: Identifiers Names,  Up: Atoms

5.2.2 Literals
--------------

Python supports string and bytes literals and various numeric literals:

    literal ::= stringliteral | bytesliteral
                | integer | floatnumber | imagnumber

Evaluation of a literal yields an object of the given type (string,
bytes, integer, floating point number, complex number) with the given
value.  The value may be approximated in the case of floating point and
imaginary (complex) literals.  See section *note Literals: 33. for
details.

  With the exception of bytes literals, these all correspond to
immutable data types, and hence the object's identity is less important
than its value.  Multiple evaluations of literals with the same value
(either the same occurrence in the program text or a different
occurrence) may obtain the same object or a different object with the
same value.


File: python-reference-3.2.2.info,  Node: Parenthesized forms,  Next: Displays for lists sets and dictionaries,  Prev: Literals<2>,  Up: Atoms

5.2.3 Parenthesized forms
-------------------------

A parenthesized form is an optional expression list enclosed in
parentheses:

    parenth_form ::= "(" [expression_list] ")"

A parenthesized expression list yields whatever that expression list
yields: if the list contains at least one comma, it yields a tuple;
otherwise, it yields the single expression that makes up the expression
list.

  An empty pair of parentheses yields an empty tuple object.  Since
tuples are immutable, the rules for literals apply (i.e., two
occurrences of the empty tuple may or may not yield the same object).

  Note that tuples are not formed by the parentheses, but rather by use
of the comma operator.  The exception is the empty tuple, for which
parentheses _are_ required -- allowing unparenthesized "nothing" in
expressions would cause ambiguities and allow common typos to pass
uncaught.


File: python-reference-3.2.2.info,  Node: Displays for lists sets and dictionaries,  Next: List displays,  Prev: Parenthesized forms,  Up: Atoms

5.2.4 Displays for lists, sets and dictionaries
-----------------------------------------------

For constructing a list, a set or a dictionary Python provides special
syntax called "displays", each of them in two flavors:

   * either the container contents are listed explicitly, or

   * they are computed via a set of looping and filtering instructions,
     called a _comprehension_.

  Common syntax elements for comprehensions are:

    comprehension ::= expression comp_for
    comp_for      ::= "for" target_list "in" or_test [comp_iter]
    comp_iter     ::= comp_for | comp_if
    comp_if       ::= "if" expression_nocond [comp_iter]

The comprehension consists of a single expression followed by at least
one *note for: b8. clause and zero or more *note for: b8. or *note if:
111. clauses.  In this case, the elements of the new container are
those that would be produced by considering each of the *note for: b8.
or *note if: 111. clauses a block, nesting from left to right, and
evaluating the expression to produce an element each time the innermost
block is reached.

  Note that the comprehension is executed in a separate scope, so names
assigned to in the target list don't "leak" in the enclosing scope.


File: python-reference-3.2.2.info,  Node: List displays,  Next: Set displays,  Prev: Displays for lists sets and dictionaries,  Up: Atoms

5.2.5 List displays
-------------------

A list display is a possibly empty series of expressions enclosed in
square brackets:

    list_display ::= "[" [expression_list | comprehension] "]"

A list display yields a new list object, the contents being specified
by either a list of expressions or a comprehension.  When a
comma-separated list of expressions is supplied, its elements are
evaluated from left to right and placed into the list object in that
order.  When a comprehension is supplied, the list is constructed from
the elements resulting from the comprehension.


File: python-reference-3.2.2.info,  Node: Set displays,  Next: Dictionary displays,  Prev: List displays,  Up: Atoms

5.2.6 Set displays
------------------

A set display is denoted by curly braces and distinguishable from
dictionary displays by the lack of colons separating keys and values:

    set_display ::= "{" (expression_list | comprehension) "}"

A set display yields a new mutable set object, the contents being
specified by either a sequence of expressions or a comprehension.  When
a comma-separated list of expressions is supplied, its elements are
evaluated from left to right and added to the set object.  When a
comprehension is supplied, the set is constructed from the elements
resulting from the comprehension.

  An empty set cannot be constructed with `{}'; this literal constructs
an empty dictionary.


File: python-reference-3.2.2.info,  Node: Dictionary displays,  Next: Generator expressions,  Prev: Set displays,  Up: Atoms

5.2.7 Dictionary displays
-------------------------

A dictionary display is a possibly empty series of key/datum pairs
enclosed in curly braces:

    dict_display       ::= "{" [key_datum_list | dict_comprehension] "}"
    key_datum_list     ::= key_datum ("," key_datum)* [","]
    key_datum          ::= expression ":" expression
    dict_comprehension ::= expression ":" expression comp_for

A dictionary display yields a new dictionary object.

  If a comma-separated sequence of key/datum pairs is given, they are
evaluated from left to right to define the entries of the dictionary:
each key object is used as a key into the dictionary to store the
corresponding datum.  This means that you can specify the same key
multiple times in the key/datum list, and the final dictionary's value
for that key will be the last one given.

  A dict comprehension, in contrast to list and set comprehensions,
needs two expressions separated with a colon followed by the usual
"for" and "if" clauses.  When the comprehension is run, the resulting
key and value elements are inserted in the new dictionary in the order
they are produced.

  Restrictions on the types of the key values are listed earlier in
section *note The standard type hierarchy: 73.  (To summarize, the key
type should be _hashable_, which excludes all mutable objects.)
Clashes between duplicate keys are not detected; the last datum
(textually rightmost in the display) stored for a given key value
prevails.


File: python-reference-3.2.2.info,  Node: Generator expressions,  Next: Yield expressions,  Prev: Dictionary displays,  Up: Atoms

5.2.8 Generator expressions
---------------------------

A generator expression is a compact generator notation in parentheses:

    generator_expression ::= "(" expression comp_for ")"

A generator expression yields a new generator object.  Its syntax is
the same as for comprehensions, except that it is enclosed in
parentheses instead of brackets or curly braces.

  Variables used in the generator expression are evaluated lazily when
the `__next__()' method is called for generator object (in the same
fashion as normal generators).  However, the leftmost *note for: b8.
clause is immediately evaluated, so that an error produced by it can be
seen before any other possible error in the code that handles the
generator expression.  Subsequent *note for: b8. clauses cannot be
evaluated immediately since they may depend on the previous *note for:
b8. loop. For example: `(x*y for x in range(10) for y in bar(x))'.

  The parentheses can be omitted on calls with only one argument.  See
section *note Calls: 76. for the detail.


File: python-reference-3.2.2.info,  Node: Yield expressions,  Prev: Generator expressions,  Up: Atoms

5.2.9 Yield expressions
-----------------------

    yield_atom       ::= "(" yield_expression ")"
    yield_expression ::= "yield" [expression_list]

The *note yield: 78. expression is only used when defining a generator
function, and can only be used in the body of a function definition.
Using a *note yield: 78. expression in a function definition is
sufficient to cause that definition to create a generator function
instead of a normal function.

  When a generator function is called, it returns an iterator known as a
generator.  That generator then controls the execution of a generator
function.  The execution starts when one of the generator's methods is
called.  At that time, the execution proceeds to the first *note yield:
78. expression, where it is suspended again, returning the value of
*note expression_list: 124. to generator's caller.  By suspended we
mean that all local state is retained, including the current bindings
of local variables, the instruction pointer, and the internal
evaluation stack.  When the execution is resumed by calling one of the
generator's methods, the function can proceed exactly as if the *note
yield: 78. expression was just another external call.  The value of the
*note yield: 78. expression after resuming depends on the method which
resumed the execution.

  All of this makes generator functions quite similar to coroutines;
they yield multiple times, they have more than one entry point and
their execution can be suspended.  The only difference is that a
generator function cannot control where should the execution continue
after it yields; the control is always transferred to the generator's
caller.

  The *note yield: 78. statement is allowed in the *note try: 6e.
clause of a *note try: 6e ...  *note finally: 70. construct.  If the
generator is not resumed before it is finalized (by reaching a zero
reference count or by being garbage collected), the
generator-iterator's `close()' method will be called, allowing any
pending *note finally: 70. clauses to execute.

  The following generator's methods can be used to control the
execution of a generator function:

 -- Method: generator.__next__ ()
     Starts the execution of a generator function or resumes it at the
     last executed *note yield: 78. expression.  When a generator
     function is resumed with a *note __next__(): 125. method, the
     current *note yield: 78. expression always evaluates to `None'.
     The execution then continues to the next *note yield: 78.
     expression, where the generator is suspended again, and the value
     of the *note expression_list: 124. is returned to `next()''s
     caller.  If the generator exits without yielding another value, a
     `StopIteration' exception is raised.

     This method is normally called implicitly, e.g. by a *note for:
     b8. loop, or by the built-in `next()' function.

 -- Method: generator.send (value)
     Resumes the execution and "sends" a value into the generator
     function.  The `value' argument becomes the result of the current
     *note yield: 78.  expression.  The *note send(): 126. method
     returns the next value yielded by the generator, or raises
     `StopIteration' if the generator exits without yielding another
     value.  When *note send(): 126. is called to start the generator,
     it must be called with `None' as the argument, because there is no
     *note yield: 78. expression that could receive the value.

 -- Method: generator.throw (type[, value[, traceback]])
     Raises an exception of type `type' at the point where generator
     was paused, and returns the next value yielded by the generator
     function.  If the generator exits without yielding another value,
     a `StopIteration' exception is raised.  If the generator function
     does not catch the passed-in exception, or raises a different
     exception, then that exception propagates to the caller.

 -- Method: generator.close ()
     Raises a `GeneratorExit' at the point where the generator function
     was paused.  If the generator function then raises `StopIteration'
     (by exiting normally, or due to already being closed) or
     `GeneratorExit' (by not catching the exception), close returns to
     its caller.  If the generator yields a value, a `RuntimeError' is
     raised.  If the generator raises any other exception, it is
     propagated to the caller.  *note close(): 128. does nothing if the
     generator has already exited due to an exception or normal exit.

  Here is a simple example that demonstrates the behavior of generators
and generator functions:

    >>> def echo(value=None):
    ...     print("Execution starts when 'next()' is called for the first time.")
    ...     try:
    ...         while True:
    ...             try:
    ...                 value = (yield value)
    ...             except Exception as e:
    ...                 value = e
    ...     finally:
    ...         print("Don't forget to clean up when 'close()' is called.")
    ...
    >>> generator = echo(1)
    >>> print(next(generator))
    Execution starts when 'next()' is called for the first time.
    1
    >>> print(next(generator))
    None
    >>> print(generator.send(2))
    2
    >>> generator.throw(TypeError, "spam")
    TypeError('spam',)
    >>> generator.close()
    Don't forget to clean up when 'close()' is called.


See also
........

PEP 0255(1) - Simple Generators
     The proposal for adding generators and the *note yield: 78.
     statement to Python.

PEP 0342(2) - Coroutines via Enhanced Generators
     The proposal to enhance the API and syntax of generators, making
     them usable as simple coroutines.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0255

  (2) http://www.python.org/dev/peps/pep-0342


File: python-reference-3.2.2.info,  Node: Primaries,  Next: The power operator,  Prev: Atoms,  Up: Expressions

5.3 Primaries
=============

Primaries represent the most tightly bound operations of the language.
Their syntax is:

    primary ::= atom | attributeref | subscription | slicing | call


* Menu:

* Attribute references::
* Subscriptions::
* Slicings::
* Calls::


File: python-reference-3.2.2.info,  Node: Attribute references,  Next: Subscriptions,  Up: Primaries

5.3.1 Attribute references
--------------------------

An attribute reference is a primary followed by a period and a name:

    attributeref ::= primary "." identifier


  The primary must evaluate to an object of a type that supports
attribute references, which most objects do.  This object is then asked
to produce the attribute whose name is the identifier (which can be
customized by overriding the *note __getattr__(): 7f. method).  If this
attribute is not available, the exception `AttributeError' is raised.
Otherwise, the type and value of the object produced is determined by
the object.  Multiple evaluations of the same attribute reference may
yield different objects.


File: python-reference-3.2.2.info,  Node: Subscriptions,  Next: Slicings,  Prev: Attribute references,  Up: Primaries

5.3.2 Subscriptions
-------------------

A subscription selects an item of a sequence (string, tuple or list) or
mapping (dictionary) object:

    subscription ::= primary "[" expression_list "]"

The primary must evaluate to an object that supports subscription, e.g.
a list or dictionary.  User-defined objects can support subscription by
defining a *note __getitem__(): 83. method.

  For built-in objects, there are two types of objects that support
subscription:

  If the primary is a mapping, the expression list must evaluate to an
object whose value is one of the keys of the mapping, and the
subscription selects the value in the mapping that corresponds to that
key.  (The expression list is a tuple except if it has exactly one
item.)

  If the primary is a sequence, the expression (list) must evaluate to
an integer or a slice (as discussed in the following section).

  The formal syntax makes no special provision for negative indices in
sequences; however, built-in sequences all provide a *note
__getitem__(): 83.  method that interprets negative indices by adding
the length of the sequence to the index (so that `x[-1]' selects the
last item of `x').  The resulting value must be a nonnegative integer
less than the number of items in the sequence, and the subscription
selects the item whose index is that value (counting from zero). Since
the support for negative indices and slicing occurs in the object's
*note __getitem__(): 83. method, subclasses overriding this method will
need to explicitly add that support.

  A string's items are characters.  A character is not a separate data
type but a string of exactly one character.


File: python-reference-3.2.2.info,  Node: Slicings,  Next: Calls,  Prev: Subscriptions,  Up: Primaries

5.3.3 Slicings
--------------

A slicing selects a range of items in a sequence object (e.g., a
string, tuple or list).  Slicings may be used as expressions or as
targets in assignment or *note del: 74. statements.  The syntax for a
slicing:

    slicing      ::= primary "[" slice_list "]"
    slice_list   ::= slice_item ("," slice_item)* [","]
    slice_item   ::= expression | proper_slice
    proper_slice ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ]
    lower_bound  ::= expression
    upper_bound  ::= expression
    stride       ::= expression

There is ambiguity in the formal syntax here: anything that looks like
an expression list also looks like a slice list, so any subscription
can be interpreted as a slicing.  Rather than further complicating the
syntax, this is disambiguated by defining that in this case the
interpretation as a subscription takes priority over the interpretation
as a slicing (this is the case if the slice list contains no proper
slice).

  The semantics for a slicing are as follows.  The primary must
evaluate to a mapping object, and it is indexed (using the same *note
__getitem__(): 83. method as normal subscription) with a key that is
constructed from the slice list, as follows.  If the slice list
contains at least one comma, the key is a tuple containing the
conversion of the slice items; otherwise, the conversion of the lone
slice item is the key.  The conversion of a slice item that is an
expression is that expression.  The conversion of a proper slice is a
slice object (see section *note The standard type hierarchy: 73.) whose
`start', `stop' and `step' attributes are the values of the expressions
given as lower bound, upper bound and stride, respectively,
substituting `None' for missing expressions.


File: python-reference-3.2.2.info,  Node: Calls,  Prev: Slicings,  Up: Primaries

5.3.4 Calls
-----------

A call calls a callable object (e.g., a function) with a possibly empty
series of arguments:

    call                 ::= primary "(" [argument_list [","] | comprehension] ")"
    argument_list        ::= positional_arguments ["," keyword_arguments]
                               ["," "*" expression] ["," keyword_arguments]
                               ["," "**" expression]
                             | keyword_arguments ["," "*" expression]
                               ["," keyword_arguments] ["," "**" expression]
                             | "*" expression ["," keyword_arguments] ["," "**" expression]
                             | "**" expression
    positional_arguments ::= expression ("," expression)*
    keyword_arguments    ::= keyword_item ("," keyword_item)*
    keyword_item         ::= identifier "=" expression

A trailing comma may be present after the positional and keyword
arguments but does not affect the semantics.

  The primary must evaluate to a callable object (user-defined
functions, built-in functions, methods of built-in objects, class
objects, methods of class instances, and all objects having a *note
__call__(): 7c. method are callable).  All argument expressions are
evaluated before the call is attempted.  Please refer to section *note
Function definitions: 77. for the syntax of formal parameter lists.

  If keyword arguments are present, they are first converted to
positional arguments, as follows.  First, a list of unfilled slots is
created for the formal parameters.  If there are N positional
arguments, they are placed in the first N slots.  Next, for each
keyword argument, the identifier is used to determine the corresponding
slot (if the identifier is the same as the first formal parameter name,
the first slot is used, and so on).  If the slot is already filled, a
`TypeError' exception is raised. Otherwise, the value of the argument
is placed in the slot, filling it (even if the expression is `None', it
fills the slot).  When all arguments have been processed, the slots
that are still unfilled are filled with the corresponding default value
from the function definition.  (Default values are calculated, once,
when the function is defined; thus, a mutable object such as a list or
dictionary used as default value will be shared by all calls that don't
specify an argument value for the corresponding slot; this should
usually be avoided.)  If there are any unfilled slots for which no
default value is specified, a `TypeError' exception is raised.
Otherwise, the list of filled slots is used as the argument list for
the call.

*CPython implementation detail:* An implementation may provide built-in
functions whose positional parameters do not have names, even if they
are 'named' for the purpose of documentation, and which therefore
cannot be supplied by keyword.  In CPython, this is the case for
functions implemented in C that use `PyArg_ParseTuple()' to parse their
arguments.

  If there are more positional arguments than there are formal
parameter slots, a `TypeError' exception is raised, unless a formal
parameter using the syntax `*identifier' is present; in this case, that
formal parameter receives a tuple containing the excess positional
arguments (or an empty tuple if there were no excess positional
arguments).

  If any keyword argument does not correspond to a formal parameter
name, a `TypeError' exception is raised, unless a formal parameter
using the syntax `**identifier' is present; in this case, that formal
parameter receives a dictionary containing the excess keyword arguments
(using the keywords as keys and the argument values as corresponding
values), or a (new) empty dictionary if there were no excess keyword
arguments.

  If the syntax `*expression' appears in the function call,
`expression' must evaluate to an iterable.  Elements from this iterable
are treated as if they were additional positional arguments; if there
are positional arguments _x1_, ..., _xN_, and `expression' evaluates to
a sequence _y1_, ..., _yM_, this is equivalent to a call with M+N
positional arguments _x1_, ..., _xN_, _y1_, ..., _yM_.

  A consequence of this is that although the `*expression' syntax may
appear _after_ some keyword arguments, it is processed _before_ the
keyword arguments (and the `**expression' argument, if any - see
below).  So:

    >>> def f(a, b):
    ...  print(a, b)
    ...
    >>> f(b=1, *(2,))
    2 1
    >>> f(a=1, *(2,))
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    TypeError: f() got multiple values for keyword argument 'a'
    >>> f(1, *(2,))
    1 2

It is unusual for both keyword arguments and the `*expression' syntax
to be used in the same call, so in practice this confusion does not
arise.

  If the syntax `**expression' appears in the function call,
`expression' must evaluate to a mapping, the contents of which are
treated as additional keyword arguments.  In the case of a keyword
appearing in both `expression' and as an explicit keyword argument, a
`TypeError' exception is raised.

  Formal parameters using the syntax `*identifier' or `**identifier'
cannot be used as positional argument slots or as keyword argument
names.

  A call always returns some value, possibly `None', unless it raises an
exception.  How this value is computed depends on the type of the
callable object.

  If it is--

a user-defined function:
     The code block for the function is executed, passing it the
     argument list.  The first thing the code block will do is bind the
     formal parameters to the arguments; this is described in section
     *note Function definitions: 77.  When the code block executes a
     *note return: 79. statement, this specifies the return value of the
     function call.

a built-in function or method:
     The result is up to the interpreter; see _built-in-funcs_ for the
     descriptions of built-in functions and methods.

a class object:
     A new instance of that class is returned.

a class instance method:
     The corresponding user-defined function is called, with an
     argument list that is one longer than the argument list of the
     call: the instance becomes the first argument.

a class instance:
     The class must define a *note __call__(): 7c. method; the effect
     is then the same as if that method was called.


File: python-reference-3.2.2.info,  Node: The power operator,  Next: Unary arithmetic and bitwise operations,  Prev: Primaries,  Up: Expressions

5.4 The power operator
======================

The power operator binds more tightly than unary operators on its left;
it binds less tightly than unary operators on its right.  The syntax is:

    power ::= primary ["**" u_expr]

Thus, in an unparenthesized sequence of power and unary operators, the
operators are evaluated from right to left (this does not constrain the
evaluation order for the operands): `-1**2' results in `-1'.

  The power operator has the same semantics as the built-in `pow()'
function, when called with two arguments: it yields its left argument
raised to the power of its right argument.  The numeric arguments are
first converted to a common type, and the result is of that type.

  For int operands, the result has the same type as the operands unless
the second argument is negative; in that case, all arguments are
converted to float and a float result is delivered. For example,
`10**2' returns `100', but `10**-2' returns `0.01'.

  Raising `0.0' to a negative power results in a `ZeroDivisionError'.
Raising a negative number to a fractional power results in a `complex'
number. (In earlier versions it raised a `ValueError'.)


File: python-reference-3.2.2.info,  Node: Unary arithmetic and bitwise operations,  Next: Binary arithmetic operations,  Prev: The power operator,  Up: Expressions

5.5 Unary arithmetic and bitwise operations
===========================================

All unary arithmetic and bitwise operations have the same priority:

    u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr


  The unary `-' (minus) operator yields the negation of its numeric
argument.

  The unary `+' (plus) operator yields its numeric argument unchanged.

  The unary `~' (invert) operator yields the bitwise inversion of its
integer argument.  The bitwise inversion of `x' is defined as `-(x+1)'.
It only applies to integral numbers.

  In all three cases, if the argument does not have the proper type, a
`TypeError' exception is raised.


File: python-reference-3.2.2.info,  Node: Binary arithmetic operations,  Next: Shifting operations,  Prev: Unary arithmetic and bitwise operations,  Up: Expressions

5.6 Binary arithmetic operations
================================

The binary arithmetic operations have the conventional priority levels.
Note that some of these operations also apply to certain non-numeric
types.  Apart from the power operator, there are only two levels, one
for multiplicative operators and one for additive operators:

    m_expr ::= u_expr | m_expr "*" u_expr | m_expr "//" u_expr | m_expr "/" u_expr
               | m_expr "%" u_expr
    a_expr ::= m_expr | a_expr "+" m_expr | a_expr "-" m_expr


  The `*' (multiplication) operator yields the product of its
arguments.  The arguments must either both be numbers, or one argument
must be an integer and the other must be a sequence. In the former
case, the numbers are converted to a common type and then multiplied
together.  In the latter case, sequence repetition is performed; a
negative repetition factor yields an empty sequence.

  The `/' (division) and `//' (floor division) operators yield the
quotient of their arguments.  The numeric arguments are first converted
to a common type.  Integer division yields a float, while floor
division of integers results in an integer; the result is that of
mathematical division with the 'floor' function applied to the result.
Division by zero raises the `ZeroDivisionError' exception.

  The `%' (modulo) operator yields the remainder from the division of
the first argument by the second.  The numeric arguments are first
converted to a common type.  A zero right argument raises the
`ZeroDivisionError' exception.  The arguments may be floating point
numbers, e.g., `3.14%0.7' equals `0.34' (since `3.14' equals `4*0.7 +
0.34'.)  The modulo operator always yields a result with the same sign
as its second operand (or zero); the absolute value of the result is
strictly smaller than the absolute value of the second operand (1).

  The floor division and modulo operators are connected by the following
identity: `x == (x//y)*y + (x%y)'.  Floor division and modulo are also
connected with the built-in function `divmod()': `divmod(x, y) == (x//y,
x%y)'. (2).

  In addition to performing the modulo operation on numbers, the `%'
operator is also overloaded by string objects to perform old-style
string formatting (also known as interpolation).  The syntax for string
formatting is described in the Python Library Reference, section
_old-string-formatting_.

  The floor division operator, the modulo operator, and the `divmod()'
function are not defined for complex numbers.  Instead, convert to a
floating point number using the `abs()' function if appropriate.

  The `+' (addition) operator yields the sum of its arguments.  The
arguments must either both be numbers or both sequences of the same
type.  In the former case, the numbers are converted to a common type
and then added together.  In the latter case, the sequences are
concatenated.

  The `-' (subtraction) operator yields the difference of its
arguments.  The numeric arguments are first converted to a common type.

  ---------- Footnotes ----------

  (1) While `abs(x%y) < abs(y)' is true mathematically, for floats it
may not be true numerically due to roundoff.  For example, and assuming
a platform on which a Python float is an IEEE 754 double-precision
number, in order that `-1e-100 % 1e100' have the same sign as `1e100',
the computed result is `-1e-100 + 1e100', which is numerically exactly
equal to `1e100'.  The function `math.fmod()' returns a result whose
sign matches the sign of the first argument instead, and so returns
`-1e-100' in this case. Which approach is more appropriate depends on
the application.

  (2) If x is very close to an exact integer multiple of y, it's
possible for `x//y' to be one larger than `(x-x%y)//y' due to rounding.
In such cases, Python returns the latter result, in order to preserve
that `divmod(x,y)[0] * y + x % y' be very close to `x'.


File: python-reference-3.2.2.info,  Node: Shifting operations,  Next: Binary bitwise operations,  Prev: Binary arithmetic operations,  Up: Expressions

5.7 Shifting operations
=======================

The shifting operations have lower priority than the arithmetic
operations:

    shift_expr ::= a_expr | shift_expr ( "<<" | ">>" ) a_expr

These operators accept integers as arguments.  They shift the first
argument to the left or right by the number of bits given by the second
argument.

  A right shift by _n_ bits is defined as division by `pow(2,n)'.  A
left shift by _n_ bits is defined as multiplication with `pow(2,n)'.

     Note: In the current implementation, the right-hand operand is
     required to be at most `sys.maxsize'.  If the right-hand operand
     is larger than `sys.maxsize' an `OverflowError' exception is
     raised.


File: python-reference-3.2.2.info,  Node: Binary bitwise operations,  Next: Comparisons,  Prev: Shifting operations,  Up: Expressions

5.8 Binary bitwise operations
=============================

Each of the three bitwise operations has a different priority level:

    and_expr ::= shift_expr | and_expr "&" shift_expr
    xor_expr ::= and_expr | xor_expr "^" and_expr
    or_expr  ::= xor_expr | or_expr "|" xor_expr


  The `&' operator yields the bitwise AND of its arguments, which must
be integers.

  The `^' operator yields the bitwise XOR (exclusive OR) of its
arguments, which must be integers.

  The `|' operator yields the bitwise (inclusive) OR of its arguments,
which must be integers.


File: python-reference-3.2.2.info,  Node: Comparisons,  Next: Boolean operations,  Prev: Binary bitwise operations,  Up: Expressions

5.9 Comparisons
===============

Unlike C, all comparison operations in Python have the same priority,
which is lower than that of any arithmetic, shifting or bitwise
operation.  Also unlike C, expressions like `a < b < c' have the
interpretation that is conventional in mathematics:

    comparison    ::= or_expr ( comp_operator or_expr )*
    comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="
                      | "is" ["not"] | ["not"] "in"

Comparisons yield boolean values: `True' or `False'.

  Comparisons can be chained arbitrarily, e.g., `x < y <= z' is
equivalent to `x < y and y <= z', except that `y' is evaluated only
once (but in both cases `z' is not evaluated at all when `x < y' is
found to be false).

  Formally, if _a_, _b_, _c_, ..., _y_, _z_ are expressions and _op1_,
_op2_, ..., _opN_ are comparison operators, then `a op1 b op2 c ... y
opN z' is equivalent to `a op1 b and b op2 c and ... y opN z', except
that each expression is evaluated at most once.

  Note that `a op1 b op2 c' doesn't imply any kind of comparison
between _a_ and _c_, so that, e.g., `x < y > z' is perfectly legal
(though perhaps not pretty).

  The operators `<', `>', `==', `>=', `<=', and `!=' compare the values
of two objects.  The objects need not have the same type. If both are
numbers, they are converted to a common type.  Otherwise, the `==' and
`!=' operators _always_ consider objects of different types to be
unequal, while the `<', `>', `>=' and `<=' operators raise a
`TypeError' when comparing objects of different types that do not
implement these operators for the given pair of types.  You can control
comparison behavior of objects of non-built-in types by defining rich
comparison methods like *note __gt__(): 91, described in section *note
Basic customization: 87.

  Comparison of objects of the same type depends on the type:

   * Numbers are compared arithmetically.

   * The values `float('NaN')' and `Decimal('NaN')' are special.  The
     are identical to themselves, `x is x' but are not equal to
     themselves, `x != x'.  Additionally, comparing any value to a
     not-a-number value will return `False'.  For example, both `3 <
     float('NaN')' and `float('NaN') < 3' will return `False'.

   * Bytes objects are compared lexicographically using the numeric
     values of their elements.

   * Strings are compared lexicographically using the numeric
     equivalents (the result of the built-in function `ord()') of their
     characters. (1) String and bytes object can't be compared!

   * Tuples and lists are compared lexicographically using comparison of
     corresponding elements.  This means that to compare equal, each
     element must compare equal and the two sequences must be of the
     same type and have the same length.

     If not equal, the sequences are ordered the same as their first
     differing elements.  For example, `[1,2,x] <= [1,2,y]' has the
     same value as `x <= y'.  If the corresponding element does not
     exist, the shorter sequence is ordered first (for example, `[1,2]
     < [1,2,3]').

   * Mappings (dictionaries) compare equal if and only if they have the
     same `(key, value)' pairs. Order comparisons `('<', '<=', '>=',
     '>')' raise `TypeError'.

   * Sets and frozensets define comparison operators to mean subset and
     superset tests.  Those relations do not define total orderings
     (the two sets `{1,2}' and {2,3} are not equal, nor subsets of one
     another, nor supersets of one another).  Accordingly, sets are not
     appropriate arguments for functions which depend on total
     ordering.  For example, `min()', `max()', and `sorted()' produce
     undefined results given a list of sets as inputs.

   * Most other objects of built-in types compare unequal unless they
     are the same object; the choice whether one object is considered
     smaller or larger than another one is made arbitrarily but
     consistently within one execution of a program.

  Comparison of objects of the differing types depends on whether either
of the types provide explicit support for the comparison.  Most numeric
types can be compared with one another, but comparisons of `float' and
`Decimal' are not supported to avoid the inevitable confusion arising
from representation issues such as `float('1.1')' being inexactly
represented and therefore not exactly equal to `Decimal('1.1')' which
is.  When cross-type comparison is not supported, the comparison method
returns `NotImplemented'.  This can create the illusion of
non-transitivity between supported cross-type comparisons and
unsupported comparisons.  For example, `Decimal(2) == 2' and `2 ==
float(2)' but `Decimal(2) != float(2)'.  The operators *note in: ba.
and *note not in: bb. test for membership.  `x in s' evaluates to true
if _x_ is a member of _s_, and false otherwise.  `x not in s' returns
the negation of `x in s'.  All built-in sequences and set types support
this as well as dictionary, for which *note in: ba. tests whether a the
dictionary has a given key. For container types such as list, tuple,
set, frozenset, dict, or collections.deque, the expression `x in y' is
equivalent to `any(x is e or x == e for e in y)'.

  For the string and bytes types, `x in y' is true if and only if _x_
is a substring of _y_.  An equivalent test is `y.find(x) != -1'.  Empty
strings are always considered to be a substring of any other string, so
`"" in "abc"' will return `True'.

  For user-defined classes which define the *note __contains__(): b6.
method, `x in y' is true if and only if `y.__contains__(x)' is true.

  For user-defined classes which do not define *note __contains__():
b6. but do define *note __iter__(): b7, `x in y' is true if some value
`z' with `x == z' is produced while iterating over `y'.  If an
exception is raised during the iteration, it is as if *note in: ba.
raised that exception.

  Lastly, the old-style iteration protocol is tried: if a class defines
*note __getitem__(): 83, `x in y' is true if and only if there is a
non-negative integer index _i_ such that `x == y[i]', and all lower
integer indices do not raise `IndexError' exception.  (If any other
exception is raised, it is as if *note in: ba. raised that exception).

  The operator *note not in: bb. is defined to have the inverse true
value of *note in: ba.

  The operators *note is: 6d. and *note is not: 154. test for object
identity: `x is y' is true if and only if _x_ and _y_ are the same
object.  `x is not y' yields the inverse truth value. (2)

  ---------- Footnotes ----------

  (1) While comparisons between strings make sense at the byte level,
they may be counter-intuitive to users.  For example, the strings
`"\u00C7"' and `"\u0327\u0043"' compare differently, even though they
both represent the same unicode character (LATIN CAPITAL LETTER C WITH
CEDILLA).  To compare strings in a human recognizable way, compare using
`unicodedata.normalize()'.

  (2) Due to automatic garbage-collection, free lists, and the dynamic
nature of descriptors, you may notice seemingly unusual behaviour in
certain uses of the *note is: 6d. operator, like those involving
comparisons between instance methods, or constants.  Check their
documentation for more info.


File: python-reference-3.2.2.info,  Node: Boolean operations,  Next: Conditional expressions,  Prev: Comparisons,  Up: Expressions

5.10 Boolean operations
=======================

    or_test  ::= and_test | or_test "or" and_test
    and_test ::= not_test | and_test "and" not_test
    not_test ::= comparison | "not" not_test

In the context of Boolean operations, and also when expressions are
used by control flow statements, the following values are interpreted
as false: `False', `None', numeric zero of all types, and empty strings
and containers (including strings, tuples, lists, dictionaries, sets
and frozensets).  All other values are interpreted as true.
User-defined objects can customize their truth value by providing a
*note __bool__(): 94. method.

  The operator *note not: 15b. yields `True' if its argument is false,
`False' otherwise.

  The expression `x and y' first evaluates _x_; if _x_ is false, its
value is returned; otherwise, _y_ is evaluated and the resulting value
is returned.

  The expression `x or y' first evaluates _x_; if _x_ is true, its
value is returned; otherwise, _y_ is evaluated and the resulting value
is returned.

  (Note that neither *note and: 159. nor *note or: 15a. restrict the
value and type they return to `False' and `True', but rather return the
last evaluated argument.  This is sometimes useful, e.g., if `s' is a
string that should be replaced by a default value if it is empty, the
expression `s or 'foo'' yields the desired value.  Because *note not:
15b. has to invent a value anyway, it does not bother to return a value
of the same type as its argument, so e.g., `not 'foo'' yields `False',
not `'''.)


File: python-reference-3.2.2.info,  Node: Conditional expressions,  Next: Lambdas,  Prev: Boolean operations,  Up: Expressions

5.11 Conditional expressions
============================

    conditional_expression ::= or_test ["if" or_test "else" expression]
    expression             ::= conditional_expression | lambda_form
    expression_nocond      ::= or_test | lambda_form_nocond

Conditional expressions (sometimes called a "ternary operator") have
the lowest priority of all Python operations.

  The expression `x if C else y' first evaluates the condition, _C_
(_not_ _x_); if _C_ is true, _x_ is evaluated and its value is
returned; otherwise, _y_ is evaluated and its value is returned.

  See PEP 308(1) for more details about conditional expressions.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0308


File: python-reference-3.2.2.info,  Node: Lambdas,  Next: Expression lists,  Prev: Conditional expressions,  Up: Expressions

5.12 Lambdas
============

    lambda_form        ::= "lambda" [parameter_list]: expression
    lambda_form_nocond ::= "lambda" [parameter_list]: expression_nocond

Lambda forms (lambda expressions) have the same syntactic position as
expressions.  They are a shorthand to create anonymous functions; the
expression `lambda arguments: expression' yields a function object.
The unnamed object behaves like a function object defined with

    def <lambda>(arguments):
        return expression

See section *note Function definitions: 77. for the syntax of parameter
lists.  Note that functions created with lambda forms cannot contain
statements or annotations.


File: python-reference-3.2.2.info,  Node: Expression lists,  Next: Evaluation order,  Prev: Lambdas,  Up: Expressions

5.13 Expression lists
=====================

    expression_list ::= expression ( "," expression )* [","]


  An expression list containing at least one comma yields a tuple.  The
length of the tuple is the number of expressions in the list.  The
expressions are evaluated from left to right.

  The trailing comma is required only to create a single tuple (a.k.a. a
_singleton_); it is optional in all other cases.  A single expression
without a trailing comma doesn't create a tuple, but rather yields the
value of that expression. (To create an empty tuple, use an empty pair
of parentheses: `()'.)


File: python-reference-3.2.2.info,  Node: Evaluation order,  Next: Summary,  Prev: Expression lists,  Up: Expressions

5.14 Evaluation order
=====================

Python evaluates expressions from left to right.  Notice that while
evaluating an assignment, the right-hand side is evaluated before the
left-hand side.

  In the following lines, expressions will be evaluated in the
arithmetic order of their suffixes:

    expr1, expr2, expr3, expr4
    (expr1, expr2, expr3, expr4)
    {expr1: expr2, expr3: expr4}
    expr1 + expr2 * (expr3 - expr4)
    expr1(expr2, expr3, *expr4, **expr5)
    expr3, expr4 = expr1, expr2



File: python-reference-3.2.2.info,  Node: Summary,  Prev: Evaluation order,  Up: Expressions

5.15 Summary
============

The following table summarizes the operator precedences in Python, from
lowest precedence (least binding) to highest precedence (most binding).
Operators in the same box have the same precedence.  Unless the syntax
is explicitly given, operators are binary.  Operators in the same box
group left to right (except for comparisons, including tests, which all
have the same precedence and chain from left to right -- see section
*note Comparisons: 153. -- and exponentiation, which groups from right
to left).

Operator                                            Description
---------------------------------------------------------------------------------------------- 
*note lambda: 166.                                  Lambda expression
*note if: 111. - *note else: 16f.                   Conditional expression
*note or: 15a.                                      Boolean OR
*note and: 159.                                     Boolean AND
*note not: 15b. _x_                                 Boolean NOT
*note in: ba, *note not: 15b. *note in: ba, *note   Comparisons, including membership tests
is: 6d, *note is not: 154, `<', `<=', `>', `>=',    and identity tests,
`!=', `=='                                          
`|'                                                 Bitwise OR
`^'                                                 Bitwise XOR
`&'                                                 Bitwise AND
`<<', `>>'                                          Shifts
`+', `-'                                            Addition and subtraction
`*', `/', `//', `%'                                 Multiplication, division, remainder (1)
`+x', `-x', `~x'                                    Positive, negative, bitwise NOT
`**'                                                Exponentiation (2)
`x[index]', `x[index:index]', `x(arguments...)',    Subscription, slicing, call, attribute
`x.attribute'                                       reference
`(expressions...)', `[expressions...]',             Binding or tuple display, list display,
`{key:datum...}', `{expressions...}'                dictionary display, set display

  ---------- Footnotes ----------

  (1) The `%' operator is also used for string formatting; the same
precedence applies.

  (2) The power operator `**' binds less tightly than an arithmetic or
bitwise unary operator on its right, that is, `2**-1' is `0.5'.


File: python-reference-3.2.2.info,  Node: Simple statements,  Next: Compound statements,  Prev: Expressions,  Up: Top

6 Simple statements
*******************

Simple statements are comprised within a single logical line. Several
simple statements may occur on a single line separated by semicolons.
The syntax for simple statements is:

    simple_stmt ::= expression_stmt
                    | assert_stmt
                    | assignment_stmt
                    | augmented_assignment_stmt
                    | pass_stmt
                    | del_stmt
                    | return_stmt
                    | yield_stmt
                    | raise_stmt
                    | break_stmt
                    | continue_stmt
                    | import_stmt
                    | global_stmt
                    | nonlocal_stmt


* Menu:

* Expression statements::
* Assignment statements::
* The assert statement::
* The pass statement::
* The del statement::
* The return statement::
* The yield statement::
* The raise statement::
* The break statement::
* The continue statement::
* The import statement::
* The global statement::
* The nonlocal statement::


File: python-reference-3.2.2.info,  Node: Expression statements,  Next: Assignment statements,  Up: Simple statements

6.1 Expression statements
=========================

Expression statements are used (mostly interactively) to compute and
write a value, or (usually) to call a procedure (a function that
returns no meaningful result; in Python, procedures return the value
`None').  Other uses of expression statements are allowed and
occasionally useful.  The syntax for an expression statement is:

    expression_stmt ::= expression_list

An expression statement evaluates the expression list (which may be a
single expression).

  In interactive mode, if the value is not `None', it is converted to a
string using the built-in `repr()' function and the resulting string is
written to standard output on a line by itself (except if the result is
`None', so that procedure calls do not cause any output.)


File: python-reference-3.2.2.info,  Node: Assignment statements,  Next: The assert statement,  Prev: Expression statements,  Up: Simple statements

6.2 Assignment statements
=========================

Assignment statements are used to (re)bind names to values and to modify
attributes or items of mutable objects:

    assignment_stmt ::= (target_list "=")+ (expression_list | yield_expression)
    target_list     ::= target ("," target)* [","]
    target          ::= identifier
                        | "(" target_list ")"
                        | "[" target_list "]"
                        | attributeref
                        | subscription
                        | slicing
                        | "*" target

(See section *note Primaries: 129. for the syntax definitions for the
last three symbols.)

  An assignment statement evaluates the expression list (remember that
this can be a single expression or a comma-separated list, the latter
yielding a tuple) and assigns the single resulting object to each of
the target lists, from left to right.

  Assignment is defined recursively depending on the form of the target
(list).  When a target is part of a mutable object (an attribute
reference, subscription or slicing), the mutable object must ultimately
perform the assignment and decide about its validity, and may raise an
exception if the assignment is unacceptable.  The rules observed by
various types and the exceptions raised are given with the definition
of the object types (see section *note The standard type hierarchy:
73.).

  Assignment of an object to a target list, optionally enclosed in
parentheses or square brackets, is recursively defined as follows.

   * If the target list is a single target: The object is assigned to
     that target.

   * If the target list is a comma-separated list of targets: The
     object must be an iterable with the same number of items as there
     are targets in the target list, and the items are assigned, from
     left to right, to the corresponding targets.

        * If the target list contains one target prefixed with an
          asterisk, called a "starred" target: The object must be a
          sequence with at least as many items as there are targets in
          the target list, minus one.  The first items of the sequence
          are assigned, from left to right, to the targets before the
          starred target.  The final items of the sequence are assigned
          to the targets after the starred target.  A list of the
          remaining items in the sequence is then assigned to the
          starred target (the list can be empty).

        * Else: The object must be a sequence with the same number of
          items as there are targets in the target list, and the items
          are assigned, from left to right, to the corresponding
          targets.

  Assignment of an object to a single target is recursively defined as
follows.

   * If the target is an identifier (name):

        * If the name does not occur in a *note global: f4. or *note
          nonlocal: f3.  statement in the current code block: the name
          is bound to the object in the current local namespace.

        * Otherwise: the name is bound to the object in the global
          namespace or the outer namespace determined by *note
          nonlocal: f3, respectively.

     The name is rebound if it was already bound.  This may cause the
     reference count for the object previously bound to the name to
     reach zero, causing the object to be deallocated and its
     destructor (if it has one) to be called.

   * If the target is a target list enclosed in parentheses or in
     square brackets: The object must be an iterable with the same
     number of items as there are targets in the target list, and its
     items are assigned, from left to right, to the corresponding
     targets.

   * If the target is an attribute reference: The primary expression in
     the reference is evaluated.  It should yield an object with
     assignable attributes; if this is not the case, `TypeError' is
     raised.  That object is then asked to assign the assigned object
     to the given attribute; if it cannot perform the assignment, it
     raises an exception (usually but not necessarily `AttributeError').
     Note: If the object is a class instance and the attribute
     reference occurs on both sides of the assignment operator, the RHS
     expression, `a.x' can access either an instance attribute or (if
     no instance attribute exists) a class attribute.  The LHS target
     `a.x' is always set as an instance attribute, creating it if
     necessary.  Thus, the two occurrences of `a.x' do not necessarily
     refer to the same attribute: if the RHS expression refers to a
     class attribute, the LHS creates a new instance attribute as the
     target of the assignment:

         class Cls:
             x = 3             # class variable
         inst = Cls()
         inst.x = inst.x + 1   # writes inst.x as 4 leaving Cls.x as 3

     This description does not necessarily apply to descriptor
     attributes, such as properties created with `property()'.

   * If the target is a subscription: The primary expression in the
     reference is evaluated.  It should yield either a mutable sequence
     object (such as a list) or a mapping object (such as a
     dictionary).  Next, the subscript expression is evaluated.

     If the primary is a mutable sequence object (such as a list), the
     subscript must yield an integer.  If it is negative, the
     sequence's length is added to it.  The resulting value must be a
     nonnegative integer less than the sequence's length, and the
     sequence is asked to assign the assigned object to its item with
     that index.  If the index is out of range, `IndexError' is raised
     (assignment to a subscripted sequence cannot add new items to a
     list).

     If the primary is a mapping object (such as a dictionary), the
     subscript must have a type compatible with the mapping's key type,
     and the mapping is then asked to create a key/datum pair which
     maps the subscript to the assigned object.  This can either
     replace an existing key/value pair with the same key value, or
     insert a new key/value pair (if no key with the same value
     existed).

     For user-defined objects, the *note __setitem__(): ae. method is
     called with appropriate arguments.

   * If the target is a slicing: The primary expression in the
     reference is evaluated.  It should yield a mutable sequence object
     (such as a list).  The assigned object should be a sequence object
     of the same type.  Next, the lower and upper bound expressions are
     evaluated, insofar they are present; defaults are zero and the
     sequence's length.  The bounds should evaluate to integers.  If
     either bound is negative, the sequence's length is added to it.
     The resulting bounds are clipped to lie between zero and the
     sequence's length, inclusive.  Finally, the sequence object is
     asked to replace the slice with the items of the assigned
     sequence.  The length of the slice may be different from the
     length of the assigned sequence, thus changing the length of the
     target sequence, if the object allows it.

*CPython implementation detail:* In the current implementation, the
syntax for targets is taken to be the same as for expressions, and
invalid syntax is rejected during the code generation phase, causing
less detailed error messages.

  WARNING: Although the definition of assignment implies that overlaps
between the left-hand side and the right-hand side are 'safe' (for
example `a, b = b, a' swaps two variables), overlaps _within_ the
collection of assigned-to variables are not safe!  For instance, the
following program prints `[0, 2]':

    x = [0, 1]
    i = 0
    i, x[i] = 1, 2
    print(x)


See also
........

PEP 3132(1) - Extended Iterable Unpacking
     The specification for the `*target' feature.

* Menu:

* Augmented assignment statements::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3132


File: python-reference-3.2.2.info,  Node: Augmented assignment statements,  Up: Assignment statements

6.2.1 Augmented assignment statements
-------------------------------------

Augmented assignment is the combination, in a single statement, of a
binary operation and an assignment statement:

    augmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression)
    augtarget                 ::= identifier | attributeref | subscription | slicing
    augop                     ::= "+=" | "-=" | "*=" | "/=" | "//=" | "%=" | "**="
                                  | ">>=" | "<<=" | "&=" | "^=" | "|="

(See section *note Primaries: 129. for the syntax definitions for the
last three symbols.)

  An augmented assignment evaluates the target (which, unlike normal
assignment statements, cannot be an unpacking) and the expression list,
performs the binary operation specific to the type of assignment on the
two operands, and assigns the result to the original target.  The
target is only evaluated once.

  An augmented assignment expression like `x += 1' can be rewritten as
`x = x + 1' to achieve a similar, but not exactly equal effect. In the
augmented version, `x' is only evaluated once. Also, when possible, the
actual operation is performed _in-place_, meaning that rather than
creating a new object and assigning that to the target, the old object
is modified instead.

  With the exception of assigning to tuples and multiple targets in a
single statement, the assignment done by augmented assignment
statements is handled the same way as normal assignments. Similarly,
with the exception of the possible _in-place_ behavior, the binary
operation performed by augmented assignment is the same as the normal
binary operations.

  For targets which are attribute references, the same *note caveat
about class and instance attributes: 17c. applies as for regular
assignments.


File: python-reference-3.2.2.info,  Node: The assert statement,  Next: The pass statement,  Prev: Assignment statements,  Up: Simple statements

6.3 The `assert' statement
==========================

Assert statements are a convenient way to insert debugging assertions
into a program:

    assert_stmt ::= "assert" expression ["," expression]

The simple form, `assert expression', is equivalent to

    if __debug__:
       if not expression: raise AssertionError

The extended form, `assert expression1, expression2', is equivalent to

    if __debug__:
       if not expression1: raise AssertionError(expression2)


  These equivalences assume that `__debug__' and `AssertionError' refer
to the built-in variables with those names.  In the current
implementation, the built-in variable `__debug__' is `True' under
normal circumstances, `False' when optimization is requested (command
line option -O).  The current code generator emits no code for an
assert statement when optimization is requested at compile time.  Note
that it is unnecessary to include the source code for the expression
that failed in the error message; it will be displayed as part of the
stack trace.

  Assignments to `__debug__' are illegal.  The value for the built-in
variable is determined when the interpreter starts.


File: python-reference-3.2.2.info,  Node: The pass statement,  Next: The del statement,  Prev: The assert statement,  Up: Simple statements

6.4 The `pass' statement
========================

    pass_stmt ::= "pass"

*note pass: 186. is a null operation -- when it is executed, nothing
happens.  It is useful as a placeholder when a statement is required
syntactically, but no code needs to be executed, for example:

    def f(arg): pass    # a function that does nothing (yet)

    class C: pass       # a class with no methods (yet)



File: python-reference-3.2.2.info,  Node: The del statement,  Next: The return statement,  Prev: The pass statement,  Up: Simple statements

6.5 The `del' statement
=======================

    del_stmt ::= "del" target_list

Deletion is recursively defined very similar to the way assignment is
defined.  Rather that spelling it out in full details, here are some
hints.

  Deletion of a target list recursively deletes each target, from left
to right.

  Deletion of a name removes the binding of that name from the local or
global namespace, depending on whether the name occurs in a *note
global: f4. statement in the same code block.  If the name is unbound,
a `NameError' exception will be raised.

  Deletion of attribute references, subscriptions and slicings is
passed to the primary object involved; deletion of a slicing is in
general equivalent to assignment of an empty slice of the right type
(but even this is determined by the sliced object).

  Changed in version 3.2.


File: python-reference-3.2.2.info,  Node: The return statement,  Next: The yield statement,  Prev: The del statement,  Up: Simple statements

6.6 The `return' statement
==========================

    return_stmt ::= "return" [expression_list]

*note return: 79. may only occur syntactically nested in a function
definition, not within a nested class definition.

  If an expression list is present, it is evaluated, else `None' is
substituted.

  *note return: 79. leaves the current function call with the
expression list (or `None') as return value.

  When *note return: 79. passes control out of a *note try: 6e.
statement with a *note finally: 70. clause, that *note finally: 70.
clause is executed before really leaving the function.

  In a generator function, the *note return: 79. statement is not
allowed to include an *note expression_list: 124.  In that context, a
bare *note return: 79.  indicates that the generator is done and will
cause `StopIteration' to be raised.


File: python-reference-3.2.2.info,  Node: The yield statement,  Next: The raise statement,  Prev: The return statement,  Up: Simple statements

6.7 The `yield' statement
=========================

    yield_stmt ::= yield_expression

The *note yield: 78. statement is only used when defining a generator
function, and is only used in the body of the generator function. Using
a *note yield: 78.  statement in a function definition is sufficient to
cause that definition to create a generator function instead of a
normal function.  When a generator function is called, it returns an
iterator known as a generator iterator, or more commonly, a generator.
The body of the generator function is executed by calling the `next()'
function on the generator repeatedly until it raises an exception.

  When a *note yield: 78. statement is executed, the state of the
generator is frozen and the value of *note expression_list: 124. is
returned to `next()''s caller.  By "frozen" we mean that all local
state is retained, including the current bindings of local variables,
the instruction pointer, and the internal evaluation stack: enough
information is saved so that the next time `next()' is invoked, the
function can proceed exactly as if the *note yield: 78.  statement were
just another external call.

  The *note yield: 78. statement is allowed in the *note try: 6e.
clause of a *note try: 6e ...  *note finally: 70. construct.  If the
generator is not resumed before it is finalized (by reaching a zero
reference count or by being garbage collected), the
generator-iterator's `close()' method will be called, allowing any
pending *note finally: 70. clauses to execute.

See also
........

PEP 0255(1) - Simple Generators
     The proposal for adding generators and the *note yield: 78.
     statement to Python.

PEP 0342(2) - Coroutines via Enhanced Generators
     The proposal that, among other generator enhancements, proposed
     allowing *note yield: 78. to appear inside a *note try: 6e ...
     *note finally: 70. block.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0255

  (2) http://www.python.org/dev/peps/pep-0342


File: python-reference-3.2.2.info,  Node: The raise statement,  Next: The break statement,  Prev: The yield statement,  Up: Simple statements

6.8 The `raise' statement
=========================

    raise_stmt ::= "raise" [expression ["from" expression]]

If no expressions are present, *note raise: f9. re-raises the last
exception that was active in the current scope.  If no exception is
active in the current scope, a `TypeError' exception is raised
indicating that this is an error (if running under IDLE, a
`queue.Empty' exception is raised instead).

  Otherwise, *note raise: f9. evaluates the first expression as the
exception object.  It must be either a subclass or an instance of
`BaseException'.  If it is a class, the exception instance will be
obtained when needed by instantiating the class with no arguments.

  The _type_ of the exception is the exception instance's class, the
_value_ is the instance itself.

  A traceback object is normally created automatically when an
exception is raised and attached to it as the `__traceback__'
attribute, which is writable.  You can create an exception and set your
own traceback in one step using the `with_traceback()' exception method
(which returns the same exception instance, with its traceback set to
its argument), like so:

    raise Exception("foo occurred").with_traceback(tracebackobj)


  The `from' clause is used for exception chaining: if given, the second
_expression_ must be another exception class or instance, which will
then be attached to the raised exception as the `__cause__' attribute
(which is writable).  If the raised exception is not handled, both
exceptions will be printed:

    >>> try:
    ...     print(1 / 0)
    ... except Exception as exc:
    ...     raise RuntimeError("Something bad happened") from exc
    ...
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    ZeroDivisionError: int division or modulo by zero

    The above exception was the direct cause of the following exception:

    Traceback (most recent call last):
      File "<stdin>", line 4, in <module>
    RuntimeError: Something bad happened

A similar mechanism works implicitly if an exception is raised inside an
exception handler: the previous exception is then attached as the new
exception's `__context__' attribute:

    >>> try:
    ...     print(1 / 0)
    ... except:
    ...     raise RuntimeError("Something bad happened")
    ...
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    ZeroDivisionError: int division or modulo by zero

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "<stdin>", line 4, in <module>
    RuntimeError: Something bad happened

Additional information on exceptions can be found in section *note
Exceptions: f7, and information about handling exceptions is in section
*note The try statement: 6e.


File: python-reference-3.2.2.info,  Node: The break statement,  Next: The continue statement,  Prev: The raise statement,  Up: Simple statements

6.9 The `break' statement
=========================

    break_stmt ::= "break"

*note break: 190. may only occur syntactically nested in a *note for:
b8. or *note while: 193. loop, but not nested in a function or class
definition within that loop.

  It terminates the nearest enclosing loop, skipping the optional *note
else: 16f.  clause if the loop has one.

  If a *note for: b8. loop is terminated by *note break: 190, the loop
control target keeps its current value.

  When *note break: 190. passes control out of a *note try: 6e.
statement with a *note finally: 70. clause, that *note finally: 70.
clause is executed before really leaving the loop.


File: python-reference-3.2.2.info,  Node: The continue statement,  Next: The import statement,  Prev: The break statement,  Up: Simple statements

6.10 The `continue' statement
=============================

    continue_stmt ::= "continue"

*note continue: 194. may only occur syntactically nested in a *note
for: b8. or *note while: 193. loop, but not nested in a function or
class definition or *note finally: 70. clause within that loop.  It
continues with the next cycle of the nearest enclosing loop.

  When *note continue: 194. passes control out of a *note try: 6e.
statement with a *note finally: 70. clause, that *note finally: 70.
clause is executed before really starting the next loop cycle.


File: python-reference-3.2.2.info,  Node: The import statement,  Next: The global statement,  Prev: The continue statement,  Up: Simple statements

6.11 The `import' statement
===========================

    import_stmt     ::= "import" module ["as" name] ( "," module ["as" name] )*
                        | "from" relative_module "import" identifier ["as" name]
                        ( "," identifier ["as" name] )*
                        | "from" relative_module "import" "(" identifier ["as" name]
                        ( "," identifier ["as" name] )* [","] ")"
                        | "from" module "import" "*"
    module          ::= (identifier ".")* identifier
    relative_module ::= "."* module | "."+
    name            ::= identifier

Import statements are executed in two steps: (1) find a module, and
initialize it if necessary; (2) define a name or names in the local
namespace (of the scope where the *note import: 30. statement occurs).
The statement comes in two forms differing on whether it uses the *note
from: 198. keyword. The first form (without *note from: 198.) repeats
these steps for each identifier in the list.  The form with *note from:
198. performs step (1) once, and then performs step (2) repeatedly. For
a reference implementation of step (1), see the `importlib' module.

  To understand how step (1) occurs, one must first understand how
Python handles hierarchical naming of modules. To help organize modules
and provide a hierarchy in naming, Python has a concept of packages. A
package can contain other packages and modules while modules cannot
contain other modules or packages. From a file system perspective,
packages are directories and modules are files. The original
specification for packages(1) is still available to read, although
minor details have changed since the writing of that document.

  Once the name of the module is known (unless otherwise specified, the
term "module" will refer to both packages and modules), searching for
the module or package can begin. The first place checked is
`sys.modules', the cache of all modules that have been imported
previously. If the module is found there then it is used in step (2) of
import unless `None' is found in `sys.modules', in which case
`ImportError' is raised.

  If the module is not found in the cache, then `sys.meta_path' is
searched (the specification for `sys.meta_path' can be found in PEP
302(2)).  The object is a list of _finder_ objects which are queried in
order as to whether they know how to load the module by calling their
`find_module()' method with the name of the module. If the module
happens to be contained within a package (as denoted by the existence
of a dot in the name), then a second argument to `find_module()' is
given as the value of the `__path__' attribute from the parent package
(everything up to the last dot in the name of the module being
imported). If a finder can find the module it returns a _loader_
(discussed later) or returns `None'.

  If none of the finders on `sys.meta_path' are able to find the module
then some implicitly defined finders are queried. Implementations of
Python vary in what implicit meta path finders are defined. The one
they all do define, though, is one that handles `sys.path_hooks',
`sys.path_importer_cache', and `sys.path'.

  The implicit finder searches for the requested module in the "paths"
specified in one of two places ("paths" do not have to be file system
paths). If the module being imported is supposed to be contained within
a package then the second argument passed to `find_module()',
`__path__' on the parent package, is used as the source of paths. If
the module is not contained in a package then `sys.path' is used as the
source of paths.

  Once the source of paths is chosen it is iterated over to find a
finder that can handle that path. The dict at `sys.path_importer_cache'
caches finders for paths and is checked for a finder. If the path does
not have a finder cached then `sys.path_hooks' is searched by calling
each object in the list with a single argument of the path, returning a
finder or raises `ImportError'. If a finder is returned then it is
cached in `sys.path_importer_cache' and then used for that path entry.
If no finder can be found but the path exists then a value of `None' is
stored in `sys.path_importer_cache' to signify that an implicit,
file-based finder that handles modules stored as individual files
should be used for that path. If the path does not exist then a finder
which always returns `None' is placed in the cache for the path.

  If no finder can find the module then `ImportError' is raised.
Otherwise some finder returned a loader whose `load_module()' method is
called with the name of the module to load (see PEP 302(3) for the
original definition of loaders). A loader has several responsibilities
to perform on a module it loads. First, if the module already exists in
`sys.modules' (a possibility if the loader is called outside of the
import machinery) then it is to use that module for initialization and
not a new module. But if the module does not exist in `sys.modules'
then it is to be added to that dict before initialization begins. If an
error occurs during loading of the module and it was added to
`sys.modules' it is to be removed from the dict. If an error occurs but
the module was already in `sys.modules' it is left in the dict.

  The loader must set several attributes on the module. `__name__' is
to be set to the name of the module. `__file__' is to be the "path" to
the file unless the module is built-in (and thus listed in
`sys.builtin_module_names') in which case the attribute is not set.  If
what is being imported is a package then `__path__' is to be set to a
list of paths to be searched when looking for modules and packages
contained within the package being imported. `__package__' is optional
but should be set to the name of package that contains the module or
package (the empty string is used for module not contained in a
package). `__loader__' is also optional but should be set to the loader
object that is loading the module.

  If an error occurs during loading then the loader raises
`ImportError' if some other exception is not already being propagated.
Otherwise the loader returns the module that was loaded and initialized.

  When step (1) finishes without raising an exception, step (2) can
begin.

  The first form of *note import: 30. statement binds the module name
in the local namespace to the module object, and then goes on to import
the next identifier, if any.  If the module name is followed by *note
as: eb, the name following *note as: eb. is used as the local name for
the module.

  The *note from: 198. form does not bind the module name: it goes
through the list of identifiers, looks each one of them up in the
module found in step (1), and binds the name in the local namespace to
the object thus found.  As with the first form of *note import: 30, an
alternate local name can be supplied by specifying "*note as: eb.
localname".  If a name is not found, `ImportError' is raised.  If the
list of identifiers is replaced by a star (`'*''), all public names
defined in the module are bound in the local namespace of the *note
import: 30. statement.

  The _public names_ defined by a module are determined by checking the
module's namespace for a variable named `__all__'; if defined, it must
be a sequence of strings which are names defined or imported by that
module.  The names given in `__all__' are all considered public and are
required to exist.  If `__all__' is not defined, the set of public
names includes all names found in the module's namespace which do not
begin with an underscore character (`'_'').  `__all__' should contain
the entire public API. It is intended to avoid accidentally exporting
items that are not part of the API (such as library modules which were
imported and used within the module).

  The *note from: 198. form with `*' may only occur in a module scope.
The wild card form of import -- `import *' -- is only allowed at the
module level.  Attempting to use it in class or function definitions
will raise a `SyntaxError'.

  When specifying what module to import you do not have to specify the
absolute name of the module. When a module or package is contained
within another package it is possible to make a relative import within
the same top package without having to mention the package name. By
using leading dots in the specified module or package after *note from:
198. you can specify how high to traverse up the current package
hierarchy without specifying exact names. One leading dot means the
current package where the module making the import exists. Two dots
means up one package level. Three dots is up two levels, etc.  So if
you execute `from . import mod' from a module in the `pkg' package then
you will end up importing `pkg.mod'. If you execute `from ..subpkg2
import mod' from within `pkg.subpkg1' you will import `pkg.subpkg2.mod'.
The specification for relative imports is contained within PEP 328(4).

  `importlib.import_module()' is provided to support applications that
determine which modules need to be loaded dynamically.

* Menu:

* Future statements::

  ---------- Footnotes ----------

  (1) http://www.python.org/doc/essays/packages.html

  (2) http://www.python.org/dev/peps/pep-0302

  (3) http://www.python.org/dev/peps/pep-0302

  (4) http://www.python.org/dev/peps/pep-0328


File: python-reference-3.2.2.info,  Node: Future statements,  Up: The import statement

6.11.1 Future statements
------------------------

A _future statement_ is a directive to the compiler that a particular
module should be compiled using syntax or semantics that will be
available in a specified future release of Python.  The future
statement is intended to ease migration to future versions of Python
that introduce incompatible changes to the language.  It allows use of
the new features on a per-module basis before the release in which the
feature becomes standard.

    future_statement ::= "from" "__future__" "import" feature ["as" name]
                         ("," feature ["as" name])*
                         | "from" "__future__" "import" "(" feature ["as" name]
                         ("," feature ["as" name])* [","] ")"
    feature          ::= identifier
    name             ::= identifier

A future statement must appear near the top of the module.  The only
lines that can appear before a future statement are:

   * the module docstring (if any),

   * comments,

   * blank lines, and

   * other future statements.

  The features recognized by Python 3.0 are `absolute_import',
`division', `generators', `unicode_literals', `print_function',
`nested_scopes' and `with_statement'.  They are all redundant because
they are always enabled, and only kept for backwards compatibility.

  A future statement is recognized and treated specially at compile
time: Changes to the semantics of core constructs are often implemented
by generating different code.  It may even be the case that a new
feature introduces new incompatible syntax (such as a new reserved
word), in which case the compiler may need to parse the module
differently.  Such decisions cannot be pushed off until runtime.

  For any given release, the compiler knows which feature names have
been defined, and raises a compile-time error if a future statement
contains a feature not known to it.

  The direct runtime semantics are the same as for any import
statement: there is a standard module `__future__', described later,
and it will be imported in the usual way at the time the future
statement is executed.

  The interesting runtime semantics depend on the specific feature
enabled by the future statement.

  Note that there is nothing special about the statement:

    import __future__ [as name]

That is not a future statement; it's an ordinary import statement with
no special semantics or syntax restrictions.

  Code compiled by calls to the built-in functions `exec()' and
`compile()' that occur in a module `M' containing a future statement
will, by default, use the new syntax or semantics associated with the
future statement.  This can be controlled by optional arguments to
`compile()' -- see the documentation of that function for details.

  A future statement typed at an interactive interpreter prompt will
take effect for the rest of the interpreter session.  If an interpreter
is started with the `-i' option, is passed a script name to execute,
and the script includes a future statement, it will be in effect in the
interactive session started after the script is executed.

See also
........

PEP 236(1) - Back to the __future__
     The original proposal for the __future__ mechanism.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0236


File: python-reference-3.2.2.info,  Node: The global statement,  Next: The nonlocal statement,  Prev: The import statement,  Up: Simple statements

6.12 The `global' statement
===========================

    global_stmt ::= "global" identifier ("," identifier)*

The *note global: f4. statement is a declaration which holds for the
entire current code block.  It means that the listed identifiers are to
be interpreted as globals.  It would be impossible to assign to a
global variable without *note global: f4, although free variables may
refer to globals without being declared global.

  Names listed in a *note global: f4. statement must not be used in the
same code block textually preceding that *note global: f4. statement.

  Names listed in a *note global: f4. statement must not be defined as
formal parameters or in a *note for: b8. loop control target, *note
class: 7d.  definition, function definition, or *note import: 30.
statement.

*CPython implementation detail:* The current implementation does not
enforce the latter two restrictions, but programs should not abuse this
freedom, as future implementations may enforce them or silently change
the meaning of the program.

  *Programmer's note:* the *note global: f4. is a directive to the
parser.  It applies only to code parsed at the same time as the *note
global: f4. statement.  In particular, a *note global: f4. statement
contained in a string or code object supplied to the built-in `exec()'
function does not affect the code block _containing_ the function call,
and code contained in such a string is unaffected by *note global: f4.
statements in the code containing the function call.  The same applies
to the `eval()' and `compile()' functions.


File: python-reference-3.2.2.info,  Node: The nonlocal statement,  Prev: The global statement,  Up: Simple statements

6.13 The `nonlocal' statement
=============================

    nonlocal_stmt ::= "nonlocal" identifier ("," identifier)*


  The *note nonlocal: f3. statement causes the listed identifiers to
refer to previously bound variables in the nearest enclosing scope.
This is important because the default behavior for binding is to search
the local namespace first.  The statement allows encapsulated code to
rebind variables outside of the local scope besides the global (module)
scope.

  Names listed in a *note nonlocal: f3. statement, unlike to those
listed in a *note global: f4. statement, must refer to pre-existing
bindings in an enclosing scope (the scope in which a new binding should
be created cannot be determined unambiguously).

  Names listed in a *note nonlocal: f3. statement must not collide with
pre-existing bindings in the local scope.

See also
........

PEP 3104(1) - Access to Names in Outer Scopes
     The specification for the *note nonlocal: f3. statement.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3104


File: python-reference-3.2.2.info,  Node: Compound statements,  Next: Top-level components,  Prev: Simple statements,  Up: Top

7 Compound statements
*********************

Compound statements contain (groups of) other statements; they affect
or control the execution of those other statements in some way.  In
general, compound statements span multiple lines, although in simple
incarnations a whole compound statement may be contained in one line.

  The *note if: 111, *note while: 193. and *note for: b8. statements
implement traditional control flow constructs.  *note try: 6e.
specifies exception handlers and/or cleanup code for a group of
statements, while the *note with: 71. statement allows the execution of
initialization and finalization code around a block of code.  Function
and class definitions are also syntactically compound statements.

  Compound statements consist of one or more 'clauses.'  A clause
consists of a header and a 'suite.'  The clause headers of a particular
compound statement are all at the same indentation level. Each clause
header begins with a uniquely identifying keyword and ends with a
colon.  A suite is a group of statements controlled by a clause.  A
suite can be one or more semicolon-separated simple statements on the
same line as the header, following the header's colon, or it can be one
or more indented statements on subsequent lines.  Only the latter form
of suite can contain nested compound statements; the following is
illegal, mostly because it wouldn't be clear to which *note if: 111.
clause a following *note else: 16f. clause would belong:

    if test1: if test2: print(x)

Also note that the semicolon binds tighter than the colon in this
context, so that in the following example, either all or none of the
`print()' calls are executed:

    if x < y < z: print(x); print(y); print(z)

Summarizing:

    compound_stmt ::= if_stmt
                      | while_stmt
                      | for_stmt
                      | try_stmt
                      | with_stmt
                      | funcdef
                      | classdef
    suite         ::= stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
    statement     ::= stmt_list NEWLINE | compound_stmt
    stmt_list     ::= simple_stmt (";" simple_stmt)* [";"]


  Note that statements always end in a `NEWLINE' possibly followed by a
`DEDENT'.  Also note that optional continuation clauses always begin
with a keyword that cannot start a statement, thus there are no
ambiguities (the 'dangling *note else: 16f.' problem is solved in
Python by requiring nested *note if: 111. statements to be indented).

  The formatting of the grammar rules in the following sections places
each clause on a separate line for clarity.

* Menu:

* The if statement::
* The while statement::
* The for statement::
* The try statement::
* The with statement::
* Function definitions::
* Class definitions::


File: python-reference-3.2.2.info,  Node: The if statement,  Next: The while statement,  Up: Compound statements

7.1 The `if' statement
======================

The *note if: 111. statement is used for conditional execution:

    if_stmt ::= "if" expression ":" suite
                ( "elif" expression ":" suite )*
                ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section *note Boolean
operations: 158. for the definition of true and false); then that suite
is executed (and no other part of the *note if: 111. statement is
executed or evaluated).  If all expressions are false, the suite of the
*note else: 16f. clause, if present, is executed.


File: python-reference-3.2.2.info,  Node: The while statement,  Next: The for statement,  Prev: The if statement,  Up: Compound statements

7.2 The `while' statement
=========================

The *note while: 193. statement is used for repeated execution as long
as an expression is true:

    while_stmt ::= "while" expression ":" suite
                   ["else" ":" suite]

This repeatedly tests the expression and, if it is true, executes the
first suite; if the expression is false (which may be the first time it
is tested) the suite of the *note else: 16f. clause, if present, is
executed and the loop terminates.

  A *note break: 190. statement executed in the first suite terminates
the loop without executing the *note else: 16f. clause's suite.  A
*note continue: 194.  statement executed in the first suite skips the
rest of the suite and goes back to testing the expression.


File: python-reference-3.2.2.info,  Node: The for statement,  Next: The try statement,  Prev: The while statement,  Up: Compound statements

7.3 The `for' statement
=======================

The *note for: b8. statement is used to iterate over the elements of a
sequence (such as a string, tuple or list) or other iterable object:

    for_stmt ::= "for" target_list "in" expression_list ":" suite
                 ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.  An iterator is created for the result of the
`expression_list'.  The suite is then executed once for each item
provided by the iterator, in the order of ascending indices.  Each item
in turn is assigned to the target list using the standard rules for
assignments (see *note Assignment statements: 177.), and then the suite
is executed.  When the items are exhausted (which is immediately when
the sequence is empty or an iterator raises a `StopIteration'
exception), the suite in the *note else: 16f. clause, if present, is
executed, and the loop terminates.

  A *note break: 190. statement executed in the first suite terminates
the loop without executing the *note else: 16f. clause's suite.  A
*note continue: 194.  statement executed in the first suite skips the
rest of the suite and continues with the next item, or with the *note
else: 16f. clause if there was no next item.

  The suite may assign to the variable(s) in the target list; this does
not affect the next item assigned to it.

  Names in the target list are not deleted when the loop is finished,
but if the sequence is empty, it will not have been assigned to at all
by the loop.  Hint: the built-in function `range()' returns an iterator
of integers suitable to emulate the effect of Pascal's `for i := a to b
do'; e.g., `list(range(3))' returns the list `[0, 1, 2]'.

     Note: 

     There is a subtlety when the sequence is being modified by the
     loop (this can only occur for mutable sequences, i.e. lists).  An
     internal counter is used to keep track of which item is used next,
     and this is incremented on each iteration.  When this counter has
     reached the length of the sequence the loop terminates.  This
     means that if the suite deletes the current (or a previous) item
     from the sequence, the next item will be skipped (since it gets the
     index of the current item which has already been treated).
     Likewise, if the suite inserts an item in the sequence before the
     current item, the current item will be treated again the next time
     through the loop. This can lead to nasty bugs that can be avoided
     by making a temporary copy using a slice of the whole sequence,
     e.g.,

         for x in a[:]:
             if x < 0: a.remove(x)




File: python-reference-3.2.2.info,  Node: The try statement,  Next: The with statement,  Prev: The for statement,  Up: Compound statements

7.4 The `try' statement
=======================

The *note try: 6e. statement specifies exception handlers and/or
cleanup code for a group of statements:

    try_stmt  ::= try1_stmt | try2_stmt
    try1_stmt ::= "try" ":" suite
                  ("except" [expression ["as" target]] ":" suite)+
                  ["else" ":" suite]
                  ["finally" ":" suite]
    try2_stmt ::= "try" ":" suite
                  "finally" ":" suite

The *note except: 6f. clause(s) specify one or more exception handlers.
When no exception occurs in the *note try: 6e. clause, no exception
handler is executed.  When an exception occurs in the *note try: 6e.
suite, a search for an exception handler is started.  This search
inspects the except clauses in turn until one is found that matches the
exception.  An expression-less except clause, if present, must be last;
it matches any exception.  For an except clause with an expression,
that expression is evaluated, and the clause matches the exception if
the resulting object is "compatible" with the exception.  An object is
compatible with an exception if it is the class or a base class of the
exception object or a tuple containing an item compatible with the
exception.

  If no except clause matches the exception, the search for an
exception handler continues in the surrounding code and on the
invocation stack.  (1)

  If the evaluation of an expression in the header of an except clause
raises an exception, the original search for a handler is canceled and
a search starts for the new exception in the surrounding code and on
the call stack (it is treated as if the entire *note try: 6e. statement
raised the exception).

  When a matching except clause is found, the exception is assigned to
the target specified after the *note as: eb. keyword in that except
clause, if present, and the except clause's suite is executed.  All
except clauses must have an executable block.  When the end of this
block is reached, execution continues normally after the entire try
statement.  (This means that if two nested handlers exist for the same
exception, and the exception occurs in the try clause of the inner
handler, the outer handler will not handle the exception.)

  When an exception has been assigned using `as target', it is cleared
at the end of the except clause.  This is as if

    except E as N:
        foo

was translated to

    except E as N:
        try:
            foo
        finally:
            del N

This means the exception must be assigned to a different name to be
able to refer to it after the except clause.  Exceptions are cleared
because with the traceback attached to them, they form a reference
cycle with the stack frame, keeping all locals in that frame alive
until the next garbage collection occurs.

  Before an except clause's suite is executed, details about the
exception are stored in the `sys' module and can be access via
`sys.exc_info()'.  `sys.exc_info()' returns a 3-tuple consisting of the
exception class, the exception instance and a traceback object (see
section *note The standard type hierarchy: 73.) identifying the point
in the program where the exception occurred.  `sys.exc_info()' values
are restored to their previous values (before the call) when returning
from a function that handled an exception.

  The optional *note else: 16f. clause is executed if and when control
flows off the end of the *note try: 6e. clause. (2) Exceptions in the
*note else: 16f.  clause are not handled by the preceding *note except:
6f. clauses.

  If *note finally: 70. is present, it specifies a 'cleanup' handler.
The *note try: 6e. clause is executed, including any *note except: 6f.
and *note else: 16f. clauses.  If an exception occurs in any of the
clauses and is not handled, the exception is temporarily saved. The
*note finally: 70. clause is executed.  If there is a saved exception,
it is re-raised at the end of the *note finally: 70. clause. If the
*note finally: 70. clause raises another exception or executes a *note
return: 79. or *note break: 190. statement, the saved exception is
lost.  The exception information is not available to the program during
execution of the *note finally: 70. clause.

  When a *note return: 79, *note break: 190. or *note continue: 194.
statement is executed in the *note try: 6e. suite of a *note try:
6e...*note finally: 70.  statement, the *note finally: 70. clause is
also executed 'on the way out.' A *note continue: 194. statement is
illegal in the *note finally: 70. clause. (The reason is a problem with
the current implementation -- this restriction may be lifted in the
future).

  Additional information on exceptions can be found in section *note
Exceptions: f7, and information on using the *note raise: f9. statement
to generate exceptions may be found in section *note The raise
statement: f9.

  ---------- Footnotes ----------

  (1) The exception is propagated to the invocation stack unless there
is a *note finally: 70. clause which happens to raise another
exception. That new exception causes the old one to be lost.

  (2) Currently, control "flows off the end" except in the case of an
exception or the execution of a *note return: 79, *note continue: 194,
or *note break: 190. statement.


File: python-reference-3.2.2.info,  Node: The with statement,  Next: Function definitions,  Prev: The try statement,  Up: Compound statements

7.5 The `with' statement
========================

The *note with: 71. statement is used to wrap the execution of a block
with methods defined by a context manager (see section *note With
Statement Context Managers: e9.).  This allows common *note try:
6e...*note except: 6f...*note finally: 70.  usage patterns to be
encapsulated for convenient reuse.

    with_stmt ::= "with" with_item ("," with_item)* ":" suite
    with_item ::= expression ["as" target]

The execution of the *note with: 71. statement with one "item" proceeds
as follows:

  1. The context expression (the expression given in the *note
     with_item: 1ba.) is evaluated to obtain a context manager.

  2. The context manager's *note __exit__(): ec. is loaded for later
     use.

  3. The context manager's *note __enter__(): ea. method is invoked.

  4. If a target was included in the *note with: 71. statement, the
     return value from *note __enter__(): ea. is assigned to it.

          Note: The *note with: 71. statement guarantees that if the
          *note __enter__(): ea.  method returns without an error, then
          *note __exit__(): ec. will always be called. Thus, if an
          error occurs during the assignment to the target list, it
          will be treated the same as an error occurring within the
          suite would be. See step 6 below.

  5. The suite is executed.

  6. The context manager's *note __exit__(): ec. method is invoked.  If
     an exception caused the suite to be exited, its type, value, and
     traceback are passed as arguments to *note __exit__(): ec.
     Otherwise, three `None' arguments are supplied.

     If the suite was exited due to an exception, and the return value
     from the *note __exit__(): ec. method was false, the exception is
     reraised.  If the return value was true, the exception is
     suppressed, and execution continues with the statement following
     the *note with: 71. statement.

     If the suite was exited for any reason other than an exception,
     the return value from *note __exit__(): ec. is ignored, and
     execution proceeds at the normal location for the kind of exit
     that was taken.

  With more than one item, the context managers are processed as if
multiple *note with: 71. statements were nested:

    with A() as a, B() as b:
        suite

is equivalent to

    with A() as a:
        with B() as b:
            suite

Changed in version 3.1: Support for multiple context expressions.

See also
........

PEP 0343(1) - The "with" statement
     The specification, background, and examples for the Python *note
     with: 71.  statement.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python-reference-3.2.2.info,  Node: Function definitions,  Next: Class definitions,  Prev: The with statement,  Up: Compound statements

7.6 Function definitions
========================

A function definition defines a user-defined function object (see
section *note The standard type hierarchy: 73.):

    funcdef        ::= [decorators] "def" funcname "(" [parameter_list] ")" ["->" expression] ":" suite
    decorators     ::= decorator+
    decorator      ::= "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
    dotted_name    ::= identifier ("." identifier)*
    parameter_list ::= (defparameter ",")*
                       (  "*" [parameter] ("," defparameter)*
                       [, "**" parameter]
                       | "**" parameter
                       | defparameter [","] )
    parameter      ::= identifier [":" expression]
    defparameter   ::= parameter ["=" expression]
    funcname       ::= identifier

A function definition is an executable statement.  Its execution binds
the function name in the current local namespace to a function object
(a wrapper around the executable code for the function).  This function
object contains a reference to the current global namespace as the
global namespace to be used when the function is called.

  The function definition does not execute the function body; this gets
executed only when the function is called. (1)

  A function definition may be wrapped by one or more _decorator_
expressions.  Decorator expressions are evaluated when the function is
defined, in the scope that contains the function definition.  The
result must be a callable, which is invoked with the function object as
the only argument. The returned value is bound to the function name
instead of the function object.  Multiple decorators are applied in
nested fashion. For example, the following code

    @f1(arg)
    @f2
    def func(): pass

is equivalent to

    def func(): pass
    func = f1(arg)(f2(func))


  When one or more parameters have the form _parameter_ `='
_expression_, the function is said to have "default parameter values."
For a parameter with a default value, the corresponding argument may be
omitted from a call, in which case the parameter's default value is
substituted.  If a parameter has a default value, all following
parameters up until the "`*'" must also have a default value -- this is
a syntactic restriction that is not expressed by the grammar.

  *Default parameter values are evaluated when the function definition
is executed.* This means that the expression is evaluated once, when
the function is defined, and that that same "pre-computed" value is
used for each call.  This is especially important to understand when a
default parameter is a mutable object, such as a list or a dictionary:
if the function modifies the object (e.g. by appending an item to a
list), the default value is in effect modified.  This is generally not
what was intended.  A way around this is to use `None' as the default,
and explicitly test for it in the body of the function, e.g.:

    def whats_on_the_telly(penguin=None):
        if penguin is None:
            penguin = []
        penguin.append("property of the zoo")
        return penguin


  Function call semantics are described in more detail in section *note
Calls: 76. A function call always assigns values to all parameters
mentioned in the parameter list, either from position arguments, from
keyword arguments, or from default values.  If the form "`*identifier'"
is present, it is initialized to a tuple receiving any excess
positional parameters, defaulting to the empty tuple.  If the form
"`**identifier'" is present, it is initialized to a new dictionary
receiving any excess keyword arguments, defaulting to a new empty
dictionary.  Parameters after "`*'" or "`*identifier'" are keyword-only
parameters and may only be passed used keyword arguments.

  Parameters may have annotations of the form "`: expression'"
following the parameter name.  Any parameter may have an annotation
even those of the form `*identifier' or `**identifier'.  Functions may
have "return" annotation of the form "`-> expression'" after the
parameter list.  These annotations can be any valid Python expression
and are evaluated when the function definition is executed.
Annotations may be evaluated in a different order than they appear in
the source code.  The presence of annotations does not change the
semantics of a function.  The annotation values are available as values
of a dictionary keyed by the parameters' names in the `__annotations__'
attribute of the function object.

  It is also possible to create anonymous functions (functions not
bound to a name), for immediate use in expressions.  This uses lambda
forms, described in section *note Lambdas: 166.  Note that the lambda
form is merely a shorthand for a simplified function definition; a
function defined in a "*note def: 1bc."  statement can be passed around
or assigned to another name just like a function defined by a lambda
form.  The "*note def: 1bc." form is actually more powerful since it
allows the execution of multiple statements and annotations.

  *Programmer's note:* Functions are first-class objects.  A "`def'"
form executed inside a function definition defines a local function
that can be returned or passed around.  Free variables used in the
nested function can access the local variables of the function
containing the def.  See section *note Naming and binding: f1. for
details.

  ---------- Footnotes ----------

  (1) A string literal appearing as the first statement in the function
body is transformed into the function's `__doc__' attribute and
therefore the function's _docstring_.


File: python-reference-3.2.2.info,  Node: Class definitions,  Prev: Function definitions,  Up: Compound statements

7.7 Class definitions
=====================

A class definition defines a class object (see section *note The
standard type hierarchy: 73.):

    classdef    ::= [decorators] "class" classname [inheritance] ":" suite
    inheritance ::= "(" [argument_list [","] | comprehension] ")"
    classname   ::= identifier

A class definition is an executable statement.  The inheritance list
usually gives a list of base classes (see *note Customizing class
creation: a6. for more advanced uses), so each item in the list should
evaluate to a class object which allows subclassing.  Classes without
an inheritance list inherit, by default, from the base class `object';
hence,

    class Foo:
        pass

is equivalent to

    class Foo(object):
        pass

The class's suite is then executed in a new execution frame (see *note
Naming and binding: f1.), using a newly created local namespace and the
original global namespace.  (Usually, the suite contains mostly
function definitions.)  When the class's suite finishes execution, its
execution frame is discarded but its local namespace is saved. (1) A
class object is then created using the inheritance list for the base
classes and the saved local namespace for the attribute dictionary.
The class name is bound to this class object in the original local
namespace.

  Class creation can be customized heavily using *note metaclasses: a6.

  Classes can also be decorated: just like when decorating functions,

    @f1(arg)
    @f2
    class Foo: pass

is equivalent to

    class Foo: pass
    Foo = f1(arg)(f2(Foo))

The evaluation rules for the decorator expressions are the same as for
function decorators.  The result must be a class object, which is then
bound to the class name.

  *Programmer's note:* Variables defined in the class definition are
class attributes; they are shared by instances.  Instance attributes
can be set in a method with `self.name = value'.  Both class and
instance attributes are accessible through the notation "`self.name'",
and an instance attribute hides a class attribute with the same name
when accessed in this way.  Class attributes can be used as defaults
for instance attributes, but using mutable values there can lead to
unexpected results.  *note Descriptors: 7e.  can be used to create
instance variables with different implementation details.

See also
........

PEP 3115(2) - Metaclasses in Python 3 PEP 3129(3) - Class Decorators

  ---------- Footnotes ----------

  (1) A string literal appearing as the first statement in the class
body is transformed into the namespace's `__doc__' item and therefore
the class's _docstring_.

  (2) http://www.python.org/dev/peps/pep-3115

  (3) http://www.python.org/dev/peps/pep-3129


File: python-reference-3.2.2.info,  Node: Top-level components,  Next: Full Grammar specification,  Prev: Compound statements,  Up: Top

8 Top-level components
**********************

The Python interpreter can get its input from a number of sources: from
a script passed to it as standard input or as program argument, typed
in interactively, from a module source file, etc.  This chapter gives
the syntax used in these cases.

* Menu:

* Complete Python programs::
* File input::
* Interactive input::
* Expression input::


File: python-reference-3.2.2.info,  Node: Complete Python programs,  Next: File input,  Up: Top-level components

8.1 Complete Python programs
============================

While a language specification need not prescribe how the language
interpreter is invoked, it is useful to have a notion of a complete
Python program.  A complete Python program is executed in a minimally
initialized environment: all built-in and standard modules are
available, but none have been initialized, except for `sys' (various
system services), `builtins' (built-in functions, exceptions and
`None') and `__main__'.  The latter is used to provide the local and
global namespace for execution of the complete program.

  The syntax for a complete Python program is that for file input,
described in the next section.

  The interpreter may also be invoked in interactive mode; in this
case, it does not read and execute a complete program but reads and
executes one statement (possibly compound) at a time.  The initial
environment is identical to that of a complete program; each statement
is executed in the namespace of `__main__'.

  Under Unix, a complete program can be passed to the interpreter in
three forms: with the `-c' _string_ command line option, as a file
passed as the first command line argument, or as standard input.  If
the file or standard input is a tty device, the interpreter enters
interactive mode; otherwise, it executes the file as a complete program.


File: python-reference-3.2.2.info,  Node: File input,  Next: Interactive input,  Prev: Complete Python programs,  Up: Top-level components

8.2 File input
==============

All input read from non-interactive files has the same form:

    file_input ::= (NEWLINE | statement)*

This syntax is used in the following situations:

   * when parsing a complete Python program (from a file or from a
     string);

   * when parsing a module;

   * when parsing a string passed to the `exec()' function;


File: python-reference-3.2.2.info,  Node: Interactive input,  Next: Expression input,  Prev: File input,  Up: Top-level components

8.3 Interactive input
=====================

Input in interactive mode is parsed using the following grammar:

    interactive_input ::= [stmt_list] NEWLINE | compound_stmt NEWLINE

Note that a (top-level) compound statement must be followed by a blank
line in interactive mode; this is needed to help the parser detect the
end of the input.


File: python-reference-3.2.2.info,  Node: Expression input,  Prev: Interactive input,  Up: Top-level components

8.4 Expression input
====================

There are two forms of expression input.  Both ignore leading
whitespace. The string argument to `eval()' must have the following
form:

    eval_input ::= expression_list NEWLINE*


  Note: to read 'raw' input line without interpretation, you can use
the the `readline()' method of file objects, including `sys.stdin'.


File: python-reference-3.2.2.info,  Node: Full Grammar specification,  Next: Index,  Prev: Top-level components,  Up: Top

9 Full Grammar specification
****************************

This is the full Python grammar, as it is read by the parser generator
and used to parse Python source files:

    # Grammar for Python

    # Note:  Changing the grammar specified in this file will most likely
    #        require corresponding changes in the parser module
    #        (../Modules/parsermodule.c).  If you can't make the changes to
    #        that module yourself, please co-ordinate the required changes
    #        with someone who can; ask around on python-dev for help.  Fred
    #        Drake <fdrake@acm.org> will probably be listening there.

    # NOTE WELL: You should also follow all the steps listed in PEP 306,
    # "How to Change Python's Grammar"

    # Start symbols for the grammar:
    #       single_input is a single interactive statement;
    #       file_input is a module or sequence of commands read from an input file;
    #       eval_input is the input for the eval() and input() functions.
    # NB: compound_stmt in single_input is followed by extra NEWLINE!
    single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
    file_input: (NEWLINE | stmt)* ENDMARKER
    eval_input: testlist NEWLINE* ENDMARKER

    decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
    decorators: decorator+
    decorated: decorators (classdef | funcdef)
    funcdef: 'def' NAME parameters ['->' test] ':' suite
    parameters: '(' [typedargslist] ')'
    typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [','
           ['*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]]
         |  '*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
    tfpdef: NAME [':' test]
    varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [','
           ['*' [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef]]
         |  '*' [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef)
    vfpdef: NAME

    stmt: simple_stmt | compound_stmt
    simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
    small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
                 import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
    expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) |
                         ('=' (yield_expr|testlist_star_expr))*)
    testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
    augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
                '<<=' | '>>=' | '**=' | '//=')
    # For normal assignments, additional restrictions enforced by the interpreter
    del_stmt: 'del' exprlist
    pass_stmt: 'pass'
    flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
    break_stmt: 'break'
    continue_stmt: 'continue'
    return_stmt: 'return' [testlist]
    yield_stmt: yield_expr
    raise_stmt: 'raise' [test ['from' test]]
    import_stmt: import_name | import_from
    import_name: 'import' dotted_as_names
    # note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
    import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
                  'import' ('*' | '(' import_as_names ')' | import_as_names))
    import_as_name: NAME ['as' NAME]
    dotted_as_name: dotted_name ['as' NAME]
    import_as_names: import_as_name (',' import_as_name)* [',']
    dotted_as_names: dotted_as_name (',' dotted_as_name)*
    dotted_name: NAME ('.' NAME)*
    global_stmt: 'global' NAME (',' NAME)*
    nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
    assert_stmt: 'assert' test [',' test]

    compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
    if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
    while_stmt: 'while' test ':' suite ['else' ':' suite]
    for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
    try_stmt: ('try' ':' suite
               ((except_clause ':' suite)+
                ['else' ':' suite]
                ['finally' ':' suite] |
               'finally' ':' suite))
    with_stmt: 'with' with_item (',' with_item)*  ':' suite
    with_item: test ['as' expr]
    # NB compile.c makes sure that the default except clause is last
    except_clause: 'except' [test ['as' NAME]]
    suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

    test: or_test ['if' or_test 'else' test] | lambdef
    test_nocond: or_test | lambdef_nocond
    lambdef: 'lambda' [varargslist] ':' test
    lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
    or_test: and_test ('or' and_test)*
    and_test: not_test ('and' not_test)*
    not_test: 'not' not_test | comparison
    comparison: expr (comp_op expr)*
    comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
    star_expr: '*' expr
    expr: xor_expr ('|' xor_expr)*
    xor_expr: and_expr ('^' and_expr)*
    and_expr: shift_expr ('&' shift_expr)*
    shift_expr: arith_expr (('<<'|'>>') arith_expr)*
    arith_expr: term (('+'|'-') term)*
    term: factor (('*'|'/'|'%'|'//') factor)*
    factor: ('+'|'-'|'~') factor | power
    power: atom trailer* ['**' factor]
    atom: ('(' [yield_expr|testlist_comp] ')' |
           '[' [testlist_comp] ']' |
           '{' [dictorsetmaker] '}' |
           NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
    testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
    trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
    subscriptlist: subscript (',' subscript)* [',']
    subscript: test | [test] ':' [test] [sliceop]
    sliceop: ':' [test]
    exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
    testlist: test (',' test)* [',']
    dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) |
                      (test (comp_for | (',' test)* [','])) )

    classdef: 'class' NAME ['(' [arglist] ')'] ':' suite

    arglist: (argument ',')* (argument [',']
                             |'*' test (',' argument)* [',' '**' test]
                             |'**' test)
    # The reason that keywords are test nodes instead of NAME is that using NAME
    # results in an ambiguity. ast.c makes sure it's a NAME.
    argument: test [comp_for] | test '=' test  # Really [keyword '='] test
    comp_iter: comp_for | comp_if
    comp_for: 'for' exprlist 'in' or_test [comp_iter]
    comp_if: 'if' test_nocond [comp_iter]

    # not used in grammar, but may appear in "node" passed from Parser to Compiler
    encoding_decl: NAME

    yield_expr: 'yield' [testlist]



File: python-reference-3.2.2.info,  Node: Index,  Prev: Full Grammar specification,  Up: Top

Index
*****

 [index ]
* Menu:

* **; in function calls:                 Calls.               (line 101)
* *; in function calls:                  Calls.               (line  73)
* __abs__() (object method):             Emulating numeric types.
                                                              (line  96)
* __add__() (object method):             Emulating numeric types.
                                                              (line  11)
* __all__ (optional module attribute):   The import statement.
                                                              (line 129)
* __and__() (object method):             Emulating numeric types.
                                                              (line  11)
* __annotations__ (function attribute):  The standard type hierarchy.
                                                              (line 294)
* __bases__ (class attribute):           The standard type hierarchy.
                                                              (line 463)
* __bool__() (object method) <1>:        Emulating container types.
                                                              (line  38)
* __bool__() (object method):            Basic customization. (line 223)
* __call__() (object method) <1>:        Calls.               (line 138)
* __call__() (object method):            Emulating callable objects.
                                                              (line   6)
* __cause__ (exception attribute):       The raise statement. (line  31)
* __class__ (instance attribute):        The standard type hierarchy.
                                                              (line 496)
* __closure__ (function attribute):      The standard type hierarchy.
                                                              (line 294)
* __code__ (function attribute):         The standard type hierarchy.
                                                              (line 294)
* __complex__() (object method):         Emulating numeric types.
                                                              (line 103)
* __contains__() (object method):        Emulating container types.
                                                              (line 117)
* __context__ (exception attribute):     The raise statement. (line  31)
* __debug__:                             The assert statement.
                                                              (line  21)
* __defaults__ (function attribute):     The standard type hierarchy.
                                                              (line 294)
* __del__() (object method):             Basic customization. (line  46)
* __delattr__() (object method):         Customizing attribute access.
                                                              (line  56)
* __delete__() (object method):          Implementing Descriptors.
                                                              (line  26)
* __delitem__() (object method):         Emulating container types.
                                                              (line  80)
* __dict__ (class attribute):            The standard type hierarchy.
                                                              (line 463)
* __dict__ (function attribute):         The standard type hierarchy.
                                                              (line 294)
* __dict__ (instance attribute):         The standard type hierarchy.
                                                              (line 496)
* __dict__ (module attribute):           The standard type hierarchy.
                                                              (line 414)
* __dir__() (object method):             Customizing attribute access.
                                                              (line  61)
* __divmod__() (object method):          Emulating numeric types.
                                                              (line  11)
* __doc__ (class attribute):             The standard type hierarchy.
                                                              (line 463)
* __doc__ (function attribute):          The standard type hierarchy.
                                                              (line 294)
* __doc__ (method attribute):            The standard type hierarchy.
                                                              (line 298)
* __doc__ (module attribute):            The standard type hierarchy.
                                                              (line 423)
* __enter__() (object method):           With Statement Context Managers.
                                                              (line  20)
* __eq__() (object method):              Basic customization. (line 138)
* __exit__() (object method):            With Statement Context Managers.
                                                              (line  26)
* __file__:                              The import statement.
                                                              (line  94)
* __file__ (module attribute):           The standard type hierarchy.
                                                              (line 423)
* __float__() (object method):           Emulating numeric types.
                                                              (line 103)
* __floordiv__() (object method):        Emulating numeric types.
                                                              (line  11)
* __format__() (object method):          Basic customization. (line 124)
* __func__ (method attribute):           The standard type hierarchy.
                                                              (line 298)
* __ge__() (object method):              Basic customization. (line 138)
* __get__() (object method):             Implementing Descriptors.
                                                              (line  13)
* __getattr__() (object method):         Customizing attribute access.
                                                              (line  10)
* __getattribute__() (object method):    Customizing attribute access.
                                                              (line  29)
* __getitem__() (mapping object method): Special method names.
                                                              (line   6)
* __getitem__() (object method):         Emulating container types.
                                                              (line  56)
* __globals__ (function attribute):      The standard type hierarchy.
                                                              (line 294)
* __gt__() (object method):              Basic customization. (line 138)
* __hash__() (object method):            Basic customization. (line 179)
* __iadd__() (object method):            Emulating numeric types.
                                                              (line  71)
* __iand__() (object method):            Emulating numeric types.
                                                              (line  71)
* __ifloordiv__() (object method):       Emulating numeric types.
                                                              (line  71)
* __ilshift__() (object method):         Emulating numeric types.
                                                              (line  71)
* __imod__() (object method):            Emulating numeric types.
                                                              (line  71)
* __imul__() (object method):            Emulating numeric types.
                                                              (line  71)
* __index__() (object method):           Emulating numeric types.
                                                              (line 111)
* __init__() (object method):            Basic customization. (line  36)
* __instancecheck__() (class method):    Customizing instance and subclass checks.
                                                              (line  14)
* __int__() (object method):             Emulating numeric types.
                                                              (line 103)
* __invert__() (object method):          Emulating numeric types.
                                                              (line  96)
* __ior__() (object method):             Emulating numeric types.
                                                              (line  71)
* __ipow__() (object method):            Emulating numeric types.
                                                              (line  71)
* __irshift__() (object method):         Emulating numeric types.
                                                              (line  71)
* __isub__() (object method):            Emulating numeric types.
                                                              (line  71)
* __iter__() (object method):            Emulating container types.
                                                              (line  88)
* __itruediv__() (object method):        Emulating numeric types.
                                                              (line  71)
* __ixor__() (object method):            Emulating numeric types.
                                                              (line  71)
* __kwdefaults__ (function attribute):   The standard type hierarchy.
                                                              (line 294)
* __le__() (object method):              Basic customization. (line 138)
* __len__() (mapping object method):     Basic customization. (line 224)
* __len__() (object method):             Emulating container types.
                                                              (line  37)
* __loader__:                            The import statement.
                                                              (line  94)
* __lshift__() (object method):          Emulating numeric types.
                                                              (line  11)
* __lt__() (object method):              Basic customization. (line 138)
* __mod__() (object method):             Emulating numeric types.
                                                              (line  11)
* __module__ (class attribute):          The standard type hierarchy.
                                                              (line 463)
* __module__ (function attribute):       The standard type hierarchy.
                                                              (line 294)
* __module__ (method attribute):         The standard type hierarchy.
                                                              (line 298)
* __mul__() (object method):             Emulating numeric types.
                                                              (line  11)
* __name__:                              The import statement.
                                                              (line  94)
* __name__ (class attribute):            The standard type hierarchy.
                                                              (line 463)
* __name__ (function attribute):         The standard type hierarchy.
                                                              (line 294)
* __name__ (method attribute):           The standard type hierarchy.
                                                              (line 298)
* __name__ (module attribute):           The standard type hierarchy.
                                                              (line 423)
* __ne__() (object method):              Basic customization. (line 138)
* __neg__() (object method):             Emulating numeric types.
                                                              (line  96)
* __new__() (object method):             Basic customization. (line   6)
* __next__() (generator method):         Yield expressions.   (line  46)
* __or__() (object method):              Emulating numeric types.
                                                              (line  11)
* __package__:                           The import statement.
                                                              (line  94)
* __path__:                              The import statement.
                                                              (line  42)
* __pos__() (object method):             Emulating numeric types.
                                                              (line  96)
* __pow__() (object method):             Emulating numeric types.
                                                              (line  11)
* __radd__() (object method):            Emulating numeric types.
                                                              (line  39)
* __rand__() (object method):            Emulating numeric types.
                                                              (line  39)
* __rdivmod__() (object method):         Emulating numeric types.
                                                              (line  39)
* __repr__() (object method):            Basic customization. (line 100)
* __reversed__() (object method):        Emulating container types.
                                                              (line  99)
* __rfloordiv__() (object method):       Emulating numeric types.
                                                              (line  39)
* __rlshift__() (object method):         Emulating numeric types.
                                                              (line  39)
* __rmod__() (object method):            Emulating numeric types.
                                                              (line  39)
* __rmul__() (object method):            Emulating numeric types.
                                                              (line  39)
* __ror__() (object method):             Emulating numeric types.
                                                              (line  39)
* __round__() (object method):           Emulating numeric types.
                                                              (line 103)
* __rpow__() (object method):            Emulating numeric types.
                                                              (line  39)
* __rrshift__() (object method):         Emulating numeric types.
                                                              (line  39)
* __rshift__() (object method):          Emulating numeric types.
                                                              (line  11)
* __rsub__() (object method):            Emulating numeric types.
                                                              (line  39)
* __rtruediv__() (object method):        Emulating numeric types.
                                                              (line  39)
* __rxor__() (object method):            Emulating numeric types.
                                                              (line  39)
* __self__ (method attribute):           The standard type hierarchy.
                                                              (line 298)
* __set__() (object method):             Implementing Descriptors.
                                                              (line  22)
* __setattr__() (object method):         Customizing attribute access.
                                                              (line  46)
* __setitem__() (object method):         Emulating container types.
                                                              (line  72)
* __str__() (object method):             Basic customization. (line 115)
* __sub__() (object method):             Emulating numeric types.
                                                              (line  11)
* __subclasscheck__() (class method):    Customizing instance and subclass checks.
                                                              (line  19)
* __traceback__ (exception attribute):   The raise statement. (line   6)
* __truediv__() (object method):         Emulating numeric types.
                                                              (line  11)
* __xor__() (object method):             Emulating numeric types.
                                                              (line  11)
* addition:                              Binary arithmetic operations.
                                                              (line  54)
* anonymous; function:                   Lambdas.             (line   6)
* arithmetic; conversion:                Arithmetic conversions.
                                                              (line   6)
* ASCII <1>:                             String and Bytes literals.
                                                              (line   6)
* ASCII:                                 Notation.            (line  31)
* assignment; statement <1>:             The standard type hierarchy.
                                                              (line 157)
* assignment; statement:                 Assignment statements.
                                                              (line   6)
* atom:                                  Atoms.               (line   6)
* attribute:                             The standard type hierarchy.
                                                              (line  13)
* attribute; assignment:                 Assignment statements.
                                                              (line  86)
* attribute; deletion:                   The del statement.   (line  20)
* attribute; reference:                  Attribute references.
                                                              (line   6)
* augmented; assignment:                 Augmented assignment statements.
                                                              (line   6)
* backslash character:                   Explicit line joining.
                                                              (line   6)
* binary literal:                        Numeric literals.    (line   6)
* binary; arithmetic; operation:         Binary arithmetic operations.
                                                              (line   6)
* binary; bitwise; operation:            Binary bitwise operations.
                                                              (line   6)
* binding; name <1>:                     Naming and binding.  (line   6)
* binding; name:                         Assignment statements.
                                                              (line   6)
* bitwise; and:                          Binary bitwise operations.
                                                              (line  12)
* bitwise; or:                           Binary bitwise operations.
                                                              (line  19)
* bitwise; xor:                          Binary bitwise operations.
                                                              (line  16)
* blank line:                            Blank lines.         (line   6)
* block:                                 Naming and binding.  (line  11)
* BNF <1>:                               Expressions.         (line   6)
* BNF:                                   Notation.            (line   6)
* Boolean; operation:                    Boolean operations.  (line   6)
* built-in function; abs:                Emulating numeric types.
                                                              (line 100)
* built-in function; call:               Calls.               (line 126)
* built-in function; chr:                The standard type hierarchy.
                                                              (line 124)
* built-in function; compile:            The global statement.
                                                              (line  27)
* built-in function; complex:            Emulating numeric types.
                                                              (line 107)
* built-in function; divmod:             Emulating numeric types.
                                                              (line  24)
* built-in function; eval <1>:           Expression input.    (line   6)
* built-in function; eval:               The global statement.
                                                              (line  27)
* built-in function; exec:               The global statement.
                                                              (line  27)
* built-in function; float:              Emulating numeric types.
                                                              (line 107)
* built-in function; hash:               Basic customization. (line 180)
* built-in function; id:                 Objects values and types.
                                                              (line  11)
* built-in function; int:                Emulating numeric types.
                                                              (line 107)
* built-in function; len <1>:            Emulating container types.
                                                              (line  38)
* built-in function; len:                The standard type hierarchy.
                                                              (line 207)
* built-in function; open:               The standard type hierarchy.
                                                              (line 500)
* built-in function; ord:                The standard type hierarchy.
                                                              (line 124)
* built-in function; pow:                Emulating numeric types.
                                                              (line  24)
* built-in function; print:              Basic customization. (line 116)
* built-in function; range:              The for statement.   (line  32)
* built-in function; repr <1>:           Basic customization. (line 101)
* built-in function; repr:               Expression statements.
                                                              (line  17)
* built-in function; round:              Emulating numeric types.
                                                              (line 107)
* built-in function; slice:              The standard type hierarchy.
                                                              (line 617)
* built-in function; str <1>:            Basic customization. (line 125)
* built-in function; str:                The standard type hierarchy.
                                                              (line 124)
* built-in function; type:               Objects values and types.
                                                              (line  11)
* built-in method; call:                 Calls.               (line 126)
* built-in; method:                      The standard type hierarchy.
                                                              (line 381)
* byte:                                  The standard type hierarchy.
                                                              (line 149)
* bytearray:                             The standard type hierarchy.
                                                              (line 170)
* bytecode:                              The standard type hierarchy.
                                                              (line 518)
* bytes:                                 The standard type hierarchy.
                                                              (line 149)
* bytes literal:                         String and Bytes literals.
                                                              (line   6)
* C:                                     String and Bytes literals.
                                                              (line  58)
* C; language <1>:                       The standard type hierarchy.
                                                              (line  79)
* C; language <2>:                       Comparisons.         (line   6)
* C; language:                           The standard type hierarchy.
                                                              (line 370)
* call:                                  Calls.               (line   6)
* call; instance:                        Emulating callable objects.
                                                              (line   7)
* chaining; comparisons:                 Comparisons.         (line  17)
* character <1>:                         Subscriptions.       (line  38)
* character:                             The standard type hierarchy.
                                                              (line 124)
* class instance; attribute:             The standard type hierarchy.
                                                              (line 471)
* class instance; attribute; assignment: The standard type hierarchy.
                                                              (line 487)
* class instance; call:                  Calls.               (line 133)
* class object; call <1>:                The standard type hierarchy.
                                                              (line 448)
* class object; call:                    Calls.               (line 130)
* class; attribute:                      The standard type hierarchy.
                                                              (line 448)
* class; attribute; assignment:          The standard type hierarchy.
                                                              (line 457)
* class; constructor:                    Basic customization. (line  37)
* class; definition <1>:                 The return statement.
                                                              (line   6)
* class; definition:                     Class definitions.   (line   6)
* class; instance:                       The standard type hierarchy.
                                                              (line 471)
* class; name:                           Class definitions.   (line   6)
* clause:                                Compound statements. (line  18)
* close() (generator method):            Yield expressions.   (line  78)
* co_argcount (code object attribute):   The standard type hierarchy.
                                                              (line 529)
* co_cellvars (code object attribute):   The standard type hierarchy.
                                                              (line 529)
* co_code (code object attribute):       The standard type hierarchy.
                                                              (line 529)
* co_consts (code object attribute):     The standard type hierarchy.
                                                              (line 529)
* co_filename (code object attribute):   The standard type hierarchy.
                                                              (line 529)
* co_firstlineno (code object attribute): The standard type hierarchy.
                                                              (line 529)
* co_flags (code object attribute):      The standard type hierarchy.
                                                              (line 529)
* co_freevars (code object attribute):   The standard type hierarchy.
                                                              (line 529)
* co_lnotab (code object attribute):     The standard type hierarchy.
                                                              (line 529)
* co_name (code object attribute):       The standard type hierarchy.
                                                              (line 529)
* co_names (code object attribute):      The standard type hierarchy.
                                                              (line 529)
* co_nlocals (code object attribute):    The standard type hierarchy.
                                                              (line 529)
* co_stacksize (code object attribute):  The standard type hierarchy.
                                                              (line 529)
* co_varnames (code object attribute):   The standard type hierarchy.
                                                              (line 529)
* code; block:                           Naming and binding.  (line   6)
* comma:                                 Parenthesized forms. (line  20)
* command line:                          Complete Python programs.
                                                              (line  24)
* comment:                               Comments.            (line   6)
* comparison:                            Comparisons.         (line   6)
* comparisons:                           Basic customization. (line 145)
* complex literal:                       Numeric literals.    (line   6)
* complex; number:                       The standard type hierarchy.
                                                              (line  90)
* compound; statement:                   Compound statements. (line   6)
* Conditional; expression:               Boolean operations.  (line   6)
* conditional; expression:               Conditional expressions.
                                                              (line   6)
* constant:                              Literals.            (line   6)
* container <1>:                         The standard type hierarchy.
                                                              (line 448)
* container:                             Objects values and types.
                                                              (line  62)
* context manager:                       With Statement Context Managers.
                                                              (line  14)
* coroutine:                             Yield expressions.   (line  29)
* dangling; else:                        Compound statements. (line  51)
* data:                                  Objects values and types.
                                                              (line   6)
* data; type:                            The standard type hierarchy.
                                                              (line   6)
* datum:                                 Dictionary displays. (line   6)
* debugging; assertions:                 The assert statement.
                                                              (line   6)
* decimal literal:                       Numeric literals.    (line   6)
* DEDENT token <1>:                      Indentation.         (line  33)
* DEDENT token:                          Compound statements. (line  51)
* default; parameter; value:             Function definitions.
                                                              (line  48)
* delete:                                The standard type hierarchy.
                                                              (line 157)
* deletion; target:                      The del statement.   (line   6)
* deletion; target; list:                The del statement.   (line   6)
* delimiters:                            Delimiters.          (line   6)
* destructor <1>:                        Assignment statements.
                                                              (line  75)
* destructor:                            Basic customization. (line  47)
* dictionary; display:                   Dictionary displays. (line   6)
* division:                              Binary arithmetic operations.
                                                              (line  23)
* docstring:                             Class definitions.   (line   6)
* documentation string:                  The standard type hierarchy.
                                                              (line 566)
* empty; list:                           List displays.       (line   6)
* empty; tuple <1>:                      The standard type hierarchy.
                                                              (line 139)
* empty; tuple:                          Parenthesized forms. (line  16)
* encodings:                             Encoding declarations.
                                                              (line   6)
* environment:                           Naming and binding.  (line  39)
* error handling:                        Exceptions.          (line   6)
* errors:                                Exceptions.          (line   6)
* escape sequence:                       String and Bytes literals.
                                                              (line  58)
* evaluation; order:                     Evaluation order.    (line   6)
* exc_info (in module sys):              The standard type hierarchy.
                                                              (line 592)
* exception <1>:                         Exceptions.          (line   6)
* exception:                             The raise statement. (line   6)
* exception handler:                     Exceptions.          (line   6)
* exception; AssertionError:             The assert statement.
                                                              (line  21)
* exception; AttributeError:             Attribute references.
                                                              (line  10)
* exception; chaining:                   The raise statement. (line  31)
* exception; GeneratorExit:              Yield expressions.   (line  78)
* exception; handler:                    The standard type hierarchy.
                                                              (line 592)
* exception; ImportError:                The import statement.
                                                              (line 119)
* exception; NameError:                  Identifiers Names.   (line  10)
* exception; StopIteration <1>:          The yield statement. (line   6)
* exception; StopIteration:              Yield expressions.   (line  46)
* exception; TypeError:                  Unary arithmetic and bitwise operations.
                                                              (line  20)
* exception; ValueError:                 Shifting operations. (line  15)
* exception; ZeroDivisionError:          Binary arithmetic operations.
                                                              (line  23)
* exclusive; or:                         Binary bitwise operations.
                                                              (line  16)
* execution model:                       Execution model.     (line   6)
* execution; frame <1>:                  Naming and binding.  (line  20)
* execution; frame:                      Class definitions.   (line   6)
* execution; stack:                      The standard type hierarchy.
                                                              (line 592)
* expression:                            Expressions.         (line   6)
* expression; list <1>:                  Expression lists.    (line   6)
* expression; list:                      Expression statements.
                                                              (line   6)
* expression; statement:                 Expression statements.
                                                              (line   6)
* extension; module:                     The standard type hierarchy.
                                                              (line   6)
* f_back (frame attribute):              The standard type hierarchy.
                                                              (line 574)
* f_builtins (frame attribute):          The standard type hierarchy.
                                                              (line 574)
* f_code (frame attribute):              The standard type hierarchy.
                                                              (line 574)
* f_globals (frame attribute):           The standard type hierarchy.
                                                              (line 574)
* f_lasti (frame attribute):             The standard type hierarchy.
                                                              (line 574)
* f_lineno (frame attribute):            The standard type hierarchy.
                                                              (line 583)
* f_locals (frame attribute):            The standard type hierarchy.
                                                              (line 574)
* f_trace (frame attribute):             The standard type hierarchy.
                                                              (line 583)
* False:                                 The standard type hierarchy.
                                                              (line  66)
* finder:                                The import statement.
                                                              (line  42)
* finder; find_module:                   The import statement.
                                                              (line  42)
* floating point literal:                Numeric literals.    (line   6)
* floating point; number:                The standard type hierarchy.
                                                              (line  79)
* free; variable:                        Naming and binding.  (line  44)
* function; annotations:                 Function definitions.
                                                              (line  85)
* function; argument:                    The standard type hierarchy.
                                                              (line 235)
* function; call <1>:                    Calls.               (line 126)
* function; call <2>:                    The standard type hierarchy.
                                                              (line 235)
* function; call:                        Calls.               (line 118)
* function; definition <1>:              The return statement.
                                                              (line   6)
* function; definition:                  Function definitions.
                                                              (line   6)
* function; generator:                   The yield statement. (line   6)
* function; name:                        Function definitions.
                                                              (line   6)
* future; statement:                     Future statements.   (line   6)
* garbage collection:                    Objects values and types.
                                                              (line  32)
* generator; expression:                 Generator expressions.
                                                              (line   6)
* generator; function <1>:               The yield statement. (line   6)
* generator; function <2>:               Yield expressions.   (line   6)
* generator; function:                   The standard type hierarchy.
                                                              (line 357)
* generator; iterator <1>:               The yield statement. (line   6)
* generator; iterator:                   The standard type hierarchy.
                                                              (line 357)
* generic; special; attribute:           The standard type hierarchy.
                                                              (line  13)
* global; name; binding:                 The global statement.
                                                              (line   6)
* global; namespace:                     The standard type hierarchy.
                                                              (line 294)
* grammar:                               Notation.            (line   6)
* grouping:                              Indentation.         (line   6)
* handle an exception:                   Exceptions.          (line   6)
* hash character:                        Comments.            (line   6)
* hashable:                              Dictionary displays. (line  29)
* hexadecimal literal:                   Numeric literals.    (line   6)
* identifier <1>:                        Identifiers and keywords.
                                                              (line   6)
* identifier:                            Identifiers Names.   (line   6)
* identity of an object:                 Objects values and types.
                                                              (line  11)
* identity; test:                        Comparisons.         (line 129)
* imaginary literal:                     Numeric literals.    (line   6)
* immutable object:                      Objects values and types.
                                                              (line  11)
* immutable; data; type:                 Literals<2>.         (line  17)
* immutable; object <1>:                 Literals<2>.         (line  17)
* immutable; object:                     Dictionary displays. (line  29)
* inclusive; or:                         Binary bitwise operations.
                                                              (line  19)
* INDENT token:                          Indentation.         (line  33)
* indentation:                           Indentation.         (line   6)
* index operation:                       The standard type hierarchy.
                                                              (line  97)
* indices() (slice method):              The standard type hierarchy.
                                                              (line 627)
* inheritance:                           Class definitions.   (line   6)
* input:                                 Expression input.    (line   6)
* input; raw:                            Expression input.    (line  12)
* instance; call:                        Calls.               (line 138)
* integer:                               The standard type hierarchy.
                                                              (line 124)
* integer literal:                       Numeric literals.    (line   6)
* integer; representation:               The standard type hierarchy.
                                                              (line  74)
* interactive mode:                      Complete Python programs.
                                                              (line  18)
* internal type:                         The standard type hierarchy.
                                                              (line 513)
* interpreter:                           Top-level components.
                                                              (line   6)
* inversion:                             Unary arithmetic and bitwise operations.
                                                              (line  16)
* invocation:                            The standard type hierarchy.
                                                              (line 235)
* item selection:                        The standard type hierarchy.
                                                              (line  97)
* Java; language:                        The standard type hierarchy.
                                                              (line  79)
* key:                                   Dictionary displays. (line   6)
* key/datum pair:                        Dictionary displays. (line   6)
* keyword:                               Keywords.            (line   6)
* keyword; elif:                         The if statement.    (line   6)
* keyword; else <1>:                     The if statement.    (line   6)
* keyword; else <2>:                     The for statement.   (line   6)
* keyword; else <3>:                     The while statement. (line   6)
* keyword; else <4>:                     The break statement. (line  12)
* keyword; else <5>:                     The try statement.   (line  78)
* keyword; else <6>:                     The if statement.    (line   6)
* keyword; else:                         The while statement. (line   6)
* keyword; except:                       The try statement.   (line   6)
* keyword; finally <1>:                  The try statement.   (line  83)
* keyword; finally <2>:                  The break statement. (line  18)
* keyword; finally <3>:                  The continue statement.
                                                              (line   6)
* keyword; finally <4>:                  The try statement.   (line   6)
* keyword; finally:                      The return statement.
                                                              (line  17)
* keyword; from:                         The import statement.
                                                              (line   6)
* keyword; in:                           The for statement.   (line   6)
* keyword; yield:                        Yield expressions.   (line   6)
* lambda; expression:                    Lambdas.             (line   6)
* lambda; form <1>:                      Lambdas.             (line   6)
* lambda; form:                          Function definitions.
                                                              (line  97)
* last_traceback (in module sys):        The standard type hierarchy.
                                                              (line 592)
* leading whitespace:                    Indentation.         (line   6)
* lexical analysis:                      Lexical analysis.    (line   6)
* lexical definitions:                   Notation.            (line  31)
* line continuation:                     Explicit line joining.
                                                              (line   6)
* line joining <1>:                      Explicit line joining.
                                                              (line   6)
* line joining:                          Logical lines.       (line   6)
* line structure:                        Line structure.      (line   6)
* list; comprehensions:                  List displays.       (line   6)
* list; display:                         List displays.       (line   6)
* literal <1>:                           Literals.            (line   6)
* literal:                               Literals<2>.         (line   6)
* loader:                                The import statement.
                                                              (line  81)
* loader; load_module:                   The import statement.
                                                              (line  81)
* logical line:                          Logical lines.       (line   6)
* loop control; target:                  The break statement. (line  12)
* loop; over mutable sequence:           The for statement.   (line  38)
* loop; statement <1>:                   The continue statement.
                                                              (line   6)
* loop; statement <2>:                   The break statement. (line   6)
* loop; statement <3>:                   The for statement.   (line   6)
* loop; statement:                       The while statement. (line   6)
* makefile() (socket method):            The standard type hierarchy.
                                                              (line 500)
* membership; test:                      Comparisons.         (line 126)
* method; call:                          Calls.               (line 126)
* minus:                                 Unary arithmetic and bitwise operations.
                                                              (line  10)
* module; __main__ <1>:                  Complete Python programs.
                                                              (line  18)
* module; __main__:                      Naming and binding.  (line 105)
* module; array:                         The standard type hierarchy.
                                                              (line 176)
* module; builtins:                      Complete Python programs.
                                                              (line   6)
* module; dbm.gnu:                       The standard type hierarchy.
                                                              (line 230)
* module; dbm.ndbm:                      The standard type hierarchy.
                                                              (line 230)
* module; importing:                     The import statement.
                                                              (line   6)
* module; io:                            The standard type hierarchy.
                                                              (line 500)
* module; namespace:                     The standard type hierarchy.
                                                              (line 423)
* module; sys <1>:                       Complete Python programs.
                                                              (line   6)
* module; sys:                           The try statement.   (line  69)
* modulo:                                Binary arithmetic operations.
                                                              (line  30)
* multiplication:                        Binary arithmetic operations.
                                                              (line  15)
* mutable object:                        Objects values and types.
                                                              (line  11)
* mutable sequence; loop over:           The for statement.   (line  38)
* name <1>:                              Identifiers and keywords.
                                                              (line   6)
* name <2>:                              Naming and binding.  (line   6)
* name:                                  Identifiers Names.   (line   6)
* name; binding <1>:                     Class definitions.   (line   6)
* name; binding <2>:                     The import statement.
                                                              (line 119)
* name; binding:                         Function definitions.
                                                              (line   6)
* name; mangling:                        Identifiers Names.   (line  14)
* NameError (built-in exception):        Naming and binding.  (line  50)
* namespace:                             Naming and binding.  (line   6)
* negation:                              Unary arithmetic and bitwise operations.
                                                              (line  10)
* NEWLINE token <1>:                     Compound statements. (line  51)
* NEWLINE token:                         Logical lines.       (line   6)
* notation:                              Notation.            (line   6)
* null; operation:                       The pass statement.  (line   6)
* number:                                Numeric literals.    (line   6)
* numeric literal:                       Numeric literals.    (line   6)
* object:                                Objects values and types.
                                                              (line   6)
* object.__slots__ (built-in variable):  __slots__.           (line  17)
* object; Boolean:                       The standard type hierarchy.
                                                              (line  66)
* object; built-in function <1>:         The standard type hierarchy.
                                                              (line 370)
* object; built-in function:             Calls.               (line 126)
* object; built-in method <1>:           The standard type hierarchy.
                                                              (line 381)
* object; built-in method:               Calls.               (line 126)
* object; callable <1>:                  Calls.               (line   6)
* object; callable:                      The standard type hierarchy.
                                                              (line 235)
* object; class <1>:                     Calls.               (line 130)
* object; class <2>:                     Class definitions.   (line   6)
* object; class:                         The standard type hierarchy.
                                                              (line 448)
* object; class instance <1>:            The standard type hierarchy.
                                                              (line 471)
* object; class instance <2>:            Calls.               (line 133)
* object; class instance:                The standard type hierarchy.
                                                              (line 448)
* object; code:                          The standard type hierarchy.
                                                              (line 518)
* object; complex:                       The standard type hierarchy.
                                                              (line  90)
* object; dictionary <1>:                Basic customization. (line 180)
* object; dictionary <2>:                Assignment statements.
                                                              (line 124)
* object; dictionary <3>:                The standard type hierarchy.
                                                              (line 448)
* object; dictionary <4>:                Dictionary displays. (line   6)
* object; dictionary:                    Subscriptions.       (line   6)
* object; Ellipsis:                      The standard type hierarchy.
                                                              (line  35)
* object; file:                          Expression input.    (line  12)
* object; floating point:                The standard type hierarchy.
                                                              (line  79)
* object; frame:                         The standard type hierarchy.
                                                              (line 571)
* object; frozenset:                     The standard type hierarchy.
                                                              (line 201)
* object; function <1>:                  Calls.               (line 118)
* object; function <2>:                  Function definitions.
                                                              (line   6)
* object; function <3>:                  Calls.               (line 126)
* object; function:                      The standard type hierarchy.
                                                              (line 370)
* object; generator <1>:                 The standard type hierarchy.
                                                              (line 550)
* object; generator <2>:                 Generator expressions.
                                                              (line   6)
* object; generator:                     Yield expressions.   (line  43)
* object; immutable:                     The standard type hierarchy.
                                                              (line 115)
* object; immutable sequence:            The standard type hierarchy.
                                                              (line 115)
* object; instance <1>:                  Calls.               (line 133)
* object; instance:                      The standard type hierarchy.
                                                              (line 471)
* object; integer:                       The standard type hierarchy.
                                                              (line  51)
* object; list <1>:                      List displays.       (line   6)
* object; list <2>:                      The standard type hierarchy.
                                                              (line 164)
* object; list <3>:                      Assignment statements.
                                                              (line 115)
* object; list <4>:                      Attribute references.
                                                              (line  10)
* object; list <5>:                      Subscriptions.       (line   6)
* object; list:                          Slicings.            (line   6)
* object; mapping <1>:                   Assignment statements.
                                                              (line 124)
* object; mapping <2>:                   Subscriptions.       (line   6)
* object; mapping:                       The standard type hierarchy.
                                                              (line 207)
* object; method <1>:                    Calls.               (line 126)
* object; method:                        The standard type hierarchy.
                                                              (line 381)
* object; module <1>:                    The standard type hierarchy.
                                                              (line 401)
* object; module:                        Attribute references.
                                                              (line  10)
* object; mutable <1>:                   Assignment statements.
                                                              (line   6)
* object; mutable:                       The standard type hierarchy.
                                                              (line 157)
* object; mutable sequence:              The standard type hierarchy.
                                                              (line 157)
* object; None <1>:                      Expression statements.
                                                              (line  17)
* object; None:                          The standard type hierarchy.
                                                              (line  19)
* object; NotImplemented:                The standard type hierarchy.
                                                              (line  26)
* object; numeric:                       The standard type hierarchy.
                                                              (line  40)
* object; sequence <1>:                  The standard type hierarchy.
                                                              (line  97)
* object; sequence <2>:                  Assignment statements.
                                                              (line 115)
* object; sequence <3>:                  Subscriptions.       (line   6)
* object; sequence <4>:                  The standard type hierarchy.
                                                              (line 492)
* object; sequence <5>:                  Slicings.            (line   6)
* object; sequence <6>:                  Comparisons.         (line 126)
* object; sequence:                      The for statement.   (line   6)
* object; set <1>:                       Set displays.        (line   6)
* object; set:                           The standard type hierarchy.
                                                              (line 196)
* object; set type:                      The standard type hierarchy.
                                                              (line 180)
* object; slice:                         Emulating container types.
                                                              (line  57)
* object; string <1>:                    Subscriptions.       (line   6)
* object; string:                        Slicings.            (line   6)
* object; traceback <1>:                 The try statement.   (line  69)
* object; traceback <2>:                 The standard type hierarchy.
                                                              (line 592)
* object; traceback:                     The raise statement. (line  22)
* object; tuple <1>:                     Subscriptions.       (line   6)
* object; tuple <2>:                     Expression lists.    (line   8)
* object; tuple <3>:                     Slicings.            (line   6)
* object; tuple:                         The standard type hierarchy.
                                                              (line 139)
* object; user-defined function <1>:     The standard type hierarchy.
                                                              (line 239)
* object; user-defined function <2>:     Function definitions.
                                                              (line   6)
* object; user-defined function:         Calls.               (line 118)
* object; user-defined method:           The standard type hierarchy.
                                                              (line 295)
* octal literal:                         Numeric literals.    (line   6)
* operator; and:                         Boolean operations.  (line  21)
* operator; in:                          Comparisons.         (line 126)
* operator; is:                          Comparisons.         (line 129)
* operator; is not:                      Comparisons.         (line 129)
* operator; not:                         Boolean operations.  (line  18)
* operator; not in:                      Comparisons.         (line 126)
* operator; or:                          Boolean operations.  (line  25)
* operator; overloading:                 Special method names.
                                                              (line   6)
* operator; precedence:                  Summary.             (line   6)
* operators:                             Operators.           (line   6)
* output:                                Expression statements.
                                                              (line  17)
* package:                               The import statement.
                                                              (line  25)
* parenthesized form:                    Parenthesized forms. (line   6)
* parser:                                Lexical analysis.    (line   6)
* physical line <1>:                     String and Bytes literals.
                                                              (line  58)
* physical line <2>:                     Explicit line joining.
                                                              (line   6)
* physical line:                         Logical lines.       (line   6)
* plus:                                  Unary arithmetic and bitwise operations.
                                                              (line  14)
* popen() (in module os):                The standard type hierarchy.
                                                              (line 500)
* primary:                               Primaries.           (line   6)
* private; names:                        Identifiers Names.   (line  14)
* procedure; call:                       Expression statements.
                                                              (line  17)
* program:                               Complete Python programs.
                                                              (line   6)
* Python Enhancement Proposals; PEP 0255 <1>: The yield statement.
                                                              (line  36)
* Python Enhancement Proposals; PEP 0255: Yield expressions.  (line 119)
* Python Enhancement Proposals; PEP 0342 <1>: The yield statement.
                                                              (line  40)
* Python Enhancement Proposals; PEP 0342: Yield expressions.  (line 123)
* Python Enhancement Proposals; PEP 0343 <1>: The with statement.
                                                              (line  71)
* Python Enhancement Proposals; PEP 0343: With Statement Context Managers.
                                                              (line  43)
* Python Enhancement Proposals; PEP 236: Future statements.   (line  78)
* Python Enhancement Proposals; PEP 302: The import statement.
                                                              (line  43)
* Python Enhancement Proposals; PEP 308: Conditional expressions.
                                                              (line  17)
* Python Enhancement Proposals; PEP 3104: The nonlocal statement.
                                                              (line  27)
* Python Enhancement Proposals; PEP 3115: Class definitions.  (line  68)
* Python Enhancement Proposals; PEP 3119: Customizing instance and subclass checks.
                                                              (line  32)
* Python Enhancement Proposals; PEP 3120: Lexical analysis.   (line  12)
* Python Enhancement Proposals; PEP 3129: Class definitions.  (line  68)
* Python Enhancement Proposals; PEP 3131: Identifiers and keywords.
                                                              (line  10)
* Python Enhancement Proposals; PEP 3132: Assignment statements.
                                                              (line 169)
* Python Enhancement Proposals; PEP 328: The import statement.
                                                              (line 157)
* raise an exception:                    Exceptions.          (line   6)
* raising; exception:                    The raise statement. (line   6)
* raw string:                            String and Bytes literals.
                                                              (line  36)
* readline() (file method):              Expression input.    (line  12)
* rebinding; name:                       Assignment statements.
                                                              (line   6)
* reference counting:                    Objects values and types.
                                                              (line  32)
* relative; import:                      The import statement.
                                                              (line 145)
* reserved word:                         Keywords.            (line   6)
* restricted; execution:                 Naming and binding.  (line  91)
* scope:                                 Naming and binding.  (line   6)
* send() (generator method):             Yield expressions.   (line  60)
* sequence; item:                        Subscriptions.       (line   6)
* set; display:                          Set displays.        (line   6)
* shifting; operation:                   Shifting operations. (line   6)
* simple; statement:                     Simple statements.   (line   6)
* singleton; tuple:                      The standard type hierarchy.
                                                              (line 139)
* slice:                                 Slicings.            (line   6)
* slicing <1>:                           The standard type hierarchy.
                                                              (line 103)
* slicing <2>:                           Slicings.            (line   6)
* slicing:                               The standard type hierarchy.
                                                              (line 157)
* slicing; assignment:                   Assignment statements.
                                                              (line 135)
* source character set:                  Encoding declarations.
                                                              (line   6)
* space:                                 Indentation.         (line   6)
* special; attribute:                    The standard type hierarchy.
                                                              (line  13)
* stack; trace:                          The standard type hierarchy.
                                                              (line 592)
* Standard C:                            String and Bytes literals.
                                                              (line  58)
* standard input:                        Complete Python programs.
                                                              (line  24)
* standard; output:                      Expression statements.
                                                              (line  17)
* start (slice object attribute) <1>:    Slicings.            (line  27)
* start (slice object attribute):        The standard type hierarchy.
                                                              (line 621)
* statement grouping:                    Indentation.         (line   6)
* statement; *:                          Function definitions.
                                                              (line  73)
* statement; **:                         Function definitions.
                                                              (line  73)
* statement; @:                          Function definitions.
                                                              (line  31)
* statement; assert:                     The assert statement.
                                                              (line   6)
* statement; assignment, augmented:      Augmented assignment statements.
                                                              (line   6)
* statement; break <1>:                  The try statement.   (line  78)
* statement; break <2>:                  The break statement. (line   6)
* statement; break <3>:                  The try statement.   (line  94)
* statement; break <4>:                  The for statement.   (line  23)
* statement; break:                      The while statement. (line  17)
* statement; class:                      Class definitions.   (line   6)
* statement; continue <1>:               The try statement.   (line  78)
* statement; continue <2>:               The for statement.   (line  23)
* statement; continue <3>:               The try statement.   (line  94)
* statement; continue <4>:               The continue statement.
                                                              (line   6)
* statement; continue:                   The while statement. (line  17)
* statement; def:                        Function definitions.
                                                              (line   6)
* statement; del <1>:                    The standard type hierarchy.
                                                              (line 157)
* statement; del <2>:                    The del statement.   (line   6)
* statement; del:                        Basic customization. (line  47)
* statement; for <1>:                    The break statement. (line   6)
* statement; for <2>:                    The continue statement.
                                                              (line   6)
* statement; for:                        The for statement.   (line   6)
* statement; from:                       Naming and binding.  (line  55)
* statement; global <1>:                 The del statement.   (line  15)
* statement; global:                     The global statement.
                                                              (line   6)
* statement; if:                         The if statement.    (line   6)
* statement; import <1>:                 The import statement.
                                                              (line   6)
* statement; import:                     The standard type hierarchy.
                                                              (line 401)
* statement; nonlocal:                   The nonlocal statement.
                                                              (line   6)
* statement; pass:                       The pass statement.  (line   6)
* statement; raise:                      The raise statement. (line   6)
* statement; return <1>:                 The return statement.
                                                              (line   6)
* statement; return:                     The try statement.   (line  78)
* statement; try <1>:                    The try statement.   (line   6)
* statement; try:                        The standard type hierarchy.
                                                              (line 605)
* statement; while <1>:                  The while statement. (line   6)
* statement; while <2>:                  The continue statement.
                                                              (line   6)
* statement; while:                      The break statement. (line   6)
* statement; with <1>:                   With Statement Context Managers.
                                                              (line  14)
* statement; with:                       The with statement.  (line   6)
* statement; yield:                      The yield statement. (line   6)
* stderr (in module sys):                The standard type hierarchy.
                                                              (line 500)
* stdin (in module sys):                 The standard type hierarchy.
                                                              (line 500)
* stdio:                                 The standard type hierarchy.
                                                              (line 500)
* stdout (in module sys):                The standard type hierarchy.
                                                              (line 500)
* step (slice object attribute) <1>:     Slicings.            (line  27)
* step (slice object attribute):         The standard type hierarchy.
                                                              (line 621)
* stop (slice object attribute) <1>:     Slicings.            (line  27)
* stop (slice object attribute):         The standard type hierarchy.
                                                              (line 621)
* string literal:                        String and Bytes literals.
                                                              (line   6)
* string; conversion <1>:                Basic customization. (line 125)
* string; conversion:                    Expression statements.
                                                              (line  17)
* string; item:                          Subscriptions.       (line  38)
* subclassing; immutable types:          Basic customization. (line   7)
* subscription <1>:                      Subscriptions.       (line   6)
* subscription:                          The standard type hierarchy.
                                                              (line 157)
* subscription; assignment:              Assignment statements.
                                                              (line 110)
* subtraction:                           Binary arithmetic operations.
                                                              (line  60)
* suite:                                 Compound statements. (line  18)
* syntax:                                Notation.            (line   6)
* sys.exc_info:                          The standard type hierarchy.
                                                              (line 592)
* sys.last_traceback:                    The standard type hierarchy.
                                                              (line 592)
* sys.meta_path:                         The import statement.
                                                              (line  42)
* sys.modules:                           The import statement.
                                                              (line  34)
* sys.path:                              The import statement.
                                                              (line  54)
* sys.path_hooks:                        The import statement.
                                                              (line  54)
* sys.path_importer_cache:               The import statement.
                                                              (line  54)
* sys.stderr:                            The standard type hierarchy.
                                                              (line 500)
* sys.stdin:                             The standard type hierarchy.
                                                              (line 500)
* sys.stdout:                            The standard type hierarchy.
                                                              (line 500)
* SystemExit (built-in exception):       Exceptions.          (line  27)
* tab:                                   Indentation.         (line   6)
* target:                                Assignment statements.
                                                              (line  27)
* target; list <1>:                      The for statement.   (line   6)
* target; list <2>:                      Assignment statements.
                                                              (line  27)
* target; list:                          The for statement.   (line   6)
* target; list; assignment:              Assignment statements.
                                                              (line  36)
* tb_frame (traceback attribute):        The standard type hierarchy.
                                                              (line 605)
* tb_lasti (traceback attribute):        The standard type hierarchy.
                                                              (line 605)
* tb_lineno (traceback attribute):       The standard type hierarchy.
                                                              (line 605)
* tb_next (traceback attribute):         The standard type hierarchy.
                                                              (line 605)
* termination model:                     Exceptions.          (line  21)
* ternary; operator:                     Conditional expressions.
                                                              (line   6)
* throw() (generator method):            Yield expressions.   (line  70)
* token:                                 Lexical analysis.    (line   6)
* trailing; comma:                       Expression lists.    (line  13)
* triple-quoted string:                  String and Bytes literals.
                                                              (line  36)
* True:                                  The standard type hierarchy.
                                                              (line  66)
* tuple; display:                        Parenthesized forms. (line  20)
* type:                                  The standard type hierarchy.
                                                              (line   6)
* type of an object:                     Objects values and types.
                                                              (line  11)
* type; hierarchy:                       The standard type hierarchy.
                                                              (line   6)
* types, internal:                       The standard type hierarchy.
                                                              (line 513)
* unary; arithmetic; operation:          Unary arithmetic and bitwise operations.
                                                              (line   6)
* unary; bitwise; operation:             Unary arithmetic and bitwise operations.
                                                              (line   6)
* unbinding; name:                       The del statement.   (line  15)
* UnboundLocalError:                     Naming and binding.  (line  50)
* Unicode:                               The standard type hierarchy.
                                                              (line 124)
* Unicode Consortium:                    String and Bytes literals.
                                                              (line  36)
* UNIX:                                  Complete Python programs.
                                                              (line  24)
* unreachable object:                    Objects values and types.
                                                              (line  32)
* unrecognized escape sequence:          String and Bytes literals.
                                                              (line 108)
* user-defined; function:                The standard type hierarchy.
                                                              (line 239)
* user-defined; function; call:          Calls.               (line 118)
* user-defined; method:                  The standard type hierarchy.
                                                              (line 295)
* value of an object:                    Objects values and types.
                                                              (line  11)
* writing; values:                       Expression statements.
                                                              (line  17)
* yield; expression:                     Yield expressions.   (line   6)



Tag Table:
Node: Top444
Ref: reference/index doc734
Ref: 0734
Node: Introduction4385
Ref: reference/introduction introduction4490
Ref: 14490
Ref: reference/introduction the-python-language-reference4490
Ref: 24490
Ref: reference/introduction reference-index4490
Ref: 34490
Ref: reference/introduction doc4490
Ref: 44490
Ref: reference/introduction id14490
Ref: 54490
Node: Alternate Implementations6252
Ref: reference/introduction alternate-implementations6359
Ref: 66359
Ref: reference/introduction implementations6359
Ref: 76359
Ref: Alternate Implementations-Footnote-18534
Ref: Alternate Implementations-Footnote-28564
Ref: Alternate Implementations-Footnote-38604
Ref: Alternate Implementations-Footnote-48638
Node: Notation8662
Ref: reference/introduction id28769
Ref: 88769
Ref: reference/introduction notation8769
Ref: 98769
Ref: reference/introduction grammar-token-name8928
Ref: a8928
Ref: reference/introduction grammar-token-lc_letter8979
Ref: b8979
Node: Lexical analysis10950
Ref: reference/lexical_analysis lexical11062
Ref: c11062
Ref: reference/lexical_analysis doc11062
Ref: d11062
Ref: reference/lexical_analysis lexical-analysis11062
Ref: e11062
Ref: Lexical analysis-Footnote-112144
Node: Line structure12191
Ref: reference/lexical_analysis line-structure12295
Ref: f12295
Ref: reference/lexical_analysis id112295
Ref: 1012295
Node: Logical lines12597
Ref: reference/lexical_analysis id212700
Ref: 1112700
Ref: reference/lexical_analysis logical-lines12700
Ref: 1212700
Node: Physical lines13074
Ref: reference/lexical_analysis id313194
Ref: 1313194
Ref: reference/lexical_analysis physical-lines13194
Ref: 1413194
Node: Comments13862
Ref: reference/lexical_analysis id413990
Ref: 1513990
Ref: reference/lexical_analysis comments13990
Ref: 1613990
Node: Encoding declarations14305
Ref: reference/lexical_analysis encoding-declarations14440
Ref: 1714440
Ref: reference/lexical_analysis encodings14440
Ref: 1814440
Node: Explicit line joining15465
Ref: reference/lexical_analysis explicit-line-joining15613
Ref: 1915613
Ref: reference/lexical_analysis explicit-joining15613
Ref: 1a15613
Node: Implicit line joining16535
Ref: reference/lexical_analysis implicit-joining16673
Ref: 1b16673
Ref: reference/lexical_analysis implicit-line-joining16673
Ref: 1c16673
Node: Blank lines17501
Ref: reference/lexical_analysis blank-lines17629
Ref: 1d17629
Ref: reference/lexical_analysis id517629
Ref: 1e17629
Node: Indentation18100
Ref: reference/lexical_analysis id618232
Ref: 1f18232
Ref: reference/lexical_analysis indentation18232
Ref: 2018232
Node: Whitespace between tokens21591
Ref: reference/lexical_analysis whitespace21703
Ref: 2121703
Ref: reference/lexical_analysis whitespace-between-tokens21703
Ref: 2221703
Node: Other tokens22101
Ref: reference/lexical_analysis id722238
Ref: 2322238
Ref: reference/lexical_analysis other-tokens22238
Ref: 2422238
Node: Identifiers and keywords22664
Ref: reference/lexical_analysis identifiers-and-keywords22795
Ref: 2522795
Ref: reference/lexical_analysis identifiers22795
Ref: 2622795
Ref: reference/lexical_analysis grammar-token-identifier23664
Ref: 2723664
Ref: reference/lexical_analysis grammar-token-id_start23713
Ref: 2823713
Ref: reference/lexical_analysis grammar-token-id_continue23861
Ref: 2923861
Ref: reference/lexical_analysis grammar-token-xid_start24008
Ref: 2a24008
Ref: reference/lexical_analysis grammar-token-xid_continue24114
Ref: 2b24114
Ref: Identifiers and keywords-Footnote-125102
Ref: Identifiers and keywords-Footnote-225149
Ref: Identifiers and keywords-Footnote-325196
Node: Keywords25250
Ref: reference/lexical_analysis keywords25375
Ref: 2c25375
Ref: reference/lexical_analysis id825375
Ref: 2d25375
Node: Reserved classes of identifiers25938
Ref: reference/lexical_analysis id-classes26063
Ref: 2e26063
Ref: reference/lexical_analysis reserved-classes-of-identifiers26063
Ref: 2f26063
Node: Literals27600
Ref: reference/lexical_analysis literals27728
Ref: 3327728
Ref: reference/lexical_analysis id927728
Ref: 3427728
Node: String and Bytes literals27989
Ref: reference/lexical_analysis string-and-bytes-literals28112
Ref: 3528112
Ref: reference/lexical_analysis strings28112
Ref: 3628112
Ref: reference/lexical_analysis grammar-token-stringliteral28246
Ref: 3728246
Ref: reference/lexical_analysis grammar-token-stringprefix28315
Ref: 3828315
Ref: reference/lexical_analysis grammar-token-shortstring28349
Ref: 3928349
Ref: reference/lexical_analysis grammar-token-longstring28425
Ref: 3a28425
Ref: reference/lexical_analysis grammar-token-shortstringitem28507
Ref: 3b28507
Ref: reference/lexical_analysis grammar-token-longstringitem28565
Ref: 3c28565
Ref: reference/lexical_analysis grammar-token-shortstringchar28622
Ref: 3d28622
Ref: reference/lexical_analysis grammar-token-longstringchar28704
Ref: 3e28704
Ref: reference/lexical_analysis grammar-token-stringescapeseq28762
Ref: 3f28762
Ref: reference/lexical_analysis grammar-token-bytesliteral28811
Ref: 4028811
Ref: reference/lexical_analysis grammar-token-bytesprefix28874
Ref: 4128874
Ref: reference/lexical_analysis grammar-token-shortbytes28935
Ref: 4228935
Ref: reference/lexical_analysis grammar-token-longbytes29008
Ref: 4329008
Ref: reference/lexical_analysis grammar-token-shortbytesitem29087
Ref: 4429087
Ref: reference/lexical_analysis grammar-token-longbytesitem29142
Ref: 4529142
Ref: reference/lexical_analysis grammar-token-shortbyteschar29196
Ref: 4629196
Ref: reference/lexical_analysis grammar-token-longbyteschar29276
Ref: 4729276
Ref: reference/lexical_analysis grammar-token-bytesescapeseq29332
Ref: 4829332
Node: String literal concatenation34401
Ref: reference/lexical_analysis string-catenation34549
Ref: 4934549
Ref: reference/lexical_analysis string-literal-concatenation34549
Ref: 4a34549
Node: Numeric literals35495
Ref: reference/lexical_analysis numeric-literals35634
Ref: 4b35634
Ref: reference/lexical_analysis numbers35634
Ref: 4c35634
Node: Integer literals36050
Ref: reference/lexical_analysis integers36184
Ref: 4d36184
Ref: reference/lexical_analysis integer-literals36184
Ref: 4e36184
Ref: reference/lexical_analysis grammar-token-integer36301
Ref: 4f36301
Ref: reference/lexical_analysis grammar-token-decimalinteger36382
Ref: 5036382
Ref: reference/lexical_analysis grammar-token-nonzerodigit36432
Ref: 5136432
Ref: reference/lexical_analysis grammar-token-digit36465
Ref: 5236465
Ref: reference/lexical_analysis grammar-token-octinteger36498
Ref: 5336498
Ref: reference/lexical_analysis grammar-token-hexinteger36547
Ref: 5436547
Ref: reference/lexical_analysis grammar-token-bininteger36596
Ref: 5536596
Ref: reference/lexical_analysis grammar-token-octdigit36645
Ref: 5636645
Ref: reference/lexical_analysis grammar-token-hexdigit36678
Ref: 5736678
Ref: reference/lexical_analysis grammar-token-bindigit36731
Ref: 5836731
Node: Floating point literals37267
Ref: reference/lexical_analysis floating37403
Ref: 5937403
Ref: reference/lexical_analysis floating-point-literals37403
Ref: 5a37403
Ref: reference/lexical_analysis grammar-token-floatnumber37541
Ref: 5b37541
Ref: reference/lexical_analysis grammar-token-pointfloat37594
Ref: 5c37594
Ref: reference/lexical_analysis grammar-token-exponentfloat37649
Ref: 5d37649
Ref: reference/lexical_analysis grammar-token-intpart37703
Ref: 5e37703
Ref: reference/lexical_analysis grammar-token-fraction37732
Ref: 5f37732
Ref: reference/lexical_analysis grammar-token-exponent37765
Ref: 6037765
Node: Imaginary literals38291
Ref: reference/lexical_analysis imaginary38402
Ref: 6138402
Ref: reference/lexical_analysis imaginary-literals38402
Ref: 6238402
Ref: reference/lexical_analysis grammar-token-imagnumber38525
Ref: 6338525
Node: Operators38966
Ref: reference/lexical_analysis id1039080
Ref: 6439080
Ref: reference/lexical_analysis operators39080
Ref: 6539080
Node: Delimiters39295
Ref: reference/lexical_analysis delimiters39392
Ref: 6639392
Ref: reference/lexical_analysis id1139392
Ref: 6739392
Node: Data model40284
Ref: reference/datamodel doc40399
Ref: 6840399
Ref: reference/datamodel data-model40399
Ref: 6940399
Ref: reference/datamodel datamodel40399
Ref: 6a40399
Node: Objects values and types40548
Ref: reference/datamodel objects40671
Ref: 6b40671
Ref: reference/datamodel objects-values-and-types40671
Ref: 6c40671
Ref: Objects values and types-Footnote-145244
Node: The standard type hierarchy45465
Ref: reference/datamodel the-standard-type-hierarchy45617
Ref: 7245617
Ref: reference/datamodel types45617
Ref: 7345617
Ref: reference/datamodel frame-objects75509
Ref: 8275509
Ref: reference/datamodel slice indices78585
Ref: 8478585
Node: Special method names80320
Ref: reference/datamodel special-method-names80439
Ref: 8580439
Ref: reference/datamodel specialnames80439
Ref: 3180439
Node: Basic customization81828
Ref: reference/datamodel basic-customization81957
Ref: 8681957
Ref: reference/datamodel customization81957
Ref: 8781957
Ref: reference/datamodel object __new__82010
Ref: 7a82010
Ref: reference/datamodel object __init__83513
Ref: 7b83513
Ref: reference/datamodel object __del__84089
Ref: 8884089
Ref: reference/datamodel object __repr__87500
Ref: 8987500
Ref: reference/datamodel object __str__88320
Ref: 8a88320
Ref: reference/datamodel object __format__88725
Ref: 8b88725
Ref: reference/datamodel richcmpfuncs89440
Ref: 8c89440
Ref: reference/datamodel object __lt__89440
Ref: 8d89440
Ref: reference/datamodel object __le__89481
Ref: 8e89481
Ref: reference/datamodel object __eq__89521
Ref: 8f89521
Ref: reference/datamodel object __ne__89561
Ref: 9089561
Ref: reference/datamodel object __gt__89601
Ref: 9189601
Ref: reference/datamodel object __ge__89641
Ref: 9289641
Ref: reference/datamodel object __hash__91557
Ref: 9391557
Ref: reference/datamodel object __bool__94049
Ref: 9494049
Node: Customizing attribute access94483
Ref: reference/datamodel customizing-attribute-access94647
Ref: 9694647
Ref: reference/datamodel attribute-access94647
Ref: 9794647
Ref: reference/datamodel object __getattr__94871
Ref: 7f94871
Ref: reference/datamodel object __getattribute__95943
Ref: 9895943
Ref: reference/datamodel object __setattr__96849
Ref: 8096849
Ref: reference/datamodel object __delattr__97341
Ref: 8197341
Ref: reference/datamodel object __dir__97562
Ref: 9a97562
Node: Implementing Descriptors97756
Ref: reference/datamodel implementing-descriptors97890
Ref: 9b97890
Ref: reference/datamodel descriptors97890
Ref: 7e97890
Ref: reference/datamodel object __get__98353
Ref: 9c98353
Ref: reference/datamodel object __set__98842
Ref: 9d98842
Ref: reference/datamodel object __delete__99002
Ref: 9e99002
Node: Invoking Descriptors99137
Ref: reference/datamodel invoking-descriptors99289
Ref: 9f99289
Ref: reference/datamodel descriptor-invocation99289
Ref: a099289
Node: __slots__102371
Ref: reference/datamodel slots102490
Ref: a1102490
Ref: reference/datamodel id2102490
Ref: a2102490
Ref: reference/datamodel object __slots__103051
Ref: a3103051
Node: Notes on using __slots__103426
Ref: reference/datamodel notes-on-using-slots103512
Ref: a4103512
Node: Customizing class creation105753
Ref: reference/datamodel customizing-class-creation105938
Ref: a5105938
Ref: reference/datamodel metaclasses105938
Ref: a6105938
Node: Customizing instance and subclass checks109719
Ref: reference/datamodel customizing-instance-and-subclass-checks109902
Ref: a7109902
Ref: reference/datamodel class __instancecheck__110354
Ref: a8110354
Ref: reference/datamodel class __subclasscheck__110577
Ref: a9110577
Ref: Customizing instance and subclass checks-Footnote-1111471
Node: Emulating callable objects111518
Ref: reference/datamodel callable-types111700
Ref: aa111700
Ref: reference/datamodel emulating-callable-objects111700
Ref: ab111700
Ref: reference/datamodel object __call__111767
Ref: 7c111767
Node: Emulating container types111979
Ref: reference/datamodel emulating-container-types112144
Ref: ac112144
Ref: reference/datamodel sequence-types112144
Ref: ad112144
Ref: reference/datamodel object __len__114201
Ref: 95114201
Ref: reference/datamodel object __getitem__114790
Ref: 83114790
Ref: reference/datamodel object __setitem__115636
Ref: ae115636
Ref: reference/datamodel object __delitem__116091
Ref: af116091
Ref: reference/datamodel object __iter__116510
Ref: b7116510
Ref: reference/datamodel object __reversed__117034
Ref: b9117034
Ref: reference/datamodel object __contains__117974
Ref: b6117974
Node: Emulating numeric types118530
Ref: reference/datamodel numeric-types118700
Ref: bd118700
Ref: reference/datamodel emulating-numeric-types118700
Ref: be118700
Ref: reference/datamodel object __add__119009
Ref: b0119009
Ref: reference/datamodel object __sub__119050
Ref: bf119050
Ref: reference/datamodel object __mul__119091
Ref: b3119091
Ref: reference/datamodel object __truediv__119132
Ref: c0119132
Ref: reference/datamodel object __floordiv__119177
Ref: c1119177
Ref: reference/datamodel object __mod__119223
Ref: c2119223
Ref: reference/datamodel object __divmod__119264
Ref: c3119264
Ref: reference/datamodel object __pow__119308
Ref: c4119308
Ref: reference/datamodel object __lshift__119359
Ref: c5119359
Ref: reference/datamodel object __rshift__119403
Ref: c6119403
Ref: reference/datamodel object __and__119447
Ref: c7119447
Ref: reference/datamodel object __xor__119488
Ref: c8119488
Ref: reference/datamodel object __or__119529
Ref: c9119529
Ref: reference/datamodel object __radd__120406
Ref: b1120406
Ref: reference/datamodel object __rsub__120448
Ref: ca120448
Ref: reference/datamodel object __rmul__120490
Ref: b4120490
Ref: reference/datamodel object __rtruediv__120532
Ref: cb120532
Ref: reference/datamodel object __rfloordiv__120578
Ref: cc120578
Ref: reference/datamodel object __rmod__120625
Ref: cd120625
Ref: reference/datamodel object __rdivmod__120667
Ref: ce120667
Ref: reference/datamodel object __rpow__120712
Ref: cf120712
Ref: reference/datamodel object __rlshift__120754
Ref: d0120754
Ref: reference/datamodel object __rrshift__120799
Ref: d1120799
Ref: reference/datamodel object __rand__120844
Ref: d2120844
Ref: reference/datamodel object __rxor__120886
Ref: d3120886
Ref: reference/datamodel object __ror__120928
Ref: d4120928
Ref: reference/datamodel object __iadd__122021
Ref: b2122021
Ref: reference/datamodel object __isub__122063
Ref: d5122063
Ref: reference/datamodel object __imul__122105
Ref: b5122105
Ref: reference/datamodel object __itruediv__122147
Ref: d6122147
Ref: reference/datamodel object __ifloordiv__122193
Ref: d7122193
Ref: reference/datamodel object __imod__122240
Ref: d8122240
Ref: reference/datamodel object __ipow__122282
Ref: d9122282
Ref: reference/datamodel object __ilshift__122334
Ref: da122334
Ref: reference/datamodel object __irshift__122379
Ref: db122379
Ref: reference/datamodel object __iand__122424
Ref: dc122424
Ref: reference/datamodel object __ixor__122466
Ref: dd122466
Ref: reference/datamodel object __ior__122508
Ref: de122508
Ref: reference/datamodel object __neg__123339
Ref: df123339
Ref: reference/datamodel object __pos__123373
Ref: e0123373
Ref: reference/datamodel object __abs__123407
Ref: e1123407
Ref: reference/datamodel object __invert__123441
Ref: e2123441
Ref: reference/datamodel object __complex__123570
Ref: e3123570
Ref: reference/datamodel object __int__123608
Ref: e4123608
Ref: reference/datamodel object __float__123642
Ref: e5123642
Ref: reference/datamodel object __round__123678
Ref: e6123678
Ref: reference/datamodel object __index__123873
Ref: e7123873
Ref: Emulating numeric types-Footnote-1124163
Node: With Statement Context Managers124366
Ref: reference/datamodel with-statement-context-managers124532
Ref: e8124532
Ref: reference/datamodel context-managers124532
Ref: e9124532
Ref: reference/datamodel object __enter__125282
Ref: ea125282
Ref: reference/datamodel object __exit__125537
Ref: ec125537
Ref: With Statement Context Managers-Footnote-1126405
Node: Special method lookup126452
Ref: reference/datamodel special-lookup126586
Ref: 99126586
Ref: reference/datamodel special-method-lookup126586
Ref: ed126586
Node: Execution model129241
Ref: reference/executionmodel execmodel129351
Ref: ee129351
Ref: reference/executionmodel doc129351
Ref: ef129351
Ref: reference/executionmodel execution-model129351
Ref: f0129351
Node: Naming and binding129495
Ref: reference/executionmodel naming129600
Ref: f1129600
Ref: reference/executionmodel naming-and-binding129600
Ref: f2129600
Node: Interaction with dynamic features135482
Ref: reference/executionmodel dynamic-features135586
Ref: f5135586
Ref: reference/executionmodel interaction-with-dynamic-features135586
Ref: f6135586
Ref: Interaction with dynamic features-Footnote-1136592
Node: Exceptions136729
Ref: reference/executionmodel exceptions136834
Ref: f7136834
Ref: reference/executionmodel id2136834
Ref: f8136834
Node: Expressions138977
Ref: reference/expressions expressions139094
Ref: fa139094
Ref: reference/expressions doc139094
Ref: fb139094
Ref: reference/expressions id1139094
Ref: fc139094
Ref: reference/expressions grammar-token-name139386
Ref: fd139386
Node: Arithmetic conversions139857
Ref: reference/expressions conversions139957
Ref: fe139957
Ref: reference/expressions arithmetic-conversions139957
Ref: ff139957
Node: Atoms140643
Ref: reference/expressions id2140761
Ref: 100140761
Ref: reference/expressions atoms140761
Ref: 101140761
Ref: reference/expressions grammar-token-atom141004
Ref: 102141004
Ref: reference/expressions grammar-token-enclosure141059
Ref: 103141059
Node: Identifiers Names141481
Ref: reference/expressions atom-identifiers141576
Ref: 32141576
Ref: reference/expressions identifiers-names141576
Ref: 104141576
Node: Literals<2>142873
Ref: reference/expressions literals142996
Ref: 105142996
Ref: reference/expressions atom-literals142996
Ref: 106142996
Ref: reference/expressions grammar-token-literal143100
Ref: 107143100
Node: Parenthesized forms143838
Ref: reference/expressions parenthesized-forms143984
Ref: 108143984
Ref: reference/expressions parenthesized143984
Ref: 109143984
Ref: reference/expressions grammar-token-parenth_form144115
Ref: 10a144115
Node: Displays for lists sets and dictionaries144866
Ref: reference/expressions displays-for-lists-sets-and-dictionaries145014
Ref: 10b145014
Ref: reference/expressions comprehensions145014
Ref: 10c145014
Ref: reference/expressions grammar-token-comprehension145454
Ref: 10d145454
Ref: reference/expressions grammar-token-comp_for145500
Ref: 10e145500
Ref: reference/expressions grammar-token-comp_iter145565
Ref: 10f145565
Ref: reference/expressions grammar-token-comp_if145606
Ref: 110145606
Node: List displays146239
Ref: reference/expressions list-displays146380
Ref: 112146380
Ref: reference/expressions lists146380
Ref: 113146380
Ref: reference/expressions grammar-token-list_display146508
Ref: 114146508
Node: Set displays146956
Ref: reference/expressions set-displays147076
Ref: 115147076
Ref: reference/expressions set147076
Ref: 116147076
Ref: reference/expressions grammar-token-set_display147252
Ref: 117147252
Node: Dictionary displays147784
Ref: reference/expressions dictionary-displays147912
Ref: 118147912
Ref: reference/expressions dict147912
Ref: 75147912
Ref: reference/expressions grammar-token-dict_display148059
Ref: 119148059
Ref: reference/expressions grammar-token-key_datum_list148136
Ref: 11a148136
Ref: reference/expressions grammar-token-key_datum148196
Ref: 11b148196
Ref: reference/expressions grammar-token-dict_comprehension148249
Ref: 11c148249
Node: Generator expressions149388
Ref: reference/expressions genexpr149521
Ref: 11d149521
Ref: reference/expressions generator-expressions149521
Ref: 11e149521
Ref: reference/expressions grammar-token-generator_expression149650
Ref: 11f149650
Node: Yield expressions150554
Ref: reference/expressions yield-expressions150659
Ref: 120150659
Ref: reference/expressions yieldexpr150659
Ref: 121150659
Ref: reference/expressions grammar-token-yield_atom150708
Ref: 122150708
Ref: reference/expressions grammar-token-yield_expression150762
Ref: 123150762
Ref: reference/expressions generator __next__152793
Ref: 125152793
Ref: reference/expressions generator send153537
Ref: 126153537
Ref: reference/expressions generator throw154115
Ref: 127154115
Ref: reference/expressions generator close154582
Ref: 128154582
Ref: Yield expressions-Footnote-1156372
Ref: Yield expressions-Footnote-2156419
Node: Primaries156466
Ref: reference/expressions primaries156580
Ref: 129156580
Ref: reference/expressions id3156580
Ref: 12a156580
Ref: reference/expressions grammar-token-primary156698
Ref: 12b156698
Node: Attribute references156844
Ref: reference/expressions id4156948
Ref: 12c156948
Ref: reference/expressions attribute-references156948
Ref: 12d156948
Ref: reference/expressions grammar-token-attributeref157073
Ref: 12e157073
Node: Subscriptions157632
Ref: reference/expressions id5157753
Ref: 12f157753
Ref: reference/expressions subscriptions157753
Ref: 130157753
Ref: reference/expressions grammar-token-subscription157896
Ref: 131157896
Node: Slicings159408
Ref: reference/expressions id6159514
Ref: 132159514
Ref: reference/expressions slicings159514
Ref: 133159514
Ref: reference/expressions grammar-token-slicing159757
Ref: 134159757
Ref: reference/expressions grammar-token-slice_list159809
Ref: 135159809
Ref: reference/expressions grammar-token-slice_item159865
Ref: 136159865
Ref: reference/expressions grammar-token-proper_slice159912
Ref: 137159912
Ref: reference/expressions grammar-token-lower_bound159982
Ref: 138159982
Ref: reference/expressions grammar-token-upper_bound160014
Ref: 139160014
Ref: reference/expressions grammar-token-stride160046
Ref: 13a160046
Node: Calls161284
Ref: reference/expressions id7161368
Ref: 13b161368
Ref: reference/expressions calls161368
Ref: 76161368
Ref: reference/expressions grammar-token-call161487
Ref: 13c161487
Ref: reference/expressions grammar-token-argument_list161574
Ref: 13d161574
Ref: reference/expressions grammar-token-positional_arguments162063
Ref: 13e162063
Ref: reference/expressions grammar-token-keyword_arguments162121
Ref: 13f162121
Ref: reference/expressions grammar-token-keyword_item162183
Ref: 140162183
Node: The power operator167735
Ref: reference/expressions the-power-operator167883
Ref: 141167883
Ref: reference/expressions power167883
Ref: 142167883
Ref: reference/expressions grammar-token-power168076
Ref: 143168076
Node: Unary arithmetic and bitwise operations169046
Ref: reference/expressions unary169213
Ref: 144169213
Ref: reference/expressions unary-arithmetic-and-bitwise-operations169213
Ref: 145169213
Ref: reference/expressions grammar-token-u_expr169371
Ref: 146169371
Node: Binary arithmetic operations169869
Ref: reference/expressions binary170037
Ref: 147170037
Ref: reference/expressions binary-arithmetic-operations170037
Ref: 148170037
Ref: reference/expressions grammar-token-m_expr170377
Ref: 149170377
Ref: reference/expressions grammar-token-a_expr170499
Ref: 14a170499
Ref: Binary arithmetic operations-Footnote-1173085
Ref: Binary arithmetic operations-Footnote-2173661
Node: Shifting operations173925
Ref: reference/expressions shifting-operations174079
Ref: 14b174079
Ref: reference/expressions shifting174079
Ref: 14c174079
Ref: reference/expressions grammar-token-shift_expr174205
Ref: 14d174205
Node: Binary bitwise operations174776
Ref: reference/expressions binary-bitwise-operations174913
Ref: 14e174913
Ref: reference/expressions bitwise174913
Ref: 14f174913
Ref: reference/expressions grammar-token-and_expr175044
Ref: 150175044
Ref: reference/expressions grammar-token-xor_expr175102
Ref: 151175102
Ref: reference/expressions grammar-token-or_expr175152
Ref: 152175152
Ref: reference/expressions comparisons175480
Ref: 153175480
Ref: reference/expressions is175480
Ref: 6d175480
Ref: reference/expressions is-not175480
Ref: 154175480
Ref: reference/expressions in175480
Ref: ba175480
Node: Comparisons175480
Ref: reference/expressions id10175616
Ref: 155175616
Ref: reference/expressions not-in175616
Ref: bb175616
Ref: reference/expressions grammar-token-comparison175901
Ref: 156175901
Ref: reference/expressions grammar-token-comp_operator175962
Ref: 157175962
Ref: reference/expressions membership-test-details180325
Ref: bc180325
Ref: reference/expressions booleans182148
Ref: 158182148
Ref: reference/expressions and182148
Ref: 159182148
Ref: reference/expressions or182148
Ref: 15a182148
Ref: Comparisons-Footnote-1182184
Ref: Comparisons-Footnote-2182562
Node: Boolean operations182862
Ref: reference/expressions not182996
Ref: 15b182996
Ref: reference/expressions boolean-operations182996
Ref: 15c182996
Ref: reference/expressions grammar-token-or_test183045
Ref: 15d183045
Ref: reference/expressions grammar-token-and_test183099
Ref: 15e183099
Ref: reference/expressions grammar-token-not_test183151
Ref: 15f183151
Node: Conditional expressions184534
Ref: reference/expressions conditional-expressions184664
Ref: 160184664
Ref: reference/expressions grammar-token-conditional_expression184723
Ref: 161184723
Ref: reference/expressions grammar-token-expression184799
Ref: 162184799
Ref: reference/expressions grammar-token-expression_nocond184867
Ref: 163184867
Ref: reference/expressions lambdas185303
Ref: 164185303
Ref: Conditional expressions-Footnote-1185338
Node: Lambdas185385
Ref: reference/expressions id13185513
Ref: 165185513
Ref: reference/expressions lambda185513
Ref: 166185513
Ref: reference/expressions grammar-token-lambda_form185540
Ref: 167185540
Ref: reference/expressions grammar-token-lambda_form_nocond185609
Ref: 168185609
Node: Expression lists186175
Ref: reference/expressions expression-lists186296
Ref: 169186296
Ref: reference/expressions exprlists186296
Ref: 16a186296
Ref: reference/expressions grammar-token-expression_list186341
Ref: 124186341
Node: Evaluation order186899
Ref: reference/expressions evalorder187020
Ref: 16b187020
Ref: reference/expressions evaluation-order187020
Ref: 16c187020
Node: Summary187528
Ref: reference/expressions operator-summary187624
Ref: 16d187624
Ref: reference/expressions summary187624
Ref: 16e187624
Ref: Summary-Footnote-1189811
Ref: Summary-Footnote-2189900
Node: Simple statements190036
Ref: reference/simple_stmts simple190157
Ref: 170190157
Ref: reference/simple_stmts simple-statements190157
Ref: 171190157
Ref: reference/simple_stmts doc190157
Ref: 172190157
Ref: reference/simple_stmts grammar-token-simple_stmt190376
Ref: 173190376
Node: Expression statements191203
Ref: reference/simple_stmts expression-statements191324
Ref: 174191324
Ref: reference/simple_stmts exprstmts191324
Ref: 175191324
Ref: reference/simple_stmts grammar-token-expression_stmt191708
Ref: 176191708
Node: Assignment statements192115
Ref: reference/simple_stmts assignment192265
Ref: 177192265
Ref: reference/simple_stmts assignment-statements192265
Ref: 178192265
Ref: reference/simple_stmts grammar-token-assignment_stmt192432
Ref: 179192432
Ref: reference/simple_stmts grammar-token-target_list192516
Ref: 17a192516
Ref: reference/simple_stmts grammar-token-target192567
Ref: 17b192567
Ref: reference/simple_stmts attr-target-note196433
Ref: 17c196433
Ref: Assignment statements-Footnote-1200254
Node: Augmented assignment statements200301
Ref: reference/simple_stmts augmented-assignment-statements200406
Ref: 17d200406
Ref: reference/simple_stmts augassign200406
Ref: 17e200406
Ref: reference/simple_stmts grammar-token-augmented_assignment_stmt200599
Ref: 17f200599
Ref: reference/simple_stmts grammar-token-augtarget200690
Ref: 180200690
Ref: reference/simple_stmts grammar-token-augop200775
Ref: 181200775
Node: The assert statement202208
Ref: reference/simple_stmts assert202355
Ref: 182202355
Ref: reference/simple_stmts the-assert-statement202355
Ref: 183202355
Ref: reference/simple_stmts grammar-token-assert_stmt202497
Ref: 184202497
Node: The pass statement203511
Ref: reference/simple_stmts the-pass-statement203654
Ref: 185203654
Ref: reference/simple_stmts pass203654
Ref: 186203654
Ref: reference/simple_stmts grammar-token-pass_stmt203705
Ref: 187203705
Node: The del statement204052
Ref: reference/simple_stmts the-del-statement204195
Ref: 188204195
Ref: reference/simple_stmts del204195
Ref: 74204195
Ref: reference/simple_stmts grammar-token-del_stmt204244
Ref: 189204244
Node: The return statement205041
Ref: reference/simple_stmts the-return-statement205185
Ref: 18a205185
Ref: reference/simple_stmts return205185
Ref: 79205185
Ref: reference/simple_stmts grammar-token-return_stmt205240
Ref: 18b205240
Node: The yield statement206028
Ref: reference/simple_stmts the-yield-statement206174
Ref: 18c206174
Ref: reference/simple_stmts yield206174
Ref: 78206174
Ref: reference/simple_stmts grammar-token-yield_stmt206227
Ref: 18d206227
Ref: The yield statement-Footnote-1208096
Ref: The yield statement-Footnote-2208143
Node: The raise statement208190
Ref: reference/simple_stmts raise208335
Ref: f9208335
Ref: reference/simple_stmts the-raise-statement208335
Ref: 18e208335
Ref: reference/simple_stmts grammar-token-raise_stmt208388
Ref: 18f208388
Node: The break statement211140
Ref: reference/simple_stmts break211288
Ref: 190211288
Ref: reference/simple_stmts the-break-statement211288
Ref: 191211288
Ref: reference/simple_stmts grammar-token-break_stmt211341
Ref: 192211341
Node: The continue statement211947
Ref: reference/simple_stmts continue212096
Ref: 194212096
Ref: reference/simple_stmts the-continue-statement212096
Ref: 195212096
Ref: reference/simple_stmts grammar-token-continue_stmt212157
Ref: 196212157
Ref: reference/simple_stmts import212656
Ref: 30212656
Node: The import statement212656
Ref: reference/simple_stmts the-import-statement212806
Ref: 197212806
Ref: reference/simple_stmts from212806
Ref: 198212806
Ref: reference/simple_stmts grammar-token-import_stmt212863
Ref: 199212863
Ref: reference/simple_stmts grammar-token-module213288
Ref: 19a213288
Ref: reference/simple_stmts grammar-token-relative_module213341
Ref: 19b213341
Ref: reference/simple_stmts grammar-token-name213384
Ref: 19c213384
Ref: The import statement-Footnote-1221942
Ref: The import statement-Footnote-2221996
Ref: The import statement-Footnote-3222043
Ref: The import statement-Footnote-4222090
Node: Future statements222137
Ref: reference/simple_stmts future222227
Ref: 19d222227
Ref: reference/simple_stmts future-statements222227
Ref: 19e222227
Ref: reference/simple_stmts grammar-token-future_statement222714
Ref: 19f222714
Ref: reference/simple_stmts grammar-token-feature222986
Ref: 1a0222986
Ref: reference/simple_stmts id1223022
Ref: 1a1223022
Ref: Future statements-Footnote-1225483
Node: The global statement225530
Ref: reference/simple_stmts global225680
Ref: f4225680
Ref: reference/simple_stmts the-global-statement225680
Ref: 1a2225680
Ref: reference/simple_stmts grammar-token-global_stmt225737
Ref: 1a3225737
Node: The nonlocal statement227258
Ref: reference/simple_stmts the-nonlocal-statement227379
Ref: 1a4227379
Ref: reference/simple_stmts nonlocal227379
Ref: f3227379
Ref: reference/simple_stmts grammar-token-nonlocal_stmt227440
Ref: 1a5227440
Ref: The nonlocal statement-Footnote-1228397
Node: Compound statements228444
Ref: reference/compound_stmts doc228574
Ref: 1a6228574
Ref: reference/compound_stmts compound-statements228574
Ref: 1a7228574
Ref: reference/compound_stmts compound228574
Ref: 1a8228574
Ref: reference/compound_stmts grammar-token-compound_stmt230313
Ref: 1a9230313
Ref: reference/compound_stmts grammar-token-suite230547
Ref: 1aa230547
Ref: reference/compound_stmts grammar-token-statement230622
Ref: 1ab230622
Ref: reference/compound_stmts grammar-token-stmt_list230678
Ref: 1ac230678
Ref: reference/compound_stmts if231193
Ref: 111231193
Ref: reference/compound_stmts elif231193
Ref: 1ad231193
Node: The if statement231362
Ref: reference/compound_stmts the-if-statement231478
Ref: 1ae231478
Ref: reference/compound_stmts else231478
Ref: 16f231478
Ref: reference/compound_stmts grammar-token-if_stmt231590
Ref: 1af231590
Node: The while statement232113
Ref: reference/compound_stmts while232255
Ref: 193232255
Ref: reference/compound_stmts the-while-statement232255
Ref: 1b0232255
Ref: reference/compound_stmts grammar-token-while_stmt232406
Ref: 1b1232406
Node: The for statement233006
Ref: reference/compound_stmts the-for-statement233149
Ref: 1b2233149
Ref: reference/compound_stmts for233149
Ref: b8233149
Ref: reference/compound_stmts grammar-token-for_stmt233339
Ref: 1b3233339
Ref: reference/compound_stmts try235785
Ref: 6e235785
Ref: reference/compound_stmts except235785
Ref: 6f235785
Node: The try statement235786
Ref: reference/compound_stmts the-try-statement235928
Ref: 1b4235928
Ref: reference/compound_stmts finally235928
Ref: 70235928
Ref: reference/compound_stmts grammar-token-try_stmt236083
Ref: 1b5236083
Ref: reference/compound_stmts grammar-token-try1_stmt236127
Ref: 1b6236127
Ref: reference/compound_stmts grammar-token-try2_stmt236305
Ref: 1b7236305
Ref: reference/compound_stmts with240782
Ref: 71240782
Ref: The try statement-Footnote-1240817
Ref: The try statement-Footnote-2241012
Node: The with statement241186
Ref: reference/compound_stmts as241331
Ref: eb241331
Ref: reference/compound_stmts the-with-statement241331
Ref: 1b8241331
Ref: reference/compound_stmts grammar-token-with_stmt241685
Ref: 1b9241685
Ref: reference/compound_stmts grammar-token-with_item241751
Ref: 1ba241751
Ref: reference/compound_stmts function243961
Ref: 77243961
Ref: The with statement-Footnote-1243997
Node: Function definitions244044
Ref: reference/compound_stmts function-definitions244189
Ref: 1bb244189
Ref: reference/compound_stmts def244189
Ref: 1bc244189
Ref: reference/compound_stmts grammar-token-funcdef244356
Ref: 1bd244356
Ref: reference/compound_stmts grammar-token-decorators244464
Ref: 1be244464
Ref: reference/compound_stmts grammar-token-decorator244498
Ref: 1bf244498
Ref: reference/compound_stmts grammar-token-dotted_name244577
Ref: 1c0244577
Ref: reference/compound_stmts grammar-token-parameter_list244629
Ref: 1c1244629
Ref: reference/compound_stmts grammar-token-parameter244862
Ref: 1c2244862
Ref: reference/compound_stmts grammar-token-defparameter244913
Ref: 1c3244913
Ref: reference/compound_stmts grammar-token-funcname244963
Ref: 1c4244963
Ref: Function definitions-Footnote-1249595
Node: Class definitions249770
Ref: reference/compound_stmts class-definitions249888
Ref: 1c5249888
Ref: reference/compound_stmts class249888
Ref: 7d249888
Ref: reference/compound_stmts grammar-token-classdef250030
Ref: 1c6250030
Ref: reference/compound_stmts grammar-token-inheritance250109
Ref: 1c7250109
Ref: reference/compound_stmts grammar-token-classname250175
Ref: 1c8250175
Ref: Class definitions-Footnote-1252355
Ref: Class definitions-Footnote-2252520
Ref: Class definitions-Footnote-3252567
Node: Top-level components252614
Ref: reference/toplevel_components top-level252753
Ref: 1c9252753
Ref: reference/toplevel_components doc252753
Ref: 1ca252753
Ref: reference/toplevel_components top-level-components252753
Ref: 1cb252753
Node: Complete Python programs253142
Ref: reference/toplevel_components complete-python-programs253258
Ref: 1cc253258
Ref: reference/toplevel_components programs253258
Ref: 1cd253258
Node: File input254608
Ref: reference/toplevel_components id1254750
Ref: 1ce254750
Ref: reference/toplevel_components file-input254750
Ref: 1cf254750
Ref: reference/toplevel_components grammar-token-file_input254843
Ref: 1d0254843
Node: Interactive input255108
Ref: reference/toplevel_components interactive-input255242
Ref: 1d1255242
Ref: reference/toplevel_components interactive255242
Ref: 1d2255242
Ref: reference/toplevel_components grammar-token-interactive_input255353
Ref: 1d3255353
Node: Expression input255585
Ref: reference/toplevel_components expression-input255700
Ref: 1d4255700
Ref: reference/toplevel_components id2255700
Ref: 1d5255700
Ref: reference/toplevel_components grammar-token-eval_input255880
Ref: 1d6255880
Node: Full Grammar specification256064
Ref: reference/grammar full-grammar-specification256189
Ref: 1d7256189
Ref: reference/grammar doc256189
Ref: 1d8256189
Node: Index262764

End Tag Table


Local Variables:
coding: utf-8
End:
